[EXP] 1: [success_rate]: True, [answer]: 18, [output]: 
def solution():
    dozen_eggs = 16
    eggs_cost = 3
    muffin_eggs = 4
    total_eggs = dozen_eggs - (eggs_cost + muffin_eggs)
    dollars_per_eggs = 2
    total_dollars = total_eggs * dollars_per_eggs
    result = total_dollars
    return result

 Executed result: 18
[EXP] 2: [success_rate]: True, [answer]: 3, [output]: def solution():
    blue_fiber = 2
    white_fiber = blue_fiber / 2
    total_fiber = blue_fiber + white_fiber
    result = blue_fiber + white_fiber
    return result

 Executed result: 3.0
[EXP] 3: [success_rate]: False, [answer]: 70000, [output]: def solution():
    house_initial_price = 80000
    repairs = 50000
    profit = repairs * 1.5
    value_of_house_after_repairs = house_initial_price + profit - house_initial_price
    result = value_of_house_after_repairs - repairs
    return result

 Executed result: 25000.0
[EXP] 4: [success_rate]: True, [answer]: 540, [output]: def solution():
    sprints_per_session = 3
    sessions_per_week = 3
    meters_per_sprint = 60
    meters_per_week = sprints_per_session * sessions_per_week * meters_per_sprint
    result = meters_per_week
    return result

 Executed result: 540
[EXP] 5: [success_rate]: False, [answer]: 20, [output]: python
def solution():
    cups_morning = 15
    cups_afternoon = 25
    cups_per_chicken = 3
    chickens = 20
    cups_eaten_morning = cups_morning / 3 * chickens
    cups_eaten_afternoon = cups_afternoon / 3 * chickens
    cups_needed_third_meal = cups_eaten_morning + cups_eaten_afternoon
    result = cups_per_chicken * chickens - cups_needed_third_meal
    return result

 Executed result: -206.66666666666669
[EXP] 6: [success_rate]: True, [answer]: 64, [output]: 
def solution():
    glasses_initial_price = 5
    discount = 0.6
    new_price = glasses_initial_price * discount
    total_price = 0
    for i in range(16):
        if i % 2 == 0:
            total_price += glasses_initial_price
        else:
            total_price += new_price
    result = total_price
    return result

 Executed result: 64.0
[EXP] 7: [success_rate]: True, [answer]: 260, [output]: 
def solution():
    seattle_sheep = 20
    charleston_sheep = seattle_sheep * 4
    toulouse_sheep = charleston_sheep * 2
    total_sheep = seattle_sheep + charleston_sheep + toulouse_sheep
    result = total_sheep
    return result

 Executed result: 260
[EXP] 8: [success_rate]: False, [answer]: 160, [output]: def solution():
    file_size = 200
    download_rate = 2
    time_to_download_half_file = file_size / (download_rate * 0.6)  # 0.6 because we only got 60% of the way through
    time_to_restart = 20
    time_to_redownload = time_to_download_half_file
    
    total_time = time_to_redownload + time_to_restart
    
    remaining_time = (file_size - time_to_redownload * download_rate * 0.6) / download_rate
    
    total_time += remaining_time
    
    result = total_time
    return result

 Executed result: 186.66666666666669
[EXP] 9: [success_rate]: False, [answer]: 45, [output]: 
def solution():
    distance_driven_in_first_3_hours = 3 * 60 = 180 miles
    distance_driven_in_first_2_hours_of_return_trip = 2 hours at 0 mph = 0 miles
    distance_driven_at_30mph = 0.5 * 30 = 15 miles
    distance_driven_at_80mph = 2 * 80 = 160 miles
    total_distance_driven = distance_driven_at_80mph + distance_driven_at_30mph + distance_driven_in_first_3_hours
    result = total_distance_driven
    return result

 Executed result: None
[EXP] 10: [success_rate]: True, [answer]: 460, [output]: 
def solution():
    regular_hours = 40
    hourly_rate = 10
    overtime_hours = 45 - regular_hours
    overtime_rate = hourly_rate * 1.2
    earnings_regular = regular_hours * hourly_rate
    earnings_overtime = overtime_hours * overtime_rate
    total_earnings = earnings_regular + earnings_overtime
    result = total_earnings
    return result

 Executed result: 460.0
[EXP] 11: [success_rate]: True, [answer]: 366, [output]: 
def solution():
    downloads_month1 = 60
    downloads_month2 = downloads_month1 * 3
    downloads_month3 = downloads_month2 * 0.7
    total_downloads = downloads_month1 + downloads_month2 + downloads_month3
    result = total_downloads
    return result

 Executed result: 366.0
[EXP] 12: [success_rate]: True, [answer]: 694, [output]: def solution():
    donuts_cost_per_dozen = 68
    donutsQuantity = 3
    donutsTotalCost = donuts_cost_per_dozen * donutsQuantity
    cupcakes_cost_per_dozen = 80
    cupcakesQuantity = 2
    cupcakesTotalCost = cupcakes_cost_per_dozen * cupcakesQuantity
    cheesecakes_cost_per_dozen = 55
    cheesecakesQuantity = 6
    cheesecakesTotalCost = cheesecakes_cost_per_dozen * cheesecakesQuantity
    totalCost = donutsTotalCost + cupcakesTotalCost + cheesecakesTotalCost
    result = totalCost
    return result

 Executed result: 694
[EXP] 13: [success_rate]: True, [answer]: 13, [output]: def solution():
    tree_cost = 90
    profit_per_year = 7 * 1.5
    cost_per_year = 3
    net_profit_per_year = profit_per_year - cost_per_year
    years_needed = tree_cost / net_profit_per_year
    result = round(years_needed)
    return result

 Executed result: 12
[EXP] 14: [success_rate]: False, [answer]: 18, [output]: def solution():
    vacuum_cleaners_left = 5
    vacuum_cleaners_sold_at_orange_house = vacuum_cleaners_left
    vacuum_cleaners_left = 0
    vacuum_cleaners_sold_at_red_house = 2
    vacuum_cleaners_sold_at_green_house = vacuum_cleaners_sold_at_orange_house + vacuum_cleaners_sold_at_red_house
    vacuum_cleaners_initial = vacuum_cleaners_sold_at_green_house + vacuum_cleaners_sold_at_red_house + vacuum_cleaners_sold_at_orange_house
    result = vacuum_cleaners_initial
    return result

 Executed result: 14
[EXP] 15: [success_rate]: False, [answer]: 60, [output]: def solution():
    students = 20
    contemporary_students = 0.20 * students
    remaining_students = students - int(contemporary_students)
    jazz_students = 0.25 * remaining_students
    remaining_students = remaining_students - int(jazz_students)
    hip_hop_students = remaining_students
    total_students_who_dance_hip_hop = int(jazz_students) + int(hip_hop_students)
    percentage_enrolled_hip_hop = (total_students_who_dance_hip_hop / students) * 100
    result = percentage_enrolled_hip_hop
    return result

 Executed result: 80.0
[EXP] 16: [success_rate]: False, [answer]: 125, [output]: 
def solution():
    price_jewelry = 5000
    price_electronic = 8000
    increase_jewelry = 0.025
    increase_electronic = 0.012
    profit_jewelry = price_jewelry * increase_jewelry
    profit_electronic = price_electronic * increase_electronic
    total_profit_jewelry = price_jewelry + profit_jewelry
    total_profit_electronic = price_electronic + profit_electronic
    if total_profit_jewelry > total_profit_electronic:
        result = total_profit_jewelry
    elif total_profit_jewelry < total_profit_electronic:
        result = total_profit_electronic
    else:
        result = total_profit_jewelry
    return result

 Executed result: 8096.0
[EXP] 17: [success_rate]: True, [answer]: 230, [output]: 
def solution():
    initial_distance = 80
    north_distance = 150
    total_distance = initial_distance + north_distance
    result = total_distance
    return result

 Executed result: 230
[EXP] 18: [success_rate]: False, [answer]: 57500, [output]: 
def solution():
    hourlyalary_teacher = 20
    hourlyally_coach = 30
    hours_taught_per_week = 35
    hours_coached_per_week = 15
    total_hours_per_week = hours_taught_per_week + hours_coached_per_week
    weekly_salary = total_hours_per_week * (hourlyalary_teacher + hourlyally_coach)
    weekly_salary_per_year = weekly_salary * 50
    result = weekly_salary_per_year
    return result

 Executed result: 125000
[EXP] 19: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    eggs_per_day = 3
    eggs_per_dozen = 12
    days_in_four_weeks = 4 * 7
    total_eggs = eggs_per_day * days_in_four_weeks
    dozen_eggs = total_eggs // eggs_per_dozen
    result = dozen_eggs
    return result

 Executed result: 7
[EXP] 20: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    miles_walked = 4
    time_taken = 1
    rate = miles_walked / time_taken
    remaining_miles = 12 - miles_walked - 2
    total_time = time_taken + 1
    average_rate = 4
    remaining_rate = total_time * average_rate - rate
    result = remaining_rate
    return result

 Executed result: 4.0
[EXP] 21: [success_rate]: False, [answer]: 15, [output]: def solution():

 Executed result: None
[EXP] 22: [success_rate]: False, [answer]: 14, [output]: def solution():
    samantha_age = 31
    age_diff = samantha_age - 6
    samantha_age_at_birth = age_diff
    raymond_age_at_birth = samantha_age_at_birth - 6
    raymond_son_age = raymond_age_at_birth + 23
    years_ago = raymond_son_age - 23
    result = years_ago
    return result

 Executed result: 19
[EXP] 23: [success_rate]: True, [answer]: 7, [output]: def solution():
    customers = 8
    dvd1 = 1
    dvd2 = 2
    dvd3 = 0
    total_dvds = 3 * dvd1 + 2 * dvd2 + 3 * dvd3
    result = total_dvds
    return result

 Executed result: 7
[EXP] 24: [success_rate]: False, [answer]: 8, [output]: def solution():
    time_hours = 4
    candle_length_initial = 100
    candle_length_melted = time_hours * 2
    candle_length_after = candle_length_initial - candle_length_melted
    result = candle_length_after
    return result

 Executed result: 92
[EXP] 25: [success_rate]: True, [answer]: 26, [output]: 
def solution():
    price_discounted = 19.50
    discount_percentage = 0.25
    original_price = price_discounted / (1 - discount_percentage)
    result = original_price
    return result

 Executed result: 26.0
[EXP] 26: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    chicken_meal_cost = 12
    milk_cost = 5 * 3
    apples_cost = 4 * 1.50
    total_cost_except_pizzas = chicken_meal_cost + milk_cost + apples_cost
    total_cost = 50
    pizzas_cost = total_cost - total_cost_except_pizzas
    pizzas_number = pizzas_cost / 8.50
    result = pizzas_number
    return result

 Executed result: 2.0
[EXP] 27: [success_rate]: True, [answer]: 243, [output]: 
def solution():
    shorts_cost = 3 * 16.50
    pants_cost = 3 * 22.50
    shoes_cost = 3 * 42
    total_cost = shorts_cost + pants_cost + shoes_cost
    result = total_cost
    return result

 Executed result: 243.0
[EXP] 28: [success_rate]: True, [answer]: 16, [output]: def solution():
    daily_consumption = 1
    total_days = 60
    servings_per_carton = 15
    cost_per_carton = 4.0
    total_servings = total_days * daily_consumption
    total_cartons = -(-total_servings // servings_per_carton)  # use ceiling function
    total_cost = total_cartons * cost_per_carton
    result = total_cost
    return result

 Executed result: 16.0
[EXP] 29: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    total_distance = 60
    distance_between_stops = total_distance - 20 - (total_distance - 15)
    result = distance_between_stops
    return result

 Executed result: -5
[EXP] 30: [success_rate]: True, [answer]: 104, [output]: 
def solution():
    heels_one_price = 33
    heels_two_price = heels_one_price * 2
    total_heels_price = heels_one_price + heels_two_price
    boots_price = total_heels_price + 5
    result = boots_price
    return result

 Executed result: 104
[EXP] 31: [success_rate]: True, [answer]: 109, [output]: def solution():
    ratio_tom = 7
    ratio_allen = 11
    total_age = 162
    allen_current_age = total_age * (ratio_allen / (ratio_tom + ratio_allen))
    allen_age_10_years = allen_current_age + 10
    result = allen_age_10_years
    return result

 Executed result: 109.00000000000001
[EXP] 32: [success_rate]: False, [answer]: 80, [output]: def solution():
    friend1_guess = 80
    friend2_guess = (80 + 20)
    friend3_guess = friend1_guess * 1.25
    total_guesses = friend1_guess + friend2_guess + friend3_guess
    average_guess = total_guesses / 3
    result = average_guess
    return result

 Executed result: 93.33333333333333
[EXP] 33: [success_rate]: True, [answer]: 35, [output]: 
def solution():
    dogs = 10
    time_per_dog = 0.5
    hours_per_day = dogs * time_per_dog
    hours_per_week = hours_per_day * 7
    result = hours_per_week
    return result

 Executed result: 35.0
[EXP] 34: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    coins_total = 110
    gold_coins = ?  # number of gold coins
    silver_coins = ?  # number of silver coins
    gold_coins - silver_coins = 30  # setup the equation
    gold_coins = (coins_total + 30) // 2  # solve for gold coins
    result = gold_coins
    return result

 Executed result: 70
[EXP] 35: [success_rate]: True, [answer]: 23, [output]: def solution():
    raymond_jewels = 40
    aaron_jewels_half = raymond_jewels / 2
    aaron_jewels = aaron_jewels_half + 5
    siobhan_jewels = aaron_jewels - 2
    result = siobhan_jewels
    return result

 Executed result: 23.0
[EXP] 36: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    time_playing = 40
    points_in_first_20 = 4
    points_in_second_20 = points_in_first_20 + (points_in_first_20 * 0.25)
    points_total = points_in_first_20 + points_in_second_20
    result = points_total
    return result

 Executed result: 9.0
[EXP] 37: [success_rate]: True, [answer]: 75, [output]: def solution():
    yogurts_per_day = 2
    yogurts_per_dollar = 4
    dollars_per_yogurts = 5
    yogurts_in_30_days = yogurts_per_day * 30
    total_yogurts_to_buy = yogurts_in_30_days // yogurts_per_dollar
    total_cost = total_yogurts_to_buy * dollars_per_yogurts
    result = total_cost
    return result

 Executed result: 75
[EXP] 38: [success_rate]: False, [answer]: 2, [output]: def solution():
    lego_sets_initial = 13
    price_per_lego = 15
    total_made = lego_sets_initial * price_per_lego
    video_games = 8
    game_price = 20
    total_spent = video_games * game_price
    remaining_money = 5
    remaining_money_after_spend = total_made - total_spent
    if remaining_money_after_spend < 0:
        print("The remaining money will be less than 0, it's not possible.")
    else:
        result = remaining_money_after_spend
        return result

 Executed result: 35
[EXP] 39: [success_rate]: False, [answer]: 10, [output]: def solution():
    miles_per_week = 60
    days_per_week = 3
    hours_per_day = 3
    miles_per_day = hours_per_day * 3
    total_miles_run = miles_per_week / days_per_week
    miles_per_hour = total_miles_run / (total_miles_run / days_per_week)
    result = miles_per_hour
    return result

 Executed result: 3.0
[EXP] 40: [success_rate]: False, [answer]: 18, [output]: def solution():
    run_speed = 3 * 4
    skip_speed = 3
    running_time = 1 / 3 * 6
    walking_time = 2 / 3 * 6
    running_distance = run_speed * running_time
    walking_distance = 2 * walking_time * (3 / 4)
    total_distance = running_distance + walking_distance
    result = total_distance
    return result

 Executed result: 30.0
[EXP] 41: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    suzy_iphone_age = 1
    ben_iphone_age = suzy_iphone_age * 2
    brandon_iphone_age = ben_iphone_age * 4
    result = brandon_iphone_age
    return result

 Executed result: 8
[EXP] 42: [success_rate]: False, [answer]: 200, [output]: def solution():
    distance_from_flames = 1000
    distance_with_gemstone = 400 * 3
    maxdistance = distance_from_flames
    if distance_with_gemstone > maxdistance:
        maxdistance = distance_with_gemstone
    result = maxdistance
    return result

 Executed result: 1200
[EXP] 43: [success_rate]: True, [answer]: 26, [output]: def solution():
    apple_pies_cut = 5 * 8
    apple_pies_left = 14
    apple_pies_taken = apple_pies_cut - apple_pies_left
    result = apple_pies_taken
    return result

 Executed result: 26
[EXP] 44: [success_rate]: False, [answer]: 48, [output]: 
def solution():
    total_calories_target = 2000
    consumed_calories = 1800
    remaining_calories_allowed = total_calories_target - consumed_calories
    calories_per_serving = 250
    servings_total = 5
    grams_per_serving = 300 / servings_total
    calories_per_gram = calories_per_serving / grams_per_serving
    remaining_calories_per_gram = remaining_calories_allowed / calories_per_gram
    result = remaining_calories_per_gram * grams_per_serving
    return result

 Executed result: 2880.0
[EXP] 45: [success_rate]: False, [answer]: 20, [output]: python
def solution():
    beeswax_cost = 10
    candles_per_pound = 10
    candles_to_make_and_sell = 20
    total_cost = beeswax_cost + (beeswax_cost / candles_per_pound)
    revenue = candles_to_make_and_sell * 2
    profit = revenue - total_cost
    result = profit
    return result

 Executed result: 29.0
[EXP] 46: [success_rate]: True, [answer]: 104, [output]: 
def solution():
    articles_monday = 5
    articles_tuesday = articles_monday + (articles_monday * 2/5)
    articles_wednesday = articles_tuesday * 2
    total_articles = articles_monday + articles_tuesday + articles_wednesday
    total_hours = total_articles * 4
    result = total_hours
    return result

 Executed result: 104.0
[EXP] 47: [success_rate]: False, [answer]: 163, [output]: 
def solution():
    post_it_notes_initial = 80
    post_it_notes_used = 220
    post_it_notes_remaining = 23
    post_it_notes_in_package = post_it_notes_remaining + post_it_notes_used
    result = post_it_notes_in_package
    return result

 Executed result: 243
[EXP] 48: [success_rate]: True, [answer]: 800, [output]: def solution():
    blue_ties = 200 / 40  # number of blue ties
    red_ties = blue_ties * 2  # number of red ties
    blue_tie_cost_per_tie = 40  # cost of a blue tie
    red_tie_cost_per_tie = blue_tie_cost_per_tie * 1.5  # cost of a red tie because it's 50% more
    total_blue_cost = blue_ties * blue_tie_cost_per_tie  # total cost of blue ties
    total_red_cost = red_ties * red_tie_cost_per_tie  # total cost of red ties
    total_spent = total_blue_cost + total_red_cost  # total spent on all ties
    result = total_spent
    return result

 Executed result: 800.0
[EXP] 49: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    wire_length_initial = 4
    wire_length_in_inches = wire_length_initial * 12
    length_per_piece = 6
    num_pieces = wire_length_in_inches // length_per_piece
    result = num_pieces
    return result

 Executed result: 8
[EXP] 50: [success_rate]: False, [answer]: 30, [output]: def solution():
    floors = 15
    units_per_floor = 8
    occupied_floors = (1 - 0.75) * floors * units_per_floor
    unoccupied_units = (floors * units_per_floor) - occupied_floors
    result = unoccupied_units
    return result

 Executed result: 90.0
[EXP] 51: [success_rate]: True, [answer]: 294, [output]: 
def solution():
    eggs_per_day = 252
    eggs_per_dozen = 12
    price_per_dozen = 2
    money_per_day = eggs_per_day // eggs_per_dozen * price_per_dozen
    money_per_week = money_per_day * 7
    result = money_per_week
    return result

 Executed result: 294
[EXP] 52: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    start_time_hours = 1
    start_time_minutes = 0
    end_time_hours = 4
    end_time_minutes = 0
    total_time_travel_to_point4 = (end_time_hours - start_time_hours) + (end_time_minutes - start_time_minutes) / 60
    distance_to_point4 = 10 * total_time_travel_to_point4
    distance_back = 2 * (distance_to_point4)
    time_back = distance_back / 6
    result = time_back
    return result

 Executed result: 10.0
[EXP] 53: [success_rate]: True, [answer]: 15, [output]: def solution():
    weight_to_remove = 15
    comic_book_weight = 0.25
    toy_weight = 0.5
    comic_books_removed = 30
    weight_removed_so_far = comic_book_weight * comic_books_removed
    weight_to_remove_after_removing_comic_books = weight_to_remove - weight_removed_so_far
    toys_to_remove = weight_to_remove_after_removing_comic_books / toy_weight
    result = toys_to_remove
    return result

 Executed result: 15.0
[EXP] 54: [success_rate]: False, [answer]: 40, [output]: def solution():
    revenue_thursday = (6 * 60) + (4 * 40)
    revenue_friday = 4 * 40
    more_revenue = revenue_thursday - revenue_friday
    result = more_revenue
    return result

 Executed result: 360
[EXP] 55: [success_rate]: True, [answer]: 40, [output]: def solution():
    kittens_adopted = 7
    patchy_kittens = 3 * 7
    trixie_kittens = 12
    total_kittens = kittens_adopted + patchy_kittens + trixie_kittens
    result = total_kittens
    return result

 Executed result: 40
[EXP] 56: [success_rate]: True, [answer]: 14, [output]: def solution():
    lollipops_initial = 30
    lollipops_eaten = 2
    lollipops_left = lollipops_initial - lollipops_eaten
    lollipops_per_bag = 2
    bags = lollipops_left // lollipops_per_bag
    result = bags
    return result

 Executed result: 14
[EXP] 57: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    ticket_price = 7
    popcorn_price = 7
    total_cost = ticket_price + popcorn_price
    total_money = 42
    num_visits = total_money // total_cost
    result = num_visits
    return result

 Executed result: 3
[EXP] 58: [success_rate]: True, [answer]: 83, [output]: 
def solution():
    bridge_load = 5000
    driver_truck_load = 3755
    truck_box_load = 15
    total_load = driver_truck_load
    max_boxes = 0
    for i in range(1, bridge_load):
        if total_load + truck_box_load * i <= bridge_load:
            max_boxes = i
        else:
            break
    result = max_boxes
    return result

 Executed result: 83
[EXP] 59: [success_rate]: True, [answer]: 57, [output]: def solution():
    bill = 40
    fee = bill * 0.25
    total = bill + fee + 3
    total = total + 4
    result = total
    return result

 Executed result: 57.0
[EXP] 60: [success_rate]: True, [answer]: 187, [output]: def solution():
    clusters = 6
    raspberries_per_cluster = 20
    raspberries_in_clusters = clusters * raspberries_per_cluster
    individual_raspberries = 67
    total_raspberries = raspberries_in_clusters + individual_raspberries
    result = total_raspberries
    return result

 Executed result: 187
[EXP] 61: [success_rate]: True, [answer]: 17, [output]: def solution():
    total_oranges = 25
    unripe_oranges = 20 / 100 * total_oranges
    bad_oranges = 1
    sour_oranges = 2
    good_oranges = total_oranges - unripe_oranges - bad_oranges - sour_oranges
    result = good_oranges
    return result

 Executed result: 17.0
[EXP] 62: [success_rate]: True, [answer]: 1430, [output]: def solution():
    material_cost = 500
    construction_cost = 800
    total_cost = material_cost + construction_cost
    insurance_cost = total_cost * 0.1
    total_spent = total_cost + insurance_cost
    result = total_spent
    return result

 Executed result: 1430.0
[EXP] 63: [success_rate]: False, [answer]: 25000, [output]: 
def solution():
    years_worked = 30
    annual_pension = 50000
    years_to_get_entitled = 20
    percentage_yearly_pension = 5
    pension_yearly entitlement = (years_worked - years_to_get_entitled) * percentage_yearly_pension / 100
    total_pension = pension_yearly_entitlement + annual_pension
    result = total_pension
    return result

 Executed result: None
[EXP] 64: [success_rate]: True, [answer]: 1596, [output]: 
def solution():
    monthly_charge = 140
    total_charge_first_half = monthly_charge * 6
    discount = 0.9
    total_charge_second_half = monthly_charge * 6 * discount
    total_charge_yearly = total_charge_first_half + total_charge_second_half
    result = total_charge_yearly
    return result

 Executed result: 1596.0
[EXP] 65: [success_rate]: False, [answer]: 300, [output]: def solution():
    miles_driven = 100
    gallons_used = 4
    tank_capacity = 12
    total_gallons = gallons_used
    total_miles = miles_driven
    total_tank = tank_capacity - gallons_used
    total_tank_miles = total_tank * 30  # Assuming 30 miles per gallon
    total_trip_miles = total_miles + total_tank_miles
    result = total_trip_miles
    return result

 Executed result: 340
[EXP] 66: [success_rate]: True, [answer]: 36, [output]: def solution():
    hours_watching_tv = 2
    hours_reading = 1
    hours_per_day = hours_watching_tv + hours_reading
    total_hours_per_week = hours_per_day * 3
    total_hours_per_4_weeks = total_hours_per_week * 4
    result = total_hours_per_4_weeks
    return result

 Executed result: 36
[EXP] 67: [success_rate]: True, [answer]: 48, [output]: def solution():
    schools = 4
    girls_per_school = 5
    boys_per_school = 5
    coaches_per_school = 2

    total_players = schools * (girls_per_school + boys_per_school)
    total_coaches = schools * coaches_per_school
    total_people = total_players + total_coaches

    result = total_people
    return result

 Executed result: 48
[EXP] 68: [success_rate]: True, [answer]: 595, [output]: def solution():
    diamonds = 175
    rubies = diamonds - 35
    emeralds = rubies * 2
    total_gems = diamonds + rubies + emeralds
    result = total_gems
    return result

 Executed result: 595
[EXP] 69: [success_rate]: True, [answer]: 36, [output]: def solution():
    girls = 60
    boys = girls * 2
    total_students = girls + boys
    teachers = total_students / 5
    result = int(teachers)
    return result

 Executed result: 36
[EXP] 70: [success_rate]: True, [answer]: 60, [output]: def solution():
    allowance = 5
    weeks = 8
    total_amount = 100
    amount_received = allowance * weeks
    initial_amount = total_amount - amount_received
    result = initial_amount
    return result

 Executed result: 60
[EXP] 71: [success_rate]: True, [answer]: 7425, [output]: 
def solution():
    classes_per_week = 5 * 5 + 8
    students_per_class = 15
    income_per_student = 15.00
    total_income_per_week = classes_per_week * students_per_class * income_per_student
    result = total_income_per_week
    return result

 Executed result: 7425.0
[EXP] 72: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    recipe1_instructions = 20
    recipe2_instructions = recipe1_instructions * 2
    total_instructions = recipe1_instructions + recipe2_instructions
    result = total_instructions
    return result

 Executed result: 60
[EXP] 73: [success_rate]: True, [answer]: 221, [output]: 
def solution():
    brownies_sold = 43
    cheesecakes_sold = 23
    brownie_price = 3
    cheesecake_price = 4
    total_revenue_brownies = brownies_sold * brownie_price
    total_revenue_cheesecakes = cheesecakes_sold * cheesecake_price
    total_revenue = total_revenue_brownies + total_revenue_cheesecakes
    result = total_revenue
    return result

 Executed result: 221
[EXP] 74: [success_rate]: True, [answer]: 255, [output]: 
def solution():
    phone_price = 150
    num_phones = 5
    total_cost = phone_price * num_phones
    total_interest = total_cost * 0.02
    total_amount = total_cost + total_interest
    monthly_payment = total_amount / 3
    result = monthly_payment
    return result

 Executed result: 255.0
[EXP] 75: [success_rate]: True, [answer]: 88, [output]: 
def solution():
    marigolds = 12
    marigold_price = 2.74
    marigold_price_rounded = round(marigold_price)
    revenue_marigolds = marigolds * marigold_price_rounded
    
    petunias = 9
    petunia_price = 1.87
    petunia_price_rounded = round(petunia_price)
    revenue_petunias = petunias * petunia_price_rounded
    
    begonias = 17
    begonia_price = 2.12
    begonia_price_rounded = round(begonia_price)
    revenue_begonias = begonias * begonia_price_rounded
    
    total_revenue = revenue_marigolds + revenue_petunias + revenue_begonias
    result = total_revenue
    return result

 Executed result: 88
[EXP] 76: [success_rate]: False, [answer]: 60, [output]: def solution():
    square_footage_top_level = 16
    square_footage_levels = [square_footage_top_level]
    
    for i in range(1, 4):
        square_footage = square_footage_levels[-1] // 2
        square_footage_levels.append(square_footage)
    
    average_square_footage = sum(square_footage_levels) / len(square_footage_levels)
    result = average_square_footage
    return result

 Executed result: 7.5
[EXP] 77: [success_rate]: False, [answer]: 5, [output]: def solution():
    dog_food_per_day = 1
    total_days = 180
    puppy_food_consumed = dog_food_per_day * total_days
    new_puppy_food_per_day = 2
    total_puppy_food_consumed = puppy_food_per_day * (365 - total_days)
    total_food_consumed = puppy_food_consumed + puppy_food_consumed
    food_per_bag = 110
    bags_needed = total_food_consumed // food_per_bag
    result = bags_needed
    return result

 Executed result: 3
[EXP] 78: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    sarah_laughs = 400
    sarah_david_ratio = 4
    david_laughs = sarah_laughs / sarah_david_ratio
    raymond_laughs = sarah_laughs / 2
    difference = abs(raymond_laughs - david_laughs)
    result = difference
    return result

 Executed result: 100.0
[EXP] 79: [success_rate]: True, [answer]: 6, [output]: def solution():
    cost_per_three = 2.50
    cost_per_two = 1.00
    num_flowers = 18
    num_packs_three = -(-num_flowers // 3)  # Ceil division
    cost_three = num_packs_three * cost_per_three
    num_packs_two = num_flowers // 2
    cost_two = num_packs_two * cost_per_two
    cost thouighou = cost_three
    cost thru = cost_two
    save = cost_three - cost_two
    result = save
    return result

 Executed result: 6.0
[EXP] 80: [success_rate]: True, [answer]: 70, [output]: def solution():
    total_cost = 100
    discount = 0.3 * 100
    cost_with_discount = total_cost - discount
    result = cost_with_discount
    return result

 Executed result: 70.0
[EXP] 81: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_water_initial = 24
    water_taken_by_2_girls = (1/6) * total_water_initial
    water_taken_by_girls = 2 * water_taken_by_2_girls
    water_left = total_water_initial - water_taken_by_girls
    boy_water_taken = 6
    water_left_after_boy = water_left - boy_water_taken
    result = water_left_after_boy
    return result

 Executed result: 10.0
[EXP] 82: [success_rate]: True, [answer]: 17, [output]: def solution():
    stickers_initial = 10
    stickers_bought = 21
    stickers_birthday = 23
    total_stickers = stickers_initial + stickers_bought + stickers_birthday
    stickers_given_sister = 9
    stickers_used_card = 28
    stickers_left = total_stickers - stickers_given_sister - stickers_used_card
    result = stickers_left
    return result

 Executed result: 17
[EXP] 83: [success_rate]: True, [answer]: 623, [output]: def solution():
    grace_weight = 125
    alex_weight = 4 * grace_weight - 2
    combined_weight = grace_weight + alex_weight
    result = combined_weight
    return result

 Executed result: 623
[EXP] 84: [success_rate]: True, [answer]: 600, [output]: 
def solution():
    rose_bushes = 3
    roses_per_bussh = 25
    thorns_per_rose = 8
    total_thorns = rose_bushes * roses_per_bussh * thorns_per_rose
    result = total_thorns
    return result

 Executed result: 600
[EXP] 85: [success_rate]: False, [answer]: 15, [output]: 
def solution():
    games_played = 22
    games_won = games_lost + 8
    games_lost = games_played - games_won
    result = games_won
    return result

 Executed result: None
[EXP] 86: [success_rate]: True, [answer]: 44, [output]: 
def solution():
    years_traveled = 34 - 23
    vacation_per_year = 4
    quilt_blocks_per_year = 1
    total_quilt_blocks = years_traveled * vacation_per_year * quilt_blocks_per_year
    result = total_quilt_blocks
    return result

 Executed result: 44
[EXP] 87: [success_rate]: True, [answer]: 22, [output]: 
def solution():
    alarm_rings_first_time = 4
    alarm_rings_second_time = 3 * alarm_rings_first_time
    alarm_rings_third_time = alarm_rings_second_time / 2
    total_alarm_rings = alarm_rings_first_time + alarm_rings_second_time + alarm_rings_third_time
    result = total_alarm_rings
    return result

 Executed result: 22.0
[EXP] 88: [success_rate]: False, [answer]: 9360, [output]: 
def solution():
    initial_salary = 600
    increase_percentage = 0.1
    increase_per_year = initial_salary * increase_percentage
    annual_salary_after_five_years = initial_salary * (1 + increase_percentage) ** 5
    annual_salary_after_eight_years = annual_salary_after_five_years * (1 + increase_percentage) ** 3
    result = annual_salary_after_eight_years
    return result

 Executed result: 1286.153286000001
[EXP] 89: [success_rate]: True, [answer]: 8000, [output]: def solution():
    harald_songs = ?  # We need to find this value
    marilyn_songs = harald_songs * 10
    total_songs = harald_songs + marilyn_songs
    total_songs = 88000
    harald_songs = total_songs / 11
    result = harald_songs
    return result

 Executed result: 8000.0
[EXP] 90: [success_rate]: True, [answer]: 24, [output]: 
def solution():
    guests_invited = 16
    attendance = 0.75
    gift_bags_needed = guests_invited * attendance
    cost_per_gift_bag = 2
    total_cost = gift_bags_needed * cost_per_gift_bag
    result = total_cost
    return result

 Executed result: 24.0
[EXP] 91: [success_rate]: True, [answer]: 225, [output]: def solution():
    adult_dino_eats = 10
    child_dino_eats = adult_dino_eats / 2
    adults = 20
    children = 5
    total_eaten_by_adults = adult_dino_eats * adults
    total_eaten_by_children = child_dino_eats * children
    total_eaten = total_eaten_by_adults + total_eaten_by_children
    result = total_eaten
    return result

 Executed result: 225.0
[EXP] 92: [success_rate]: True, [answer]: 28, [output]: 
def solution():
    cindy_pets = 4
    marcia_pets = cindy_pets + 2
    jan_pets = marcia_pets * 3
    total_pets = cindy_pets + marcia_pets + jan_pets
    result = total_pets
    return result

 Executed result: 28
[EXP] 93: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    james_age = 10
    corey_age = james_age + 1

    amy_age = corey_age - 2
    jackson_age = amy_age - 5

    result = jackson_age
    return result

 Executed result: 4
[EXP] 94: [success_rate]: True, [answer]: 36, [output]: def solution():
    lee_time = 38
    lanes_replace_weight = 2
    lee_road = 10
    gerald_road = 0.1
    lee = lee_time - lanes_replace_weight  # write down the results
    lee = lee + gerald_road  # write down the results
    result = lee  # write down the results
    return result

 Executed result: 36.1
[EXP] 95: [success_rate]: True, [answer]: 348, [output]: def solution():
    dogs = 60
    cats = dogs * 2
    rabbits = cats + dogs - 12
    total_pets = dogs + cats + rabbits
    result = total_pets
    return result

 Executed result: 348
[EXP] 96: [success_rate]: False, [answer]: 40, [output]: def solution():

 Executed result: None
[EXP] 97: [success_rate]: True, [answer]: 3, [output]: def solution():
    sleep_hours_harry = 9
    sleep_hours_james = (2/3) * sleep_hours_harry
    sleep_hours_diff = sleep_hours_harry - sleep_hours_james
    result = sleep_hours_diff
    return result

 Executed result: 3.0
[EXP] 98: [success_rate]: True, [answer]: 12, [output]: def solution():
    can_size = 16
    can_contents = 3
    total_volume = 32
    tomato_volume_percent = 0.5

    total_cans = total_volume / (can_size * (1 - tomato_volume_percent))
    total_cans = int(total_cans)

    total_tomatoes = total_cans * can_contents
    result = total_tomatoes
    return result

 Executed result: 12
[EXP] 99: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    cars_initial = 30
    cars_left = 5
    cars_drive_through_first_half = (cars_initial - cars_left) / 2
    result = cars_drive_through_first_half
    return result

 Executed result: 12.5
[EXP] 100: [success_rate]: True, [answer]: 58, [output]: 
def solution():
    potted_plants_initial = 40 * 2
    new_potted_plants = 18
    potted_plants_given_away = 40  # Mary gave away 1 plant from each of 40 ledges
    potted_plants_total = potted_plants_initial + new_potted_plants - potted_plants_given_away
    result = potted_plants_total
    return result

 Executed result: 58
[EXP] 101: [success_rate]: False, [answer]: 175, [output]: def solution():
    doorbell_presses_fourth_friend = 60
    doorbell_presses_third_friend = doorbell_presses_fourth_friend + 10
    doorbell_presses_second_friend = doorbell_presses_first_friend + doorbell_presses_first_friend / 4
    doorbell_presses_first_friend = 20
    total_doorbell_presses = doorbell_presses_first_friend + doorbell_presses_second_friend + doorbell_presses_third_friend + doorbell_presses_fourth_friend
    result = total_doorbell_presses
    return result

 Executed result: None
[EXP] 102: [success_rate]: True, [answer]: 6, [output]: def solution():
    pages_to_read = 4 + 20 + 7 + 8
    pages_read_monday = 15
    pages_left_to_read = pages_to_read - pages_read_monday
    days_left = 4
    pages_per_day = pages_left_to_read / days_left
    result = pages_per_day
    return result

 Executed result: 6.0
[EXP] 103: [success_rate]: False, [answer]: 26, [output]: def solution():
    glasses_of_water_per_day_weekday = 3
    days_in_a_week = 5
    glasses_of_water_per_weekday = glasses_of_water_per_day_weekday * days_in_a_week
    glasses_of_water_per_weekend = 0
    glasses_of_water_per_week = glasses_of_water_per_weekday + glasses_of_water_per_weekend
    result = glasses_of_water_per_week
    return result

 Executed result: 15
[EXP] 104: [success_rate]: True, [answer]: 140, [output]: def solution():
    city_length = 42
    fog_band_speed = 3
    time_needed = city_length / fog_band_speed
    result = time_needed * 10
    return result

 Executed result: 140.0
[EXP] 105: [success_rate]: True, [answer]: 500, [output]: def solution():
    puzzle_pieces_total = 1000
    pieces_placed_by_poppy = puzzle_pieces_total / 4
    pieces_left = puzzle_pieces_total - pieces_placed_by_poppy
    pieces_placed_by_mom = pieces_left / 3
    pieces_left_to_place = pieces_left - pieces_placed_by_mom
    result = pieces_left_to_place
    return result

 Executed result: 500.0
[EXP] 106: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    amir_cookies = 5
    cody_cookies = amir_cookies * 3
    total_cookies = cody_cookies + amir_cookies
    result = total_cookies
    return result

 Executed result: 20
[EXP] 107: [success_rate]: True, [answer]: 72, [output]: 
def solution():
    box_length = 5 - 2  # minus 2 for both walls
    box_width = 6 - 2  # minus 2 for both walls
    box_height = 4 - 2  # minus 2 for both walls
    total_volume = 3 * box_length * box_width * box_height  # multiply by 3 for 3 boxes
    result = total_volume
    return result

 Executed result: 72
[EXP] 108: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    time_watched_monday = 1
    time_watched_tuesday = 1
    time_watched_wednesday = 3 * 0.5
    time_watched_thursday = 1 + 0.5
    time_watched_friday = 2
    total_time_watched = time_watched_monday + time_watched_tuesday + time_watched_wednesday + time_watched_thursday + time_watched_friday
    time_watched_on_wednesday = time_watched_wednesday - (1 - 0.5) - 2
    result = time_watched_on_wednesday
    return result

 Executed result: -1.0
[EXP] 109: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_cookies = 110
    cookies_dropped = 5
    total_cookies_intended = total_cookies + cookies_dropped
    cookies_intended_today = total_cookies_intended - 15
    cookies_baked_last_year = (cookies_intended_today) / 2
    result = cookies_baked_last_year
    return result

 Executed result: 50.0
[EXP] 110: [success_rate]: True, [answer]: 28, [output]: def solution():
    gas_price = 3.00
    cashback_per_gallon = 0.20
    gallons_bought = 10
    total_gas_cost = gas_price * gallons_bought
    cashback_rewards = cashback_per_gallon * gallons_bought
    total_gas_cost_after_cashback = total_gas_cost - cashback_rewards
    result = total_gas_cost_after_cashback
    return result

 Executed result: 28.0
[EXP] 111: [success_rate]: False, [answer]: 45, [output]: 
def solution():
    beatrice_roll_ups = 24
    beatrice_roll_up_width = 2
    beatrice_total_roll_ups = beatrice_roll_ups * beatrice_roll_up_width
    marcell_roll_ups = 14
    marcell_roll_up_width = 3
    marcell_total_roll_ups = marcell_roll_ups * marcell_roll_up_width
    total_roll_ups = beatrice_total_roll_ups + marcell_total_roll_ups
    avg_roll_ups = total_roll_ups / (beatrice_roll_ups * beatrice_roll_up_width + marcell_roll_ups * marcell_roll_up_width)
    return avg_roll_ups

 Executed result: 1.0
[EXP] 112: [success_rate]: False, [answer]: 16, [output]: 
def solution():
    feet_per_second = 20 / 16
    feet_to_shore = 64
    minutes_to_shore = feet_to_shore / feet_per_second
    minutes_to_shore_in_seconds = minutes_to_shore * 60

    water_taken_on_per_foot = 2 / 10
    water_taken_on_total = water_taken_on_per_foot * minutes_to_shore_in_seconds * 10

    result = water_taken_on_total
    return result

 Executed result: 6144.000000000001
[EXP] 113: [success_rate]: True, [answer]: 24, [output]: def solution():
    teachers = 4
    lessons_per_teacher = 2
    lessons_per_day = teachers * lessons_per_teacher
    cleanings_per_lesson = 3
    cleanings_per_day = lessons_per_day * cleanings_per_lesson
    result = cleanings_per_day
    return result

 Executed result: 24
[EXP] 114: [success_rate]: True, [answer]: 25, [output]: 
def solution():
    flowers_planted_daily = 2
    days_planted = 15
    expected_flowers = flowers_planted_daily * days_planted
    failed_growth = 5
    actual_growth = expected_flowers - failed_growth
    result = actual_growth
    return result

 Executed result: 25
[EXP] 115: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    
    jamal_photos = 1800
    jamal_photo_birds = jamal_photos / 6 - 50
    result = jamal_photo_birds
    return result

 Executed result: 250.0
[EXP] 116: [success_rate]: True, [answer]: 90, [output]: 
def solution():
    leftover_twins = 10
    leftover_cost_twins = 10
    leftover_quads = 5
    leftover_cost_quads = 16
    total_cost = leftover_twins * leftover_cost_twins + leftover_quads * leftover_cost_quads
    new_price_twins = leftover_cost_twins * 1.5
    new_price_quads = leftover_cost_quads * 1.5
    total_new_price = leftover_twins * new_price_twins + leftover_quads * new_price_quads
    profit = total_new_price - total_cost
    result = profit
    return result

 Executed result: 90.0
[EXP] 117: [success_rate]: True, [answer]: 42, [output]: 
def solution():
    sugar_teaspoons = 7
    water_cups = 13
    total_teaspoons = sugar_teaspoons + water_cups
    sugar_teaspoons_total = 120
    sugar_teaspoons_used = (sugar_teaspoons_total * sugar_teaspoons) // total_teaspoons
    result = sugar_teaspoons_used
    return result

 Executed result: 42
[EXP] 118: [success_rate]: True, [answer]: 360, [output]: def solution():
    pairs_of_shoes = 2
    children = 3
    price_per_pair = 60
    total_pairs = pairs_of_shoes * children
    total_price = total_pairs * price_per_pair
    result = total_price
    return result

 Executed result: 360
[EXP] 119: [success_rate]: True, [answer]: 4, [output]: def solution():
    vehicles_initial = 2 * 5
    vehicles_after = 30
    vehicles_added = vehicles_after - vehicles_initial
    containers_added = vehicles_added / 5
    result = containers_added
    return result

 Executed result: 4.0
[EXP] 120: [success_rate]: False, [answer]: 95200, [output]: def solution():
    adrien_salary_four_years_ago = 40000
    adrien_salary_increase = 40
    adrien_salary_now = adrien_salary_four_years_ago * (1 + (adrien_salary_increase / 100))
    lylah_salary_four_years_ago = (adrien_salary_four_years_ago * 100) / 130
    lylah_salary_now = lylah_salary_four_years_ago * (1 + (adrien_salary_increase / 100))
    adrien_salary_now = round(adrien_salary_now, 2)
    lylah_salary_now = round(lylah_salary_now, 2)
    total_salary_now = adrien_salary_now + lylah_salary_now
    result = total_salary_now
    return result

 Executed result: 99076.92
[EXP] 121: [success_rate]: False, [answer]: 240, [output]: 
def solution():
    sheets_per_pad = 30
    pads_per_week = 2
    weeks_per_month = 4
    sheets_per_week = pads_per_pad * pads_per_week
    sheets_per_month = sheets_per_week * weeks_per_month
    result = sheets_per_month
    return result

 Executed result: None
[EXP] 122: [success_rate]: True, [answer]: 27, [output]: 
def solution():
    morisette_apples = 5
    morisette_oranges = 8
    kael_apples = morisette_apples * 2
    kael_oranges = morisette_oranges // 2
    morisette_fruits = morisette_apples + morisette_oranges
    kael_fruits = kael_apples + kael_oranges
    total_fruits = morisette_fruits + kael_fruits
    result = total_fruits
    return result

 Executed result: 27
[EXP] 123: [success_rate]: False, [answer]: 48, [output]: def solution():
    hours_slept_monday = 8
    hours_slept_tuesday = hours_slept_monday - 2
    hours_slept_wednesday = hours_slept_tuesday - 2
    hours_slept_subsequent_days = hours_slept_tuesday - 1
    hours_slept_total = hours_slept_monday + hours_slept_tuesday + hours_slept_wednesday + hours_slept_subsequent_days * 4
    result = hours_slept_total
    return result

 Executed result: 38
[EXP] 124: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    rate_per_hour_first = 10
    hours_first = 3
    distance_first = rate_per_hour_first * hours_first
    rate_per_hour_second = 5
    hours_second = 7 - hours_first
    distance_second = rate_per_hour_second * hours_second
    total_distance = distance_first + distance_second
    result = total_distance
    return result

 Executed result: 50
[EXP] 125: [success_rate]: False, [answer]: 10, [output]: 
def solution():
    letters_needing_stamps = 60
    letters_already_stamped_initial = ?
    letters_already_stamped_after = 30
    letters_already_stamped = letters_already_stamped_after + letters_already_stamped_initial
    letters_already_stamped_initial = (1 / 3) * letters_needing_stamps
    result = letters_already_stamped_initial
    return result

 Executed result: 20.0
[EXP] 126: [success_rate]: False, [answer]: 10, [output]: 
def solution():
    spoons_at_start = 0
    spoons_in_package = 12 - spoons_at_start - 5 - 3
    result = spoons_in_package
    return result

 Executed result: 4
[EXP] 127: [success_rate]: True, [answer]: 82, [output]: 
def solution():
    chicken_sausages = 38
    fish_sausages = chicken_sausages + 6
    total_sausages = chicken_sausages + fish_sausages
    result = total_sausages
    return result

 Executed result: 82
[EXP] 128: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    lily_friends = 50
    amy_friends = lily_friends + 20
    total_friends = amy_friends + lily_friends
    result = total_friends
    return result

 Executed result: 120
[EXP] 129: [success_rate]: True, [answer]: 880, [output]: 
def solution():
    pepper_cost = 15
    watermelon_cost = 3 * pepper_cost
    orange_cost = watermelon_cost - 5
    total_cost_of_watermelons = 4 * watermelon_cost
    total_cost_of_peppers = 20 * pepper_cost
    total_cost_of_oranges = 10 * orange_cost
    total_cost = total_cost_of_watermelons + total_cost_of_peppers + total_cost_of_oranges
    result = total_cost
    return result

 Executed result: 880
[EXP] 130: [success_rate]: True, [answer]: 10000, [output]: def solution():
    patients_per_day = 500
    minutes_per_patient = 24
    hours_per_patient = minutes_per_patient / 60  # Convert minutes to hours
    hours_per_day = patients_per_day * hours_per_patient
    doctor_rate = 150
    patient_rate = 200
    hospital_rate = doctor_rate - patient_rate  # Hospital profit per hour
    daily_profit = hours_per_day * hospital_rate
    result = daily_profit
    return result

 Executed result: -10000.0
[EXP] 131: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    elves_initial = 60
    elves_quitted = round(elves_initial / 3)
    elves_left = elves_initial - elves_quitted
    elves_quitted_again = 10
    elves_left_after = elves_left - elves_quitted_again
    result = elves_left_after
    return result

 Executed result: 30
[EXP] 132: [success_rate]: True, [answer]: 940, [output]: def solution():
    expenditure_may = 500
    expenditure_june = expenditure_may - 60
    total_expenditure = expenditure_may + expenditure_june
    result = total_expenditure
    return result

 Executed result: 940
[EXP] 133: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    pam_roller_coaster = 2
    fred_roller_coaster = 4
    pam_luge = 2
    fred_luge = 2
    total_tickets_used = (pam_roller_coaster + fred_roller_coaster) * 6 + (pam_luge + fred_luge) * 6
    result = total_tickets_used
    return result

 Executed result: 60
[EXP] 134: [success_rate]: True, [answer]: 13, [output]: def solution():
    monday_miles = 4
    tuesday_miles = 6 * monday_miles
    walt_miles_monday_to_wednesday = 41
    walt_miles_wednesday = walt_miles_monday_to_wednesday - monday_miles - tuesday_miles
    result = walt_miles_wednesday
    return result

 Executed result: 13
[EXP] 135: [success_rate]: True, [answer]: 720, [output]: 
def solution():
    car_washes_per_month = 4
    car_wash_cost = 15
    car_washes_per_year = car_washes_per_month * 12
    total_cost = car_washes_per_year * car_wash_cost
    result = total_cost
    return result

 Executed result: 720
[EXP] 136: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    brian_games = 20 - 5  # 20 - 5 because Brian has 5 fewer after the comparison
    brian_games_times_three = brian_games * 3
    bob_games = brian_games_times_three - 5
    result = bob_games
    return result

 Executed result: 40
[EXP] 137: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    unicorns_initial = 27
    unicorns_scottish = unicorns_initial / 3
    unicorns_female_scottish = unicorns_scottish / 2
    result = unicorns_female_scottish
    return result

 Executed result: 4.5
[EXP] 138: [success_rate]: True, [answer]: 29, [output]: 
def solution():
    subs_price = 2 * 7.50
    chips_price = 2 * 1.50
    cookies_price = 2 * 1.00
    total_price = subs_price + chips_price + cookies_price
    delivery_fee = total_price * 0.20
    total_cost = total_price + delivery_fee
    tip = 5.00
    total_cost_with_tip = total_cost + tip
    result = total_cost_with_tip
    return result

 Executed result: 29.0
[EXP] 139: [success_rate]: True, [answer]: 105, [output]: 
def solution():
    questions_test1 = 75
    rate = 5
    hours_test1 = 8
    questions_left_test1 = questions_test1 - rate * hours_test1
    questions_test2 = 100
    hours_test2 = 6
    questions_left_test2 = questions_test2 - rate * hours_test2
    questions_left = questions_left_test1 + questions_left_test2
    result = questions_left
    return result

 Executed result: 105
[EXP] 140: [success_rate]: True, [answer]: 70, [output]: def solution():
    blue_gumballs = 12
    pink_gumballs = 4 * blue_gumballs + 22
    result = pink_gumballs
    return result

 Executed result: 70
[EXP] 141: [success_rate]: True, [answer]: 20, [output]: def solution():
    cars_available = 20
    cars_automatic = 12
    cars_manual = 4
    cars_semi_automatic = cars_available - cars_automatic - cars_manual
    percent_semi_automatic = (cars_semi_automatic / cars_available) * 100
    result = percent_semi_automatic
    return result

 Executed result: 20.0
[EXP] 142: [success_rate]: False, [answer]: 400, [output]: 
def solution():
    bees_total = 700
    bees_queens = bees_total // (2 * 2)
    bees_babies = bees_total // 2
    bees_workers = 2 * bees_babies
    result = bees_workers
    return result

 Executed result: 700
[EXP] 143: [success_rate]: True, [answer]: 140, [output]: 
def solution():
    hours_per_day = 2
    pay_per_hour = 10
    hours_per_week = hours_per_day * 7
    moneyearned = hours_per_week * pay_per_hour
    result = moneyearned
    return result

 Executed result: 140
[EXP] 144: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    milk_cost = 2
    eggs_cost = 3
    light_bulbs_cost = 3
    cups_cost = 3
    roach_traps_cost = 4

    nonfood_items = light_bulbs_cost + cups_cost + roach_traps_cost
    total_cost_without_tax = milk_cost + eggs_cost + nonfood_items

    tax = (nonfood_items / 100) * 10
    total_cost_with_tax = total_cost_without_tax + tax

    result = total_cost_with_tax
    return result

 Executed result: 16.0
[EXP] 145: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    clients = 3  # 3 current clients
    added_clients = 5  # 5 potential clients
    total_clients = clients + added_clients  # Total clients
    bleach_per_client = 2  # Bottles of bleach per client
    bleach_total = bleach_per_client * total_clients  # Total bleach needed
    cloth_per_client = 1  # Packs of cloths per client
    cloth_total = cloth_per_client * total_clients  # Total cloths needed
    bleach_cost = 2 * bleach_total  # Cost of bleach
    cloth_cost = 5 * cloth_total  # Cost of cloths
    total_cost = bleach_cost + cloth_cost  # Total cost
    income = 92  # Income per week
    profit = income - total_cost  # Profit
    result = profit
    return result

 Executed result: 20
[EXP] 146: [success_rate]: True, [answer]: 4000, [output]: def solution():
    hectares_initial = 10
    pineapples_per_hectare = 100
    months_per_year = 12
    months_per_harvest = 3
    harvests_per_year = months_per_year // months_per_harvest
    total_pineapples_per_year = hectares_initial * pineapples_per_hectare * harvests_per_year
    result = total_pineapples_per_year
    return result

 Executed result: 4000
[EXP] 147: [success_rate]: False, [answer]: 2,125, [output]: 
def solution():
    lego_boxes = 500
    boxes_second_more = 3 * lego_boxes
    box_less = int(lego_boxes / 4)
    total_legos = lego_boxes + boxes_second_more + box_less
    result = total_legos
    return result

 Executed result: 2125
[EXP] 148: [success_rate]: False, [answer]: 75, [output]: 
def solution():
    bees_left_initial = 30
    bees_returned = 0.5 * bees_left_initial
    bees_returned_second_time = bees_left_initial * 2
    bees_returned_third_time = bees_left_initial - bees_returned - bees_returned_second_time
    bees_returned_last_time = bees_left_initial - bees_returned - bees_returned_second_time + bees_returned_third_time
    result = bees_returned_last_time
    return result

 Executed result: -90.0
[EXP] 149: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    adult_ticket = 12
    child_ticket = 10
    total_paid = adult_ticket + child_ticket
    change_received = 8
    cash_given = total_paid + change_received
    result = cash_given
    return result

 Executed result: 30
[EXP] 150: [success_rate]: True, [answer]: 16, [output]: def solution():
    charlie_friends = 12
    dorothy_friends = charlie_friends / 3
    james_friends = 4 * dorothy_friends
    result = james_friends
    return result

 Executed result: 16.0
[EXP] 151: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    steve_distance = 5280 * 3  # convert 3 miles to feet
    steve_speed = 440
    steve_time = steve_distance / steve_speed
    tim_distance = 5280 * 2  # convert 2 miles to feet
    tim_speed = 264
    tim_time = tim_distance / tim_speed
    total_time = tim_time
    result = total_time
    return result

 Executed result: 40.0
[EXP] 152: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    tire_cost = 0.25  # cost of one tire
    bikes = 5
    bike_tires = 2 * bikes
    bike_cost = tire_cost * bike_tires
    trikes = 3
    trike_tires = 3 * trikes
    trike_cost = tire_cost * trike_tires
    unicycle = 1
    unicycle_tires = 1 * unicycle
    unicycle_cost = tire_cost * unicycle_tires
    total_cost = bike_cost + trike_cost + unicycle_cost
    dollar = 100  # 1 dollar = 100 cents
    total_amount_made = total_cost / dollar
    result = total_amount_made
    return result

 Executed result: 0.05
[EXP] 153: [success_rate]: True, [answer]: 4, [output]: def solution():
    num_packs = 10
    cookies_per_pack = 6
    total_cookies = num_packs * cookies_per_pack
    cost_per_cookie = 0.10
    cost_total = total_cookies * cost_per_cookie
    change = 10 - cost_total
    result = change
    return result

 Executed result: 4.0
[EXP] 154: [success_rate]: False, [answer]: 48, [output]: 
def solution():
    french_fries_eaten_by_dave = 14
    french_fries_gobbled_by_seagull = french_fries_eaten_by_dave / 2
    french_fries_eaten_by_pigeons = 3 * 3
    french_fries_left_after_pigeons = french_fries_eaten_by_dave + french_fries_gobbled_by_seagull - french_fries_eaten_by_pigeons
    french_fries_left_after_raccoon = 2 / 3 * french_fries_left_after_pigeons
    french_fries_left_after_raccoon_eaten = french_fries_left_after_pigeons - french_fries_left_after_raccoon
    french_fry_left_after_ants = french_fries_left_after_raccoon_eaten - 1
    fries_in_packet = french_fries_eaten_by_dave + french_fries_gobbled_by_seagull + french_fries_eaten_by_pigeons + french_fries_left_after_raccoon + french_fry_left_after_ants + 5
    result = fries_in_packet
    return result

 Executed result: 46.0
[EXP] 155: [success_rate]: False, [answer]: 272, [output]: def solution():
    classes_per_day = 3
    days_per_week = 3
    hours_per_class = 1
    hours_per_class_tuesday_thursday = 2
    days_per_semester = 16
    weeks_per_semester = 16
    hours_per_semester = classes_per_day * days_per_week * hours_per_class * weeks_per_semester
    hours_per_semester += classes_per_day * days_per_week * hours_per_class_tuesday_thursday * weeks_per_semester * 2
    result = hours_per_semester
    return result

 Executed result: 720
[EXP] 156: [success_rate]: False, [answer]: 280, [output]: def solution():
    rolls = 300
    croissants = 120
    baguettes = 60
    roll_length = 4
    croissant_length = 6
    baguette_length = 2
    total_length = rolls * roll_length + croissants * croissant_length + baguettes * baguette_length
    feet_length = total_length / 12
    result = feet_length
    return result

 Executed result: 170.0
[EXP] 157: [success_rate]: True, [answer]: 1400, [output]: 
def solution():
    bananas_needed_monthly = 200 + 400 + 100
    total_bananas_needed = bananas_needed_monthly * 2
    result = total_bananas_needed
    return result

 Executed result: 1400
[EXP] 158: [success_rate]: False, [answer]: 80, [output]: def solution():
    field_length = 100  # in yards
    blake_distance = 15 * 2 * field_length  # running back and forth 15 times
    kelly_distance = 40  # to 40-yard line and back, then multiply by 34
    kelly_distance = 2 * field_length + 40 * 2  # 40-yard line and back is 80 yards, add another 40 yards to the 80
    kelly_distance = kelly_distance * 34  # multiply by 34
    winner_distance = blake_distance
    loser_distance = kelly_distance
    difference = blake_distance - kelly_distance
    result = difference
    return result

 Executed result: -6520
[EXP] 159: [success_rate]: True, [answer]: 34, [output]: def solution():
    pens = 4
    notebooks = 2
    paper = 1  # Assume only 1 bond paper
    pen_cost = pens * 1.5
    notebook_cost = notebooks * 4
    paper_cost = 20
    total_cost = pen_cost + notebook_cost + paper_cost
    result = total_cost
    return result

 Executed result: 34.0
[EXP] 160: [success_rate]: True, [answer]: 15, [output]: def solution():
    tadpoles_initial = 11
    tadpoles_emerging = 6
    tadpoles_hiding = 2
    tadpoles_now = tadpoles_initial + tadpoles_emerging - tadpoles_hiding
    result = tadpoles_now
    return result

 Executed result: 15
[EXP] 161: [success_rate]: True, [answer]: 16, [output]: def solution():
    water_initial = 17
    water_gained = 7
    water_on_tuesday = water_initial + water_gained
    water_on_wednesday = water_on_tuesday * 2 / 3
    result = water_on_wednesday
    return result

 Executed result: 16.0
[EXP] 162: [success_rate]: True, [answer]: 32, [output]: def solution():
    anakin_starfish = 10
    anakin_seahorses = 6
    anakin_clownfish = 3
    anakin_total = anakin_starfish + anakin_seahorses + anakin_clownfish
    
    locsin_starfish = anakin_starfish - 5
    locsin_seahorses = anakin_seahorses - 3
    locsin_clownfish = anakin_clownfish + 2
    locsin_total = locsin_starfish + locsin_seahorses + locsin_clownfish
    
    total_fish = anakin_total + locsin_total
    result = total_fish
    return result

 Executed result: 32
[EXP] 163: [success_rate]: False, [answer]: 92, [output]: def solution():
    price_initial = 20
    months = 36
    percent_increase = 0.2
    total_price = price_initial
    for month in range(months):
        total_price = total_price * (1 + percent_increase)
    result = total_price
    return result

 Executed result: 14176.03749970182
[EXP] 164: [success_rate]: False, [answer]: 50, [output]: def solution():
    value_action_figure = 5
    value_doll = value_action_figure * 3
    value_red_car = 4
    value_doll_in_red_cars = value_doll / value_red_car
    value_action_figures = value_action_figure * 3
    value_total = 5 * 3 + 4 * value_doll_in_red_cars + value_doll
    result = value_total
    return result

 Executed result: 45.0
[EXP] 165: [success_rate]: True, [answer]: 15, [output]: def solution():
    freelance_hrs_lost = 3
    missed_income_per_hrs = 35
    accountant_cost = 90
    total_lost_income = freelance_hrs_lost * missed_income_per_hrs
    difference = total_lost_income - accountant_cost
    result = difference
    return result

 Executed result: 15
[EXP] 166: [success_rate]: True, [answer]: 77, [output]: def solution():
    total_budget = 1500
    computer_cost = 1090
    accessories_cost = 157 + 74 + 102
    total_cost = computer_cost + accessories_cost
    money_spent = total_budget - total_cost
    result = money_spent
    return result

 Executed result: 77
[EXP] 167: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    eggs_per_babysit = 9
    eggs_per_flan = 3
    flans_to_make = 15
    eggs_needed = flans_to_make * eggs_per_flan
    babysits_needed = eggs_needed // eggs_per_babysit
    result = babysits_needed
    return result

 Executed result: 5
[EXP] 168: [success_rate]: True, [answer]: 16, [output]: def solution():
    sum_of_ages_in_2_years = 28
    age_difference = 2
    sum_of_ages_now = sum_of_ages_in_2_years - 2 * 2
    age_of_brooke = sum_of_ages_now / 3
    age_of_seth = 2 * age_of_brooke
    result = age_of_seth
    return result

 Executed result: 16.0
[EXP] 169: [success_rate]: True, [answer]: 18, [output]: Python
def solution():
    ethel_money = 8
    jimmy_money = ethel_money * 2 + 2
    result = jimmy_money
    return result

 Executed result: 18
[EXP] 170: [success_rate]: False, [answer]: 120, [output]: 
def solution():
    miles_per_day = 20
    miles_on_weekend = 10
    miles_per_week = (6 * miles_per_day) + (2 * miles_on_weekend)
    result = miles_per_week
    return result

 Executed result: 140
[EXP] 171: [success_rate]: True, [answer]: 150, [output]: def solution():
    cost_of_hat = 25
    cost_of_jacket = 3 * cost_of_hat
    cost_of_pants = 0.5 * (cost_of_hat + cost_of_jacket)
    total_uniform_cost = cost_of_hat + cost_of_jacket + cost_of_pants
    result = total_uniform_cost
    return result

 Executed result: 150.0
[EXP] 172: [success_rate]: True, [answer]: 1210, [output]: 
def solution():
    spiders = 80
    legs_spiders = 8
    legs_spiders_total = spiders * legs_spiders
    insects = 90
    legs_insects = 6
    legs_insects_total = insects * legs_insects
    mutant_invertebrates = 3
    legs_mutant_invertebrates = 10
    legs_mutant_invertebrates_total = mutant_invertebrates * legs_mutant_invertebrates
    total_legs = legs_spiders_total + legs_insects_total + legs_mutant_invertebrates_total
    result = total_legs
    return result

 Executed result: 1210
[EXP] 173: [success_rate]: True, [answer]: 51, [output]: def solution():
    sally_four_age = 8
    granny_red_age = sally_four_age * 2
    sally_two_age = granny_red_age + 3
    caboose_age = sally_four_age

    total_age = sally_two_age + granny_red_age + sally_four_age + caboose_age
    result = total_age
    return result

 Executed result: 51
[EXP] 174: [success_rate]: False, [answer]: 18000, [output]: def solution():
    monthly_payments = []
    student_loan = 300
    credit_card = 200
    mortgage = 500
    monthly_payments.append(student_loan)
    monthly_payments.append(credit_card)
    monthly_payments.append(morton)
    extra_percentage = 50 / 100
    extra_amount = [x * extra_percentage for x in monthly_payments]
    total_monthly_payments = [x + y for x, y in zip(monthly_payments, extra_amount)]
    yearly_payment = sum(total_monthly_payments) * 12
    result = yearly_payment
    return result

 Executed result: 9000.0
[EXP] 175: [success_rate]: False, [answer]: 95, [output]: 
def solution():
    potatoes = 60
    time_per_peel = 90  # 1.5 minutes in seconds
    time_per_cut = 5
    time_per_potato = time_per_peel + time_per_cut
    total_time = potatoes * time_per_potato
    result = total_time
    return result

 Executed result: 5700
[EXP] 176: [success_rate]: False, [answer]: 15, [output]: def solution():
    lemons_cost = 3
    sugar_cost = 2
    per_glass_sell = 0.5
    glasses_per_gallon = 20
    
    total_revenue = 25
    total_gallons = total_revenue / (per_glass_sell * glasses_per_gallon)
    
    total_cost = total_gallons * (lemons_cost + sugar_cost)
    
    lemons_only_cost = total_cost
    
    result = lemons_only_cost
    return result

 Executed result: 12.5
[EXP] 177: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    chinese = 240 - 80
    boys_chinese = 60
    girls_chinese = chinese - boys_chinese
    result = girls_chinese
    return result

 Executed result: 100
[EXP] 178: [success_rate]: True, [answer]: 350, [output]: 
def solution():
    salary = 6000
    rent = salary / 4
    fuel = salary * (1/3)
    remaining_amount = salary - rent - fuel
    donation = remaining_amount / 2
    expense_to_daughter = 200
    expense_to_wife = 700
    total_expense = rent + fuel + donation + expense_to_daughter + expense_to_wife
    money_left = salary - total_expense
    result = money_left
    return result

 Executed result: 350.0
[EXP] 179: [success_rate]: True, [answer]: 122, [output]: def solution():
    bo_crabs = 40
    monic_crabs = bo_crabs - 4
    rani_crabs = monic_crabs + 10
    total_crabs = bo_crabs + monic_crabs + rani_crabs
    result = total_crabs
    return result

 Executed result: 122
[EXP] 180: [success_rate]: True, [answer]: 130, [output]: def solution():
    hours_per_week = 5
    hours_tutored_first_week = hours_per_week
    hours_tutored_second_week = 8
    hours_tutored_in_two_weeks = hours_tutored_first_week + hours_tutored_second_week
    earnings_per_hour = 10
    earnings_in_two_weeks = hours_tutored_in_two_weeks * earnings_per_hour
    result = earnings_in_two_weeks
    return result

 Executed result: 130
[EXP] 181: [success_rate]: True, [answer]: 20, [output]: def solution():
    total_votes = 80
    winner_votes = 3 / 4 * total_votes
    loser_votes = total_votes - winner_votes
    result = loser_votes
    return result

 Executed result: 20.0
[EXP] 182: [success_rate]: False, [answer]: 160, [output]: def solution():
    white_carnations = x

 Executed result: None
[EXP] 183: [success_rate]: False, [answer]: 23, [output]: def solution():
    jan_age = 30
    mark_age_two_years_ago = 2 * (jan_age / 2) - 5
    mark_age = mark_age_two_years_ago + 2
    jean_age = mark_age + 2
    result = jean_age
    return result

 Executed result: 29.0
[EXP] 184: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    time_per_lap_well_rounded = 55
    time_per_lap_less_well_rounded = [60]
    for i in range(1, 4):
        less_well_rounded_time = time_per_lap_less_well_rounded[i-1] - 3
        time_per_lap_less_well_rounded.append(less_well_rounded_time)
    
    total_time_well_rounded = time_per_lap_well_rounded * 4
    total_time_less_well_rounded = sum(time_per_lap_less_well_rounded)
    time_difference = total_time_less_well_rounded - total_time_well_rounded
    result = time_difference
    return result

 Executed result: 2
[EXP] 185: [success_rate]: True, [answer]: 25, [output]: def solution():
    probability_of_rolling_greater_than_3 = 1/2  # Probability of rolling a number greater than 3 = 1/2 (3 out of 6 possible numbers)
    probability_of_rolling_two_even_numbers = 1/4  # Probability of rolling two even numbers = 1/2 * 1/2 (1 out of 4 possible outcomes)
    difference_in_probability = probability_of_rolling_greater_than_3 - probability_of_rolling_two_even_numbers
    percentage_diff = difference_in_probability * 100
    result = round(percentage_diff, 2)
    return result

 Executed result: 25.0
[EXP] 186: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    mom_apples = 20
    jenna_apples = mom_apples / 2
    total_apples = mom_apples + jenna_apples
    result = total_apples
    return result

 Executed result: 30.0
[EXP] 187: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_straw = 160
    rats_per_cage = 0
    hamsters = 10
    rabbits = 20
    total_rats = (total_straw - hamsters * 5 - rabbits) / 6
    rats_per_cage = total_rats // 3
    result = rats_per_cage
    return result

 Executed result: 5.0
[EXP] 188: [success_rate]: True, [answer]: 106, [output]: 
def solution():
    principal = 100
    rate = 0.02
    time_in_months = 3
    monthly_interest = principal * rate
    total_interest = monthly_interest * time_in_months
    total_amount = principal + total_interest
    result = total_amount
    return result

 Executed result: 106.0
[EXP] 189: [success_rate]: False, [answer]: 50, [output]: def solution():
    cost_per_bag = 20
    cost_to_transport = 2
    selling_price_per_bag = 30
    profit = 400
    cost_per_bag Including transport = cost_per_bag + cost_to_transport
    profit_per_bag = selling_price_per_bag - cost_per_bag Including transport
    number_of_bags = profit / profit_per_bag
    result = number_of_bags
    return result

 Executed result: None
[EXP] 190: [success_rate]: True, [answer]: 34, [output]: 
def solution():
    cost_tickets = 20.25
    cost_food = cost_tickets - 4.50
    cost_rides = 33 * 2
    total_cost = cost_tickets + cost_food + cost_rides
    cost_per_person = total_cost / 3
    result = round(cost_per_person, 2)
    return result

 Executed result: 34.0
[EXP] 191: [success_rate]: True, [answer]: 360, [output]: 
def solution():
    time_hours = 3
    peaches_per_minute = 2
    total_minutes = time_hours * 60
    peaches_total = total_minutes * peaches_per_minute
    result = peaches_total
    return result

 Executed result: 360
[EXP] 192: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    insects_requirement_per_week = 3.5
    insects_requirement_per_day = insects_requirement_per_week / 7
    ducks = 10
    total_insects_per_day = insects_requirement_per_day * ducks
    result = total_insects_per_day
    return result

 Executed result: 5.0
[EXP] 193: [success_rate]: True, [answer]: 91, [output]: 
def solution():
    trees_initial = 50
    trees_planted = 10
    trees_cut = 2
    years = 10
    trees_planted_per_year = trees_planted - trees_cut
    total_trees_planted = trees_planted_per_year * years
    total_trees_after_10_years = trees_initial + total_trees_planted
    trees_die = 0.3 * total_trees_after_10_years
    result = total_trees_after_10_years - trees_die
    return result

 Executed result: 91.0
[EXP] 194: [success_rate]: False, [answer]: 24, [output]: def solution():
    pink_flamingos_initial = 18
    pink_flamingos_removed = 1
    pink_flamingos_added = 18
    pink_flamingos_total = pink_flamingos_initial + pink_flamingos_added
    white_flamingos = pink_flamingos_removed
    pink_flamingosifferential = pink_flamingos_total - white_flamingos
    result = pink_flamingosifferential
    return result

 Executed result: 35
[EXP] 195: [success_rate]: True, [answer]: 10, [output]: def solution():
    vietta_available = 20
    crayons_needed = 5
    crayon_cost = 2
    total_cost = crayons_needed * crayon_cost
    change = vietta_available - total_cost
    result = change
    return result

 Executed result: 10
[EXP] 196: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    pen_cost = 1.20 + 0.30
    cost_of_one_pen = pen_cost
    cost_of_eight_pens = cost_of_one_pen * 8
    result = cost_of_eight_pens
    return result

 Executed result: 12.0
[EXP] 197: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    total_carrots = 200
    restaurant_carrots = 2 * 40
    unused_carrots = total_carrots - restaurant_carrots
    result = unused_carrots
    return result

 Executed result: 120
[EXP] 198: [success_rate]: True, [answer]: 6277, [output]: 
def solution():
    total_inhabitants = 23786
    men = 8417
    women = 9092
    kids = total_inhabitants - men - women
    result = kids
    return result

 Executed result: 6277
[EXP] 199: [success_rate]: False, [answer]: 320, [output]: 
def solution():
    pokemon_cards_initial = 20
    pokemon_cards_collected_first_month = pokemon_cards_initial * 3
    pokemon_cards_collected_second_month = pokemon_cards_collected_first_month - 20
    pokemon_cards_collected_third_month = pokemon_cards_collected_first_month + pokemon_cards_collected_second_month
    total_pokemon_cards = pokemon_cards_initial + pokemon_cards_collected_first_month + pokemon_cards_collected_second_month + pokemon_cards_collected_third_month
    result = total_pokemon_cards
    return result

 Executed result: 220
[EXP] 200: [success_rate]: False, [answer]: 7500, [output]: def solution():
    sentences_total = 1000
    publisher_a_rate = 5
    publisher_b_rate = 10  # Publisher B pays twice what Publisher A pays
    sentences_publisher_b = sentences_total  # Assuming each publisher gets an equal number of sentences
    mark_money_publisher_a = sentences_publisher_b * publisher_a_rate
    mark_money_publisher_b = sentences_publisher_b * publisher_b_rate
    total_mark_money = mark_money_publisher_a + mark_money_publisher_b
    result = total_mark_money
    return result

 Executed result: 15000
[EXP] 201: [success_rate]: True, [answer]: 55, [output]: 
def solution():
    pails_morning = 5
    pails_afternoon = 6
    liters_per_pail = 5
    morning_water = pails_morning * liters_per_pail
    afternoon_water = pails_afternoon * liters_per_pail
    daily_water = morning_water + afternoon_water
    result = daily_water
    return result

 Executed result: 55
[EXP] 202: [success_rate]: False, [answer]: 114,200, [output]: def solution():
    john_salary = 2000
    award_monetary = 5000
    award_raise = 0.05
    new_salary = john_salary * (1 + award_raise)
    yearly_salary = new_salary * 52  # salary per year
    total_earned = yearly_salary + award_monetary
    result = total_earned
    return result

 Executed result: 114200.0
[EXP] 203: [success_rate]: True, [answer]: 100, [output]: def solution():
    acres = 10
    tons_per_acre = 5
    tons_per_year = acres * tons_per_acre
    barrels_per_ton = 2
    barrels_per_year = tons_per_year * barrels_per_ton
    result = barrels_per_year
    return result

 Executed result: 100
[EXP] 204: [success_rate]: True, [answer]: 31, [output]: 
def solution():
    slices_per_sandwich = 2
    sandwiches = 7  # monday to sunday
    slices_per_omelet = slices_per_sandwich + 1
    omelets = 3
    total_omelet_slices = slices_per_omelet * omelets
    total_sandwich_slices = slices_per_sandwich * sandwiches
    total_slices = total_sandwich_slices + total_omelet_slices
    big_dish_slices = 8
    total_slices_cheese = total_slices + big_dish_slices
    result = total_slices_cheese
    return result

 Executed result: 31
[EXP] 205: [success_rate]: True, [answer]: 98, [output]: def solution():
    green_pens = 22
    yellow_pens = 10
    blue_pens_bought = 6
    red_pens_bought = 2
    pens_per_blue_bag = 9
    pens_per_red_bag = 6
    blue_pens = blue_pens_bought * pens_per_blue_bag
    red_pens = red_pens_bought * pens_per_red_bag
    total_pens = green_pens + yellow_pens + blue_pens + red_pens
    result = total_pens
    return result

 Executed result: 98
[EXP] 206: [success_rate]: False, [answer]: 98, [output]: 
def solution():
    brinley_scores = [89, 71, 92, 100, 86]
    total_score = sum(brinley_scores)
    score_needed = 93 * 6 - total_score
    result = score_needed
    return result

 Executed result: 120
[EXP] 207: [success_rate]: True, [answer]: 860, [output]: 
def solution():
    km_per_ride = 25
    rides_per_week = 5
    weeks_riding_five_times = 4
    total_km_riding_five_times = km_per_ride * rides_per_week * weeks_riding_five_times
    
    km_per_ride = 60
    rides_per_week = 2
    weeks_riding_two_times = 3
    total_km_riding_two_times = km_per_ride * rides_per_week * weeks_riding_two_times
    
    total_km = total_km_riding_five_times + total_km_riding_two_times
    result = total_km
    return result

 Executed result: 860
[EXP] 208: [success_rate]: True, [answer]: 2600, [output]: def solution():
    chocolate_bars = 25
    candied_apples = 80
    chocolate_weight = 40

    weight_per_candy_bar = chocolate_weight
    weight_per_candy_apple = chocolate_weight / 2

    total_candy_bar_weight = chocolate_bars * weight_per_candy_bar
    total_candy_apple_weight = candied_apples * weight_per_candy_apple

    total_bag_weight = total_candy_bar_weight + total_candy_apple_weight

    result = total_bag_weight

    return result

 Executed result: 2600.0
[EXP] 209: [success_rate]: True, [answer]: 76, [output]: def solution():
    cakes_monday = 4
    cakes_tuesday = cakes_monday * 3
    cakes_wednesday = cakes_tuesday * 5
    total_cakes = cakes_monday + cakes_tuesday + cakes_wednesday
    result = total_cakes
    return result

 Executed result: 76
[EXP] 210: [success_rate]: False, [answer]: 145, [output]: def solution():
    cups_cost_1200_less_than_plates = 6000 * 6 - 1200
    cups_per_dozen = 12
    cups_cost_per_dozen = cups_cost_1200_less_than_plates / cups_per_dozen
    cups_cost_per_cup = cups_cost_per_dozen / 12
    result = cups_cost_per_cup
    return result

 Executed result: 241.66666666666666
[EXP] 211: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    jacket_cost = 30
    shoes_cost = 2 * 20
    total_item_cost = jacket_cost + shoes_cost
    initial_savings = 10
    babysitting_income = 5 * 4
    mowing_income = 4
    total_income = initial_savings + babysitting_income
    total_lawns = 0
    while total_income < total_item_cost:
        total_income += mowing_income
        total_lawns += 1
    result = total_lawns
    return result

 Executed result: 10
[EXP] 212: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    white_eggs_per_day = 5
    red_eggs_per_day = 3
    eggs_collected_per_day = 42
    white_chickens_per_day = (eggs_collected_per_day - (red_eggs_per_day * len)) //aggio):egg 5
    red_chickens = white_chickens_per_day - 2
    return red_chickens

 Executed result: None
[EXP] 213: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    park_length = 6
    park_width = 1.5
    park_perimeter = 2 * (park_length + park_width)
    walking_distance = park_perimeter
    speed = 3
    time_spent = walking_distance / speed
    result = time_spent
    return result

 Executed result: 5.0
[EXP] 214: [success_rate]: True, [answer]: 250, [output]: def solution():
    customers_first_day = 100
    customers_second_day = customers_first_day + 50
    customers_third_day = 500 - (customers_first_day + customers_second_day)
    result = customers_third_day
    return result

 Executed result: 250
[EXP] 215: [success_rate]: False, [answer]: 8, [output]: def solution():
    rate = 4  # gallons per minute
    time_passed = 4  # minutes ago
    small_pool_water_after = 0
    big_pool_water_after = 0
    
    # calculate how much water remains for each pool
    rate_effective = rate * time_passed
    small_pool_water_left = 2 * rate_effective
    big_pool_water_left = 2 * rate_effective
    
    # calculate how much water is in each pool now
    big_pool_water = big_pool_water_left + 2 * rate_effective
    small_pool_water = 2 * rate_effective + 2 * rate_effective
    
    result = small_pool_water
    return result

 Executed result: 64
[EXP] 216: [success_rate]: True, [answer]: 44, [output]: def solution():
    shoes_cost = 320.00
    belt_cost = 32.00
    total_cost = shoes_cost + belt_cost
    hourly_wage = 8.00
    hours_worked = total_cost / hourly_wage
    result = hours_worked
    return result

 Executed result: 44.0
[EXP] 217: [success_rate]: False, [answer]: 220, [output]: def solution():
    initial_balance = 2000
    additional_amount = 0.10 * initial_balance
    total_payment = initial_balance + additional_amount
    monthly_payment = 165
    months = 12
    total_paid = monthly_payment * months
    balance_after_payment = total_balance - total_paid
    result = balance_after_payment
    return result

 Executed result: None
[EXP] 218: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    roses = 4
    dahlias = roses + 7
    total_flowers = roses + dahlias
    result = total_flowers
    return result

 Executed result: 15
[EXP] 219: [success_rate]: False, [answer]: 45, [output]: 
def solution():
    harriet_age = 21
    harriet_age_in_three_years = harriet_age + 3
    zack_age = harriet_age * 2
    zack_age_in_three_years = zack_age + 3
    adrian_age = zack_age * 3
    adrian_age_in_three_years = adrian_age + 3
    average_age = (zack_age_in_three_years + harriet_age_in_three_years + adrian_age_in_three_years) / 3
    result = average_age
    return result

 Executed result: 66.0
[EXP] 220: [success_rate]: True, [answer]: 54, [output]: def solution():
    total_points = 251
    naomi_points = 68
    yuri_points = int((naomi_points / 2) + 10)
    brianna_points = naomi_points + 17
    jojo_points = total_points - naomi_points - yuri_points - brianna_points
    result = jojo_points
    return result

 Executed result: 54
[EXP] 221: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    time_crossword = 10
    time_sudoku = 5
    crossword_puzzles = 3
    sudoku_puzzles = 8
    time_crossword_solved = time_crossword * crossword_puzzles
    time_sudoku_solved = time_sudoku * sudoku_puzzles
    total_time = time_crossword_solved + time_sudoku_solved
    result = total_time
    return result

 Executed result: 70
[EXP] 222: [success_rate]: True, [answer]: 90, [output]: def solution():
    water_initial = 120
    water_used = 90
    water_left = water_initial - water_used
    rainwater = water_left * 2
    total_water = water_left + rainwater
    result = total_water
    return result

 Executed result: 90
[EXP] 223: [success_rate]: True, [answer]: 140, [output]: def solution():
    geraniums = 90
    petunias = geraniums - 40
    total_flowers = geraniums + petunias
    result = total_flowers
    return result

 Executed result: 140
[EXP] 224: [success_rate]: True, [answer]: 20000, [output]: def solution():
    total_advertising_year_one = 15000
    total_advertising_year_two = total_advertising_year_one / 3
    total_advertising = total_advertising_year_one + total_advertising_year_two
    result = total_advertising
    return result

 Executed result: 20000.0
[EXP] 225: [success_rate]: True, [answer]: 180, [output]: 
def solution():
    canoes_per_hour = 30
    raft_per_hour = 18
    canoes_hours = 3
    rafts_hours = 5
    canoes_cost = canoes_per_hour * canoes_hours
    rafts_cost = raft_per_hour * rafts_hours
    total_cost = canoes_cost + rafts_cost
    result = total_cost
    return result

 Executed result: 180
[EXP] 226: [success_rate]: False, [answer]: 9, [output]: def solution():
    days_bus = 6
    days_car = days_bus / 2
    total_days_to_rochester = days_bus + days_car
    total_days_from_rochester = days_car + days_bus
    result = total_days_to_rochester + total_days_from_rochester
    return result

 Executed result: 18.0
[EXP] 227: [success_rate]: True, [answer]: 33, [output]: def solution():
    water_type_initial = 40
    water_type_lost = 8
    water_type_left = water_type_initial - water_type_lost
    grass_type_received = 14
    total_cards = 30 + 20 + 40 - 8 + 14
    water_type_cards = water_type_left
    water_type_percentage = (water_type_cards / total_cards) * 100
    result = round(water_type_percentage)
    return result

 Executed result: 33
[EXP] 228: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    base_cost = 6.5
    meat = 2.0
    cheese = 1.0
    avocado = 1.0
    sauces = 0.25 * 2
    upgrade = 3.0
    total_cost = base_cost + meat + cheese + avocado + sauces + upgrade
    gift_card = 5.0
    amount_owing = total_cost - gift_card
    result = amount_owing
    return result

 Executed result: 9.0
[EXP] 229: [success_rate]: True, [answer]: 1, [output]: def solution():
    total_pieces = 360
    pieces_per_minute_kalinda = 4
    pieces_per_minute_mom = pieces_per_minute_kalinda / 2
    total_minutes_per_piece = 1 / (pieces_per_minute_kalinda + pieces_per_minute_mom)

    total_minutes = total_pieces * total_minutes_per_piece

    hours = total_minutes / 60

    result = hours
    return result

 Executed result: 1.0
[EXP] 230: [success_rate]: True, [answer]: 21, [output]: def solution():
    baby_watermelons_initial = 120
    watermelons_harvested_first = 0.30 * baby_watermelons_initial
    watermelons_left_after_first_harvest = baby_watermelons_initial - watermelons_harvested_first
    watermelons_harvested_second = 0.75 * watermelons_left_after_first_harvest
    watermelons_left_after_second_harvest = watermelons_left_after_first_harvest - watermelons_harvested_second
    result = watermelons_left_after_second_harvest
    return result

 Executed result: 21.0
[EXP] 231: [success_rate]: False, [answer]: 276,000, [output]: def solution():
    cars = 12
    price_per_car = 20000
    total_cost = cars * price_per_car
    tax = 0.1 * total_cost
    registration = 1000 * cars
    total_with_tax_and_registration = total_cost + tax + registration
    result = total_with_tax_and_registration
    return result

 Executed result: 276000.0
[EXP] 232: [success_rate]: True, [answer]: 50, [output]: def solution():
    robert_shells = 20
    kylie_shells_monday = robert_shells + 5
    kylie_shells_tuesday = kylie_shells_monday * 2
    result = kylie_shells_tuesday
    return result

 Executed result: 50
[EXP] 233: [success_rate]: True, [answer]: 75, [output]: 
def solution():
    ants = 50
    bugs = ants / 2
    total_insects = ants + bugs
    result = total_insects
    return result

 Executed result: 75.0
[EXP] 234: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    penguins_initial = 36
    penguins_in_ocean = penguins_initial // 3
    penguins_eating = penguins_initial // 3
    penguins_left = penguins_initial - penguins_in_ocean - penguins_eating
    result = penguins_left
    return result

 Executed result: 12
[EXP] 235: [success_rate]: False, [answer]: 21, [output]: def solution():
    tomatoes_per_day = 6
    girlfriend_tomatoes_per_day = tomato_per_day / 2
    weeks_in_year = 52
    days_per_week = 7
    tomatoes_per_vine_per_week = 3
    total_tomatoes_required_per_year = weeks_in_year * days_per_week * tomatoes_per_day
    total_tomatoes_required_per_year = int(total_tomatoes_required_per_year)
    vines_required = (total_tomatoes_required_per_year / 3) + 1
    
    result = vines_required
    
    return result

 Executed result: 729.0
[EXP] 236: [success_rate]: True, [answer]: 10, [output]: def solution():
    friends = 20
    slices_per_friend = 4
    total_slices = friends * slices_per_friend
    slices_per_pizza = 8
    pizzas_needed = total_slices // slices_per_pizza
    result = pizzas_needed
    return result

 Executed result: 10
[EXP] 237: [success_rate]: False, [answer]: 31, [output]: def solution():
    pens_initial = 25
    pens_made_from_used = 0
    total_pens = 0
    while pens_made_from_used < pens_initial:
        if pens_made_from_used > 0:
            new_pens = 5
        else:
            new_pens = 0
        total_pens = pens_initial + pens_made_from_used + new_pens
        pens_made_from_used += new_pens
    result = total_pens
    return result

 Executed result: None
[EXP] 238: [success_rate]: True, [answer]: 90, [output]: def solution():
    allowance = 20
    extra = 10
    total_allowance = allowance + extra
    tripled = total_allowance * 3
    result = tripled
    return result

 Executed result: 90
[EXP] 239: [success_rate]: True, [answer]: 68, [output]: def solution():
    jessa_age = 20
    joan_age = jessa_age + 5
    mary_age = joan_age - 2
    sum_of_ages = jessa_age + joan_age + mary_age
    result = sum_of_ages
    return result

 Executed result: 68
[EXP] 240: [success_rate]: True, [answer]: 280, [output]: def solution():
    students_initial = 1000
    students_leaving_A = 0.30 * students_initial
    students_remaining = students_initial - students_leaving_A
    students_leaving_B = 3/5 * students_remaining
    students_leaving_C = students_remaining - students_leaving_B
    result = students_leaving_C
    return result

 Executed result: 280.0
[EXP] 241: [success_rate]: False, [answer]: 21, [output]: 
def solution():
    john_candies = 54
    john_candies_robert = john_candies / 2
    james_candies_robert = john_candies_robert - 6
    candies_diff = john_candies - james_candies_robert
    result = candies_diff
    return result

 Executed result: 33.0
[EXP] 242: [success_rate]: True, [answer]: 6, [output]: def solution():
    dolly_books = 2
    pandora_books = 1
    total_books = dolly_books + pandora_books
    books_read = 2 * total_books
    result = books_read
    return result

 Executed result: 6
[EXP] 243: [success_rate]: False, [answer]: 3, [output]: def solution():
    pen_pals_initial = 5
    pen_pals_stopped = 2
    pen_pals_left = pen_pals_initial - pen_pals_stopped
    letters_per_week = 4 * pen_pals_left
    pages_per_letter = 5
    total_pages = letters_per_week * pages_per_letter
    minutes_per_page = 6
    minutes_per_week = total_pages * minutes_per_page
    hours_per_week = minutes_per_week / 60
    result = hours_per_week
    return result

 Executed result: 6.0
[EXP] 244: [success_rate]: True, [answer]: 250, [output]: 
def solution():
    minutes_initial = 1000
    minutes_used_by_boss = 15 * 30
    extra_minutes = 300
    minutes_used = minutes_used_by_boss + extra_minutes
    minutes_left = minutes_initial - minutes_used
    result = minutes_left
    return result

 Executed result: 250
[EXP] 245: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    french_fries_initial = 24
    kyle_taken = 5
    billy_taken = 2 * kyle_taken
    french_fries_afterTakens = french_fries_initial - (kyle_taken + billy_taken)
    colby_taken = kyle_taken - 3
    french_fries_afterColby = french_fries_afterTakens - colby_taken
    french_fries_given_by_ginger = french_fries_initial - french_fries_afterColby
    result = french_fries_given_by_ginger
    return result

 Executed result: 17
[EXP] 246: [success_rate]: False, [answer]: 7, [output]: 
def solution():
    snails_aquarium1 = 4
    snails_aquarium2 = 32
    difference = snails_aquarium2 - snails_aquarium1
    fish_in_aquariums = difference / 2
    fish_in_aquarium = fish_in_aquariums
    result = fish_in_aquarium
    return result

 Executed result: 14.0
[EXP] 247: [success_rate]: True, [answer]: 27000, [output]: 
def solution():
    makeup_artist_fee = 250
    hours_per_day = 6
    days_per_week = 4
    weeks_to_complete = 5
    hours = hours_per_day * days_per_week * weeks_to_complete
    total_cost = hours * makeup_artist_fee
    total_cost_after_discount = total_cost * 0.9
    result = total_cost_after_discount
    return result

 Executed result: 27000.0
[EXP] 248: [success_rate]: True, [answer]: 32, [output]: 
def solution():
    total_cost = 12 + 43 + 15 + 4 + 22
    total_people = 3
    cost_per_person = total_cost / total_people
    result = cost_per_person
    return result

 Executed result: 32.0
[EXP] 249: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    bags = 4
    pounds_per_bag = 50
    price_per_pound = 1.50
    total_pounds = bags * pounds_per_bag
    total_cost = total_pounds * price_per_pound
    result = total_cost
    return result

 Executed result: 300.0
[EXP] 250: [success_rate]: False, [answer]: 5,600, [output]: 
def solution():
    sister_cookies_monday = 5
    sister_cookies_tuesday = 13
    sister_total_cookies = sister_cookies_monday + sister_cookies_tuesday
    sue_cookies_monday = sister_cookies_monday * 4
    sue_cookies_tuesday = sister_cookies_tuesday * 2
    sue_total_cookies = sue_cookies_monday + sue_cookies_tuesday
    sue_total_calories = sue_total_cookies * 200
    sister_total_calories = sister_total_cookies * 200
    sue_diff_calories = sue_total_calories - sister_total_calories
    result = sue_diff_calories
    return result

 Executed result: 5600
[EXP] 251: [success_rate]: False, [answer]: 17, [output]: def solution():
    students_per_class = 20
    num_classes = 3
    total_students = students_per_class * num_classes
    total_boys = total_students / 2
    total_girls = total_students - total_boys
    
    first_class_girls = 15
    second_class_girls = 12
    total_girls_in_two_classes = first_class_girls + second_class_girls
    girls_in_third_class = total_girls - total_girls_in_two_classes
    
    boys_in_third_class = total_boys - girls_in_third_class
    result = boys_in_third_class
    return result

 Executed result: 27.0
[EXP] 252: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    apps_initial = 61
    apps_deleted = 9
    apps_downloaded = 18
    apps_left = apps_initial - apps_deleted
    apps_after_downloading = apps_left + apps_downloaded
    result = apps_after_downloading
    return result

 Executed result: 70
[EXP] 253: [success_rate]: False, [answer]: 73, [output]: 
def solution():
    wolves_killed_previous_night = 10
    cougars_killed_previous_night = 15
    wolves_killed_today = wolves_killed_previous_night + 3 * (cougars_killed_previous_night - 15)
    cougars_killed_today = cougars_killed_previous_night - 3
    wolves_cougars_killed = wolves_killed_previous_night + wolves_killed_today + cougars_killed_previous_night + cougars_killed_today
    result = wolves_cougars_killed
    return result

 Executed result: 47
[EXP] 254: [success_rate]: True, [answer]: 18, [output]: def solution():
    starting_floor = 3
    target_floor = 4 * starting_floor + 6
    result = target_floor
    return result

 Executed result: 18
[EXP] 255: [success_rate]: True, [answer]: 84, [output]: def solution():
    mitchel = 30
    anne = mitchel * 0.7
    robert = anne * 4
    result = robert
    return result

 Executed result: 84.0
[EXP] 256: [success_rate]: False, [answer]: 192, [output]: 
def solution():
    stalls = 20
    cows_per_stall = 20
    cows_initial = stalls * cows_per_stall
    cows_additional = 40
    cows_per_stall_received = cows_additional // stalls
    cows_per_stall_total = cows_per_stall + cows_per_stall_received
    result = cows_per_stall_total * 8
    return result

 Executed result: 176
[EXP] 257: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    pennies = 100
    nickels = 40
    dimes = 20
    dollar_bills = 40
    pennies_value = pennies * 0.01
    nickels_value = nickels * 0.05
    dimes_value = dimes * 0.10
    dollar_bills_value = dollar_bills * 1.00
    total_cash = pennies_value + nickels_value + dimes_value + dollar_bills_value
    result = total_cash
    return result

 Executed result: 45.0
[EXP] 258: [success_rate]: True, [answer]: 5600, [output]: def solution():
    redwood_length = 200
    section_weight = 400
    sections = redwood_length / 10
    total_weight = sections * section_weight
    termite_damage = 0.30
    termite_damage_weight = total_weight * termite_damage
    total_weight_after_termite_damage = total_weight - termite_damage_weight
    result = total_weight_after_termite_damage
    return result

 Executed result: 5600.0
[EXP] 259: [success_rate]: True, [answer]: 6, [output]: def solution():
    fine_per_book = 0.50
    num_overdue_books = 8
    fine_for_overdue_books = num_overdue_books * fine_per_book
    flat_fee = 2.00
    total_fine = fine_for_overdue_books + flat_fee
    result = total_fine
    return result

 Executed result: 6.0
[EXP] 260: [success_rate]: True, [answer]: 168, [output]: 
def solution():
    jamal_apples = 52 - 8
    jamal_bananas = jamal_apples + 4
    andrea_apples = 52
    andrea_bananas = jamal_bananas // 2
    total_fruits = andrea_apples + andrea_bananas + jamal_apples + jamal_bananas
    result = total_fruits
    return result

 Executed result: 168
[EXP] 261: [success_rate]: True, [answer]: 11, [output]: 
def solution():
    cookies_today = 36
    cookies_tomorrow = 30
    total_cookies = cookies_today + cookies_tomorrow
    cups_per_dozen = 2
    dozen_cookies = total_cookies // 12
    total_cups = dozen_cookies * cups_per_dozen
    result = total_cups
    return result

 Executed result: 10
[EXP] 262: [success_rate]: True, [answer]: 62, [output]: 
def solution():
    pennies_in_cup = 9300
    two_thirds_pennies = 2 * pennies_in_cup / 3
    pennies_in_stack = two_thirds_pennies
    pennies_in_dollar = 100
    dollars_in_stack = pennies_in_stack / pennies_in_dollar
    result = dollars_in_stack
    return result

 Executed result: 62.0
[EXP] 263: [success_rate]: True, [answer]: 270, [output]: 
def solution():
    marbles_initial = 50
    boxes = 5
    total_marbles_initial = marbles_initial * boxes
    friend_marbles = 20
    total_marbles_now = total_marbles_initial + friend_marbles
    result = total_marbles_now
    return result

 Executed result: 270
[EXP] 264: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    trees_in_chriss_yard = 6
    trees_in_ferdinand_yard = trees_in_chriss_yard // 2
    trees_in_harry_yard = 2 * trees_in_ferdinand_yard + 5
    difference = trees_in_harry_yard - trees_in_ferdinand_yard
    result = difference
    return result

 Executed result: 8
[EXP] 265: [success_rate]: True, [answer]: 400, [output]: def solution():
    Carmen_money = 100
    Samantha_money = Carmen_money + 25
    Daisy_money = Samantha_money + 50
    total_money = Carmen_money + Samantha_money + Daisy_money
    result = total_money
    return result

 Executed result: 400
[EXP] 266: [success_rate]: True, [answer]: 9500, [output]: def solution():
    selling_price = 350000
    brokerage_fee = 0.05 * selling_price
    transfer_fee = 0.12 * selling_price
    total_price = selling_price + brokerage_fee + transfer_fee
    more_than_budget = total_price - 400000
    result = more_than_budget
    return result

 Executed result: 9500.0
[EXP] 267: [success_rate]: True, [answer]: 118000, [output]: def solution():
    selling_price = 400000
    transfer_fees = selling_price * 0.03
    brokerage_fees = selling_price * 0.05
    total_fees = transfer_fees + brokerage_fees
    amount_left = selling_price - total_fees
    loan_amount = 250000
    net_proceeds = amount_left - loan_amount
    result = net_proceeds
    return result

 Executed result: 118000.0
[EXP] 268: [success_rate]: True, [answer]: 91, [output]: def solution():
    oil_heating_time = 20
    oil_to_400 = oil_heating_time * 1.4
    oil_and_cooking_time = oil_to_400 + oil_heating_time
    cooking_time = oil_and_cooking_time - 5
    result = oil_heating_time + oil_to_400 + cooking_time
    return result

 Executed result: 91.0
[EXP] 269: [success_rate]: True, [answer]: 1375, [output]: def solution():
    newspaper_ad_cost = 5
    newspaper_ads = 50
    tv_ad_cost = 75
    tv_ads = 15
    total_cost = (newspaper_ad_cost * newspaper_ads) + (tv_ad_cost * tv_ads)
    result = total_cost
    return result

 Executed result: 1375
[EXP] 270: [success_rate]: True, [answer]: 4, [output]: def solution():
    total_balls = 16
    balls_that_are_golf_balls = total_balls / 2
    balls_that_are_blue = balls_that_are_golf_balls / 2
    result = balls_that_are_blue
    return result

 Executed result: 4.0
[EXP] 271: [success_rate]: True, [answer]: 762, [output]: 
def solution():
    bag1_mms = 300
    bag2_mms = bag1_mms + 12
    bag3_mms = bag1_mms / 2
    total_mms = bag1_mms + bag2_mms + bag3_mms
    result = total_mms
    return result

 Executed result: 762.0
[EXP] 272: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    total_bedrooms = 2 * 3
    total_bedroom_windows = total_bedrooms * 2
    houses_windows = 2 * 4
    total_windows = total_bedroom_windows + houses_windows
    result = total_windows
    return result

 Executed result: 20
[EXP] 273: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    total_cost = 4.20 + 9.45 + 1.35
    payment = 20
    change = payment - total_cost
    result = change
    return result

 Executed result: 5.000000000000002
[EXP] 274: [success_rate]: True, [answer]: 315, [output]: 
def solution():
    total_stitches = 1800
    body_stitches = 900
    collar_stitches = body_stitches // 10
    rosette_stitches = 2 * collar_stitches
    sleeve_stitches = (total_stitches - body_stitches - collar_stitches - rosette_stitches) // 2
    result = sleeve_stitches
    return result

 Executed result: 315
[EXP] 275: [success_rate]: True, [answer]: 3200, [output]: 
def solution():
    tomato_seeds_packets = 20
    tomato_seeds_cost = 40
    celery_seeds_packets = 80
    celery_seeds_cost = 30
    total_cost = (tomato_seeds_packets * tomato_seeds_cost) + (celery_seeds_packets * celery_seeds_cost)
    result = total_cost
    return result

 Executed result: 3200
[EXP] 276: [success_rate]: True, [answer]: 138, [output]: def solution():
    lines_in_solo_song = 54
    lines_in_first_scene = 2 * lines_in_solo_song
    sean_lines_in_first_scene = lines_in_first_scene // 3
    lines_in_second_scene = lines_in_solo_song + 6
    sean_lines_in_second_scene = lines_in_second_scene * 4 // 5
    total_lines = sean_lines_in_first_scene + sean_lines_in_second_scene + lines_in_solo_song
    result = total_lines
    return result

 Executed result: 138
[EXP] 277: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    cards_initial = 80
    cardsA = 2/5 * cards_initial
    cards_remaining = cards_initial - cardsA
    cardsB = 1/2 * cards_remaining
    cards_remaining = cards_remaining - cardsB
    cardsC = 5/8 * cards_remaining
    cardsD = cards_remaining - cardsC
    result = cardsD
    return result

 Executed result: 9.0
[EXP] 278: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    time_per_small_hole = 3
    time_per_large_hole = 10
    small_holes = 30
    large_holes = 15
    time_for_small_holes = time_per_small_hole * small_holes
    time_for_large_holes = time_per_large_hole * large_holes
    total_time = time_for_small_holes + time_for_large_holes
    hours = total_time / 60
    result = hours
    return result

 Executed result: 4.0
[EXP] 279: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    sum_of_ages_now = 20
    increase_of_sum_of_ages = 10 * 2
    sum_of_ages_in_10_years = sum_of_ages_now + increase_of_sum_of_ages
    result = sum_of_ages_in_10_years
    return result

 Executed result: 40
[EXP] 280: [success_rate]: False, [answer]: 6, [output]: def solution():
    age_of_ruby_in_9_years = 3 * (Sam_age_afterNine_years)
    age_of_ruby_now = age_of_ruby_in_9_years - 9
    Sam_age = age_of_ruby_now / 6
    result = Sam_age
    return result

 Executed result: None
[EXP] 281: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    popsicles = 20
    popsicle_price = 0.25
    popsicle_cost = popsicles * popsicle_price
    ice_cream_bars = 4
    ice_cream_bar_price = 0.50
    ice_cream_bar_cost = ice_cream_bars * ice_cream_bar_price
    total_cost = popsicle_cost + ice_cream_bar_cost
    result = total_cost
    return result

 Executed result: 7.0
[EXP] 282: [success_rate]: True, [answer]: 2450, [output]: def solution():
    mamba_spots_per_cobra = 70 / 2
    mamba_spots = mamba_spots_per_cobra * 60
    cobra_spots = 70 * 40
    total_spots = cobra_spots + mamba_spots
    half_total_spots = total_spots / 2
    result = half_total_spots
    return result

 Executed result: 2450.0
[EXP] 283: [success_rate]: True, [answer]: 195, [output]: 
def solution():
    team_members = 12
    coaches = 3
    total_guests = team_members * 2
    total_people = team_members + coaches + total_guests
    pizzas_needed = total_people // 3
    pizza_cost = pizzas_needed * 15
    result = pizza_cost
    return result

 Executed result: 195
[EXP] 284: [success_rate]: False, [answer]: 68, [output]: 
def solution():
    topaz_length = 8
    silver_length = 0.25
    total_length = 25
    total_gemstone_length = topaz_length * 8
    bead_spaces = total_length - total_gemstone_length
    beads_between = bead_spaces / silver_length
    result = beads_between
    return result

 Executed result: -156.0
[EXP] 285: [success_rate]: True, [answer]: 360, [output]: 
def solution():
    stories_alani = 20
    stories_braylen = 40
    stories_margot = 60
    alani_stories_week2 = stories_alani * 2
    braylen_stories_week2 = stories_braylen * 2
    margot_stories_week2 = stories_margot * 2
    total_stories_first_week = stories_alani + stories_braylen + stories_margot
    total_stories_second_week = alani_stories_week2 + braylen_stories_week2 + margot_stories_week2
    total_stories = total_stories_first_week + total_stories_second_week
    result = total_stories
    return result

 Executed result: 360
[EXP] 286: [success_rate]: True, [answer]: 21, [output]: def solution():
    ann_age = 9
    brother_age = ann_age * 2
    
    brother_age_in_3_years = brother_age + 3
    
    result = brother_age_in_3_years
    
    return result

 Executed result: 21
[EXP] 287: [success_rate]: False, [answer]: 90, [output]: def solution():
    quarters = 5
    dimes = 2
    quarts_in_dollar = 25
    dimes_in_dollar = 10
    total_cents earned = quarters * quarts_in_dollar + dimes * dimes_in_dollar
    can_price = 55
    total_cents_after_purchase = total_cents_earned - can_price
    result = total_cents_after_purchase
    return result

 Executed result: None
[EXP] 288: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    stars_total = 76
    stars_per_8_row = 8
    stars_per_6_row = 6
    total_stars_in_8_and_6_rows = 2 * stars_per_8_row + 2 * stars_per_6_row
    stars_in_8_and_6_rows = 2 * 8 + 2 * 6
    remaining_stars = stars_total - stars_in_8_and_6_rows
    result = remaining_stars // 5
    return result

 Executed result: 9
[EXP] 289: [success_rate]: True, [answer]: 3, [output]: def solution():
    flagstones = 80
    flagstone_weight = 75
    total_weight = flagstones * flagstone_weight
    truck_weight = 2000
    num_trucks = -(-total_weight // truck_weight)
    result = num_trucks
    return result

 Executed result: 3
[EXP] 290: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    speed_fast_lane = 60
    speed_slow_lane = speed_fast_lane / 2
    distance = 480
    time_fast_lane = distance / speed_fast_lane
    time_slow_lane = time_fast_lane * (speed_fast_lane / speed_slow_lane)
    result = time_slow_lane
    return result

 Executed result: 16.0
[EXP] 291: [success_rate]: True, [answer]: 390, [output]: 
def solution():
    ali_medals = 22
    izzy_medals = ali_medals - 5
    total_medals = ali_medals + izzy_medals
    total_given_out = total_medals * 10
    result = total_given_out
    return result

 Executed result: 390
[EXP] 292: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    adult_count = 4
    child_count = 8
    packets = 8
    bars_per_packet = 5
    total_bars = packets * bars_per_packet
    adult_bars = adult_count * 6
    child_bars = total_bars - adult_bars
    bars_per_child = child_bars / child_count
    result = bars_per_child
    return result

 Executed result: 2.0
[EXP] 293: [success_rate]: False, [answer]: 75, [output]: 
def solution():
    seconds_per_minute = 60
    minutes_between_8_and_11 = (11 * 60) - (8 * 60) - 30
    minutes_actual_worked = minutes_between_8_and_11
    earnings_per_minute = 5
    total_earnings = earnings_per_minute * minutes_actual_worked
    result = total_earnings
    return result

 Executed result: 750
[EXP] 294: [success_rate]: True, [answer]: 83, [output]: 
def solution():
    mike_points = 21
    jim_points = mike_points - 3
    tony_points = mike_points * 2
    total_points = mike_points + jim_points + tony_points
    extra_points = 0
    
    if mike_points > 20:
        extra_points += 1
    if jim_points > 20:
        extra_points += 1
    if tony_points > 20:
        extra_points += 1
    
    total_points_with_extra = total_points + extra_points
    result = total_points_with_extra
    return result

 Executed result: 83
[EXP] 295: [success_rate]: True, [answer]: 3, [output]: def solution():
    oranges_initial = 15
    oldest_son_years = 8
    youngest_son_years = oldest_son_years / 2
    oranges_washed = oldest_son_years + youngest_son_years
    oranges_left = oranges_initial - oranges_washed
    result = oranges_left
    return result

 Executed result: 3.0
[EXP] 296: [success_rate]: True, [answer]: 370, [output]: 
def solution():
    pushups_day1 = 100
    squats_day1 = 50
    dumbbell_presses_day1 = 20
    pushups_day2 = pushups_day1 + 20
    squats_day2 = squats_day1 - 10
    dumbbell_presses_day2 = dumbbell_presses_day1 * 2
    pushups_total = pushups_day1 + pushups_day2
    squats_total = squats_day1 + squats_day2
    dumbbell_presses_total = dumbbell_presses_day1 + dumbbell_presses_day2
    total_activities = pushups_total + squats_total + dumbbell_presses_total
    result = total_activities
    return result

 Executed result: 370
[EXP] 297: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    members = 5
    meals_per_day = 2
    daily_rice_consumption = members * meals_per_day * 0.2
    total_rice_bag = 42
    total_rice_used_per_week = daily_rice_consumption * 7
    weeks_rice_last = total_rice_bag / total_rice_used_per_week
    result = weeks_rice_last
    return result

 Executed result: 3.0
[EXP] 298: [success_rate]: True, [answer]: 55, [output]: def solution():
    target_sales = 120
    sunday_sales = 20
    tuesday_sales = 15
    wednesday_sales = 12
    thursday_sales = 18
    total_sales = sunday_sales + tuesday_sales + wednesday_sales + thursday_sales
    missing_sales = target_sales - total_sales
    result = missing_sales
    return result

 Executed result: 55
[EXP] 299: [success_rate]: True, [answer]: 500, [output]: 
def solution():
    opening_bid = 200
    increase = 50
    num_other_bidders = 3
    num_times_Carmen_bids = 3
    total_cost = opening_bid
    for i in range(num_other_bidders):
        total_cost += increase
    for i in range(num_times_Carmen_bids):
        total_cost += increase
    result = total_cost
    return result

 Executed result: 500
[EXP] 300: [success_rate]: False, [answer]: 31800, [output]: def solution():

 Executed result: None
[EXP] 301: [success_rate]: True, [answer]: 78, [output]: 
def solution():
    sunday_exercise_minutes = 23
    monday_exercise_minutes = 16
    total_mondays_minutes = sunday_exercise_minutes + monday_exercise_minutes
    tuesday_exercise_minutes = 2 * total_mondays_minutes
    result = tuesday_exercise_minutes
    return result

 Executed result: 78
[EXP] 302: [success_rate]: True, [answer]: 8, [output]: def solution():
    pages = 32
    pages_per_piece = 4  # Back and front of a piece of paper
    pieces = pages // pages_per_piece
    leftover_pages = pages % pages_per_piece
    if leftover_pages > 0:
        pieces += 1
    result = pieces
    return result

 Executed result: 8
[EXP] 303: [success_rate]: True, [answer]: 15, [output]: def solution():
    money_initial = 50
    money_spent_on_food = money_initial / 2
    money_spent_on_ride = 10
    money_spent = money_spent_on_food + money_spent_on_ride
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 15.0
[EXP] 304: [success_rate]: False, [answer]: 1300, [output]: def solution():
    books_initial = 250
    books_sold_first_year = 2 * (books_initial - 50 - 45)
    books_sold_second_year = 45
    books_sold_third_year = books_initial - 50
    first_year_income = books_sold_first_year * 20
    second_year_income = books_sold_second_year * 20
    third_year_income = books_sold_third_year * 20
    total_income = first_year_income + second_year_income + third_year_income
    result = total_income
    return result

 Executed result: 11100
[EXP] 305: [success_rate]: False, [answer]: 3200, [output]: def solution():
    hours_per_day = 10
    days_per_week = 5
    weeks_in_april = 4
    hourly_wage = 10
    weekly_bonus = 300
    total_hours = hours_per_day * days_per_week
    total_weeks = weeks_in_april * days_per_week
    total_wage = total_hours * hourly_wage * total_weeks
    total_bonus = total_bonus * total_weeks
    total_earnings = total_wage + total_bonus
    result = total_earnings
    return result

 Executed result: None
[EXP] 306: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    people_arm_wrestled = 20
    people_beaten = 0.8 * people_arm_wrestled
    people_lost = people_arm_wrestled - people_beaten
    result = people_lost
    return result

 Executed result: 4.0
[EXP] 307: [success_rate]: True, [answer]: 10, [output]: def solution():
    loaves_per_day = 60
    loaves_sold_morning = loaves_per_day * 2 / 3
    loaves_left = loaves_per_day - loaves_sold_morning
    loaves_sold_afternoon = loaves_left / 2
    result = loaves_sold_afternoon
    return result

 Executed result: 10.0
[EXP] 308: [success_rate]: False, [answer]: 16, [output]: def solution():
    weight_lost_by_joey = 8
    weight_lost_per_week = weight_lost_by_joey / 4
    weight_lost_per_sandy_week = weight_lost_per_week * 4
    weight_lost_by_sandy = 8
    weeks_lost_by_sandy = weight_lost_by_sandy / weight_lost_per_sandy_week
    result = weeks_lost_by_sandy
    return result

 Executed result: 1.0
[EXP] 309: [success_rate]: True, [answer]: 6, [output]: def solution():
    tub_price_initial = 13
    tub_price_discount = 11
    tub_price_discount_amount = tub_price_initial - tub_price_discount
    tub_price_discount_amount_per_tub = tub_price_discount_amount
    tubs_bought = 2
    milk_packet_discount = 0.5
    milk_packet_discount_amount = milk_packet_discount
    milk_packets_bought = 4
    milk_packet_discount_amount_per_packet = milk_packet_discount_amount
    total_discount_amount_per_tub = tub_price_discount_amount_per_tub
    total_discount_amount_per_milk_packet = milk_packet_discount_amount_per_packet
    total_discount = total_discount_amount_per_tub * tubs_bought + total_discount_amount_per_milk_packet * milk_packets_bought
    result = total_discount
    return result

 Executed result: 6.0
[EXP] 310: [success_rate]: False, [answer]: 8, [output]: 
def solution():
    extra_arms_every_3_days = 5
    extra_legs_every_5_days = 3
    days = 15
    extra_arms = (days // 3) * extra_arms_every_3_days
    extra_legs = (days // 5) * extra_legs_every_5_days
    result = extra_arms + extra_legs
    return result

 Executed result: 34
[EXP] 311: [success_rate]: True, [answer]: 2050, [output]: def solution():
    total_money = 6000
    money_spent = 0
    
    money_for_suits = 6 * 100
    money_for_suitcases = 3 * 50
    money_for_flight = 5 * 100 + 700
    
    total_spent_on_trips = money_for_suits + money_for_suitcases + money_for_flight
    
    money_left = total_money - total_spent_on_trips
    
    money_to_save = 2000
    
    money_to_spend_on_gifts = money_left - money_to_save
    
    result = money_to_spend_on_gifts
    return result

 Executed result: 2050
[EXP] 312: [success_rate]: False, [answer]: 91, [output]: def solution():
    eggs_per_person = 3
    people_eating_three_eggs = 3
    eggs_per leftover_person = 2
    people_left_over = 2
    total_eggs_per_day = (people_eating_three_eggs * eggs_per_person) + (people_left_over * eggs_per_leftover_person)
    total_eggs_in_week = total_eggs_per_day * 7
    result = total_eggs_in_week
    return result

 Executed result: None
[EXP] 313: [success_rate]: True, [answer]: 32, [output]: def solution():
    quinn_age = 30
    quinn_age_jane = quinn_age - 3
    jane_age_trent = quinn_age_jane + 5
    result = jane_age_trent
    return result

 Executed result: 32
[EXP] 314: [success_rate]: True, [answer]: 120000, [output]: 
def solution():
    cera_current_age = 46
    cera_age_six_years_ago = cera_current_age - 6
    noah_age_six_years_ago = cera_age_six_years_ago / 2
    population_chile_six_years_ago = noah_age_six_years_ago * 3000
    population_chile_now = population_chile_six_years_ago * 2
    result = population_chile_now
    return result

 Executed result: 120000.0
[EXP] 315: [success_rate]: False, [answer]: 30, [output]: 
def solution():
    total_members = 105
    players_on_special_teams = players_on_defense / 2
    players_on_offense = players_on_defense * 2
    players_on_offense_plus_defense_plus_special_teams = players_on_offense + players_on_defense + players_on_special_teams
    players_on_defense = total_members - players_on_offense - players_on_special_teams
    result = players_on_defense
    return result

 Executed result: None
[EXP] 316: [success_rate]: True, [answer]: 14, [output]: def solution():
    families_6 = 2
    individuals_6 = families_6 * 6
    families_4 = 3
    individuals_4 = families_4 * 4
    total_invited = individuals_6 + individuals_4
    people_couldnt_come = 8
    people_had_elems = people_couldnt_come // 4
    people_show_up = total_invited - (people_couldnt_come + people_had_elems)
    result = people_show_up
    return result

 Executed result: 14
[EXP] 317: [success_rate]: True, [answer]: 156, [output]: def solution():
    marbles_initial = 50
    marbles_bought = 20
    marbles_father_gave = marbles_bought * 2 / 5
    marbles_total = marbles_initial + marbles_bought + marbles_father_gave
    marbles_weight = marbles_total * 2
    result = marbles_weight
    return result

 Executed result: 156.0
[EXP] 318: [success_rate]: True, [answer]: 12, [output]: def solution():
    width = 6
    length = 4
    depth = 5
    volume = width * length * depth
    cost = volume * 0.1
    result = cost
    return result

 Executed result: 12.0
[EXP] 319: [success_rate]: True, [answer]: 123, [output]: def solution():
    boys = 30
    girls = boys * 3
    nongendered_children = boys / 10
    total_children = boys + girls + nongendered_children
    result = total_children
    return result

 Executed result: 123.0
[EXP] 320: [success_rate]: True, [answer]: 15, [output]: def solution():
    total_wires = 45
    ratio_wires_poles = 3
    ratio_poles_wires = 1
    total_poles = total_wires * (ratio_poles_wires / ratio_wires_poles)
    result = total_poles
    return result

 Executed result: 15.0
[EXP] 321: [success_rate]: True, [answer]: 8, [output]: def solution():
    total_people = 25 + 15
    total_left = total_people // 4
    people_left = total_people - total_left
    men_stayed = 22
    women_left = people_left - men_stayed
    result = women_left
    return result

 Executed result: 8
[EXP] 322: [success_rate]: True, [answer]: 1, [output]: def solution():
    book_cost = 4
    magazine_cost = book_cost / 2
    pen_cost = magazine_cost - 1
    result = pen_cost
    return result

 Executed result: 1.0
[EXP] 323: [success_rate]: False, [answer]: 9, [output]: 
def solution():
    jam_pencils_total = 26
    jam_pencils_box = 3 * 3
    jam_pencils_loose = 2
    total_pencils_jam = jam_pencils_box + jam_pencils_loose
    jun_pencils = 46
    total_pencils = total_pencils_jam + jun_pencils
    total_pencils_box = total_pencils // 3
    remaining_pencils = total_pencils % 3
    total_ajax_boxes = total_pencils_box
    if remaining_pencils > 0:
        total_ajax_boxes += 1
    result = total_ajax_boxes
    return result

 Executed result: 19
[EXP] 324: [success_rate]: True, [answer]: 75, [output]: 
def solution():
    milliliters_weaker_per_cube = 12
    degrees_per_cube = 13
    degrees_to_cool = 65
    milliliters_addition = 15
    milliliters_weaker_per_degree = milliliters_weaker_per_cube / degrees_per_cube
    milliliters_weaker_total = (degrees_to_cool * milliliters_weaker_per_degree) + milliliters_addition
    result = milliliters_weaker_total
    return result

 Executed result: 75.0
[EXP] 325: [success_rate]: False, [answer]: 14, [output]: def solution():
    new_records = 7
    old_records_per_trade = 2
    people = 5
    total_old_records = people * (old_records_per_trade - 1)
    result = total_old_records
    return result

 Executed result: 5
[EXP] 326: [success_rate]: True, [answer]: 224000, [output]: def solution():
    total_employees = 100
    junior_programmers = 2/5 * total_employees
    senior_programmers = total_employees - junior_programmers
    junior_pay = 2000
    senior_pay = junior_pay + 400
    junior_payroll = junior_programmers * junior_pay
    senior_payroll = senior_programmers * senior_pay
    total_payroll = junior_payroll + senior_payroll
    result = total_payroll
    return result

 Executed result: 224000.0
[EXP] 327: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    total_people_third_stop = 20
    people_getting_down_second_stop = 7
    people_getting_on_second_stop = 8
    people_second_stop = total_people_third_stop - people_getting_down_second_stop + people_getting_on_second_stop
    people_getting_on_terminal = people_second_stop - people_getting_on_second_stop
    result = people_getting_on_terminal
    return result

 Executed result: 13
[EXP] 328: [success_rate]: True, [answer]: 31, [output]: 
def solution():
    lollipops_initial = 24
    lollipops_eaten_tickets_to_school = 2
    lollipops_given_to_friends = 14
    lollipops_bought_home = 2 * lollipops_given_to_friends
    lollipops_eaten_night = 3
    lollipops_eaten_morning = 2
    lollipops_reduced = lollipops_initial - lollipops_eaten_tickets_to_school - lollipops_given_to_friends
    lollipops_after_bought = lollipops_reduced + lollipops_bought_home
    lollipops_after_eaten = lollipops_after_bought - lollipops_eaten_night - lollipops_eaten_morning
    result = lollipops_after_eaten
    return result

 Executed result: 31
[EXP] 329: [success_rate]: True, [answer]: 2, [output]: def solution():
    charge_percentage = 100
    charge_current = 60
    chargeremaining = charge_percentage - charge_current
    minutes_to_charge = chargeremaining * 3
    hours_to_charge = minutes_to_charge / 60
    result = hours_to_charge
    return result

 Executed result: 2.0
[EXP] 330: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    lollipops_initial = 7
    lollipops_add = 10
    lollipops_given = 3
    lollipops_total = lollipops_initial + lollipops_add
    lollipops_after_giving = lollipops_total - lollipops_given
    result = lollipops_after_giving
    return result

 Executed result: 14
[EXP] 331: [success_rate]: True, [answer]: 31, [output]: 
def solution():
    money_spent_last_trip = 80
    rewards = money_spent_last_trip // 20
    rewards_discount = 1 * rewards
    money_spent_this_trip = 43
    rewards_used = rewards
    rewards_coupon = rewards_used * 2
    price_after_rewards = money_spent_this_trip - rewards_used
    price_after_coupon = price_after_rewards - rewards_coupon
    result = price_after_coupon
    return result

 Executed result: 31
[EXP] 332: [success_rate]: False, [answer]: 8400, [output]: 
def solution():
    job_a_hourly_wage = 15
    job_a_hours_per_year = 2000
    state_tax_rate_job_a = 0.20
    
    job_a_annual Salary = job_a_hourly_wage * job_a_hours_per_year
    job_a_tax = job_a_annual_salary * state_tax_rate_job_a
    job_a_net_income_job_a = job_a_annual_salary - job_a_tax
    
    job_b_annual_salary = 42000
    job_b_property_tax = 6000
    job_b_tax_rate = 0.10
    
    job_b_net_income_job_b = job_b_annual_salary - job_b_property_tax
    job_b_tax = job_b_net_income_job_b * job_b_tax_rate
    job_b_net_income_job_b = job_b_net_income_job_b - job_b_tax
    
    job_a_net_income_job_a = round(job_a_net_income_job_a)
    job_b_net_income_job_b = round(job_b_net_income_job_b)
    
    net_income_difference = job_b_net_income_job_b - job_a_net_income_job_a
    
    result = net_income_difference
    return result

 Executed result: None
[EXP] 333: [success_rate]: True, [answer]: 44, [output]: def solution():
    castles = 220
    percent_ruins = 40 / 100
    ruined_castles = castles * percent_ruins
    half_ruined_castles = ruined_castles / 2
    result = half_ruined_castles
    return result

 Executed result: 44.0
[EXP] 334: [success_rate]: True, [answer]: 100, [output]: def solution():
    advance_amount_furniture_united = 1350
    monthly_installments_furniture_united = 6
    installment_amount_furniture_united = 350
    total_cost_furniture_united = advance_amount_furniture_united + (monthly_installments_furniture_united * installment_amount_furniture_united)
    
    advance_amount_cozy_homes = 1100
    monthly_installments_cozy_homes = 9
    installment_amount_cozy_homes = 250
    total_cost_cozy_homes = advance_amount_cozy_homes + (monthly_installments_cozy_homes * installment_amount_cozy_homes)
    
    cost_difference = total_cost_furniture_united - total_cost_cozy_homes
    result = cost_difference
    return result

 Executed result: 100
[EXP] 335: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    dj_guns = 8
    nick_guns = 10
    richard_guns = 5
    jason_guns = 0
    total_guns = dj_guns + nick_guns + richard_guns + jason_guns
    total_people = 4
    guns_per_person = total_guns / total_people
    result = guns_per_person
    return result

 Executed result: 5.75
[EXP] 336: [success_rate]: True, [answer]: 310, [output]: python
def solution():
    sugar_needed_suckers = 30
    sugar_needed_fudge = 70
    suckers_batches = 8
    fudge_batches = 1
    sugar_needed_suckers_total = sugar_needed_suckers * suckers_batches
    sugar_needed_fudge_total = sugar_needed_fudge
    total_sugar_needed = sugar_needed_suckers_total + sugar_needed_fudge_total
    result = total_sugar_needed
    return result

 Executed result: 310
[EXP] 337: [success_rate]: True, [answer]: 72, [output]: def solution():
    shares = 8
    price_per_share = 8
    price_after_first_year = price_per_share * (1 + 0.50)
    shares_after_first_year = shares
    price_after_first_year_total = shares_after_first_year * price_after_first_year
    price_after_second_year = price_after_first_year * (1 - 0.25)
    result = price_after_second_year * shares
    return result

 Executed result: 72.0
[EXP] 338: [success_rate]: True, [answer]: 1, [output]: 
def solution():
    luke_hot_dogs = 2
    thomas_hot_dogs = 3 * luke_hot_dogs
    john_hot_dogs = thomas_hot_dogs / 2
    john_than_luke_hot_dogs = john_hot_dogs - luke_hot_dogs
    result = john_than_luke_hot_dogs
    return result

 Executed result: 1.0
[EXP] 339: [success_rate]: False, [answer]: 60, [output]: 
def solution():
    total_students = 200
    num_groups = 3
    group1_students = group2_students = (total_students - 10) // 2
    group3_students = total_students - group1_students - group2_students
    result = group3_students
    return result

 Executed result: 10
[EXP] 340: [success_rate]: False, [answer]: 160, [output]: def solution():
    total_animals = 60
    difference = total_animals // 2
    cows = total_animals - difference
    chickens = difference
    total_legs_chickens = chickens * 2
    total_legs_cows = cows * 4
    total_legs = total_legs_chickens + total_legs_cows
    result = total_legs
    return result

 Executed result: 180
[EXP] 341: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    balls_initial = 3
    balls_added_per_week = 1
    weeks_practiced = 4
    balls_after_practiced = balls_initial + (weeks_practed * balls_added_per_week)
    balls_dropped = 3
    balls_caught = 2
    balls_lost = 1
    balls_left = balls_after_practiced - balls_dropped + balls_caught
    result = balls_left
    return result

 Executed result: None
[EXP] 342: [success_rate]: True, [answer]: 260, [output]: def solution():
    pink_frog_weight = 50
    red_bird_weight = pink_frog_weight - 20
    yellow_snake_weight = pink_frog_weight + 10
    green_toad_weight = pink_frog_weight
    blue_beetle_weight = pink_frog_weight
    container_weight = 20
    total_weight = pink_frog_weight + red_bird_weight + yellow_snake_weight + green_toad_weight + blue_beetle_weight + container_weight
    result = total_weight
    return result

 Executed result: 260
[EXP] 343: [success_rate]: True, [answer]: 87, [output]: 
def solution():
    outfits_received_from_friend = 24
    outfits_received_from_shower = 2 * outfits_received_from_friend
    outfits_received_from_mom = 15
    total_outfits = outfits_received_from_friend + outfits_received_from_shower + outfits_received_from_mom
    result = total_outfits
    return result

 Executed result: 87
[EXP] 344: [success_rate]: True, [answer]: 180000, [output]: 
def solution():
    daily_distance = 5000
    increase_daily_distance = daily_distance * (1/5)
    new_daily_distance = daily_distance + increase_daily_distance
    days_in_june = 30
    total_distance_in_june = new_daily_distance * days_in_june
    result = total_distance_in_june
    return result

 Executed result: 180000.0
[EXP] 345: [success_rate]: True, [answer]: 2, [output]: def solution():
    juice_box_a = 4
    juice_box_b = juice_box_a + 5
    juice_box_c = juice_box_a + 7
    price_difference = juice_box_c - juice_box_b
    result = price_difference
    return result

 Executed result: 2
[EXP] 346: [success_rate]: True, [answer]: 310, [output]: python
def solution():
    tables_with_four_legs = 40
    tables_with_three_legs = 50
    total_legs_4_leg_tables = tables_with_four_legs * 4
    total_legs_3_leg_tables = tables_with_three_legs * 3
    total_legs = total_legs_4_leg_tables + total_legs_3_leg_tables
    result = total_legs
    return result

 Executed result: 310
[EXP] 347: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    cookies_per_week = 36
    cookies_in_lunch_box = 4
    days_in_a_week = 5
    husband_cookies = 7
    cookies_for_jenny = cookies_per_week - (cookies_in_lunch_box * days_in_a_week) - husband_cookies
    result = cookies_for_jenny
    return result

 Executed result: 9
[EXP] 348: [success_rate]: True, [answer]: 36, [output]: 
def solution():
    total_cost = 30
    percent_discount = 0.4
    discount = total_cost * percent_discount
    price_after_discount = total_cost - discount
    two_shirts_price = price_after_discount * 2
    result = two_shirts_price
    return result

 Executed result: 36.0
[EXP] 349: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    daily_income_previous = 10 * 100
    daily_income_current = 5 * 220
    difference = daily_income_current - daily_income_previous
    percentage_diff = (difference / daily_income_previous) * 100
    result = percentage_diff
    return result

 Executed result: 10.0
[EXP] 350: [success_rate]: True, [answer]: 2640, [output]: 
def solution():
    food_cost_per_week = 25
    food_cost_per_month = food_cost_per_week * 4
    treats_cost_per_month = 20
    medicine_cost_per_month = 100
    total_cost_per_month = food_cost_per_month + treats_cost_per_month + medicine_cost_per_month
    total_cost_per_year = total_cost_per_month * 12
    result = total_cost_per_year
    return result

 Executed result: 2640
[EXP] 351: [success_rate]: True, [answer]: 8, [output]: python
def solution():
    yoga_hours = 1
    cooking_hours = yoga_hours * 3
    cheese_hours = 0.5 * cooking_hours
    museum_hours = 0.5 * cooking_hours
    errands_hours = 2
    total_hours = yoga_hours + cooking_hours + cheese_hours + museum_hours + errands_hours
    result = total_hours
    return result

 Executed result: 9.0
[EXP] 352: [success_rate]: True, [answer]: 10, [output]: def solution():
    plant_pots_initial = 100
    daisy_pots = 30
    rose_pots = 2 * daisy_pots
    total_pots = daisy_pots + rose_pots
    pots_left = plant_pots_initial - total_pots
    result = pots_left
    return result

 Executed result: 10
[EXP] 353: [success_rate]: True, [answer]: 21, [output]: def solution():
    money_initial = 36
    money_spent_on_sweater = 11
    money_given_to_brother = 4
    money_spent = money_spent_on_sweater + money_given_to_brother
    money_saved = money_initial - money_spent
    result = money_saved
    return result

 Executed result: 21
[EXP] 354: [success_rate]: False, [answer]: 20, [output]: def solution():
    boating_time = 6
    swimming_time = boating_time / 2
    shows_hours = 3 * 2
    shows_time = shows_hours * 0.30
    total_time = boating_time + swimming_time + shows_time
    sightseeing_time = total_time * 0.40
    result = sightseeing_time
    return result

 Executed result: 4.32
[EXP] 355: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    phone_cost = 400
    money_initial = 80
    first_job_wages = 20 * 10
    second_job_wages = 15 * 5
    total_wages = first_job_wages + second_job_wages
    money_earned = money_initial + total_wages
    money_needs_to_save = phone_cost - money_earned
    result = money_needs_to_save
    return result

 Executed result: 45
[EXP] 356: [success_rate]: True, [answer]: 34, [output]: def solution():
    shortest_tree_height = 6
    second_tree_height = shortest_tree_height + 5
    combined_height = shortest_tree_height + second_tree_height
    tallest_tree_height = combined_height * 2
    result = tallest_tree_height
    return result

 Executed result: 34
[EXP] 357: [success_rate]: True, [answer]: 21, [output]: 
def solution():
    initial_money = 28
    money_spent = 0
    
    toy_cars = 6
    toy_cars_cost = toy_cars * 2
    money_spent += toy_cars_cost
    
    teddy_bears = 5
    teddy_bears_cost = teddy_bears * 1
    money_spent += teddy_bears_cost
    
    total_money_spent = money_spent
    money_left = initial_money - total_money_spent
    extra_money = 10
    money_left += extra_money
    
    result = money_left
    return result

 Executed result: 21
[EXP] 358: [success_rate]: False, [answer]: 2, [output]: def solution():
    budget = 90
    mini_golf = 5
    arcade_tokens = 5
    go_karts = 10
    go_karts_ride = 2
    
    total_cost = mini_golf + arcade_tokens + (go_karts * go_karts_ride)
    
    friends = (budget - total_cost) // (mini_golf + arcade_tokens)
    result = friends
    return result

 Executed result: 6
[EXP] 359: [success_rate]: True, [answer]: 20, [output]: def solution():
    daily_allowance = 5
    daily_expenses = 4
    daily_change_per_lollipop = 0.25
    daily_savings = daily_allowance - daily_expenses * daily_change_per_lollipop
    total_savings = daily_savings * 5
    result = total_savings
    return result

 Executed result: 20.0
[EXP] 360: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    money_initial = 10
    candy_cost = 1.5
    gumball_cost = 0.05
    gumballs_bought = 40

    money_spent_on_candy = money_initial / candy_cost
    candy_bought = math.floor(money_spent_on_candy)

    money_left = money_initial - candy_cost * candy_bought
    money_spent_on_gumballs = money_left / 2
    gumballs = int(money_spent_on_gumballs / gumball_cost)

    result = candy_bought
    return result

 Executed result: None
[EXP] 361: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    carver_age = 45
    son_age = 2 * (carver_age + 5)
    result = son_age
    return result

 Executed result: 100
[EXP] 362: [success_rate]: True, [answer]: 20, [output]: def solution():
    trip_distance = 75 + 100 + (75 + 100 - 50)
    trip_distance_per_day = trip_distance * 3
    miles_between_services = 18000
    days_between_services = miles_between_services / trip_distance_per_day
    result = round(days_between_services)
    return result

 Executed result: 20
[EXP] 363: [success_rate]: True, [answer]: 23, [output]: def solution():
    chihuahua_pounds = 2
    collie_pounds = (8 + 2) / 2
    collie_pounds_per_bed = collie_pounds
    chihuahua_beds = 4
    collie_beds = 3
    total_pounds = (chihuahua_pounds * chihuahua_beds) + (collie_pounds_per_bed * collie_beds)
    result = total_pounds
    return result

 Executed result: 23.0
[EXP] 364: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    distance_to_friend = 200
    detour_distance = 10
    total_distance_to_friend = distance_to_friend + detour_distance
    time_to_friend = total_distance_to_friend / 70
    distance_home = 240
    time_home = distance_home / 80
    total_time = time_to_friend + time_home
    result = total_time
    return result

 Executed result: 6.0
[EXP] 365: [success_rate]: False, [answer]: 49, [output]: 
def solution():
    total_students = 96
    girls = 43
    boys = total_students - girls
    absent_students = 5 + 4
    boys_at_school = boys - absent_students
    result = boys_at_school
    return result

 Executed result: 44
[EXP] 366: [success_rate]: True, [answer]: 18, [output]: def solution():
    girls_in_park = 6
    boys_in_park = 2 * girls_in_park
    total_kids = girls_in_park + boys_in_park
    result = total_kids
    return result

 Executed result: 18
[EXP] 367: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    total_points_required = 42
    points_already_scored = 15 + 18
    points_to_score = total_points_required - points_already_scored
    result = points_to_score
    return result

 Executed result: 9
[EXP] 368: [success_rate]: True, [answer]: 19, [output]: def solution():
    customers_kicked_for_refusal = 3
    shoplifters = 4 * customers_kicked_for_refusal - 5
    physical_violence = 3 * shoplifters
    total_kicked_out = customers_kicked_for_refusal + shoplifters + physical_violence
    others = total_kicked_out - 50
    result = others
    return result

 Executed result: -19
[EXP] 369: [success_rate]: False, [answer]: 18, [output]: def solution():
    erin_points_now = 14
    sara_points = 8
    sara_points_multiply = 3
    erin_points_before = erin_points_now - (sara_points_multiply * sara_points - erin_points_now)
    result = erin_points_before
    return result

 Executed result: 4
[EXP] 370: [success_rate]: True, [answer]: 1198, [output]: def solution():
    seniors = 44
    frame_cost = 20
    etching_cost = 0.2
    pin_cost = 5
    cord_cost = 12

    total_frames = seniors
    etching_cost_per_frame = frame_cost * etching_cost
    total_etching_cost = total_frames * etching_cost_per_frame

    senior_pledge_pin_cost = 2 * pin_cost
    total_pledge_pin_cost = seniors / 4 * cord_cost

    total_cost = (total_frames * frame_cost) + total_etching_cost + senior_pledge_pin_cost + total_pledge_pin_cost
    result = total_cost
    return result

 Executed result: 1198.0
[EXP] 371: [success_rate]: True, [answer]: 320, [output]: 
def solution():
    cost_market = 400
    discount_percentage = 20
    discount = (cost_market * discount_percentage) / 100
    cost_diy = cost_market - discount
    result = cost_diy
    return result

 Executed result: 320.0
[EXP] 372: [success_rate]: False, [answer]: 50, [output]: def solution():
    shoes_sold_friday = 14
    shoes_sold_saturday = 2 * shoes_sold_friday
    shoes_sold_sunday = shoes_sold_saturday / 2
    shoes_returned = 6

 Executed result: None
[EXP] 373: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    tuesday_practice = 1
    thursday_practice = 2
    saturday_practice = 2 * tuesday_practice
    total_practice = tuesday_practice + thursday_practice + saturday_practice
    result = total_practice
    return result

 Executed result: 5
[EXP] 374: [success_rate]: True, [answer]: 240000, [output]: 
def solution():
    total_cost = 400000
    faulty_equipment_cost = 400000 * 0.40
    cost_of_fully_functional_equipment = total_cost - faulty_equipment_cost
    result = cost_of_fully_functional_equipment
    return result

 Executed result: 240000.0
[EXP] 375: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    sheep_initial = 30
    milk_half = 1
    milk_half_two = 2
    milk_collected_first_half = milk_half * (sheep_initial // 2)
    milk_collected_second_half = milk_half_two * ((sheep_initial - (sheep_initial // 2)) // 1)
    milk_collected_daily = milk_collected_first_half + milk_collected_second_half
    result = milk_collected_daily
    return result

 Executed result: 45
[EXP] 376: [success_rate]: True, [answer]: 48, [output]: 
def solution():
    rolls_initial = 12
    rolls_consumed_child = 6
    rolls_remaining = rolls_initial - rolls_consumed_child
    rolls_broken_into_pieces = rolls_remaining
    pieces_per_roll = 8
    pieces_fed_to_chickens = rolls_broken_into_pieces * pieces_per_roll
    result = pieces_fed_to_chickens
    return result

 Executed result: 48
[EXP] 377: [success_rate]: True, [answer]: 15, [output]: def solution():
    pupils = 40
    likes_blue = pupils / 2
    likes_blue = int(likes_blue)
    remaining = pupils - likes_blue
    likes_green = remaining / 4
    likes_green = int(likes_green)
    likes_yellow = remaining - likes_green
    result = likes_yellow
    return result

 Executed result: 15
[EXP] 378: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    apples_sold_monday = 56 / 4
    apples_picked_tuesday = 12
    apples_picked_wednesday = apples_picked_tuesday * 2
    total_apples = apples_sold_monday + apples_picked_tuesday + apples_picked_wednesday
    result = total_apples
    return result

 Executed result: 50.0
[EXP] 379: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    socks_to_wash = 50
    pairs_washed = 10 * 2
    loose_washed = 15
    total_washed = pairs_washed + loose_washed
    socks_misplaced = socks_to_wash - total_washed
    result = socks_misplaced
    return result

 Executed result: 15
[EXP] 380: [success_rate]: True, [answer]: 21, [output]: def solution():
    cookies_initial = 23
    cookies_given = 42
    total_cookies = cookies_initial + cookies_given

    cookies_eaten = 44
    cookies_left = total_cookies - cookies_eaten

    result = cookies_left
    return result

 Executed result: 21
[EXP] 381: [success_rate]: False, [answer]: 803, [output]: 
def solution():
    money_borrowed = 3650
    interest_rate = 0.1
    months = 5
    total_interest = money_borrowed * interest_rate * months
    total_payment = money_borrowed + total_interest
    monthly_payment = total_payment / months
    result = monthly_payment
    return result

 Executed result: 1095.0
[EXP] 382: [success_rate]: True, [answer]: 67, [output]: 
def solution():
    cho_hike_rate = 14
    cho_hike_time = 8
    cho_distance_hiked = cho_hike_rate * cho_hike_time
    chloe_hike_rate = 9
    chloe_hike_time = 5
    chloe_distance_hiked = chloe_hike_rate * chloe_hike_time
    distance_difference = cho_distance_hiked - chloe_distance_hiked
    result = distance_difference
    return result

 Executed result: 67
[EXP] 383: [success_rate]: True, [answer]: 350, [output]: def solution():
    axel_silver_pesos = 50
    axel_gold_pesos = 80
    anna_silver_pesos = 2 * axel_silver_pesos
    anna_gold_pesos = axel_gold_pesos + 40
    total_pesos_axel = axel_silver_pesos + axel_gold_pesos
    total_pesos_anna = anna_silver_pesos + anna_gold_pesos
    total_pesos = total_pesos_axel + total_pesos_anna
    result = total_pesos
    return result

 Executed result: 350
[EXP] 384: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    cost_of_supplies = 18
    pitchers_of_lemonade = 3
    cups_per_pitcher = 12
    total_cups = pitchers_of_lemonade * cups_per_pitcher
    revenue_per_cup = 1
    cups_sold_per_hour = 4
    total_revenue = revenue_per_cup * cups_sold_per_hour
    cost_per_cup = cost_of_supplies / total_cups
    profit_per_cup = total_revenue - revenue_per_cup
    profit_per_hour = profit_per_cup * cups_sold_per_hour
    result = profit_per_hour
    return result

 Executed result: 12
[EXP] 385: [success_rate]: True, [answer]: 32, [output]: 
def solution():
    land_left = 12.8
    fraction_sold = 3 / 5
    land_initial = land_left / (1 - fraction_sold)
    result = land_initial
    return result

 Executed result: 32.0
[EXP] 386: [success_rate]: False, [answer]: 16, [output]: def solution():

 Executed result: None
[EXP] 387: [success_rate]: True, [answer]: 80, [output]: python
def solution():
    test_scores = [65, 94, 81, 86, 74]
    total_score = sum(test_scores)
    average_score = total_score / len(test_scores)
    result = average_score
    return result

 Executed result: 80.0
[EXP] 388: [success_rate]: True, [answer]: 36, [output]: def solution():
    eraser_cost = 2
    pencil_cost = 3
    erasers = 6
    pencils = 8
    erasers_cost = erasers * eraser_cost
    pencils_cost = pencils * pencil_cost
    total_cost = erasers_cost + pencils_cost
    result = total_cost
    return result

 Executed result: 36
[EXP] 389: [success_rate]: True, [answer]: 88, [output]: def solution():
    messages_thompson = 66
    messages_yu = messages_thompson // 3
    total_messages = messages_thompson + messages_yu
    result = total_messages
    return result

 Executed result: 88
[EXP] 390: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    rides = 9
    tickets_per_ride = 2
    cost_per_ticket = 2
    bracelet_cost = 30
    ticket_cost = rides * tickets_per_ride * cost_per_ticket

    david_cost = bracelet_cost
    dasha_cost = ticket_cost

    total_spent = david_cost + dasha_cost

    start_amount = 30
    bracelet_price = 30

    total_saved = start_amount - total_spent
    result = total_saved
    return result

 Executed result: -36
[EXP] 391: [success_rate]: True, [answer]: 12, [output]: python
def solution():
    total_gifts = 6 + 4 + 2
    total_ribbon_inches = 144
    ribbon_inches_per_gift = total_ribbon_inches / total_gifts
    result = ribbon_inches_per_gift
    return result

 Executed result: 12.0
[EXP] 392: [success_rate]: True, [answer]: 15, [output]: def solution():
    betty_popsicles = 5/11 * 165
    sam_popsicles = 6/11 * 165
    difference = sam_popsicles - betty_popsicles
    result = difference
    return result

 Executed result: 15.0
[EXP] 393: [success_rate]: False, [answer]: 34, [output]: def solution():
    cable_package = 60
    netflix = 10
    subscription_cost_a = 10
    subscription_cost_b = 10
    discount = 0.2
    total_subscription_cost = netflix + subscription_cost_a + subscription_cost_b
    savings = cable_package - total_subscription_cost
    result = savings
    return result

 Executed result: 30
[EXP] 394: [success_rate]: True, [answer]: 20, [output]: def solution():
    time_writing = 4
    time_recording = time_writing / 2
    time_editing = 90 / 60  # convert minutes to hours
    total_time = time_writing + time_recording + time_editing
    time_editing_percentage = (time_editing / total_time) * 100
    result = time_editing_percentage
    return result

 Executed result: 20.0
[EXP] 395: [success_rate]: True, [answer]: 92, [output]: 
def solution():
    rows = 6
    columns = 6
    total_books = rows * columns
    double_books = total_books * 2
    more_books = 20
    total_books_needed = double_books + more_books
    result = total_books_needed
    return result

 Executed result: 92
[EXP] 396: [success_rate]: False, [answer]: 38, [output]: def solution():
    original.cards = 20
    dad.cards = 2 * 15 = 30
    total.cards = original.cards + dad.cards = 20 + 30 = 50
    given.classes = 24
    given.family = 5
    received.cards = 17
    cards_now = total.cards - given.classes - given.family + received.cards
    result = cards_now
    return result

 Executed result: None
[EXP] 397: [success_rate]: True, [answer]: 3, [output]: def solution():
    total_slices = 12
    bill_slices = int(total_slices * 1/3)
    mark_slices = int(total_slices * 1/4)
    slices_giveaway = bill_slices + mark_slices
    slices_eaten = 2
    slices_left = total_slices - (slices_giveaway + slices_eaten)
    result = slices_left
    return result

 Executed result: 3
[EXP] 398: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    money_initial = 50
    money_per_day = 10
    money_needed = 300
    days Needed = (money_needed - money_initial) / money_per_day
    result = int(days_needed) + 1
    return result

 Executed result: None
[EXP] 399: [success_rate]: True, [answer]: 168, [output]: def solution():
    spiders = 90
    millipedes = spiders / 3
    stink_bugs = (millipedes * 2) - 12
    total_bugs = spiders + millipedes + stink_bugs
    result = total_bugs
    return result

 Executed result: 168.0
[EXP] 400: [success_rate]: True, [answer]: 12, [output]: def solution():
    erica_age = 30
    beth_age = erica_age + 5
    alice_age = beth_age + 7
    difference = alice_age - erica_age
    result = difference
    return result

 Executed result: 12
[EXP] 401: [success_rate]: True, [answer]: 48, [output]: def solution():
    glass_milk = 8
    glasses_drunk = 2
    ounces_drunk = glass_milk * glasses_drunk
    ounces_calories = 3
    calories_consumed = ounces_drunk * ounces_calories
    result = calories_consumed
    return result

 Executed result: 48
[EXP] 402: [success_rate]: True, [answer]: 14400, [output]: def solution():
    working_days_per_week = 6
    weeks_per_month = 4
    months_per_year = 12
    days_per_year = working_days_per_week * weeks_per_month * months_per_year
    daily_salary = 50
    salary = days_per_year * daily_salary
    result = salary
    return result

 Executed result: 14400
[EXP] 403: [success_rate]: False, [answer]: 4, [output]: def solution():

 Executed result: None
[EXP] 404: [success_rate]: False, [answer]: 81, [output]: def solution():
    watts = 900
    hours_before = 8
    hours_after = hours_before - 5
    energy_before = watts * hours_before
    energy_after = watts * hours_after
    energy_saved_per_day = energy_before - energy_after
    days = 30
    energy_saved = energy_saved_per_day * days
    result = energy_saved / 1000
    return result

 Executed result: 135.0
[EXP] 405: [success_rate]: True, [answer]: 22, [output]: def solution():
    zebra_1_stripes = 17
    zebra_2_stripes = 17
    zebra_3_stripes = 36
    zebra_4_stripes = zebra_3_stripes / 2
    total_stripes = zebra_1_stripes + zebra_2_stripes + zebra_3_stripes + zebra_4_stripes
    average_stripes = total_stripes / 4
    result = average_stripes
    return result

 Executed result: 22.0
[EXP] 406: [success_rate]: True, [answer]: 50, [output]: def solution():
    servings_per_sandwich = 4
    total_servings = 20
    sandwiches_needed = total_servings // servings_per_sandwich
    pounds_meat = sandwiches_needed
    pounds_cheese = sandwiches_needed
    cost_meat = pounds_meat * 7
    cost_cheese = pounds_cheese * 3
    total_cost = cost_meat + cost_cheese
    result = total_cost
    return result

 Executed result: 50
[EXP] 407: [success_rate]: False, [answer]: 200, [output]: 
def solution():
    cannolis_initial = 40
    corn_cannolis_ratio = 2
    total_cannolis = cannolis_initial + 60
    corn_cannolis_diff = 60 - 40
    corn_cannolis_ratio = 2
    corn_cannolis_initial = total_cannolis / corn_cannolis_ratio
    corn_cannolis_after = corn_cannolis_initial + corn_cannolis_diff
    total_corns = corn_cannolis_after
    total_items = total_cannolis + total_corns
    result = total_items
    return result

 Executed result: 170.0
[EXP] 408: [success_rate]: False, [answer]: 2000, [output]: def solution():
    target_steps = 10000
    steps_after_school = target_steps / 2
    steps_with_friend = 1000
    steps_left = target_steps - (steps_after_school + steps_with_friend)
    steps_taken_during_jog = steps_left
    result = steps_taken_during_jog
    return result

 Executed result: 4000.0
[EXP] 409: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    pages = 45
    words_per_page = 200
    total_words = pages * words_per_page
    words_per_minute = 300
    reading_minutes = total_words / words_per_minute
    travel_minutes = 10
    total_minutes = reading_minutes + travel_minutes
    expected_time = 60  # minutes
    arrival_minutes_early = expected_time - total_minutes
    result = arrival_minutes_early
    return result

 Executed result: 20.0
[EXP] 410: [success_rate]: True, [answer]: 168000, [output]: def solution():
    employees_initial = 40
    hourly_wage = 15
    hours_per_week = 40
    weeks_per_month = 4
    total_hours_may = employees_initial * hours_per_week * weeks_per_month * 1
    total_hours_june = employees_initial * hours_per_week * (weeks_per_month - 1) * 1
    total_hours_june -= (employees_initial - 40) * hours_per_week
    total_salary_may = total_hours_may * hourly_wage
    total_salary_june = total_hours_june * hourly_wage
    result = total_salary_may + total_salary_june
    return result

 Executed result: 168000
[EXP] 411: [success_rate]: False, [answer]: 3, [output]: def solution():
    money_initial = 10
    taffy_total_cost = 3 + (3 * 0.5)  # calculate taffy total cost
    taffy_total_purchased = 2
    taffy_cost = taffy_total_cost * taffy_total_purchased
    shell_cost = 1.50
    magnet_cost = 4 * 0.25
    total_cost = taffy_cost + shell_cost + magnet_cost
    money_left = money_initial - total_cost
    result = money_left
    return result

 Executed result: -1.5
[EXP] 412: [success_rate]: True, [answer]: 1110, [output]: def solution():
    fireworks_initial_price = 400
    fireworks_price_twice = fireworks_initial_price * 2
    total_fireworks_price = fireworks_initial_price + fireworks_price_twice
    discount = 0.2
    price_after_discount = total_fireworks_price * (1 - discount)
    finale_fireworks_price = 150
    total_spend = price_after_discount + finale_fireworks_price
    result = total_spend
    return result

 Executed result: 1110.0
[EXP] 413: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    treats_per_day = 2
    days_required = 30
    total_treats_required = treats_per_day * days_required
    cookies_per_dozen = 12
    total_cookies_required = total_treats_required / 2
    dozens_cookies_needed = total_cookies_required // cookies_per_dozen
    result = dozens_cookies_needed
    return result

 Executed result: 2.0
[EXP] 414: [success_rate]: True, [answer]: 25, [output]: Python
def solution():
    total_candles = 50000
    high_risk_candles = 0.05 * total_candles
    exploding_candles = 50000 * 0.01
    candles_that_explode_and_smell_like_wet_dog = exploding_candles * 0.05
    result = candles_that_explode_and_smell_like_wet_dog
    return result

 Executed result: 25.0
[EXP] 415: [success_rate]: True, [answer]: 56, [output]: def solution():
    regular_price = 20
    discount_percentage = 30
    discount = (discount_percentage / 100) * regular_price
    discounted_price = regular_price - discount
    total_cost = discounted_price * 4
    result = total_cost
    return result

 Executed result: 56.0
[EXP] 416: [success_rate]: True, [answer]: 350, [output]: 
def solution():
    apples_from_tallest_trees = 30
    apples_from_shortest_trees = 30 // 2
    sister_apples_from_tallest_trees = apples_from_tallest_trees * 2
    sister_apples_from_shortest_trees = apples_from_shortest_trees * 3
    total_apples_gathered = 500
    joanne_apples_from_tallest_trees = apples_from_tallest_trees
    joanne_apples_from_shortest_trees = apples_from_shortest_trees
    joanne_apples = joanne_apples_from_tallest_trees + joanne_apples_from_shortest_trees + 0
    sister_apples = sister_apples_from_tallest_trees + sister_apples_from_shortest_trees + 0
    joanne_apples_from_average_trees = total_apples_gathered - joanne_apples - sister_apples
    result = joanne_apples_from_average_trees
    return result

 Executed result: 350
[EXP] 417: [success_rate]: False, [answer]: 56, [output]: def solution():
    total_heads = 180
    total_bumps = 304
    camels = (total_bumps - total_heads) // 2
    dromedaries = total_heads - camels
    result = dromedaries
    return result

 Executed result: 118
[EXP] 418: [success_rate]: True, [answer]: 3140, [output]: 
def solution():
    km_in_first_four_days = 200 * 4
    km_in_next_two_days = 0.3 * km_in_first_four_days
    km_on_last_day = 0
    km_in_second_week = 300 * 7
    
    total_km = km_in_first_four_days + km_in_next_two_days + km_on_last_day + km_in_second_week
    result = total_km
    return result

 Executed result: 3140.0
[EXP] 419: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    peter_locker_size = 5
    peter_to_zack = 4
    zack_to_timothy = 2
    peter_to_timothy = peter_locker_size * peter_to_zack * zack_to_timothy
    result = peter_to_timothy
    return result

 Executed result: 40
[EXP] 420: [success_rate]: True, [answer]: 3000, [output]: def solution():
    stanley_elevation = 10000
    comb_fell = 4000
    stanley_elevation_new = stanley_elevation - comb_fell
    oliver_elevation = 3000
    difference_in_elevation = stanley_elevation_new - oliver_elevation
    result = difference_in_elevation
    return result

 Executed result: 3000
[EXP] 421: [success_rate]: False, [answer]: 17000, [output]: 
def solution():
    capital_initial = 5000
    capital_received = 4000
    capital_received Secondly = 4000 * 2
    capital_received_total = capital_received + capital_received Secondly
    result = capital_initial + capital_received_total
    return result

 Executed result: None
[EXP] 422: [success_rate]: True, [answer]: 12, [output]: def solution():
    cats_initial = 50
    cats_taken = 4 * 5
    cats_after_boats = cats_initial - cats_taken
    cats_left_after_boats = cats_after_boats
    cats_left_after_mice = int(cats_left_after_boats * (1 - 3/5))
    result = cats_left_after_mice
    return result

 Executed result: 12
[EXP] 423: [success_rate]: False, [answer]: 284, [output]: def solution():
    months سنة = 24
    introductory_price = 8
    normal_price = 12
    late_price = 14
    months_introductory = 6
    months_normal = 8
    months_late = months سنة - months_introductory - months_normal
    cost_introductory = introductory_price * months_introductory
    cost_normal = normal_price * months_normal
    cost_late = late_price * months_late
    total_cost = cost_introductory + cost_normal + cost_late
    result = total_cost
    return result

 Executed result: None
[EXP] 424: [success_rate]: False, [answer]: 8, [output]: def solution():
    tattered_jeans_cost = 28
    jogger_jeans_cost = tattered_jeans_cost - 6
    total_savings = 6
    savings_from_jogger = total_savings / 3
    savings_from_tattered = total_savings - savings_from_jogger
    difference_in_cost = jogger_jeans_cost - tattered_jeans_cost
    result = difference_in_cost
    return result

 Executed result: -6
[EXP] 425: [success_rate]: True, [answer]: 570, [output]: 
def solution():
    buses = 4
    bus_capacity = 60
    buses_occupied = buses * bus_capacity
    
    minibusses = 6
    minibus_capacity = 30
    minibusses_occupied = minibusses * minibus_capacity
    
    minivans = 10
    minivan_capacity = 15
    minivans_occupied = minivans * minivan_capacity
    
    total_capacity = buses_occupied + minibusses_occupied + minivans_occupied
    result = total_capacity
    return result

 Executed result: 570
[EXP] 426: [success_rate]: True, [answer]: 150, [output]: def solution():
    bird_feeders_made = 3
    bird_feeders_bought = 3
    bird_feeders_total = bird_feeders_made + bird_feeders_bought
    
    birds_per_feeder_made = 20 + 10
    birds_per_feeder_bought = 20
    
    birdsperse = birds_per_feeder_made * bird_feeders_made + birds_per_feeder_bought * bird_feeders_bought
    result = birdsperse
    return result

 Executed result: 150
[EXP] 427: [success_rate]: True, [answer]: 11, [output]: 
def solution():
    bagel_cost = 4
    cake_cost = bagel_cost / 2
    soup_cost = bagel_cost * 1.25
    total_cost = bagel_cost + soup_cost + cake_cost
    result = total_cost
    return result

 Executed result: 11.0
[EXP] 428: [success_rate]: False, [answer]: 150, [output]: def solution():
    ticket_cost = 100
    spending_cash = 50
    price_per_card = 1.5
    cards_kept = spent = 50 / price_per_card
    cards_total = spent * price_per_card / 0.666
    result = cards_total
    return result

 Executed result: 75.07507507507508
[EXP] 429: [success_rate]: False, [answer]: 26, [output]: def solution():
    guests = 36
    extra_hotdogs = (guests * 2) - guests
    extra_guests = 40 - guests
    guests_without_second_hotdog = guests - extra_guests
    result = guests_without_second_hotdog
    return result

 Executed result: 32
[EXP] 430: [success_rate]: True, [answer]: 13, [output]: 
def solution():
    indras_letters = 6
    sister_letters_half = indras_letters / 2
    sister_letters_four_more = sister_letters_half + 4
    total_letters = indras_letters + sister_letters_four_more
    result = total_letters
    return result

 Executed result: 13.0
[EXP] 431: [success_rate]: True, [answer]: 132, [output]: 
def solution():
    total_cost = 120 + 20 + (5 * 5)
    discount = total_cost * 0.20
    price_after_discount = total_cost - discount
    result = price_after_discount
    return result

 Executed result: 132.0
[EXP] 432: [success_rate]: True, [answer]: 1, [output]: def solution():
    money_initial = 16
    money_for_skipping_rope = 6
    money_for_board_game = 11
    money_for_ball = 2
    money_total = money_initial + 2
    money_needed = money_for_skipping_rope + money_for_board_game + money_for_ball
    money_left = money_total - money_needed
    result = money_left
    return result

 Executed result: -1
[EXP] 433: [success_rate]: True, [answer]: 30, [output]: def solution():
    prince_thaddeus_dragons = 100
    prince_arthur_dragons = prince_thaddeus_dragons * (3 / 4)
    prince_walter_dragons = prince_arthur_dragons * 2
    prince_bruce_dragons = prince_walter_dragons * (1 / 5)
    result = prince_bruce_dragons
    return result

 Executed result: 30.0
[EXP] 434: [success_rate]: True, [answer]: 6, [output]: def solution():
    gallons_of_gas = 15
    containers = 5
    volume_per_container = gallons_of_gas / containers
    volume_needed = volume_per_container / 4
    result = volume_needed * 8  # 1 gallon = 8 pints
    return result

 Executed result: 6.0
[EXP] 435: [success_rate]: True, [answer]: 5, [output]: def solution():
    money_initial = 500 # convert 5 dollars to cents
    money_left = 1 / 100 * money_initial
    bags_of_chips = 3
    bags_of_chips_cost = bags_of_chips * 40
    money_spent_on_chips = bags_of_chips_cost / 100
    money_left_after_chips = money_initial - money_spent_on_chips - bags_of_chips_cost
    money_used_for_candy = money_initial - money_left
    candy_bars_cost_in_cents = (money_used_for_candy / 100) * 75
    candy_bars = candy_bars_cost_in_cents / 75
    result = int(candy_bars)
    return result

 Executed result: 4
[EXP] 436: [success_rate]: True, [answer]: 5, [output]: def solution():
    lollipops_initial = 25
    lollipops_kept = 5
    lollipops_shared = lollipops_initial - lollipops_kept
    friends = 4
    lollipops_per_friend = lollipops_shared // friends
    result = lollipops_per_friend
    return result

 Executed result: 5
[EXP] 437: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    cake_weight = 20
    pieces = 8
    shares_rory_and_mom = 2
    pieces_left = pieces - shares_rory_and_mom
    piece_weight = cake_weight / pieces
    remaining_cake_weight = piece_weight * pieces_left
    result = remaining_cake_weight
    return result

 Executed result: 15.0
[EXP] 438: [success_rate]: True, [answer]: 7, [output]: def solution():
    sitti_oranges = 34
    juris_oranges = 22
    total_oranges = sitti_oranges + juris_oranges
    people = 8  # Sitti, Juris, and 6 friends
    oranges_per_person = total_oranges // people
    result = oranges_per_person
    return result

 Executed result: 7
[EXP] 439: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    onions_needed = 2 * 2
    total_onions_cost = onions_needed * 2
    stock_cost = 2 * 2
    total_cost = total_onions_cost + stock_cost
    servings = 6
    cost_per_serving = round(total_cost / servings)
    return cost_per_serving

 Executed result: 2
[EXP] 440: [success_rate]: False, [answer]: 17, [output]: def solution():
    wayne_drive_time = 4
    time_difference = 4 * 5  # Bernadette wants to arrive 5 minutes before Wayne
    early_time_bernadette = time_difference + wayne_drive_time
    result = early_time_bernadette
    return result

 Executed result: 24
[EXP] 441: [success_rate]: False, [answer]: 98, [output]: def solution():
    area = 360
    perimeter = (360 / (3 * 3)) * 4
    result = perimeter
    return result

 Executed result: 160.0
[EXP] 442: [success_rate]: True, [answer]: 80, [output]: def solution():
    elizabeth_red = 1 * 20
    elizabeth_clear = 2 * 20
    elizabeth_total = elizabeth_red + elizabeth_clear
    margareth_blue = 3 * 20
    margareth_red = 4 * 20
    margareth_total = margareth_blue + margareth_red
    elizabeth_more = elizabeth_total - margareth_total
    result = elizabeth_more
    return result

 Executed result: -80
[EXP] 443: [success_rate]: False, [answer]: 49, [output]: 
def solution():
    house_temperature_initial = 40
    oven_increase_per_hour = 5
    hours_baking = 3
    house_temperaturespěp_baking = house_temperature_initial + hours_baking * oven_increase_per_hour
    minutes_window_open = 30
    cooling_rate_per_minute = 2 / 10
    house_temperature_cooling = house_temperature<|start_header_id|><|start_header_id|>assistant<|end_header_id|>

Here is the continuation of the code:


 Executed result: None
[EXP] 444: [success_rate]: False, [answer]: 59, [output]: def solution():
    jon_swim_time = 40
    jon_bike_time = 80
    jon_run_time = 50
    total_jon_time = jon_swim_time + jon_bike_time + jon_run_time
    
    james_swim_time = jon_swim_time - (jon_swim_time * 10 / 100)
    james_bike_time = jon_bike_time + 5
    james_run_time = total_jon_time - (total_jon_time - (jon_bike_time + jon_swim_time)) - 10
    
    result = james_run_time
    return result

 Executed result: 110
[EXP] 445: [success_rate]: True, [answer]: 20, [output]: def solution():
    movie_c_duration = 1.25 * 60  # convert 1.25 hours to minutes
    movie_b_duration = movie_c_duration + 5
    movie_a_duration = movie_b_duration / 4
    result = movie_a_duration
    return result

 Executed result: 20.0
[EXP] 446: [success_rate]: False, [answer]: 6, [output]: python
def solution():
    speed = 32  # Miles per hour
    time = 0.5  # 30 minutes in hours
    distance = speed * time
    bails_of_hay_needed = distance / 1  # 1/2 a bail of hay is needed
    total_cost = bails_of_hay_needed * 3  # Total cost is $3 per bail
    michael_initial_money = 5 * 6  # Michael has six 5 dollar bills
    michael_spent = total_cost
    total_change = michael_initial_money - michael_spent
    result = total_change
    return result

 Executed result: -18.0
[EXP] 447: [success_rate]: True, [answer]: 2, [output]: def solution():
    eggs_initial = 4 * 12
    eggs_loose = 2
    total_eggs = eggs_initial + eggs_loose
    eggnog_per_tray = 5
    eggs_per_eggnog = 5
    trays_possible = total_eggs // (eggs_per_eggnog * eggnog_per_tray)
    result = trays_possible
    return result

 Executed result: 2
[EXP] 448: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    joey_points_initial = 214
    joey_points_scored = 26
    joey_points = joey_points_initial + joey_points_scored
    
    marcy_points_initial = 225
    marcy_points_scored = 10
    marcy_points = marcy_points_initial + marcy_points_scored
    
    joey_points_now = joey_points
    marcy_points_now = marcy_points
    
    joey_points_winnow = joey_points_now - marcy_points_now
    result = joey_points_winnow
    return result

 Executed result: 5
[EXP] 449: [success_rate]: True, [answer]: 539, [output]: 
def solution():
    sneakers_initial = 48
    sneakers_sold_flash_sale = 17
    sneakers_sold_department_store = sneakers_initial - sneakers_sold_flash_sale
    sneakers_sold_department_store_price = sneakers_sold_department_store * 25
    profit_department_store = sneakers_sold_department_store_price
    flash_sale_revenue = sneakers_sold_flash_sale * 20
    total_revenue = sneakers_sold_flash_sale * 20 + sneakers_sold_department_store * 25
    profit = total_revenue - 576
    result = profit
    return result

 Executed result: 539
[EXP] 450: [success_rate]: True, [answer]: 112, [output]: 
def solution():
    packets_initial = 10
    packets_small = 6
    packets_large = 4
    crayons_small = 8
    crayons_large = 16
    crayons_small_total = crayons_small * packets_small
    crayons_large_total = crayons_large * packets_large
    total_crayons = crayons_small_total + crayons_large_total
    result = total_crayons
    return result

 Executed result: 112
[EXP] 451: [success_rate]: False, [answer]: 4, [output]: def solution():
    cost_of_super_ticket = 20
    extra_for_popcorn = 1
    cost_of_regular_ticket = 12
    cost_of_soda = 3
    cost_saved = 2

    revenue Wenn purchased as super ticket = (cost_of_super_ticket - extra_for_popcorn)
    revenue Wenn purchased as regular ticket = (cost_of_super_ticket / (1 + cost_of_regular_ticket >> cost_of_soda - cost_plus_saved_cost_of_soda)])
    revenue Wenn purchased as regular ticket = cost_of_regular_ticket * (1 + popcorn_cost_reggo/revenue Wenn purchased as regular ticket) - cost_of_regular_ticket

    popcorn_cost_regular = cost_of_criteria given as regular ticket - cost_of_soda - 2

    result = popcorn_cost_regular
    return result

 Executed result: None
[EXP] 452: [success_rate]: True, [answer]: 11050, [output]: 
def solution():
    # Cost of filling 20 balloons initially
    original_cost = 900
    cost_per_balloon_initial = original_cost / 20
    # Cost per balloon after the increase
    cost_per_balloon_after = cost_per_balloon_initial + 20
    # Cost of filling 170 balloons after the increase
    cost_to_fill_170 = 170 * cost_per_balloon_after
    result = cost_to_fill_170
    return result

 Executed result: 11050.0
[EXP] 453: [success_rate]: True, [answer]: 50, [output]: def solution():
    mph_first_section = 60
    hours_first_section = 2
    distance_first_section = mph_first_section * hours_first_section
    mph_second_section = 30
    hours_second_section = 1
    distance_second_section = mph_second_section * hours_second_section
    total_distance = distance_first_section + distance_second_section
    total_hours = hours_first_section + hours_second_section
    average_speed = total_distance / total_hours
    result = average_speed
    return result

 Executed result: 50.0
[EXP] 454: [success_rate]: True, [answer]: 6400, [output]: 
def solution():
    sapphires_initial = 8
    sapphires_traded = 3
    rubies_received = 2
    value_per_sapphire = 800
    value_per_ruby = 1200
    sapphires_left = sapphires_initial - sapphires_traded
    rubies = rubies_received
    value_sapphires = sapphires_left * value_per_sapphire
    value_rubies = rubies * value_per_ruby
    total_value = value_sapphires + value_rubies
    result = total_value
    return result

 Executed result: 6400
[EXP] 455: [success_rate]: False, [answer]: 150, [output]: def solution():
    marin_apples_per_day = 4
    nancy_apples_per_day = 4
    total_apples_per_day = marin_apples_per_day + nancy_apples_per_day
    total_apples_in_30_days = total_apples_per_day * 30
    result = total_apples_in_30_days
    return result

 Executed result: 240
[EXP] 456: [success_rate]: False, [answer]: 1920, [output]: def solution():

 Executed result: None
[EXP] 457: [success_rate]: True, [answer]: 78, [output]: 
def solution():
    red_cards = 15
    green_cards = red_cards * 1.6  # 60% more green cards
    yellow_cards = red_cards + green_cards
    total_cards = red_cards + green_cards + yellow_cards
    result = total_cards
    return result

 Executed result: 78.0
[EXP] 458: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    fairies_initial = 50
    fairies_arrived = fairies_initial / 2
    total_fairies = fairies_initial + fairies_arrived
    fairies_left = total_fairies - 30
    result = fairies_left
    return result

 Executed result: 45.0
[EXP] 459: [success_rate]: True, [answer]: 35, [output]: def solution():
    jennifer_puppies = 8
    jennifer_puppies_with_spots = 3
    brandon_puppies = 12
    brandon_puppies_with_spots = 4
    total_puppies = jennifer_puppies + brandon_puppies
    total_puppies_with_spots = jennifer_puppies_with_spots + brandon_puppies_with_spots
    percentage = (total_puppies_with_spots / total_puppies) * 100
    result = percentage
    return result

 Executed result: 35.0
[EXP] 460: [success_rate]: True, [answer]: 2, [output]: def solution():
    sugar_cubes = 2
    sugar_cubes_weight = 1
    sugar_cubes_total_weight = sugar_cubes * sugar_cubes_weight
    carrots = 4
    carrots_weight = 12
    carrots_total_weight = carrots * carrots_weight
    hay = 42
    hay_weight = 75
    hay_total_weight = hay * hay_weight
    oats = 20
    oats_weight = 65
    oats_total_weight = oats * oats_weight
    total_weight = sugar_cubes_total_weight + carrots_total_weight + hay_total_weight + oats_total_weight
    trips = -(-total_weight // 2250)
    result = trips
    return result

 Executed result: 2
[EXP] 461: [success_rate]: True, [answer]: 84, [output]: def solution():
    aluminum_cans_per_week = 3
    plastic_bottles_per_week = 5
    aluminum_cans_per_month = aluminum_cans_per_week * 4
    plastic_bottles_per_month = plastic_bottles_per_week * 4
    aluminum_cents_per_can = 2
    plastic_cents_per_bottle = 3
    total_cents_from_aluminum = aluminum_cans_per_month * aluminum_cents_per_can
    total_cents_from_plastic = plastic_bottles_per_month * plastic_cents_per_bottle
    total_cents = total_cents_from_aluminum + total_cents_from_plastic
    result = total_cents
    return result

 Executed result: 84
[EXP] 462: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    frederick_plants = 10
    toni_plants = frederick_plants * 1.6  # 60% more than Frederick
    shondra_plants = toni_plants - 7
    result = shondra_plants
    return result

 Executed result: 9.0
[EXP] 463: [success_rate]: True, [answer]: 71, [output]: def solution():
    ali_money_initial = 21
    leila_money = 100
    leila_gift = leila_money / 2
    ali_money_spent = leila_gift
    ali_money_now = ali_money_initial + ali_money_spent
    result = ali_money_now
    return result

 Executed result: 71.0
[EXP] 464: [success_rate]: True, [answer]: 18, [output]: def solution():
    pizza_cost = 15
    tip = pizza_cost / 5
    total_amount = pizza_cost + tip
    result = total_amount
    return result

 Executed result: 18.0
[EXP] 465: [success_rate]: False, [answer]: 6, [output]: def solution():
    initial_position = 1
    fell_back = 5
    moved Ahead = 2
    fell_behind = 3
    moved_ahead = 1
    new_position = initial_position - fell_back + moved_Ahead - fell_behind + moved_ahead
    result = new_position
    return result

 Executed result: None
[EXP] 466: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    deck_basketball = 6
    cards_basketball_per_deck = 25
    total_basketball_cards = deck_basketball * cards_basketball_per_deck
    box_baseball = 5
    cards_baseball_per_box = 40
    total_baseball_cards = box_baseball * cards_baseball_per_box
    total_cards = total_basketball_cards + total_baseball_cards
    cards_left = total_cards - 50
    students_per_card = 10
    students = cards_left // students_per_card
    result = students
    return result

 Executed result: 30
[EXP] 467: [success_rate]: True, [answer]: 1, [output]: 
def solution():
    apples_becky = 20
    price_per_apple_becky = 0.45
    discount_becky = 1
    total_cost_becky = apples_becky * price_per_apple_becky - discount_becky
    apples_kelly = 20
    price_per_apple_kelly = 0.5
    discount_kelly = apples_kelly * price_per_apple_kelly * 0.10
    total_cost_kelly = apples_kelly * price_per_apple_kelly - discount_kelly
    difference = total_cost_kelly - total_cost_becky
    result = difference
    return result

 Executed result: 1.0
[EXP] 468: [success_rate]: False, [answer]: 1200, [output]: def solution():
    sheets_per_room = 2
    pillow_cases_per_room = 2 * sheets_per_room
    towels_per_room = 2 * pillow_cases_per_room
    total_sheets = 80 * sheets_per_room
    total_pillow_cases = 80 * pillow_cases_per_room
    total_towels = 80 * towels_per_room
    total_laundry = total_sheets + total_pillow_cases + total_towels
    result = total_laundry
    return result

 Executed result: 1120
[EXP] 469: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    shoes_initial = 200
    shoes_gained_monday = 5 * 2  # 2 shoes per pair
    shoes_gained_wednesday = 15 * 2
    shoes_gained_friday = 30 * 2
    total_shoes_gained = shoes_gained_monday + shoes_gained_wednesday + shoes_gained_friday
    total_shoes = shoes_initial + total_shoes_gained
    shoes_lost = 180
    shoes_after_saturday = total_shoes - shoes_lost
    result = shoes_after_saturday
    return result

 Executed result: 120
[EXP] 470: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    jars_initial = 6
    sprinkles_per_jar = 8
    total_sprinkles = jars_initial * sprinkles_per_jar
    cupcakes_per_pan = 12
    pans_required = total_sprinkles / cupcakes_per_pan
    result = pans_required
    return result

 Executed result: 4.0
[EXP] 471: [success_rate]: False, [answer]: 3, [output]: def solution():
    return result

 Executed result: None
[EXP] 472: [success_rate]: False, [answer]: 80, [output]: def solution():
    total_students = 30
    pencils_per_student = 10
    total_pencils_initial = total_students * pencils_per_student
    pencils_used = total_pencils_initial * 1/5
    pencils_left = total_pencils_initial - pencils_used
    pencils_left_after_half_year = pencils_left * 2/3
    result = pencils_left_after_half_year
    return result

 Executed result: 160.0
[EXP] 473: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    cookies_wanted = 5
    cookies_per_carrot_stick = 0.5
    extra_cookies = 2
    total_cookies = cookies_per_carrot_stick + extra_cookies
    carrots_eaten = round(cookies_wanted / total_cookies)
    result = carrots_eaten
    return result

 Executed result: 2
[EXP] 474: [success_rate]: False, [answer]: 10, [output]: Python
def solution():
    shark_length = 10
    remoras_length = 2 * 6
    total_length = shark_length + remoras_length
    remoras_percentage = ((remoras_length / total_length) * 100)
    result = remoras_percentage
    return result

 Executed result: 54.54545454545454
[EXP] 475: [success_rate]: False, [answer]: 80, [output]: 
def solution():
    students_without_desktop = 20
    students_with_desktop = 3/4 * (x)
    students_total = students_with_desktop + students_without_desktop
    result = x
    return result

 Executed result: None
[EXP] 476: [success_rate]: False, [answer]: 20, [output]: def solution():
    total_minutes_walked = 240
    total_days = 3 * 7  # 3 weeks
    minutes_per_day = total_minutes_walked / total_days
    result = minutes_per_day
    return result

 Executed result: 11.428571428571429
[EXP] 477: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    total_cost = 300
    cost_per_book = 15
    total_books = total_cost / cost_per_book
    books_per_child = total_books / 4
    result = int(books_per_child)
    return result

 Executed result: 5
[EXP] 478: [success_rate]: True, [answer]: 20, [output]: def solution():
    total_kids = 32
    kids_dairy_allergic = 9
    kids_peanuts_allergic = 6
    kids_both_allergic = 3
    kids_dairy_or_peanuts_allergic = kids_dairy_allergic + kids_peanuts_allergic - kids_both_allergic
    
    kids_not_allergic = total_kids - kids_dairy_or_peanuts_allergic
    result = kids_not_allergic
    return result

 Executed result: 20
[EXP] 479: [success_rate]: True, [answer]: 621, [output]: 
def solution():
    groups = 3
    employees_per_group = 200
    tour_guides_per_group = 7
    total_people = groups * employees_per_group
    total_tour_guides = groups * tour_guides_per_group
    total_staff = total_people + total_tour_guides
    result = total_staff
    return result

 Executed result: 621
[EXP] 480: [success_rate]: True, [answer]: 15400, [output]: 
def solution():
    plane_tickets = 5000
    hotel_cost_per_day = 1500
    hotel_cost = hotel_cost_per_day * 1.2  # Calculate hotel cost (20% more)
    hotel_cost_for_trip = hotel_cost * 3  # Calculate hotel cost for 3 days
    total_trip_cost = plane_tickets * 2 + hotel_cost_for_trip  # Calculate total trip cost
    result = total_trip_cost
    return result

 Executed result: 15400.0
[EXP] 481: [success_rate]: True, [answer]: 11, [output]: def solution():
    ben_blue = 4
    jasper_blue = ben_blue / 2
    ben_yellow = 3
    jasper_yellow = ben_yellow * 3
    jasper_total = jasper_blue + jasper_yellow
    result = jasper_total
    return result

 Executed result: 11.0
[EXP] 482: [success_rate]: True, [answer]: 84, [output]: def solution():
    weight_1959 = 48
    weight_2010 = 3/4 * weight_1959
    weight_2010_penny = weight_2010
    weight_1959_penny = weight_1959
    total_weight = weight_2010_penny + weight_1959_penny
    result = total_weight
    return result

 Executed result: 84.0
[EXP] 483: [success_rate]: True, [answer]: 26, [output]: def solution():
    keegan_earnings = 83
    tasha_earnings = 91
    total_earnings = keegan_earnings + tasha_earnings
    goal = 200
    more_needed = goal - total_earnings
    result = more_needed
    return result

 Executed result: 26
[EXP] 484: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    gabriel_initial = 20
    luri_initial = 3 * gabriel_initial
    gabriel_empty = 100 - gabriel_initial
    luri_empty = 100 - luri_initial
    gabriel_can_Add = gabriel_empty
    luri_can_add = luri_empty
    gabriel_less_luri = gabriel_can_Add - luri_can_add
    result = gabriel_less_luri
    return result

 Executed result: 40
[EXP] 485: [success_rate]: True, [answer]: 240, [output]: python
def solution():
    total_oranges = 60
    oranges_eaten = 2/5 * total_oranges
    amount_per_orange = 10
    money_give_up = oranges_eaten * amount_per_orange
    result = money_give_up
    return result

 Executed result: 240.0
[EXP] 486: [success_rate]: True, [answer]: 220, [output]: def solution():
    shoes_cost = 80
    bag_cost = 3 * shoes_cost - 20
    result = bag_cost
    return result

 Executed result: 220
[EXP] 487: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    miles_per_day = 12
    days_per_week = 5
    miles_per_week = miles_per_day * days_per_week
    hours_per_mile = 1  # since speed is 10 miles per hour
    hours_per_week = miles_per_week / hours_per_mile
    result = hours_per_week
    return result

 Executed result: 60.0
[EXP] 488: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    oats_per_meal = 5
    meals_per_day = 2
    days = 5
    horses = 4
    oats_per_day = oats_per_meal * meals_per_day
    oats_per_horse_per_day = oats_per_day
    total_oats_per_horse_per_day = oats_per_horse_per_day * horses
    total_oats_needed = total_oats_per_horse_per_day * days
    total_oats_per_bag = 50
    bags_needed = total_oats_needed / total_oats_per_bag
    result = bags_needed
    return result

 Executed result: 4.0
[EXP] 489: [success_rate]: True, [answer]: 6, [output]: def solution():
    puppies = 27
    pomeranians = 2 * puppies // 3
    girl_pomeranians = pomeranians // 3
    result = girl_pomeranians
    return result

 Executed result: 6
[EXP] 490: [success_rate]: True, [answer]: -10, [output]: 
def solution():
    southlandia_temperature = -48
    northlandia_temperature = 21
    midlandia_temperature = -3
    temperatures = [southlandia_temperature, northlandia_temperature, midlandia_temperature]
    average_temperature = sum(temperatures) / len(temperatures)
    result = round(average_temperature)
    return result

 Executed result: -10
[EXP] 491: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    money_needed = 12 - 4
    daily_savings = 2
    days_needed = money_needed / daily_savings
    result = int(days_needed)
    return result

 Executed result: 4
[EXP] 492: [success_rate]: True, [answer]: 16, [output]: def solution():
    trays = 2
    eggs_per_tray = 24
    total_eggs = 64
    total_spaced = trays * eggs_per_tray
    eggs_left = total_eggs - total_spaced
    result = eggs_left
    return result

 Executed result: 16
[EXP] 493: [success_rate]: True, [answer]: 32, [output]: def solution():
    small_pizza_cost = 8
    family_pizza_cost = small_pizza_cost * 3
    total_cost = small_pizza_cost + family_pizza_cost
    result = total_cost
    return result

 Executed result: 32
[EXP] 494: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    razors_per_pack = 4
    cost_per_pack = 4.00
    discount = 1
    coupon = 2.00
    packs = 2

    cost_after_discount = (cost_per_pack * packs) - (coupon * discount)

    cost_per_razor = cost_after_discount / (razors_per_pack * packs)

    cost_in_cents = int(cost_per_razor * 100)

    result = cost_in_cents
    return result

 Executed result: 75
[EXP] 495: [success_rate]: False, [answer]: 21, [output]: def solution():
    height_cheerleaders = 64
    height_cheerleader = height_cheerleaders - 60
    height_bottom = height_cheerleader * 4
    height_middle = height_cheerleader * 3
    height_top = height_cheerleader
    height_pyramid = height_bottom + height_middle + height_top + 60
    human_pyramid_height_feet = height_pyramid / 12
    result = human_pyramid_height_feet
    return result

 Executed result: 7.666666666666667
[EXP] 496: [success_rate]: True, [answer]: 200, [output]: def solution():
    hours = 5
    minutes_walked_per_hour = 5
    minutes_walked_per_day = minutes_walked_per_hour * 8
    minutes_walked_total = minutes_walked_per_day * hours
    result = minutes_walked_total
    return result

 Executed result: 200
[EXP] 497: [success_rate]: True, [answer]: 38, [output]: def solution():
    age_of_brett = 14
    age_of_angel_in_4_years = age_of_brett * 3
    age_of_angel_now = age_of_angel_in_4_years - 4
    result = age_of_angel_now
    return result

 Executed result: 38
[EXP] 498: [success_rate]: False, [answer]: 112, [output]: def solution():
    morning_cost = 6
    afternoon_cost = 2
    num_days = 14
    morning_rides = 2 * num_days
    afternoon_rides = 2 * num_days
    total_morning_cost = morning_cost * morning_rides
    total_afternoon_cost = afternoon_cost * afternoon_rides
    total_cost = total_morning_cost + total_afternoon_cost
    result = total_cost
    return result

 Executed result: 224
[EXP] 499: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    oranges_brought_by_ashley = 5 * 10
    oranges_brought_by_brianne = oranges_brought_by_ashley + 20
    total_oranges = oranges_brought_by_ashley + oranges_brought_by_brianne
    oranges_per_pie = 3
    pies_made = total_oranges // oranges_per_pie
    result = pies_made
    return result

 Executed result: 40
[EXP] 500: [success_rate]: False, [answer]: 10, [output]: 
def solution():
    flat_fee = 200
    per_person_fee = 25
    food_per_person = 5
    break_even_point = (per_person_fee + food_per_person) / (1 - food_per_person / (per_person_fee + food_per_person))
    result = round(break_even_point)
    return result

 Executed result: 36
[EXP] 501: [success_rate]: False, [answer]: 16, [output]: 
def solution():
    total_insects = 43
    lily_insects = x
    david_insects = y
    bodhi_insects = z

    lily_insects = david_insects + 7
    david_insects = bodhi_insects / 2

    equations = [lily_insects, david_insects, bodhi_insects]
    for i, equation in enumerate(equations):
        equations[i] = equation - lily_insects + david_insects - bodhi_insects
    result = equations[0]
    return result

 Executed result: None
[EXP] 502: [success_rate]: True, [answer]: 273, [output]: def solution():
    yarn_yards_per_skein = 364
    mariah_yarn_used = 1/4
    grandma_yarn_used = 1/2
    total_yarn_used = mariah_yarn_used + grandma_yarn_used
    yards_used = total_yarn_used * yarn_yards_per_skein
    result = yards_used
    return result

 Executed result: 273.0
[EXP] 503: [success_rate]: True, [answer]: 26, [output]: 
def solution():
    gifts_for_2_friends = 2 * 5
    gifts_for_3_friends = 3 * 2
    gifts_standard = gifts_for_2_friends + gifts_for_3_friends
    total_gifts = gifts_standard + 10
    result = total_gifts
    return result

 Executed result: 26
[EXP] 504: [success_rate]: True, [answer]: 18, [output]: def solution():
    chair_width = 3
    rug_width = chair_width + 5
    rug_length = 2 * rug_width
    couch_length = rug_length + 2
    result = couch_length
    return result

 Executed result: 18
[EXP] 505: [success_rate]: True, [answer]: 2, [output]: def solution():
    total_cost = 7
    cost_of_grape = 2
    cost_of_green_apple = 2 * 0.5
    cost_of_strawberry = total_cost - (cost_of_grape + cost_of_green_apple)
    cost_of_one_pack_strawberry = cost_of_strawberry / 2
    result = cost_of_one_pack_strawberry
    return result

 Executed result: 2.0
[EXP] 506: [success_rate]: False, [answer]: 1,600, [output]: 
def solution():
    sticks_per_2x4 = 200
    sticks_per_2x8 = 400
    cost_2x4 = 4
    cost_2x8 = 6

    sticks_2x4_limit = 24 // cost_2x4
    sticks_2x8_limit = 24 // cost_2x8

    sticks_2x4_bought = min(sticks_2x4_limit, sticks_2x8_limit)
    sticks_2x8_bought = sticks_2x4_bought * sticks_per_2x8 // sticks_per_2x4

    sticks_total = sticks_2x4_bought * sticks_per_2x4 + sticks_2x8_bought
    result = sticks_total
    return result

 Executed result: 808
[EXP] 507: [success_rate]: False, [answer]: 144, [output]: def solution():
    dogs = 6
    dog_legs = 4
    legs_per_dog = dogs * dog_legs
    snowshoes_per_paw = 2
    legs_to_snowshoes = legs_per_dog * snowshoes_per_paw
    snowshoes_needed = legs_to_snowshoes
    cost_per_snowshoe = 12
    total_cost = snowshoes_needed * cost_per_snowshoe
    result = total_cost
    return result

 Executed result: 576
[EXP] 508: [success_rate]: True, [answer]: 2, [output]: def solution():
    bus_trips_per_week = 2
    bus_trip_cost = 2.20
    weekly_pass_cost = 20.00
    
    total_cost_without_pass = bus_trips_per_week * bus_trip_cost * 5
    weekly_savings = total_cost_without_pass - weekly_pass_cost
    
    result = weekly_savings
    return result

 Executed result: 2.0
[EXP] 509: [success_rate]: False, [answer]: 120, [output]: def solution():
    cows_farm = 30
    cows_zoo = 20 * 2
    sheep_zoo = 20
    sheep_farm = sheep_zoo / 2
    total_farm = cows_farm + sheep_farm
    total_zoo = cows_zoo + sheep_zoo
    total_animals = total_farm + total_zoo
    result = total_animals
    return result

 Executed result: 100.0
[EXP] 510: [success_rate]: True, [answer]: 4, [output]: def solution():
    rose_onions = 12
    rose_potatoes = 4
    total_rose = rose_onions + rose_potatoes
    rose_onions_and_potatoes_corrected = total_rose / 5  # 4 times more, so divide by 5
    result_onions = int(rose_onions_and_potatoes_corrected)
    result_potatoes = int(rose_onions_and_potatoes_corrected)
    result = result_onions
    return result

 Executed result: 3
[EXP] 511: [success_rate]: False, [answer]: 525, [output]: 
def solution():
    days_between = (7/31)*90  # Calculate the number of days until Andy's birthday
    total_calories_to_burn = 30 * 3500  # Calculate the total calories Andy needs to burn
    daily_calories_to_burn = total_calories_to_burn / days_between
    result = daily_calories_to_burn
    return result

 Executed result: 5166.666666666667
[EXP] 512: [success_rate]: False, [answer]: 110, [output]: 
def solution():
    daily_pay = 30
    weeks_worked = 1
    daily_expense = 100
    total_income = daily_pay * weeks_worked
    money_left = total_income - daily_expense
    result = money_left
    return result

 Executed result: -70
[EXP] 513: [success_rate]: True, [answer]: 120, [output]: def solution():
    distance_to_run = 0.25 * 8  # Total distance of 8 laps, each lap is 0.25 km
    water_needed_per_km = 60
    total_water_needed = distance_to_run * water_needed_per_km
    result = total_water_needed
    return result

 Executed result: 120.0
[EXP] 514: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    money_initial = 500
    money_spent_on_clothes = money_initial * 0.20
    money_left_after_clothes = money_initial - money_spent_on_clothes
    money_spent_on_cds = money_left_after_clothes * 0.25
    money_left_after_cds = money_left_after_clothes - money_spent_on_cds
    result = money_left_after_cds
    return result

 Executed result: 300.0
[EXP] 515: [success_rate]: False, [answer]: 90000, [output]: def solution():
    house_lot_cost = 120000
    house_cost = house_lot_cost * (3/2)
    result = house_cost
    return result

 Executed result: 180000.0
[EXP] 516: [success_rate]: False, [answer]: 160, [output]: def solution():
    packs = 8
    bags_per_pack = 5
    cost_per_pack = 4
    cost = packs * cost_per_pack
    revenue_per_bag = 8
    revenue = revenue_per_bag * bags_per_pack
    profit_per_bag = revenue - cost_per_pack
    total_profit = packs * bags_per_pack * profit_per_bag
    result = total_profit
    return result

 Executed result: 1440
[EXP] 517: [success_rate]: True, [answer]: 375, [output]: 
def solution():
    punches_per_minute = 25
    minutes_per_round = 3
    rounds = 5
    total_minutes = minutes_per_round * rounds
    total_punches = punches_per_minute * total_minutes
    result = total_punches
    return result

 Executed result: 375
[EXP] 518: [success_rate]: True, [answer]: 18, [output]: 
def solution():
    suzanne_cookies = 36
    josh_cookies = suzanne_cookies / 4
    kelsie_cookies = josh_cookies * 2
    result = kelsie_cookies
    return result

 Executed result: 18.0
[EXP] 519: [success_rate]: True, [answer]: 32, [output]: Python
def solution():
    bills_one_10 = 4
    bills_two_20 = 6
    total_money = bills_one_10 * 10 + bills_two_20 * 20
    money_given_to_sister = total_money // 2
    money_left = total_money - money_given_to_sister
    money_for_dinner = money_left * 3 // 5
    money_left_after_dinner = money_left - money_for_dinner
    result = money_left_after_dinner
    return result

 Executed result: 32
[EXP] 520: [success_rate]: False, [answer]: 280, [output]: def solution():
    rob_time = 60 * 2  # rob takes 2 hours, so 2 * 60 = 120 minutes
    royce_time = rob_time + 40
    result = royce_time
    return result

 Executed result: 160
[EXP] 521: [success_rate]: True, [answer]: 63, [output]: def solution():
    children = 3
    items_per_child = 5
    item_woolen_content = {'hat': 2, 'scarf': 4, 'sweater': 12, 'mittens': 1, 'socks': 2}
    total_skeins = 0
    for _ in range(children):
        for item in item_woolen_content:
            total_skeins += item_woolen_content[item]
    result = total_skeins
    return result

 Executed result: 63
[EXP] 522: [success_rate]: True, [answer]: 39, [output]: 
def solution():
    math_problems_total = 100
    math_problems_monday = 12
    math_problems_tuesday = math_problems_monday * 3
    math_problems_wednesday = (math_problems_total - math_problems_monday - math_problems_tuesday) // 4
    math_problems_left = math_problems_total - (math_problems_monday + math_problems_tuesday + math_problems_wednesday)
    result = math_problems_left
    return result

 Executed result: 39
[EXP] 523: [success_rate]: True, [answer]: 29, [output]: 
def solution():
    tony_quarts_per_hour = 6
    bobby_quarts_per_hour = tony_quarts_per_hour - 1
    kathy_quarts_per_hour = bobby_quarts_per_hour * 2
    ricky_quarts_per_hour = kathy_quarts_per_hour - 2
    total_quarts_per_hour = tony_quarts_per_hour + bobby_quarts_per_hour + kathy_quarts_per_hour + ricky_quarts_per_hour
    result = total_quarts_per_hour
    return result

 Executed result: 29
[EXP] 524: [success_rate]: True, [answer]: 74, [output]: 
def solution():
    loaves_initial = 200
    loaves_sold_morning = 93
    loaves_sold_afternoon = 39
    total_loaves_sold = loaves_sold_morning + loaves_sold_afternoon
    loaves_returned = 6
    loaves_left = loaves_initial - total_loaves_sold + loaves_returned
    result = loaves_left
    return result

 Executed result: 74
[EXP] 525: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    red_tulips = 36
    blue_tulips = 24
    red_tulips_per_row = 6
    blue_tulips_per_row = 8
    rows_with_red_tulips = red_tulips // red_tulips_per_row
    rows_with_blue_tulips = blue_tulips // blue_tulips_per_row
    total_rows = rows_with_red_tulips + rows_with_blue_tulips
    result = total_rows
    return result

 Executed result: 9
[EXP] 526: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    cups_initial = 27
    cups_per_batch = 3/4
    batches = cups_initial / cups_per_batch
    result = int(batches)
    return result

 Executed result: 36
[EXP] 527: [success_rate]: False, [answer]: 21, [output]: def solution():
    kwph_daily = 12
    device_ consumption = 2
    device_kwh = device_consumption * 24
    total_kwh = kwph_daily * 24 + device_kwh
    cost_per_kwh = 1.50
    weekly_cost = total_kwh * cost_per_kwh
    weekly_cost_before = kwph_daily * 24 * 7 * cost_per_kwh
    difference = weekly_cost_before - weekly_cost
    result = difference
    return result

 Executed result: None
[EXP] 528: [success_rate]: False, [answer]: 48, [output]: 
def solution():
    person_one_days = 5
    days_for_half_house = person_one_days * 2  # half a house takes twice as long
    person_one_hours_half_house = person_one_days * 24  # 24 hours a day
    person_one_hours_per_day = person_one_hours_half_house / days_for_half_house
    five_persons_hours_per_day = person_one_hours_per_day / 2  # half as much time for 5 people
    house_hours = 24 * 2  # whole house takes twice as long as half a house
    result = house_hours / five_persons_hours_per_day
    return result

 Executed result: 8.0
[EXP] 529: [success_rate]: False, [answer]: 172, [output]: 
def solution():
    ophelia_sofas = 20
    jenna_chairs = ophelia_sofas + 2
    ophelia_chairs = jenna_chairs // 3
    total_sofas = ophelia_sofas + (jenna_chairs - ophelia_chairs)
    result = total_sofas + ophelia_chairs + jenna_chairs
    return result

 Executed result: 64
[EXP] 530: [success_rate]: True, [answer]: 11, [output]: def solution():
    total_spent = 48
    cost_cds = 4
    cost_headphones = total_spent - cost_cds
    headsets_or_cds = cost_headphones / cost_cds
    result = headsets_or_cds
    return result

 Executed result: 11.0
[EXP] 531: [success_rate]: False, [answer]: 36, [output]: def solution():
    average_hours_per_week = 4
    total_hours = 0
    weeks = 8

    # hours in the two weeks when Josh spent 5 hours each
    total_hours += 2 * 5

    # extra hour in another week
    total_hours += 1

    # remaining weeks with 4 hours each
    total_hours += (weeks - 3) * average_hours_per_week

    result = total_hours
    return result

 Executed result: 31
[EXP] 532: [success_rate]: False, [answer]: 66, [output]: 
def solution():
    people_initial = 48
    people_off_at_first_stop = 8
    people_off_at_second_stop = 21
    people_on_at_first_stop = 8 * 5
    people_off_at_second_stop_total = people_off_at_second_stop + people_off_at_first_stop
    people_left = people_initial - people_off_at_first_stop + people_on_at_first_stop - people_off_at_second_stop_total
    result = people_left
    return result

 Executed result: 51
[EXP] 533: [success_rate]: False, [answer]: 25, [output]: def solution():
    tom_ages_after_5_years = 27
    tom_ages_after_8_years = tom_ages_after_5_years + 3  # every year = 3 years
    cousin_age_after_8_years = (2 * tom_ages_after_5_years) - 5
    difference_in_years = cousin_age_after_8_years - tom_ages_after_5_years
    result = difference_in_years
    return result

 Executed result: 22
[EXP] 534: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    computer_cost = 1100
    total_cost = 2400
    cost_paid_for_printer = computer_cost - 400
    cost_paid_for_monitors = total_cost - computer_cost - cost_paid_for_printer
    cost_per_monitor = cost_paid_for_monitors / 2
    result = cost_per_monitor
    return result

 Executed result: 300.0
[EXP] 535: [success_rate]: False, [answer]: 300, [output]: 
def solution():
    total_kids = 20
    shells_per_boy = 60
    shells_per-girl = shells_per_boy + (shells_per_boy * 4)
    shells_per_group = total_kids / 2
    girls_in_group = shells_per_group
    shells_per_girl = shells_per-girl / girls_in_group
    result = shells_per_girl
    return result

 Executed result: None
[EXP] 536: [success_rate]: True, [answer]: 16, [output]: def solution():
    george_candies_initial = 3 + 5
    nick_candies_initial = george_candies_initial * 2
    george_candies_after_eating = 3
    nick_candies_after = nick_candies_initial
    result = nick_candies_after
    return result

 Executed result: 16
[EXP] 537: [success_rate]: True, [answer]: 8, [output]: def solution():
    chenny_age = 10
    alyana_age = chenny_age - 4
    anne_age = alyana_age + 2
    result = anne_age
    return result

 Executed result: 8
[EXP] 538: [success_rate]: True, [answer]: 188, [output]: def solution():
    book1_thick = 31
    book2_thick = 50
    book3_thick = book2_thick - 5
    book4_thick = book1_thick * 2
    total_thick = book1_thick + book2_thick + book3_thick + book4_thick
    result = total_thick
    return result

 Executed result: 188
[EXP] 539: [success_rate]: False, [answer]: 18, [output]: 
def solution():
    vlogs UPLOAD = 72
    vlogs_uploaded = 18 + 21 + 15
    vlogs_left = vlogs_UPLOAD - vlogs_uploaded
    result = vlogs_left
    return result

 Executed result: None
[EXP] 540: [success_rate]: False, [answer]: 35, [output]: def solution():
    dinner_bill = 50
    additional_tip = (dinner_bill * 0.20)
    total_bill = dinner_bill + additional_tip
    continue_reading = 1
    result = total_bill
    return result

 Executed result: 60.0
[EXP] 541: [success_rate]: True, [answer]: 39, [output]: 
def solution():
    initial_amount = 18
    number_of_boys = 3
    initial_shares = initial_amount / number_of_boys
    eldest_boy = initial_shares + 5
    eldest_boy += 10
    eldest_boy -= 8
    eldest_boy *= 3
    result = eldest_boy
    return result

 Executed result: 39.0
[EXP] 542: [success_rate]: False, [answer]: 50, [output]: def solution():
    target = 1125
    first_half_days = 15
    first_half_savings = target / (first_half_days * 2)
    second_half_days = 15
    second_half_savings = target - (first_half_days * first_half_savings)
    second_half_savings_per_day = second_half_savings / second_half_days
    result = second_half_savings_per_day
    return result

 Executed result: 37.5
[EXP] 543: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    apples = 3
    orange = 5
    peaches = 6
    apples_cost = apples * 1.50
    orange_cost = orange * 0.80
    peaches_cost = peaches * 0.75
    total_cost = apples_cost + orange_cost + peaches_cost
    money_given = 20
    change = money_given - total_cost
    result = change
    return result

 Executed result: 7.0
[EXP] 544: [success_rate]: True, [answer]: 6, [output]: def solution():
    jairus_tasks = 20
    jairus_per_task = 0.8
    jairus_earnings = jairus_tasks * jairus_per_task
    jenny_tasks = 20
    jenny_per_task = 0.5
    jenny_earnings = jenny_tasks * jenny_per_task
    jairus_gain = jairus_earnings - jenny_earnings
    result = jairus_gain
    return result

 Executed result: 6.0
[EXP] 545: [success_rate]: True, [answer]: 80, [output]: def solution():
    total_money = 100
    brad_gets = total_money / (1 + 4)
    jeff_gets = total_money - brad_gets
    result = jeff_gets
    return result

 Executed result: 80.0
[EXP] 546: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    miles_per_trip = 2 * 3
    trips_per_week = 5
    miles_walked_per_week = miles_per_trip * trips_per_week
    result = miles_walked_per_week
    return result

 Executed result: 30
[EXP] 547: [success_rate]: False, [answer]: 130, [output]: def solution():
    letters_written_initially = 26  # full alphabet
    letters_written_first_time = 2 * letters_written_initially
    letters_written_second_time = letters_written_initially // 2
    letters_written_third_time = letters_written_written_initially
    total_letters_written = letters_written_initially + letters_written_first_time + letters_written_second_time + letters_written_third_time
    result = total_letters_written
    return result

 Executed result: None
[EXP] 548: [success_rate]: True, [answer]: 81, [output]: 
def solution():
    families_called = 3
    for i in range(3):
        families_called *= 3
    result = families_called
    return result

 Executed result: 81
[EXP] 549: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    weight_final = 70
    weight_loss_per_month = 10
    months_ill = 3
    weight_lost = weight_loss_per_month * months_ill
    weight_initial = weight_final + weight_lost
    result = weight_initial
    return result

 Executed result: 100
[EXP] 550: [success_rate]: False, [answer]: 398, [output]: def solution():
    james_toys = 80
    playset_size = 1
    sorted_playset_size = playset_size * 5
    required_toys = sorted_playset_size * 2
    jonathan_toys = required_toys - 2
    result = jonathan_toys
    return result

 Executed result: 8
[EXP] 551: [success_rate]: True, [answer]: 27, [output]: def solution():
    notebook_price = 1.50
    pen_price = 0.25
    calculator_price = 12
    geometry_set_price = 10
    notebooks_goal = 5
    pens_goal = 2
    calculator_goal = 1
    geometry_goal = 1
    
    total_price_without_discount = (notebooks_goal * notebook_price) + (pens_goal * pen_price) + (calculator_goal * calculator_price) + (geometry_goal * geometry_set_price)
    
    discount = total_price_without_discount * 0.1
    total_price_with_discount = total_price_without_discount - discount
    
    result = round(total_price_with_discount, 2)
    return result

 Executed result: 27.0
[EXP] 552: [success_rate]: True, [answer]: 17, [output]: def solution():
    amount_paid = 50
    hamburger_cost = 5 * 4
    fries_cost = 10 * 0.30
    drinks_cost = 5 * 2
    total_cost = hamburger_cost + fries_cost + drinks_cost
    change = amount_paid - total_cost
    result = change
    return result

 Executed result: 17.0
[EXP] 553: [success_rate]: False, [answer]: 450, [output]: def solution():
    sales = 2500
    commission_if_sales_less_than_1000 = 0.30
    additional_commission_if_sales_over_1000 = 0.10
    commission = 0
    if sales < 1000:
        commission = sales * commission_if_sales_less_than_1000
    elif sales > 1000:
        commission = sales * commission_if_sales_less_than_1000
        commission += (sales - 1000) * additional_commission_if_sales_over_1000
    result = sales - commission
    return result

 Executed result: 1600.0
[EXP] 554: [success_rate]: True, [answer]: 92, [output]: def solution():
    water_bottles_initial = 2 * 24
    guests = 70
    bottles_needed_per_guest = 2
    total_bottles_needed = guests * bottles_needed_per_guest
    additional_bottles_needed = total_bottles_needed - water_bottles_initial
    result = additional_bottles_needed
    return result

 Executed result: 92
[EXP] 555: [success_rate]: True, [answer]: 54, [output]: def solution():
    cold_time = 16
    warm_time = cold_time * 2 + 2
    difference = warm_time - cold_time
    time_cold_3miles = 3 * cold_time
    time_warm_3miles = 3 * warm_time
    result = time_warm_3miles - time_cold_3miles
    return result

 Executed result: 54
[EXP] 556: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    hourly_wage = 2
    hours_worked_per_day = 5
    days_per_week = 4
    weeks_needed = 0
    total_money_saved = 0
    while total_money_saved < 80:
        total_money_saved += (hourly_wage * hours_worked_per_day * days_per_week)
        weeks_needed += 1
    result = weeks_needed
    return result

 Executed result: 2
[EXP] 557: [success_rate]: True, [answer]: 160, [output]: def solution():
    fish_sub_cost = 40
    cold_cut_sub_cost = fish_sub_cost * 3
    total_cost = fish_sub_cost + cold_cut_sub_cost
    return total_cost

 Executed result: 160
[EXP] 558: [success_rate]: True, [answer]: 70, [output]: def solution():
    buttons_initial = 21
    buttons_two_holes = 7
    buttons_four_holes = buttons_initial - buttons_two_holes
    holes_two_holes = buttons_two_holes * 2
    holes_four_holes = buttons_four_holes * 4
    total_holes = holes_two_holes + holes_four_holes
    result = total_holes
    return result

 Executed result: 70
[EXP] 559: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    tim_locker = 24
    zack_locker = tim_locker / 2
    peter_locker = zack_locker / 4
    result = peter_locker
    return result

 Executed result: 3.0
[EXP] 560: [success_rate]: False, [answer]: 16, [output]: def solution():
    octavia_coffee = 1  # Octavia drinks half the recommended cups
    juaan_coffee = octavia_coffee * 10  # Juan drinks 10 times as much as Octavia
    reduction_needed = juaan_coffee - 4  # Juan's doctor recommends 4 cups
    result = reduction_needed
    return result

 Executed result: 6
[EXP] 561: [success_rate]: False, [answer]: 45, [output]: def solution():
    cages_hamsters = 3
    hamsters_per_cage = 10
    total_hamsters = cages_hamsters * hamsters_per_cage
    cages_guinea_pigs = 3
    guinea_pigs_per_cage = 5
    total_guinea_pigs = cages_guinea_pigs * guinea_pigs_per_cage
    total rodents = total_hamsters + total_guinea_pigs
    result = total_rodents
    return result

 Executed result: None
[EXP] 562: [success_rate]: True, [answer]: 180, [output]: def solution():
    mark_weight = 150
    susan_weight = mark_weight - 20
    bob_weight = susan_weight * 2
    total_weight = mark_weight + susan_weight + bob_weight
    average_weight = total_weight / 3
    result = average_weight
    return result

 Executed result: 180.0
[EXP] 563: [success_rate]: True, [answer]: 82, [output]: 
def solution():
    angle_pyramid = 32
    angle_sun = 5
    hours = 10
    total_angle_sun = hours * angle_sun
    total_angle = angle_pyramid + total_angle_sun
    result = total_angle
    return result

 Executed result: 82
[EXP] 564: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    son1_age = 12
    son2_age = 12 - 4
    total_candles = son1_age + son2_age
    total_candles_five = (total_candles // 5) + 1
    price_per_five_candles = 3
    final_price = total_candles_five * price_per_five_candles
    result = final_price
    return result

 Executed result: 15
[EXP] 565: [success_rate]: True, [answer]: 240, [output]: def solution():
    reading_minutes_first_week = 7
    reading_minutes_per_night = 15
    total_minutes_first_week = reading_minutes_first_week * reading_minutes_per_night

    pages_per_1_5_minutes = 2
    reading_speed = pages_per_1_5_minutes / 1.5
    pages_read_per_minutes = reading_speed

    total_pages_first_week = total_minutes_first_week * pages_read_per_minutes
    total_pages_second_week = 100
    total_pages_two_weeks = total_pages_first_week + total_pages_second_week

    result = total_pages_two_weeks
    return result

 Executed result: 240.0
[EXP] 566: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    sandwiches_initial = 12
    cody_sandwiches = sandwiches_initial * 1/3
    trevor_sandwiches = sandwiches_initial * 1/4
    sandwiches_eaten = cody_sandwiches + trevor_sandwiches
    sandwiches_left = sandwiches_initial - sandwiches_eaten
    result = sandwiches_left
    return result

 Executed result: 5.0
[EXP] 567: [success_rate]: False, [answer]: 10, [output]: 
def solution():
    age_of_shiloh = 44
    increase_in_age = 7
    age_of_shiloh_in_future = age_of_shiloh + increase_in_age
    shiloh_age_in_future = age_of_shiloh_in_future * 3
    nephew_age = shiloh_age_in_future - age_of_shiloh_in_future
    result = age_of_shiloh - nephew_age
    return result

 Executed result: -58
[EXP] 568: [success_rate]: True, [answer]: 9, [output]: def solution():
    cash_first_tooth = 5
    cash_per_tooth_next = 1
    cash_per_tooth_last = cash_per_tooth_next * 0.5
    total_cashes = cash_first_tooth
    total_cashes += cash_per_tooth_next * 3
    total_cashes += cash_per_tooth_last * 2
    result = total_cashes
    return result

 Executed result: 9.0
[EXP] 569: [success_rate]: False, [answer]: 175, [output]: 
def solution():
    richie_goals = 80
    richie_goals_more_than_mark = 20
    goals_makes = richie_goals - richie_goals_more_than_mark
    anna_goals = goals_makes - 45
    mark_goals = goals_makes
    total_goals = anna_goals + mark_goals + richie_goals
    result = total_goals
    return result

 Executed result: 155
[EXP] 570: [success_rate]: True, [answer]: 21, [output]: def solution():
    liam_money = 63
    mitchell_lemonades = 21
    mitchell_price = 4
    mitchell_money = mitchell_lemonades * mitchell_price
    mitchell_minus_liam = mitchell_money - liam_money
    result = mitchell_minus_liam
    return result

 Executed result: 21
[EXP] 571: [success_rate]: False, [answer]: 23, [output]: 
def solution():
    peter_money = 70
    days = 7
    days_spent = 4
    wooden_action_figure_cost = 5
    plastic_action_figure_cost = 2
    
    money_spent_on_wooden = wooden_action_figure_cost * days_spent
    money_spent_on_plastic = (peter_money - money_spent_on_wooden) // (days - days_spent) * (peter_money - money_spent_on_wooden) % (days - days_spent)

    days_for_wooden = days_spent
    days_for_plastic = days - days_spent
    
    wooden_action_figures = money_spent_on_wooden // wooden_action_figure_cost
    plastic_action_figures = money_spent_on_plastic // plastic_action_figure_cost
    
    result = wooden_action_figures + plastic_action_figures
    return result

 Executed result: 5
[EXP] 572: [success_rate]: True, [answer]: 308, [output]: def solution():
    spaying_cost = 200
    vaccine_cost = 3 * 20
    vase_cost = 4 * 12
    total_cost = spaying_cost + vaccine_cost + vase_cost
    result = total_cost
    return result

 Executed result: 308
[EXP] 573: [success_rate]: False, [answer]: 100, [output]: def solution():
    roses_per_week = 40
    shop1 roses = 20
    shop2_roses = 15
    shop3_roses = 30
    total_roses_orderd_per_week = shop1_roses + shop2_roses + shop3_roses
    roses_lacked_per_week = total_roses_orderd_per_week - roses_per_week
    roses_lacked_per_month = 4 * roses_lacked_per_week
    result = roses_lacked_per_month
    return result

 Executed result: None
[EXP] 574: [success_rate]: True, [answer]: 600, [output]: def solution():
    money_initial = 3000
    monthly_withdrawal = 100
    num_months = 24  # 2 years * 12 months/year
    money_withdrawn = monthly_withdrawal * num_months
    money_left = money_initial - money_withdrawn
    result = money_left
    return result

 Executed result: 600
[EXP] 575: [success_rate]: True, [answer]: 37, [output]: 
def solution():
    bread_cost = 3
    bread_per_sandwich = 10
    cheese_cost = 30
    sandwiches_sold = 10
    sandwiches_per_sandwich = 1
    revenue = sandwiches_sold * sandwiches_per_sandwich * 7
    bread_cost_per_sandwich = bread_cost / bread_per_sandwich
    cheese_cost_per_sandwich = cheese_cost / sandwiches_sold
    total_cost_per_sandwich = bread_cost_per_sandwich + cheese_cost_per_sandwich
    total_cost = total_cost_per_sandwich * sandwiches_sold
    profit = revenue - total_cost
    result = profit
    return result

 Executed result: 37.0
[EXP] 576: [success_rate]: True, [answer]: 36, [output]: 
def solution():
    crayons_per_box = 64
    boxes = 3
    total_crayons = crayons_per_box * boxes
    crayon_pieces_per_muffin = 8
    total_muffins = total_crayons // crayon_pieces_per_muffin
    price_per_muffin = 1.5
    total_money = total_muffins * price_per_muffin
    result = total_money
    return result

 Executed result: 36.0
[EXP] 577: [success_rate]: True, [answer]: 11232, [output]: def solution():
    carpet_width = 18
    carpet_length = 12
    carpet_area = carpet_width * carpet_length
    carpet_cost_per_sqft = 12
    padding_cost_per_sqft = 2
    contractor_removal_cost_per_sqft = 4
    contractor_installation_cost_per_sqft = 34
    total_cost = (carpet_cost_per_sqft * carpet_area) + (padding_cost_per_sqft * carpet_area) + (contractor_removal_cost_per_sqft * carpet_area) + (contractor_installation_cost_per_sqft * carpet_area)
    result = total_cost
    return result

 Executed result: 11232
[EXP] 578: [success_rate]: False, [answer]: 40, [output]: 
def solution():
    days = [50, 0, 120, 50, 120, 20, 90]
    total_birds = sum(days)
    average_birds = total_birds / len(days)
    result = average_birds
    return result

 Executed result: 64.28571428571429
[EXP] 579: [success_rate]: True, [answer]: 48, [output]: 
def solution():
    start_value = 20
    half_of_start_value = start_value / 2
    result1 = (start_value + half_of_start_value) / 5
    final_value = result1 * (start_value - 12)
    result = final_value
    return result

 Executed result: 48.0
[EXP] 580: [success_rate]: True, [answer]: 7, [output]: def solution():
    cards_boy = 5
    cards_brother = cards_boy - 3
    total_cards = cards_boy + cards_brother
    result = total_cards
    return result

 Executed result: 7
[EXP] 581: [success_rate]: False, [answer]: 500, [output]: def solution():
    actual_temperature = 468
    desired_temperature = 520
    temperature_difference = actual_temperature - 450
    temperature_setting = 520 - temperature_difference
    result = temperature_setting
    return result

 Executed result: 502
[EXP] 582: [success_rate]: True, [answer]: 215, [output]: 
def solution():
    movie1_length = 1 * 60 + 30
    movie2_length = 2 * 60 + 5
    total_minutes = movie1_length + movie2_length
    result = total_minutes
    return result

 Executed result: 215
[EXP] 583: [success_rate]: True, [answer]: 129200, [output]: def solution():
    herbs_house = 76000
    johans_house = herbs_house * 0.7
    total_houses = johans_house + herbs_house
    result = total_houses
    return result

 Executed result: 129200.0
[EXP] 584: [success_rate]: False, [answer]: 120, [output]: def solution():
    cups slunsum = 12
    dishes slunsum = 2 * slunsum
    total_utensils_judy = slunsum + dishes slunsum
    friend_cups = 40
    friend_dishes = friend_cups + 20
    total_utensils = (total_utensils_judy + friend_cups + friend_dishes)
    result = total_utensils
    return result

 Executed result: None
[EXP] 585: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    contacts_per_box = 90
    days_contacts_last = 45
    days_in_a_month = 30
    months_needed = days_contacts_last / days_in_a_month
    boxes_needed = int(math.ceil(months_needed))
    total_contacts = boxes_needed * contacts_per_box
    price_per_box = 100 - (10 / 100 * 100)
    total_price = price_per_box * boxes_needed
    cost_per_contact = total_price / total_contacts
    cost_per_pair = cost_per_contact / 2
    result = cost_per_pair
    return result

 Executed result: None
[EXP] 586: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    hourly_wage = 10
    jill_hours_saturday = 2
    jill_hours_sunday = 1
    john_hours_saturday = jill_hours_saturday * 2
    john_hours_sunday = jill_hours_sunday * 3
    jill_total_hours = jill_hours_saturday + jill_hours_sunday
    john_total_hours = john_hours_saturday + john_hours_sunday
    jill_earnings = jill_total_hours * hourly_wage
    john_earnings = john_total_hours * hourly_wage
    difference = john_earnings - jill_earnings
    result = difference
    return result

 Executed result: 40
[EXP] 587: [success_rate]: True, [answer]: 800, [output]: 
def solution():
    calories_burned_aerobics = 500
    calories_burned_running = 600
    total_calories_burned = (2 * calories_burned_aerobics) + calories_burned_running
    ml_water_needed = total_calories_burned * 100 / 200
    result = ml_water_needed
    return result

 Executed result: 800.0
[EXP] 588: [success_rate]: False, [answer]: 30, [output]: def solution():
    total_jellybeans = 4500
    blue_jellybeans = total_jellybeans * (100 - 1) // 100
    green_jellybeans = total_jellybeans * 102 // 100
    red_jellybeans = blue_jellybeans - (blue_jellybeans - green_jellybeans) // 100
    difference = green_jellybeans - red_jellybeans
    result = difference
    return result

 Executed result: 133
[EXP] 589: [success_rate]: True, [answer]: 52, [output]: 
def solution():
    wpm_initial = 47
    wpm_next = 52
    wpm_next_increase = 5
    wpm_third = wpm_next + wpm_next_increase
    average = (wpm_initial + wpm_next + wpm_third) / 3
    result = average
    return result

 Executed result: 52.0
[EXP] 590: [success_rate]: False, [answer]: 15, [output]: def solution():
    pounds_lost_cheerios_per_week = 1.25
    pounds_gained_donuts_per_week = 1.75
    weight_difference_weekly = pounds_gained_donuts_per_week - pounds_lost_cheerios_per_week
    weight_difference_after_five_weeks = weight_difference_weekly * 5
    result = weight_difference_after_five_weeks
    return result

 Executed result: 2.5
[EXP] 591: [success_rate]: False, [answer]: 319, [output]: def solution():
    initial_vip = 100
    initial_friends = initial_vip * 2
    total_invited = initial_vip + initial_friends
    friends_called = 10
    spousecalling = 8 * 2
    total_guests = total_invited + friends_called + spousecalling
    result = total_guests
    return result

 Executed result: 326
[EXP] 592: [success_rate]: True, [answer]: 220, [output]: def solution():
    affenpinscher_weight = 10
    dachshund_weight = affenpinscher_weight * 2
    papillon_weight = dachshund_weight / 4
    mastiff_weight = papillon_weight * 44
    result = mastiff_weight
    return result

 Executed result: 220.0
[EXP] 593: [success_rate]: True, [answer]: 1, [output]: def solution():
    amazon_price = 16
    amazon_shipping = 4
    amazon_total = amazon_price + amazon_shipping

    ebay_price = 13
    ebay_shipping = 2 * 4
    ebay_total = ebay_price + ebay_shipping

    difference = ebay_total - amazon_total
    result = difference
    return result

 Executed result: 1
[EXP] 594: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    beanstalk_height = 4
    window_height = 20
    days = 0
    while beanstalk_height < window_height:
        beanstalk_height *= 2
        days += 1
    result = days
    return result

 Executed result: 3
[EXP] 595: [success_rate]: False, [answer]: 42, [output]: 
def solution():
    proteins_per_cup = 3
    mushrooms_per_day = 200
    mushrooms_per_week = 7 * mushrooms_per_day
    grams_of_mushrooms_per_week = 100 * mushrooms_per_week
    grams_of_protein_per_week = proteins_per_cup * grams_of_mushrooms_per_week / 100
    result = grams_of_protein_per_week
    return result

 Executed result: 4200.0
[EXP] 596: [success_rate]: False, [answer]: 13, [output]: def solution():
    age_five_years_ago = age_this_year - 5
    age_now = age_five_years_ago * 2
    age_three_years_later = age_now + 3
    result = age_three_years_later
    return result

 Executed result: None
[EXP] 597: [success_rate]: False, [answer]: 260, [output]: def solution():
    base_price_per_implant = 2000
    crown_price = 500
    deposit = 600
    total_cost = base_price_per_implant + crown_price
    total_cost -= deposit
    hourly wage = 15
    total_hours_to_work = total_cost / hourly wage
    result = total_hours_to_work
    return result

 Executed result: None
[EXP] 598: [success_rate]: False, [answer]: 90, [output]: def solution():
    smallest_angle = x  # this angle needs to be specified
    largest_angle = 3 * smallest_angle
    middle_angle = 2 * smallest_angle
    angle_sum = smallest_angle + middle_angle + largest_angle
    need_to_add = 180 - angle_sum
    smallest_angle += need_to_add
    result = largest_angle
    return result

 Executed result: None
[EXP] 599: [success_rate]: True, [answer]: 69, [output]: 
def solution():
    quarters = 8
    dimes = 6
    nickels = 14
    pennies = 15
    quarters_to_dollars = quarters * 0.25
    dimes_to_dollars = dimes * 0.1
    nickels_to_dollars = nickels * 0.05
    pennies_to_dollars = pennies * 0.01
    total_money = quarters_to_dollars + dimes_to_dollars + nickels_to_dollars + pennies_to_dollars
    gumball_cost = 0.05
    gumballs_games = int(total_money / gumball_cost)
    result = gumballs_games
    return result

 Executed result: 69
[EXP] 600: [success_rate]: True, [answer]: 48, [output]: 
def solution():
    dogs = 5
    cats = 2
    birds = 10
    dog_legs = dogs * 4
    cat_legs = cats * 4
    bird_legs = birds * 2
    legs_total = dog_legs + cat_legs + bird_legs
    result = legs_total
    return result

 Executed result: 48
[EXP] 601: [success_rate]: True, [answer]: 10, [output]: def solution():
    weight_initial = 8
    increase = 0.5
    weight_effective = weight_initial * (1 + increase)
    weight_after_reduction = weight_effective - 2
    result = weight_after_reduction
    return result

 Executed result: 10.0
[EXP] 602: [success_rate]: False, [answer]: 104, [output]: def solution():
    games_received_initial = 5
    games_bought_per_month_for_1yr = 1
    games_bought_per_month_for_2yr = 2
    games_bought_per_month_for_3yr = 4

    total_games_bought = 0

    for year in range(1, 4):
        if year == 1:
            total_games_bought += games_bought_per_month_for_1yr * 12 + 5
        elif year == 2:
            total_games_bought += (games_bought_per_month_for_1yr + games_bought_per_month_for_2yr) * 12 + 5
        else:
            total_games_bought += (games_bought_per_month_for_1yr + games_bought_per_month_for_2yr + games_bought_per_month_for_3yr) * 12 + 5

    total_games = games_received_initial + total_games_bought
    result = total_games
    return result

 Executed result: 152
[EXP] 603: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    distance = 1200
    hours = 3
    speed = distance / hours
    additional_distance = 2000
    additional_hours = additional_distance / speed
    result = additional_hours
    return result

 Executed result: 5.0
[EXP] 604: [success_rate]: False, [answer]: 1800, [output]: 
def solution():
    ruiz_make_in_half_hour = 120 / 2
    marissa_make_in_hour = ruiz_make_in_half_hour * 0.75
    ruiz_make_in_12_hours = ruiz_make_in_half_hour * 4
    marissa_make_in_12_hours = marissa_make_in_hour * 12
    total_make_in_12_hours = ruiz_make_in_12_hours + marissa_make_in_12_hours
    result = total_make_in_12_hours
    return result

 Executed result: 780.0
[EXP] 605: [success_rate]: True, [answer]: 12, [output]: python
def solution():
    money_initial = 100
    money_spent_monday = 8
    money_spent_tuesday = 2 * money_spent_monday
    money_spent_wednesday = 4 * money_spent_tuesday
    total_money_spent = money_spent_monday + money_spent_tuesday + money_spent_wednesday
    money_left = money_initial - total_money_spent
    result = money_left
    return result

 Executed result: 12
[EXP] 606: [success_rate]: False, [answer]: 42, [output]: def solution():
    lemonade_sold_per_hour_first_two_hours = 15
    lemonade_sold_per_hour_last_two_hours = 10
    price_per_cup = 0.50
    total_cups_sold_per_hour_first_two_hours = lemonade_sold_per_hour_first_two_hours * 2
    total_cups_sold_per_hour_last_two_hours = lemonade_sold_per_hour_last_two_hours * 2
    total_cups_sold = total_cups_sold_per_hour_first_two_hours + total_cups_sold_per_hour_last_two_hours
    total_cups_sold_price_per_cup1 = total_cups_sold * price_per_cup
    total_cups_sold_price_per_cup2 = total_cups_sold * (0.6)
    total_money_earned = total_cups_sold_price_per_cup1 + total_cups_sold_price_per_cup2
    result = total_money_earned
    return result

 Executed result: 55.0
[EXP] 607: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    miles_per_rotation = 2
    rotations_per_mile = 725
    total_rotations_per_month = miles_per_rotation * rotations_per_mile
    total_rotations_per_year = total_rotations_per_month * 12
    monthly_rotations = total_rotations_per_year / 12
    total_rotations = monthly_rotations * 400
    total_rotation_limit = 10440000
    months_to_rotation_limit = total_rotation_limit / monthly_rotations
    years_to_rotation_limit = months_to_rotation_limit / 12
    result = years_to_rotation_limit
    return result

 Executed result: 600.0
[EXP] 608: [success_rate]: False, [answer]: 10, [output]: def solution():
    cost_jumbo_bottle = 24.00
    washings_per_pump = 120 / 2
    cost_per_pump = cost_jumbo_bottle / (washings_per_pump * 2)
    cost_per_pump_cents = int(cost_per_pump * 100)
    return cost_per_pump_cents

 Executed result: 20
[EXP] 609: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    money_initial = 50
    shirt_price = 25
    shorts_price = 35
    total_cost = shirt_price + shorts_price
    discount = total_cost * 0.30
    cost_after_discount = total_cost - discount
    money_spent = cost_after_discount
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 8.0
[EXP] 610: [success_rate]: False, [answer]: 7, [output]: def solution():
    croissants_per_day = 4
    days = 7
    croissants_per_week = croissants_per_day * days
    butter_per_dozen = 1/4
    total_butter_needed = croissants_per_week / 12 * butter_per_dozen
    result = total_butter_needed
    return result

 Executed result: 0.5833333333333334
[EXP] 611: [success_rate]: False, [answer]: 65,960, [output]: def solution():
    length_monica_street = 150
    length_lewis_street = 490
    meters_monica = length_monica_street
    meters_lewis = length_lewis_street
    cost_monica = meters_monica * 194
    cost_lewis = meters_lewis * 194
    cost_diff = cost_lewis - cost_monica
    result = cost_diff
    return result

 Executed result: 65960
[EXP] 612: [success_rate]: False, [answer]: 1,450,000, [output]: 
def solution():
    initial_funding = 100000
    initial_months = 5
    increase_percentage = 0.50
    total_months = 10 * initial_months
    total_funding = 0
    
    for month in range(initial_months, total_months):
        if month < initial_months:
            funding_needed = initial_funding
        else:
            funding_needed = initial_funding * (1 + increase_percentage)
        total_funding += funding_needed
    
    result = total_funding
    return result

 Executed result: 6750000.0
[EXP] 613: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    player1_meat = 6
    player2_meat = 8
    player3_meat = 16  # 1 pound is 16 ounces
    meat_total = player1_meat + player2_meat + player3_meat
    result = meat_total
    return result

 Executed result: 30
[EXP] 614: [success_rate]: True, [answer]: 93000, [output]: def solution():
    members = 1000
    posts_per_member_per_day = 3
    total_posts_per_day = members * posts_per_member_per_day
    days_in_march = 31  # Assuming March has 31 days
    total_posts_in_march = total_posts_per_day * days_in_march
    result = total_posts_in_march
    return result

 Executed result: 93000
[EXP] 615: [success_rate]: True, [answer]: 312, [output]: 
def solution():
    loads_of_laundry_per_week = 2
    gallons_per_load = 20
    water_price = 0.15
    water_cost_per_load = gallons_per_load * water_price
    loads_per_year = loads_of_laundry_per_week * 52  # 52 weeks in a year
    total_water_cost = loads_per_year * water_cost_per_load
    result = total_water_cost
    return result

 Executed result: 312.0
[EXP] 616: [success_rate]: True, [answer]: 33, [output]: def solution():
    aquarium_cost = 10.00
    bag_of_rocks_cost = 2.50
    rocks_num = 2
    coral_cost = 2.00
    coral_num = 3
    fish_cost = 0.50
    fish_num = 20
    fish_food_cost = 2.00
    total_cost = aquarium_cost + (bag_of_rocks_cost * rocks_num) + (coral_cost * coral_num) + (fish_cost * fish_num) + fish_food_cost
    result = total_cost
    return result

 Executed result: 33.0
[EXP] 617: [success_rate]: True, [answer]: 10, [output]: def solution():
    beanstalk_height_after_first_week = 3
    beanstalk_height_doubled = beanstalk_height_after_first_week * 2
    beanstalk_height_after_second_week = beanstalk_height_doubled
    beanstalk_height_grew_4_inches = beanstalk_height_after_second_week + 4
    result = beanstalk_height_grew_4_inches
    return result

 Executed result: 10
[EXP] 618: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    weight_of_bull = 750
    meat_sold_per_hour = 15
    hours_worked_per_day = 10
    meat_sold_per_day = meat_sold_per_hour * hours_worked_per_day

    days_required = weight_of_bull / meat_sold_per_day
    result = days_required
    return result

 Executed result: 5.0
[EXP] 619: [success_rate]: True, [answer]: 36, [output]: def solution():
    no_of_rows = 4
    no_of_seats_per_row = 18
    total_seats = no_of_rows * no_of_seats_per_row
    seats_occupied_by_admin = total_seats // 4
    remaining_seats = total_seats - seats_occupied_by_admin
    seats_occupied_by_parents = remaining_seats // 3
    remaining_seats_after_parents = remaining_seats - seats_occupied_by_parents
    students_seats = remaining_seats_after_parents
    result = students_seats
    return result

 Executed result: 36
[EXP] 620: [success_rate]: True, [answer]: 76, [output]: def solution():
    poles_per_intersection = 6
    number_of_poles = poles_per_intersection * 4
    total_streetlights = number_of_poles * 4
    streetlights_not_working = 20
    total_functioning_streetlights = total_streetlights - streetlights_not_working
    result = total_functioning_streetlights
    return result

 Executed result: 76
[EXP] 621: [success_rate]: True, [answer]: 1509, [output]: def solution():
    dvd1_plays = 1000 - 356
    dvd2_plays = 1000 - 135
    total_plays = dvd1_plays + dvd2_plays
    result = total_plays
    return result

 Executed result: 1509
[EXP] 622: [success_rate]: False, [answer]: 3000, [output]: def solution():
    weeks = 6
    hours_per_week = 2
    hours_total = weeks * hours_per_week
    cost_per_hour = 125
    total_cost = hours_total * cost_per_hour
    result = total_cost
    return result

 Executed result: 1500
[EXP] 623: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    gum_initial = 20
    gum_consumed_at_school = 8 // 2
    # Here, we use integer division (//) to find the number of pieces consumed at school
    gum_consumed_at_home = 2
    gum_gived_sister = (gum_initial - gum_consumed_at_school - gum_consumed_at_home) // 2
    result = gum_initial - (gum_consumed_at_school + gum_consumed_at_home + gum_gived_sister)
    return result

 Executed result: 7
[EXP] 624: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    age_in_twelve_years = 16
    age_now = age_in_twelve_years - 12
    age_in_four_years = age_now + 4
    result = age_in_four_years
    return result

 Executed result: 8
[EXP] 625: [success_rate]: True, [answer]: 85, [output]: 
def solution():
    baseball_coach_coach_cost = 9 * 3
    basketball_coach_cost = 8 * 14
    difference_in_cost = basketball_coach_cost - baseball_coach_coach_cost
    result = difference_in_cost
    return result

 Executed result: 85
[EXP] 626: [success_rate]: True, [answer]: 160, [output]: def solution():
    flowers_initial = 10
    flowers_per_row = 20
    total_flowers = flowers_initial * flowers_per_row
    flowers_bloomed = total_flowers * 4 / 5
    result = flowers_bloomed
    return result

 Executed result: 160.0
[EXP] 627: [success_rate]: False, [answer]: 72, [output]: def solution():
    internet_speed_kb = 20
    mb_per_kb = 1/1000
    hours_in_an_hour = 1
    internet_speed_mb_per_hour = internet_speed_kb * mb_per_kb * hours_in_an_hour
    result = internet_speed_mb_per_hour
    return result

 Executed result: 0.02
[EXP] 628: [success_rate]: True, [answer]: 54, [output]: 
def solution():
    cars_per_day = 10
    days_for_three = 3
    cars_for_first_three_days = cars_per_day * days_for_three
    cars_per_day_after = cars_per_day - 4
    days_after = 4  # remaining days
    cars_for_remaining_days = days_after * cars_per_day_after
    total_cars = cars_for_first_three_days + cars_for_remaining_days
    result = total_cars
    return result

 Executed result: 54
[EXP] 629: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    adam_height_initial = 40
    required_height = 4 * 12  # converted feet to inches
    increase_height = 2
    years = 0
    while adam_height_initial < required_height:
        adam_height_initial += increase_height
        years += 1
    result = years
    return result

 Executed result: 4
[EXP] 630: [success_rate]: False, [answer]: 17500, [output]: def solution():
    cars_sold = 10
    car_price = 25000
    profit_per_car = car_price - (car_price * 0.3)
    total_profit = cars_sold * profit_per_car
    commission = total_profit * 0.1
    result = total_profit + commission
    return result

 Executed result: 192500.0
[EXP] 631: [success_rate]: True, [answer]: 10, [output]: def solution():
    num_riders = 100
    wave_height = 30
    percentage_riders = 0.25
    percentage_women = 0.60

    riders_upright = num_riders * percentage_riders
    women_upright = riders_upright * percentage_women

    men_upright = riders_upright - women_upright

    result = men_upright
    return result

 Executed result: 10.0
[EXP] 632: [success_rate]: True, [answer]: 4800, [output]: def solution():
    diamond_price = 2000
    gold_price = diamond_price * 4 / 5
    silver_price = gold_price - 400
    total_price = diamond_price + gold_price + silver_price
    result = total_price
    return result

 Executed result: 4800.0
[EXP] 633: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    snowflake_stamps = 16
    truck_stamps = snowflake_stamps + 3
    rose_stamps = truck_stamps - 9
    total_stamps = snowflake_stamps + truck_stamps + rose_stamps
    result = total_stamps
    return result

 Executed result: 45
[EXP] 634: [success_rate]: True, [answer]: 5, [output]: def solution():
    distance_behind = 75
    speed_tom = 70
    speed_bob = 55
    time_to_catch = distance_behind / (speed_tom - speed_bob)
    result = time_to_catch
    return result

 Executed result: 5.0
[EXP] 635: [success_rate]: True, [answer]: 14, [output]: def solution():
    naomi_fish = 17
    darren_fish = naomi_fish - 6
    tommy_fish = darren_fish + 3
    result = tommy_fish
    return result

 Executed result: 14
[EXP] 636: [success_rate]: False, [answer]: 4, [output]: def solution():
    total_classes = 10
    per_class_cost = 60 / total_classes
    if per_class_cost <= 10:
        result = 0
    else:
        cost_change = per_class_cost - 10
        result = int(cost_change)
    return result

 Executed result: 0
[EXP] 637: [success_rate]: True, [answer]: 1050, [output]: def solution():
    jewel_customers_per_day = 50
    julie_customers_per_day = jewel_customers_per_day * 2
    
    total_customers_per_day = jewel_customers_per_day + julie_customers_per_day
    
    customers_per_week = total_customers_per_day * 7
    
    result = customers_per_week
    return result

 Executed result: 1050
[EXP] 638: [success_rate]: True, [answer]: 17, [output]: 
def solution():
    paisley_miles = 4
    reggie_miles = paisley_miles * 5
    lynn_miles = reggie_miles - 3
    result = lynn_miles
    return result

 Executed result: 17
[EXP] 639: [success_rate]: False, [answer]: 12, [output]: def solution():
    return total_cost

 Executed result: None
[EXP] 640: [success_rate]: True, [answer]: 216, [output]: 
def solution():
    length = 6
    width = 4
    depth = 3
    volume = length * width * depth
    time_needed = volume * 3
    result = time_needed
    return result

 Executed result: 216
[EXP] 641: [success_rate]: False, [answer]: 43,500, [output]: def solution():
    base_price = 30000
    king_cab = 7500
    leather_seats = king_cab / 3
    running_boards = leather_seats - 500
    exterior_light_package = 1500
    total_cost = base_price + king_cab + leather_seats + running_boards + exterior_light_package
    result = total_cost
    return result

 Executed result: 43500.0
[EXP] 642: [success_rate]: False, [answer]: 262500, [output]: def solution():
    salary = 20000
    raise_percentage = 0.05
    raise_amount = salary * raise_percentage
    raise_salary = salary + raise_amount
    bonus = raise_salary / 2
    total_salary = raise_salary + bonus
    annual_salary = total_salary * 12
    result = annual_salary
    return result

 Executed result: 378000.0
[EXP] 643: [success_rate]: False, [answer]: 10,800, [output]: def solution():
    suits = 10
    pants = 10
    shirts = suits * 3
    suit_cost = 750
    pants_cost = suit_cost / 5
    shirt_cost = 60
    total_cost = (suits * suit_cost) + (pants * pants_cost) + (shirts * shirt_cost)
    result = total_cost
    return result

 Executed result: 10800.0
[EXP] 644: [success_rate]: True, [answer]: 840, [output]: def solution():
    news_articles_per_day = 20 + 10
    days_in_february = 28
    total_articles_in_february = news_articles_per_day * days_in_february
    result = total_articles_in_february
    return result

 Executed result: 840
[EXP] 645: [success_rate]: True, [answer]: 29, [output]: def solution():
    steve_age = 60
    wife_age = steve_age + 4
    mom_age = wife_age
    son_age = mom_age / 2
    son_wife_age = son_age - 3
    result = son_wife_age
    return result

 Executed result: 29.0
[EXP] 646: [success_rate]: False, [answer]: 48, [output]: def solution():
    portions_per_bag = 8
    portions_per_2kg = 2
    flour_per_portion = 2
    flour_per_bag = portions_per_portion * flour_per_portion
    flour_in_one_bag = flour_per_bag * portions_per_2kg
    flour_in_three_bags = 3 * flour_in_one_bag
    result = flour_in_three_bags
    return result

 Executed result: None
[EXP] 647: [success_rate]: True, [answer]: 79, [output]: def solution():
    speed_alisa = 12
    time_alisa = 4.5
    distance_alisa = speed_alisa * time_alisa
    speed_stanley = 10
    time_stanley = 2.5
    distance_stanley = speed_stanley * time_stanley
    total_distance = distance_alisa + distance_stanley
    result = total_distance
    return result

 Executed result: 79.0
[EXP] 648: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    feet_of_soil = 24
    feet_of_clay = 8
    feet_total = feet_of_soil + feet_of_clay
    rate_of_soil = 4
    rate_of_clay = 2
    time_soil = feet_of_soil / rate_of_soil
    time_clay = feet_of_clay / rate_of_clay
    time_total = time_soil + time_clay
    result = time_total
    return result

 Executed result: 10.0
[EXP] 649: [success_rate]: False, [answer]: 54, [output]: def solution():
    classmates = 25
    howie_teacher = 2
    everyone_else = 2
    total_cupcakes = classmates + howie_teacher + 1
    total_cupcakes_per_person = 2
    total_cupcakes_needed = total_cupcakes * total_cupcakes_per_person
    result = total_cupcakes_needed
    return result

 Executed result: 56
[EXP] 650: [success_rate]: False, [answer]: 162000, [output]: def solution():
    likes_initial = 2000
    increase_of_likes = (likes_initial * 70) + 20000
    result = increase_of_likes
    return result

 Executed result: 160000
[EXP] 651: [success_rate]: False, [answer]: 142, [output]: def solution():
    pomegranates_bought = 20
    pomegranate_price_initial = 20
    pomegranate_price_discounted = 30
    discount = 10
    pomegranate_price_discount = pomegranate_price_initial * (1 - discount / 100)
    cost_initial = pomegranates_bought * pomegranate_price_initial
    voucher = 2
    cost_discounted = (pomegranates_bought * pomegranate_price_discount) - ((pomegranates_bought * pomegranate_price_discount) * discount / 100)
    cost_discounted = cost_discounted - voucher
    cost_difference = cost_initial - cost_discounted
    result = cost_difference
    return result

 Executed result: 78.0
[EXP] 652: [success_rate]: True, [answer]: 2100, [output]: 
def solution():
    first_month_red_sales = 400
    first_month_green_sales = 2 * first_month_red_sales
    total_first_month = first_month_red_sales + first_month_green_sales

    second_month_red_sales = first_month_red_sales * 3 / 4
    second_month_green_sales = first_month_green_sales * 3 / 4
    second_month_total = second_month_red_sales + second_month_green_sales

    total_amount_two_months = total_first_month + second_month_total

    result = total_amount_two_months
    return result

 Executed result: 2100.0
[EXP] 653: [success_rate]: True, [answer]: 75, [output]: 
def solution():
    hours_used = 9 - 5 - 1  # 9 PM - 5 PM - 1 free hour = hours used
    first_hour_cost = 15
    subsequent_hour_cost = 2 * first_hour_cost
    total_cost = (first_hour_cost if hours_used == 1 else first_hour_cost + (hours_used - 1) * subsequent_hour_cost)
    result = total_cost
    return result

 Executed result: 75
[EXP] 654: [success_rate]: True, [answer]: 80, [output]: def solution():
    bank_account_initial = 200
    bank_account_after = 420
    difference = bank_account_after - bank_account_initial
    wage_withheld = 300 - difference
    result = wage_withheld
    return result

 Executed result: 80
[EXP] 655: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    guests = 16
    deviled_eggs_per_guest = 3
    deviled_eggs_total = guests * deviled_eggs_per_guest
    eggs_per_deviled_egg = 1
    eggs_total = deviled_eggs_total * eggs_per_deviled_egg
    dozens_eggs = eggs_total // 12
    result = dozens_eggs
    return result

 Executed result: 4
[EXP] 656: [success_rate]: True, [answer]: 10, [output]: def solution():
    pages_total = 15
    pages_written = pages_total / 3
    pages_left = pages_total - pages_written
    result = pages_left
    return result

 Executed result: 10.0
[EXP] 657: [success_rate]: True, [answer]: 10, [output]: def solution():
    pages_to_read = 200
    pages_per_day = 10
    days_available = 30
    days_to_complete = pages_to_read // pages_per_day
    days_left = days_available - days_to_complete
    result = days_left
    return result

 Executed result: 10
[EXP] 658: [success_rate]: True, [answer]: 330000, [output]: def solution():
    cost_of_plane = 150000
    monthly_rent = 5000
    monthly_fuel = 2 * 5000
    total_cost_per_year = cost_of_plane + 12 * (monthly_rent + monthly_fuel)
    result = total_cost_per_year
    return result

 Executed result: 330000
[EXP] 659: [success_rate]: False, [answer]: 120, [output]: 
def solution():
    cooking_time_rice = 30
    cooking_time_pork = cooking_time_rice + 20
    cooking_time_beans = cooking_time_rice + cooking_time_pork
    total_cooking_time = cooking_time_rice + cooking_time_pork + cooking_time_beans
    result = total_cooking_time
    return result

 Executed result: 160
[EXP] 660: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    almonds_per_pound_almonds = 10
    almonds_per_pound_walnuts = 15

    # 1/2 pound almonds and 1/3 pound walnuts
    total_mix_almonds = (1 / 2) * almonds_per_pound_almonds
    total_mix_walnuts = (1 / 3) * almonds_per_pound_walnuts
    total_cost_mix_almonds_walnuts = total_mix_almonds + total_mix_walnuts
    total_cost_almonds = almonds_per_pound_almonds
    total_cost_walnuts = almonds_per_pound_walnuts

    # 1/5 pound almonds and 1/3 pound walnuts
    total_mix_almonds = (1 / 5) * almonds_per_pound_almonds
    total_mix_walnuts = (2 / 3) * almonds_per_pound_walnuts  # since the total is 1 pound
    total_cost_mix_almonds_walnuts_half = total_mix_almonds + total_mix_walnuts
    total_cost_almonds_half = almonds_per_pound_almonds
    total_cost_walnuts_half = (2 / 3) * almonds_per_pound_walnuts

    difference = total_cost_mix_almonds_walnuts - total_cost_almonds_half
    result = difference
    return result

 Executed result: 0.0
[EXP] 661: [success_rate]: False, [answer]: 15, [output]: def solution():
    total_heads = 20
    total_legs = 70
    goats = total_heads / 1  # sheep or geese have only one head
    total_animals = total_heads
    legs_animal = 4  # sheep and geese have 4 legs
    total_legs_animal = total_animals * legs_animal
    animals = total_legs / legs_animal
    result = round(animals)

 Executed result: None
[EXP] 662: [success_rate]: True, [answer]: 44, [output]: 
def solution():
    normal_coffee_cost = 5
    expensive_coffee_cost = normal_coffee_cost * 1.20
    days_of_week = 7
    coffee_per_day = 1
    pounds_of_coffee = days_of_week * coffee_per_day
    total_coffee_cost = pounds_of_coffee * expensive_coffee_cost
    donut_cost = 2
    total_cost = total_coffee_cost + donut_cost
    result = total_cost
    return result

 Executed result: 44.0
[EXP] 663: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    gus_spent = 20.00
    bag_chips = 2
    bag_price = 2.00
    bucket_fried_chicken = 8.00
    bottle_soda = 1.00
    total_cost = (bag_chips * bag_price) + bucket_fried_chicken + bottle_soda
    apple_pie_cost = gus_spent - total_cost
    result = apple_pie_cost
    return result

 Executed result: 7.0
[EXP] 664: [success_rate]: False, [answer]: 193, [output]: def solution():

 Executed result: None
[EXP] 665: [success_rate]: False, [answer]: 32, [output]: 
def solution():
    class_meetings = 4
    hours_per_meeting = 2
    total_hours = class_meetings * hours_per_meeting
    total_weeks = 6
    total_minutes = total_hours * 60
    total_blocks = total_minutes / 90
    recipes_learned = math.ceil(total_blocks)
    result = recipes_learned
    return result

 Executed result: None
[EXP] 666: [success_rate]: False, [answer]: 360, [output]: def solution():

 Executed result: None
[EXP] 667: [success_rate]: False, [answer]: 120, [output]: def solution():
    aurelia_money = 120
    kassidy_money = aurelia_money * (3 / 4)
    rayna_money = kassidy_money + 60
    total_money = aurelia_money + kassidy_money + rayna_money
    share_money = total_money / 3
    result = [aurelia_money, kassidy_money, rayna_money]
    return result

 Executed result: None
[EXP] 668: [success_rate]: True, [answer]: 53, [output]: def solution():
    length_of_quarter = 12
    total_quarters = 4
    total_length_quarters = total_quarters * length_of_quarter
    extension_minutes = 5
    total_length_game = total_length_quarters + extension_minutes
    result = total_length_game
    return result

 Executed result: 53
[EXP] 669: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    employees = 50
    management = 0.2 * employees
    management_overseeing = 0.3 * management
    result = management_overseeing
    return result

 Executed result: 3.0
[EXP] 670: [success_rate]: True, [answer]: 132, [output]: 
def solution():
    tablespoons_per_muffin_flour = 5
    tablespoons_per_muffin_sugar = 3
    tablespoons_per_muffin_salt = 0.25
    total_tablespoons_per_muffin = tablespoons_per_muffin_flour + tablespoons_per_muffin_sugar + tablespoons_per_muffin_salt
    tablespoons_total = 16 * total_tablespoons_per_muffin
    return tablespoons_total

 Executed result: 132.0
[EXP] 671: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    rober_candy = 3
    cindy_candy = 5
    aaron_candy = 4
    total_candy = rober_candy + cindy_candy + aaron_candy
    candies_shared = total_candy
    candies_per_person = candies_shared // 3
    remainder = candies_shared % 3
    if remainder > 0:
        candies_per_person += 1
    result = candies_per_person
    return result

 Executed result: 4
[EXP] 672: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    candies_type_a = 7
    candies_type_b = 10
    cost_type_a = 0.5
    cost_type_b = 0.75
    total_cost = (candies_type_a * cost_type_a) + (candies_type_b * cost_type_b)
    amount_paid = 15
    change = amount_paid - total_cost
    result = change
    return result

 Executed result: 4.0
[EXP] 673: [success_rate]: True, [answer]: 2, [output]: def solution():
    days_total = 30
    good_days_initial = 12
    bad_days = 8
    good_days_first_8 = 8
    neutral_days_third_8 = 8
    good_days_next_three = 3
    good_days_remaining = good_days_initial - good_days_first_8 - good_days_next_three
    result = good_days_remaining
    
    return result

 Executed result: 1
[EXP] 674: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    janey_books = 21
    janey_books_sally_books = janey_books - 3
    sally_books = janey_books_sally_books / 2
    result = sally_books
    return result

 Executed result: 9.0
[EXP] 675: [success_rate]: True, [answer]: 12, [output]: python
def solution():
    bamboo_height_today = 20 * 12  # convert feet to inches
    bamboo_height_goal = 600
    bamboo_growth_rate = 30
    days = (bamboo_height_goal - bamboo_height_today) / bamboo_growth_rate
    result = days
    return result

 Executed result: 12.0
[EXP] 676: [success_rate]: False, [answer]: 33, [output]: def solution():
    toys_initial = 4
    dogs_initial = 4
    dogs_more = 8
    toys_needed_publisher = dogs_more
    toys_needed_publisher += toys_initial
    dogs_final = dogs_initial + dogs_more
    dogs_queue = dogs_final * 2
    toys_needed_queue = dogs_queue
    dogs_left = dogs_final - 3
    toys_needed = dogs_left
    result = toys_initial + toys_needed_publisher + toys_needed_queue + toys_needed
    return result

 Executed result: 49
[EXP] 677: [success_rate]: True, [answer]: 240, [output]: def solution():
    total_initial = 1200
    investment_dylan = (2/5) * total_initial
    total_after_dylan = total_initial - investment_dylan
    investment_frances = (2/3) * total_after_dylan
    total_after_frances = total_after_dylan - investment_frances
    investment_skyler = total_after_frances
    result = investment_skyler
    return result

 Executed result: 240.0
[EXP] 678: [success_rate]: True, [answer]: 36, [output]: def solution():
    signatures_carol = 20
    signatures_jennifer = 44
    signatures_total = signatures_carol + signatures_jennifer
    signatures_needed = 100 - signatures_total
    result = signatures_needed
    return result

 Executed result: 36
[EXP] 679: [success_rate]: True, [answer]: 120, [output]: def solution():
    lorie_earnings_per_hour = 10
    karen_earnings_per_hour = lorie_earnings_per_hour * 2
    karen_works_per_day = 3
    karen_days = 2
    karen_earnings_per_day = karen_earnings_per_hour * karen_works_per_day
    karen_total_earnings = karen_earnings_per_day * karen_days
    result = karen_total_earnings
    return result

 Executed result: 120
[EXP] 680: [success_rate]: False, [answer]: 576, [output]: def solution():
    potatoes_initial = 96
    hash_browns_initial = 36
    hash_browns_per_potatoes = hash_browns_initial / potatoes_initial
    hash_browns_potatoes = potatoes_initial * hash_browns_per_potatoes
    result = hash_browns_potatoes
    return result

 Executed result: 36.0
[EXP] 681: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    max_load = 700
    adult_weight = 80
    adults = 8
    total_weight = adult_weight * adults
    exceeded_load = total_weight - max_load
    result = exceeded_load
    return result

 Executed result: -60
[EXP] 682: [success_rate]: False, [answer]: 298, [output]: def solution():
    cookie_katarina = 68
    monster_cookies = max_cookies - 5
    monster_cookies = max_cookies - (max_cookies - cookie_monster)
    max_cookies = cookie_monster + 12
    cookie_monster = 5
    max_cookies = cookie_katarina + 12
    add_max_monster_katarina = max_cookies + monster_cookies + cookie_katarina
    result = add_max_monster_katarina
    return result

 Executed result: None
[EXP] 683: [success_rate]: False, [answer]: 80, [output]: 
def solution():
    final_length = 140
    extension_length = 0.5 * final_length
    trim_length = 20
    original_length = final_length - extension_length - trim_length
    result = original_length
    return result

 Executed result: 50.0
[EXP] 684: [success_rate]: True, [answer]: 50, [output]: def solution():
    time_turtle = 1 * 60 # convert time from hours to minutes
    time_rabbit = 40
    half_time = (time_turtle + time_rabbit) / 2
    result = half_time
    return result

 Executed result: 50.0
[EXP] 685: [success_rate]: False, [answer]: 11, [output]: def solution():
    total_time = 30 * 60  # convert 30 minutes to seconds
    time_to_corner = 6 * 60  # convert 6 minutes to seconds
    time_to_fire_station = 13 * 60  # convert 13 minutes to seconds
    time_used = time_to_corner + time_to_fire_station  # calculate total time used
    time_left = total_time - time_used  # calculate time left
    result = time_left
    return result

 Executed result: 660
[EXP] 686: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    apples_cost = 1 * 4
    bananas_cost = 2 * 2
    oranges_cost = 2 * 3
    total_cost = apples_cost + bananas_cost + oranges_cost
    result = total_cost
    return result

 Executed result: 14
[EXP] 687: [success_rate]: True, [answer]: 80, [output]: 
def solution():
    greta_cookies = 30
    celinda_cookies = 2 * greta_cookies
    total_cookies = greta_cookies + celinda_cookies
    cookies_eaten = 10
    cookies_in_box = total_cookies - cookies_eaten
    result = cookies_in_box
    return result

 Executed result: 80
[EXP] 688: [success_rate]: False, [answer]: 13, [output]: def solution():
    combined_ages = 44
    triplet_ages = 1 + 2
    twin_a = combined_ages - (triplet_ages + 1)
    twin_b = twin_a - 7
    result = twin_b
    return result

 Executed result: 33
[EXP] 689: [success_rate]: True, [answer]: 100, [output]: def solution():
    time_available = 3 * 60  # 3 hours in minutes
    math_homework = 20
    reading_homework = 40
    history_homework = 20
    total_homework_time = math_homework + reading_homework + history_homework
    time_required = total_homework_time
    time_left = time_available - time_required
    result = time_left
    return result

 Executed result: 100
[EXP] 690: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    lollipop_cost = 0.40
    candy_cost = 3.20 / 4  # four candies, 3.20 is the total cost
    
    cost_five_lollipops = 5 * lollipop_cost
    cost_four_candies = 4 * candy_cost
    
    total_cost_five_lollipops_four_candies = cost_five_lollipops + cost_four_candies
    
    cost_ten_lollipops_ten_candies = (10 * lollipop_cost) + (10 * candy_cost)
    
    result = cost_ten_lollipops_ten_candies - total_cost_five_lollipops_four_candies
    return result

 Executed result: 6.8
[EXP] 691: [success_rate]: True, [answer]: 5760, [output]: 
def solution():
    coins_rong_per_month = 20
    coins_neil_per_month = coins_rong_per_month + int(coins_rong_per_month * 2/5)
    months = 10 * 12
    coins_rong = coins_rong_per_month * months
    coins_neil = coins_neil_per_month * months
    total_coins = coins_rong + coins_neil
    result = total_coins
    return result

 Executed result: 5760
[EXP] 692: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    vaccines = 2
    vaccine_cost = 20
    total_bill = vaccines * vaccine_cost
    heartworm_check = 0.6 * total_bill
    total_bill = total_bill + heartworm_check
    money_initial = 125
    money_left = money_initial - total_bill
    result = money_left
    return result

 Executed result: 61.0
[EXP] 693: [success_rate]: True, [answer]: 32, [output]: 
def solution():
    bananas_per_crate = 5
    apples_per_crate = 12
    oranges_per_crate = 7
    price_per_apple = 0.5
    price_per_banana = price_per_apple * 2
    price_per_orange = price_per_banana * 3
    total_cost = (bananas_per_crate * price_per_banana) + (apples_per_crate * price_per_apple) + (oranges_per_crate * price_per_orange)
    result = total_cost
    return result

 Executed result: 32.0
[EXP] 694: [success_rate]: True, [answer]: 68, [output]: def solution():
    red_squares = 14
    blue_squares = red_squares + 4
    green_squares = blue_squares + 6
    white_squares = green_squares - 12

    total_squares = red_squares + blue_squares + green_squares + white_squares

    total_square_feet = total_squares * 1  # each square is 1 foot by 1 foot

    result = total_square_feet
    return result

 Executed result: 68
[EXP] 695: [success_rate]: False, [answer]: 9, [output]: 
def solution():
    high_chairs = 8
    regular_chairs_per_high_chair = 5
    total_chairs_needed = 42 + 15
    regular_chairs_needed = total_chairs_needed - high_chairs
    chairs_needed = regular_chairs_needed * regular_chairs_per_high_chair
    result = chairs_needed
    return result

 Executed result: 245
[EXP] 696: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    deer_total = 50
    deer_bucks = 0.5 * deer_total  # 50% of deer are bucks
    bucks_8_points = 0.2 * deer_bucks  # 20% of buck are 8 points
    result = int(bucks_8_points)
    return result

 Executed result: 5
[EXP] 697: [success_rate]: False, [answer]: 145, [output]: def solution():
    adam_points = 50
    betty_points = adam_points + 30 * (adam_points / 100)
    marta_points = betty_points + (betty_points - 30)
    tom_points = marta_points / 3
    adam_points = adam_points
    betty_points = betty_points
    marta_points = marta_points
    tom_points = tom_points

    total_class_points = adam_points + betty_points + marta_points + tom_points
    
    threshold = 400
    points_missing = threshold - total_class_points
    
    result = points_missing
    return result

 Executed result: 151.66666666666666
[EXP] 698: [success_rate]: False, [answer]: 27, [output]: 
def solution():
    great_grandbabies = 1
    babies = 1
    grandbabies = 1

    while True:
        families = babies * 3 + babies
        babies = families
        great_grandbabies += families

        if babies == 0:
            break

    result = great_grandbabies
    return result

 Executed result: None
[EXP] 699: [success_rate]: True, [answer]: 720, [output]: def solution():
    paycheck = 2400.0
    retirement_fund = paycheck * 0.5
    car_payment = paycheck * 0.2
    total_used = retirement_fund + car_payment
    money_left = paycheck - total_used
    result = money_left
    return result

 Executed result: 720.0
[EXP] 700: [success_rate]: True, [answer]: 8, [output]: def solution():
    space_for_pencils = 20
    pencils_missing = 4
    pencils_left = space_for_pencils - pencils_missing
    pencils_in_pairs = pencils_left // 2
    result = pencils_in_pairs
    return result

 Executed result: 8
[EXP] 701: [success_rate]: True, [answer]: 135, [output]: 
def solution():
    boxes_total = 15
    fireworks_per_box = 20
    total_fireworks = boxes_total * fireworks_per_box
    percent_facing_hannah = 40
    percent_total = percent_facing_hannah / 100
    total_fireworks_facing_hannah = total_fireworks * percent_total
    boxes_backend = 3
    fireworks_backend = boxes_backend * 5
    total_fireworks_hannah_sees = total_fireworks_facing_hannah + fireworks_backend
    result = total_fireworks_hannah_sees
    return result

 Executed result: 135.0
[EXP] 702: [success_rate]: False, [answer]: 200, [output]: 
def solution():
    seat = 1
    people = Aiden + 12 + 7
    drinks = people * 2
    snacks = people * 3
    drinks_and_snacks = drinks + snacks
    cost = drinks_and_snacks * 2
    result = cost
    return result

 Executed result: None
[EXP] 703: [success_rate]: True, [answer]: 2800, [output]: def solution():
    gissela_truck_capacity = 4000
    gordy_truck_capacity = gissela_truck_capacity + 800
    total_capacity_three_trucks = 11600
    gary_truck_capacity = total_capacity_three_trucks - gissela_truck_capacity - gordy_truck_capacity
    result = gary_truck_capacity
    return result

 Executed result: 2800
[EXP] 704: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    females = 6
    males = 8
    female_dumplings = 3  # each female ate 3 dumplings
    male_dumplings = female_dumplings + 1  # each male ate 1 more dumpling than each female
    total_female_dumplings = females * female_dumplings
    total_male_dumplings = males * male_dumplings
    total_dumplings = total_female_dumplings + total_male_dumplings
    result = total_dumplings
    return result

 Executed result: 50
[EXP] 705: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    total_amount = 100
    ratio_gerald = 3
    ratio_julia = 2
    total_ratio = ratio_gerald + ratio_julia
    gerald_amount = (ratio_gerald / total_ratio) * total_amount
    gerald_spent = 10
    gerald_left = gerald_amount - gerald_spent
    result = gerald_left
    return result

 Executed result: 50.0
[EXP] 706: [success_rate]: True, [answer]: 120, [output]: def solution():
    cat_speed = 15
    turtle_speed = cat_speed / 5
    distance_crawled = turtle_speed * 40
    result = distance_crawled
    return result

 Executed result: 120.0
[EXP] 707: [success_rate]: False, [answer]: 9, [output]: def solution():
    money_ruased_initial = 2100
    money_goal = 6300
    money_per_hour = (money_goal - money_ruased_initial) / (6300 - 2100)
    result = 6300 / money_per_hour
    return result

 Executed result: 6300.0
[EXP] 708: [success_rate]: True, [answer]: 8, [output]: def solution():
    river_water = 100

    water_used_by_city = 40
    water_in_use_industry = 80
    water_in_use_non_industry = 100 - water_in_use_industry
    total_water_used_by_city = water_used_by_city / 100 * river_water
    total_water_in_use = total_water_used_by_city * (water_in_use_non_industry / 100)
    result = (total_water_in_use / river_water) * 100
    return result

 Executed result: 8.0
[EXP] 709: [success_rate]: True, [answer]: 168, [output]: def solution():
    days_per_week = 7
    weeks = 2
    days_per_fees = days_per_week * weeks
    daily_fees = 12
    total_fees = days_per_fees * daily_fees
    result = total_fees
    return result

 Executed result: 168
[EXP] 710: [success_rate]: False, [answer]: 3000, [output]: def solution():
    chocolate_quarts_per_hour = 100 / 2
    vanilla_quarts_per_hour = 50 / 4
    chocolate_quarts_per_hour * 24  # chocolate ice cream in 24 hours is 100 * 12 = 1200 quarts
    vanilla_quarts_per_hour * 12  # vanilla ice cream in 12 hours is 50 * 3 = 150 quarts
    total_quarts = 1200 + 150
    result = total_quarts
    return result

 Executed result: 1350
[EXP] 711: [success_rate]: True, [answer]: 45, [output]: def solution():
    croissants = 5
    croissant_cost = 3
    roll_cost = 2.5
    quiche_cost = 4
    muffins = 13
    muffin_cost = 1

    subtotal = (croissants * croissant_cost) + (roll_cost * 4) + (quiche_cost * 3) + (muffins * muffin_cost)

    discount = (subtotal * 0.10)
    total = subtotal - discount

    result = total
    return result

 Executed result: 45.0
[EXP] 712: [success_rate]: False, [answer]: 6, [output]: def solution():
    erin_money = 6.00
    cost_of_scoop = 1.50
    ice_cream_per_free_scoop = 2 + 1
    ice_cream_cost = ice_cream_per_free_scoop * cost_of_scoop
    total_ice_cream_possible = int(erin_money / ice_cream_cost)
    result = total_ice_cream_possible
    return result

 Executed result: 1
[EXP] 713: [success_rate]: True, [answer]: 14, [output]: def solution():
    ginger_candy_initial = 100
    amy_candy_initial = 100
    ginger_candy_loss = 4 * 7 * 2  # 4 pieces/day * 7 days/week * 2 weeks
    amy_candy_loss = 3 * 7 * 2  # 3 pieces/day * 7 days/week * 2 weeks
    ginger_candy_left = ginger_candy_initial - ginger_candy_loss
    amy_candy_left = amy_candy_initial - amy_candy_loss
    difference = amy_candy_left - ginger_candy_left
    result = difference
    return result

 Executed result: 14
[EXP] 714: [success_rate]: True, [answer]: 576, [output]: def solution():
    sq_ft = 36
    sq_ft_part = 2 / 3
    sq_ft_to_cover = sq_ft * sq_ft_part
    mosaic_tiles_per_sq_ft = 24
    tiles_to_cover = mosaic_tiles_per_sq_ft * sq_ft_to_cover
    result = tiles_to_cover
    return result

 Executed result: 576.0
[EXP] 715: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    cost_to_go = 20
    cost_per_pound = 1.5
    pounds_of_blueberries = 30
    total_cost_blueberries = cost_to_go + (cost_per_pound * pounds_of_blueberries)
    cost_store = 2.5 * pounds_of_blueberries
    cost_difference = cost_store - total_cost_blueberries
    result = cost_difference
    return result

 Executed result: 10.0
[EXP] 716: [success_rate]: True, [answer]: 385000, [output]: 
def solution():
    computers = 500
    original_price = 700
    percentage_increase = 10
    new_price = original_price + (original_price * (percentage_increase / 100))
    total_cost = computers * new_price
    result = total_cost
    return result

 Executed result: 385000.0
[EXP] 717: [success_rate]: True, [answer]: 770, [output]: def solution():
    total_eggs = 6
    total_cheese = 2
    total_ham = 2
    calories_per_egg = 75
    calories_per_cheese_ounce = 120
    calories_per_hamounce = 40

    total_calories = total_calories_eggs = total_calories_cheese + total_calories_ham
    total_calories_eggs = total_eggs * calories_per_egg
    total_calories_cheese = total_cheese * calories_per_cheese_ounce
    total_calories_ham = total_ham * calories_per_hamounce
    total_calories = total_calories_eggs + total_calories_cheese + total_calories_ham
    result = total_calories
    return result

 Executed result: 770
[EXP] 718: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    pencil_price = 0.50
    eraser_price = 0.25
    pencils = 6
    erasers = 8
    total_cost = pencils * pencil_price + erasers * eraser_price
    change = 10 - total_cost
    result = change
    return result

 Executed result: 5.0
[EXP] 719: [success_rate]: True, [answer]: 2, [output]: def solution():
    applicants = 100
    applicants_interviewed = applicants * 0.3
    applicants_hired = applicants_interviewed * 0.2
    hired_accepting_position = applicants_hired * 1/3
    result = hired_accepting_position
    return result

 Executed result: 2.0
[EXP] 720: [success_rate]: False, [answer]: 175, [output]: def solution():
    sacks_initial = 20
    sacks_given_total = 3 + 4
    sacks_given = sacks_initial - sacks_given_total
    kilograms_per_sack = 25
    kilograms_given = sacks_given * kilograms_per_sack
    result = kilograms_given
    return result

 Executed result: 325
[EXP] 721: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    boxes_bought_this_week = 3 + 5
    boxes_bought_last_week = 4
    difference = boxes_bought_this_week - boxes_bought_last_week
    result = difference
    return result

 Executed result: 4
[EXP] 722: [success_rate]: True, [answer]: 2450, [output]: def solution():
    taps_per_minute_sides = 300 + 250
    taps_per_minute_arms = 200 + 200
    minutes_tapped_arms = 2
    minutes_tapped_sides = 5 - minutes_tapped_arms
    
    total_taps_arms = taps_per_minute_arms * minutes_tapped_arms
    total_taps_sides = taps_per_minute_sides * minutes_tapped_sides
    
    total_taps = total_taps_arms + total_taps_sides
    result = total_taps
    return result

 Executed result: 2450
[EXP] 723: [success_rate]: True, [answer]: 255, [output]: 
def solution():
    damage_to_car = 450
    fine = 120
    cost_of_asphalt = 3 * 25
    total_cost_fixing_manually = cost_of_asphalt + fine
    total_costseller_fix = damage_to_car
    saving = total_costseller_fix - total_cost_fixing_manually
    result = saving
    return result

 Executed result: 255
[EXP] 724: [success_rate]: True, [answer]: 160, [output]: def solution():
    chairs_initial = 170 + 23
    chairs_sent_normal = 20
    chairs_sent_baby = 13
    chairs_left_normal = chairs_initial - chairs_sent_normal
    chairs_left_total = chairs_left_normal - chairs_sent_baby
    result = chairs_left_total
    return result

 Executed result: 160
[EXP] 725: [success_rate]: False, [answer]: 18, [output]: python
def solution():
    friends_with_pizzas = 4
    slices_per_pizza = 12
    total_pizzas = friends_with_pizzas + 1  # Bryce included
    total_slices = total_pizzas * slices_per_pizza
    bryce_friends_ghosted_1 = 2 / 3 * friends_with_pizzas * slices_per_pizza
    bryce_friends_ghosted_2 = 3 / 4 * 2 * slices_per_pizza
    total_ghosted = bryce_friends_ghosted_1 + bryce_friends_ghosted_2
    slices_left = total_slices - total_ghosted
    result = slices_left
    return result

 Executed result: 10.0
[EXP] 726: [success_rate]: True, [answer]: 25, [output]: 
def solution():
    sausages = 9
    time_cat = 30
    time_dog = time_cat * (2 / 3)
    time_total = time_cat + time_dog
    average_time = time_total / 2
    result = average_time
    return result

 Executed result: 25.0
[EXP] 727: [success_rate]: False, [answer]: 10, [output]: def solution():
    topher_shoe_length = 8 * 12 + 4  # convert feet and inches to inches
    shoe_length_difference = topher_shoe_length - (9 * bobby_shoe_length)
    bobby_shoe_length = (topher_shoe_length - shoe_length_difference) / 9
    result = bobby_shoe_length
    return result

 Executed result: None
[EXP] 728: [success_rate]: False, [answer]: 112, [output]: def solution():
    windows_of_students_cars = 64
    windows_of_taughters_cars = 32
    students_cars = 4
    teachers_cars = 2
    student_windows = windows_of_students_cars * students_cars
    teacher_windows = windows_of_taughters_cars * teachers_cars
    total_windows = student_windows + teacher_windows
    window_quarter = total_windows // 4
    window_three_quarter = window_quarter * 3
    windows_smashed = window_three_quarter + window_quarter
    result = windows_smashed
    return result

 Executed result: 320
[EXP] 729: [success_rate]: True, [answer]: 40, [output]: def solution():
    total_spools = 15 + 45 + 40 + 50
    blue_spools = 15 + 45
    percent_blue_spools = (blue_spools / total_spools) * 100
    result = percent_blue_spools
    return result

 Executed result: 40.0
[EXP] 730: [success_rate]: True, [answer]: 1000, [output]: def solution():
    people_initial = 5000
    voted_by_midday = 2/5 * people_initial
    remaining_people = people_initial - voted_by_midday
    voted_by_16 = 2/3 * remaining_people
    remaining_to_vote = remaining_people - voted_by_16
    result = remaining_to_vote
    return result

 Executed result: 1000.0
[EXP] 731: [success_rate]: True, [answer]: 8, [output]: def solution():
    gum_pieces_per_day = 4
    gum_pieces_per_pack = 15
    days_needed = 30
    total_gum_pieces_needed = gum_pieces_per_day * days_needed
    packs_of_gum_needed = total_gum_pieces_needed // gum_pieces_per_pack
    result = packs_of_gum_needed
    return result

 Executed result: 8
[EXP] 732: [success_rate]: True, [answer]: 1, [output]: def solution():
    smores_per_kid = 2
    smores_per_adult = 1
    num_kids = 9
    num_adults = 6
    total_smores = num_kids * smores_per_kid + num_adults * smores_per_adult
    graham_crackers_per_box = 8 * 3  # 8 smores per sleeve, 3 sleeves per box
    boxes_needed = int((total_smores + 0.00001) // graham_crackers_per_box)  # add epsilon to prevent integer division
    result = boxes_needed
    return result

 Executed result: 1
[EXP] 733: [success_rate]: False, [answer]: 87, [output]: def solution():
    dora_age = 15
    dora_age_on_father = 2 * dora_age
    mother_age = dora_age_on_father - 4
    father_age = dora_age_on_father + 8
    total_ages = dora_age + father_age + mother_age
    return total_ages

 Executed result: 79
[EXP] 734: [success_rate]: False, [answer]: 5, [output]: def solution():
    money_initial = 20
    siblings = 3
    money_per_sibling = money_initial / siblings
    result = money_per_sibling
    return result

 Executed result: 6.666666666666667
[EXP] 735: [success_rate]: True, [answer]: 17, [output]: 
def solution():
    french_book_weight = 4
    english_book_weight = 3
    history_book_weight = 2 * 3
    math_book_weight = science_book_weight = 2
    total_weight = french_book_weight + english_book_weight + history_book_weight + math_book_weight + science_book_weight
    result = total_weight
    return result

 Executed result: 17
[EXP] 736: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    votes_A = 20
    votes_B = 20 + (20 * 50 / 100)
    total_votes = 100
    votes_C = total_votes - votes_A - votes_B
    result = votes_C
    return result

 Executed result: 50.0
[EXP] 737: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    boris_apples_initial = 100
    beck_apples_initial = boris_apples_initial - 23
    boris_apples_after = boris_apples_initial - 10
    beck_apples_after = beck_apples_initial - 10
    difference = boris_apples_after - beck_apples_after
    result = difference
    return result

 Executed result: 23
[EXP] 738: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    water_initial = 32
    water_used_giant = 4 * 3
    water_used_medium = 2 * 7
    water_used_small = 0.5 * 8
    water_used_total = water_used_giant + water_used_medium + water_used_small
    water_left = water_initial - water_used_total
    result = water_left
    return result

 Executed result: 2.0
[EXP] 739: [success_rate]: False, [answer]: 4, [output]: def solution():
    clara_books = 20
    clara_books_div_two = clara_books / 2
    steven_books = clara_books_div_two
    clara_books_minus_alice = clara_books - 6
    result = clara_books_minus_alice
    return result

 Executed result: 14
[EXP] 740: [success_rate]: True, [answer]: 98, [output]: def solution():
    half_gallon_cost = 5 - 2  # the cost of a half-gallon is 5 - 2 = 3
    half_gallon_cost_total = half_gallon_cost * 16  # total cost of half-gallon jars
    gallon_cost = 5  # the cost of a gallon
    gallon_cost_total = gallon_cost * 10  # total cost of gallon jars
    total_cost = half_gallon_cost_total + gallon_cost_total
    result = total_cost
    return result

 Executed result: 98
[EXP] 741: [success_rate]: True, [answer]: 25, [output]: def solution():
    students_total = 50
    baking_students = 10
    basketball_students = 5
    students_playing_music = basketball_students * 2
    students_playing_video_games = students_total - baking_students - basketball_students - students_playing_music
    result = students_playing_video_games
    return result

 Executed result: 25
[EXP] 742: [success_rate]: True, [answer]: 28, [output]: def solution():
    birds_initial = 12
    birds_scared = 1 / 3 * birds_initial
    birds_left = birds_initial - birds_scared
    birds_joined = 20
    birds_total = birds_left + birds_joined
    result = birds_total
    return result

 Executed result: 28.0
[EXP] 743: [success_rate]: False, [answer]: 24, [output]: def solution():
    total_students = 80
    girls_per_class = 0.4
    girls_in_class = girls_per_class * total_students
    girls_in_two_classes = girls_in_class * 2
    boys_in_two_classes = total_students - girls_in_two_classes
    boys_in_class = boys_in_two_classes / 2
    result = int(boys_in_class)
    return result

 Executed result: 8
[EXP] 744: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    cake_slices_initial = 2
    cake_slices_added = 3
    total_cake_slices = cake_slices_initial + cake_slices_added
    total_cake_slices_triple = total_cake_slices * 3
    total_cake_slices_eaten = 2
    total_cake_slices_lost = 5
    total_cake_slices_removed = total_cake_slices_eaten + total_cake_slices_lost
    cake_slices_left = total_cake_slices_triple - total_cake_slices_removed
    result = cake_slices_left
    return result

 Executed result: 8
[EXP] 745: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    dogs = 8
    cats = 5
    birds = 3
    horses = 12
    total_animals = dogs + cats + birds + horses
    number_of_days = 7
    animals_per_day = total_animals / number_of_days
    result = int(animals_per_day)
    return result

 Executed result: 4
[EXP] 746: [success_rate]: True, [answer]: 1100, [output]: 
def solution():
    cost_per_pack = 1800
    packs_bought = 3
    cost = cost_per_pack * packs_bought
    cost_per_card = 4000 + 1000 + 30 * 50
    total_cost = cost
    profit = cost_per_card - total_cost
    result = profit
    return result

 Executed result: 1100
[EXP] 747: [success_rate]: False, [answer]: 28, [output]: def solution():
    adult1_initial = 26
    child1 = 12
    adult2 = 26
    child2 = 12
    adult2_initial = 14
    child2_initial = 10

    adult_total = adult1_initial + adult2_initial
    child_total = child1 + child2
    total_first_park = adult_total + child_total
    second_park_total = 2 * adult2_initial + 2 * child2_initial

    difference = total_first_park - second_park_total
    result = difference
    return result

 Executed result: 16
[EXP] 748: [success_rate]: True, [answer]: 350, [output]: 
def solution():
    tomatoes_sold_per_day = 500
    old_price = 0.5
    new_price = 0.4
    daily_saving = tomatoes_sold_per_day * (old_price - new_price)
    weekly_saving = daily_saving * 7
    result = weekly_saving
    return result

 Executed result: 349.9999999999999
[EXP] 749: [success_rate]: False, [answer]: 336, [output]: 
def solution():
    sean_marbles = 56
    sean_marbles_cal = sean_marbles
    sean_marbles_carl = sean_marbles * 2
    sean_cal_carl_marbles_total = sean_marbles_cal + sean_marbles_carl
    result = sean_cal_carl_marbles_total
    return result

 Executed result: 168
[EXP] 750: [success_rate]: False, [answer]: 3, [output]: def solution():
    total_students = 54
    groups_required = 12
    groups_fully_formed = 6
    groups_needed = 0

    for i in range(groups_required, total_students):
        if total_students % i == 0:
            groups_needed = i
            break

    result = groups_required - groups_needed
    return result

 Executed result: -6
[EXP] 751: [success_rate]: False, [answer]: 4000, [output]: def solution():
    weekday_rental = 60
    weekend_rental = 100
    total_weekdays_per_month = 20  # 24 days in a month, but 4 days a week are weekdays
    total_weekends_per_month = 8  # 4 weekends in a month, each with 2 days
    total_rental_per_weekday_month = weekday_rental * total_weekdays_per_month
    total_rental_per_weekend_month = weekend_rental * total_weekends_per_month
    total_rental_per_two_months = (total_rental_per_weekday_month * 2 + total_rental_per_weekend_month * 2) * 2  # 2 months
    result = total_rental_per_two_months
    return result

 Executed result: 8000
[EXP] 752: [success_rate]: True, [answer]: 43, [output]: def solution():
    bananas_initial = 48
    bananas_stolen_by_arnold_first_day = bananas_initial / 2
    bananas_left_after_first_day = bananas_initial - bananas_stolen_by_arnold_first_day
    bananas_added_second_day = 25
    bananas_total_with_newly_added = bananas_left_after_first_day + bananas_added_second_day
    bananas_stolen_by_arnold_second_day = 12
    bananas_left_after_second_day = bananas_total_with_newly_added - bananas_stolen_by_arnold_second_day
    bananas_added_third_day = 6
    bananas_total_with_newly_added_again = bananas_left_after_second_day + bananas_added_third_day
    result = bananas_total_with_newly_added_again
    return result

 Executed result: 43.0
[EXP] 753: [success_rate]: False, [answer]: 240, [output]: def solution():
    roommates = 4
    monthly_bill = 100
    annual_bill = monthly_bill * 12
    bill_per_roommate_per_year = annual_bill / roommates
    result = bill_per_roommate_per_year
    return result

 Executed result: 300.0
[EXP] 754: [success_rate]: False, [answer]: 128, [output]: 
def solution():
    glasses_initial = 8 * 12
    plates_initial = 4 * 12
    glasses_broken = 10
    plates_broken = 6
    glasses_left = glasses_initial - glasses_broken
    plates_left = plates_initial - plates_broken
    result = (glasses_left, plates_left)
    return result

 Executed result: (86, 42)
[EXP] 755: [success_rate]: False, [answer]: 89, [output]: 
def solution():
    small_stickers_initial = 30
    large_stickers_initial = 40

    # Convert 90% of small stickers to large buttons
    small_buttons_obtained = small_stickers_initial * 0.9 / 1
    large_buttons_obtained = 0
    
    # Convert 50% of large stickers to large buttons and remaining to small buttons
    large_buttons_ANDROID = large_stickers_initial * 0.5
    small_buttons_ANDROID = 0

    # Remaining large stickers get converted to small buttons
    small_buttons_ANDROID = large_stickers_initial - large_buttons_ANDROID

    large_buttons_FINAL = large_buttons_obtained + large_buttons_ANDROID
    small_buttons_FINAL = small_buttons_obtained + small_buttons_ANDROID

    result = large_buttons_FINAL + small_buttons_FINAL
    return result

 Executed result: 67.0
[EXP] 756: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    monday_matches = 2
    friday_matches = 1
    saturday_matches = 2 * monday_matches
    total_matches = monday_matches + friday_matches + saturday_matches
    result = total_matches
    return result

 Executed result: 7
[EXP] 757: [success_rate]: True, [answer]: 22, [output]: 
def solution():
    total_votes = 33
    against_votes = total_votes / (2 + 1)
    in_favor_votes = against_votes * 2
    result = in_favor_votes
    return result

 Executed result: 22.0
[EXP] 758: [success_rate]: False, [answer]: 75, [output]: def solution():
    extra_small = 11
    small = extra_small * 2
    medium = small + 4
    large = medium // 2
    extra_large = large + 6
    total_students = extra_small + small + medium + large + extra_large
    result = total_students
    return result

 Executed result: 91
[EXP] 759: [success_rate]: True, [answer]: 133, [output]: python
def solution():
    price_initial = 140
    discount = 5 / 100
    discount_amount = price_initial * discount
    price_after_discount = price_initial - discount_amount
    result = price_after_discount
    return result

 Executed result: 133.0
[EXP] 760: [success_rate]: True, [answer]: 60000, [output]: def solution():
    songs_per_playlist = 300
    num_playlists = 20
    hours_per_song = 10
    total_songs = songs_per_playlist * num_playlists
    total_hours = total_songs * hours_per_song
    result = total_hours
    return result

 Executed result: 60000
[EXP] 761: [success_rate]: True, [answer]: 16, [output]: def solution():
    people = 50
    people_think_horse2_will_win = people * 0.20
    people_left = people - people_think_horse2_will_win
    people_think_horse7_will_win = people_left * 0.60
    rest_of_people = people_left - people_think_horse7_will_win
    people_think_horse12_will_win = rest_of_people
    result = people_think_horse12_will_win
    return result

 Executed result: 16.0
[EXP] 762: [success_rate]: False, [answer]: 27, [output]: def solution():
    total_pomeranians = 6 * 3
    total_puppies = total_pomeranians / (1 / 3)
    total_puppies = total_puppies * (2 / 1)
    result = total_puppies
    return result

 Executed result: 108.0
[EXP] 763: [success_rate]: True, [answer]: 85, [output]: def solution():
    jayden_money = 70
    avas_allowance = 90
    jayden_third_of_allowance = avas_allowance // 2
    total_jayden_money = jayden_money + jayden_third_of_allowance
    camera_cost = 200
    money_needed = camera_cost - total_jayden_money
    result = money_needed
    return result

 Executed result: 85
[EXP] 764: [success_rate]: False, [answer]: 100, [output]: def solution():
    total_shingles = 250
    house2 = total_shingles * 1/2
    house3 = house2 * 2
    house1 = total_shingles - house2 - house3
    third_house_shingles = house3
    result = third_house_shingles
    return result

 Executed result: 250.0
[EXP] 765: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    leila_cucumbers = 3
    leila_cucumbers_cost = leila_cucumbers * 2
    jack_tomatoes = 5
    jack_tomatoes_cost = jack_tomatoes * 1
    chase_lettuce = 1
    chase_lettuce_cost = chase_lettuce * 3
    total_cost = leila_cucumbers_cost + jack_tomatoes_cost + chase_lettuce_cost
    result = total_cost
    return result

 Executed result: 14
[EXP] 766: [success_rate]: True, [answer]: 490, [output]: 
def solution():
    bananas = 200
    pears_to_bananas_ratio = 0.45
    pears = bananas * (1 + pears_to_bananas_ratio)
    total_fruits = bananas + pears
    result = total_fruits
    return result

 Executed result: 490.0
[EXP] 767: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    money_initial = 80
    money_spent_on_ball = 20
    money_left = money_initial - money_spent_on_ball
    candy_bar_cost = 5
    candy_bars_bought = money_left // candy_bar_cost
    result = candy_bars_bought
    return result

 Executed result: 12
[EXP] 768: [success_rate]: True, [answer]: 60, [output]: def solution():
    oranges_perLiter = 5
    kilogramCost = 3
    totalOranges = oranges_perLiter * 4 
    totalCost = totalOranges * kilogramCost
    result = totalCost
    return result

 Executed result: 60
[EXP] 769: [success_rate]: False, [answer]: 675, [output]: 
def solution():
    ezra_books_read = 300
    ezra_books_to_read = 150
    ahmed_books_read = ezra_books_read / 2
    total_books_read = ezra_books_read + ezra_books_to_read + ahmed_books_read
    result = total_books_read
    return result

 Executed result: 600.0
[EXP] 770: [success_rate]: False, [answer]: 110, [output]: 
def solution():
    tanya_hourly = 15
    tanya_per_day = 5
    monday_classes = 4
    monday_hours = 5
    tanya_earned_monday = monday_classes * tanya_per_day + (monday_classes - 3) * tanya_hourly * (monday_hours / monday_classes)
    wednesday_classes = 2
    wednesday_hours = 2
    tanya_earned_wednesday = wednesday_classes * tanya_per_day + (wednesday_classes - 3) * tanya_hourly * (wednesday_hours / wednesday_classes)
    total_earned = tanya_earned_monday + tanya_earned_wednesday
    result = total_earned
    return result

 Executed result: 33.75
[EXP] 771: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    vanilla_scents_sold = 5
    fruity_scents_sold = 2
    vanilla_fruit_diff = vanilla_scents_sold - fruity_scents_sold
    result = vanilla_fruit_diff
    return result

 Executed result: 3
[EXP] 772: [success_rate]: True, [answer]: 3, [output]: def solution():
    eggplants_sold = 20
    eggplants_price = 3
    earnings_from_eggs = eggplants_sold * eggplants_price
    target_total = 135
    earnings_objective = target_total - earnings_from_eggs
    corn_eggs = 25
    price_per_corn = earnings_objective / corn_eggs
    result = price_per_corn
    return result

 Executed result: 3.0
[EXP] 773: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_hours = 7 + 5
    reading_time = 3
    remaining_time = total_hours - reading_time
    video_games_time = remaining_time * 1/3
    remaining_time -= video_games_time
    soccer_time = remaining_time
    soccer_percentage = (soccer_time / total_hours) * 100
    result = soccer_percentage
    return result

 Executed result: 50.0
[EXP] 774: [success_rate]: True, [answer]: 10, [output]: def solution():
    pencils_initial = 50
    half_pencils = pencils_initial / 2
    pencils_given_to_brandon = half_pencils
    pencils_left = pencils_initial - pencils_given_to_brandon
    remaining_pencils = pencils_left
    fraction_of_pencils_given_to_charlie = 3/5
    pencils_given_to_charlie = remaining_pencils * fraction_of_pencils_given_to_charlie
    pencils_left_after_charlie = remaining_pencils - pencils_given_to_charlie
    result = pencils_left_after_charlie
    return result

 Executed result: 10.0
[EXP] 775: [success_rate]: False, [answer]: 10, [output]: 
def solution():
    distance_to_museum = 150
    speed = 75
    travel_time_to_museum = distance_to_museum / speed
    time_at_museum = 6
    travel_time_back = travel_time_to_museum
    total_time = 2 * (travel_time_to_museum + time_at_museum)
    result = total_time
    return result

 Executed result: 16.0
[EXP] 776: [success_rate]: True, [answer]: 276, [output]: def solution():
    cars = 57
    motorcycles = 73
    wheels_per_car = 4
    wheels_per_motorcycle = 2
    total_wheels_required = (cars * wheels_per_car) + (motorcycles * wheels_per_motorcycle)
    wheels_initial = 650
    wheels_left = wheels_initial - total_wheels_required
    result = wheels_left
    return result

 Executed result: 276
[EXP] 777: [success_rate]: True, [answer]: 800, [output]: 
def solution():
    laptop_price = 1000
    discount = 0.20
    discount_amount = laptop_price * discount
    price_after_discount = laptop_price - discount_amount
    result = price_after_discount
    return result

 Executed result: 800.0
[EXP] 778: [success_rate]: False, [answer]: 4400, [output]: 
def solution():
    movies_initial = 600
    movies_series = movies_initial // 3
    movies_left = movies_initial - movies_series
    movies_old = int(0.4 * movies_left)
    movies_normal = movies_left - movies_old
    cost_series = movies_series * 20  # price of series is 2/3 of normal movie price
    cost_old = movies_old * 5
    cost_normal = movies_normal * 10
    total_cost = cost_series + cost_old + cost_normal
    result = total_cost
    return result

 Executed result: 7200
[EXP] 779: [success_rate]: True, [answer]: 38, [output]: 
def solution():
    peaches = 6
    peaches_cost = peaches * 2
    plums = 8
    plums_cost = plums * 1
    apricots = 6
    apricots_cost = apricots * 3
    total_cost = peaches_cost + plums_cost + apricots_cost
    result = total_cost
    return result

 Executed result: 38
[EXP] 780: [success_rate]: True, [answer]: 255, [output]: 
def solution():
    total_hours = 6
    driving_time = total_hours - 1.5
    driving_speed = 50
    hiking_speed = (driving_speed / 2) - 5
    distance_driven = driving_time * driving_speed
    distance_hiked = 1.5 * hiking_speed
    distance_to_vacation = distance_driven + distance_hiked
    result = distance_to_vacation
    return result

 Executed result: 255.0
[EXP] 781: [success_rate]: False, [answer]: 25, [output]: python
def solution():
    enemies_Ava = 0
    enemies_Emma = 0
    berries_Ava = 0
    berries_Emma = 0
    time_Ava = 0
    time_Emma = 0

    enemies_Ava = enemies_Emma + 8
    berries_Ava = berries_Emma + 3
    time_Emma = time_Ava + 4

    score_Ava = enemies_Ava * 10 + berries_Ava * 5 + 30 * (60 - time_Ava)
    score_Emma = enemies_Emma * 10 + berries_Emma * 5 + 30 * (60 - time_Emma)

    difference = score_Ava - score_Emma

    return difference

 Executed result: 215
[EXP] 782: [success_rate]: True, [answer]: 17, [output]: 
def solution():
    total_pizza_cost = 64
    cost_of_two_pizzas = 30
    cost_of_one_pizza = (total_pizza_cost - cost_of_two_pizzas) / 2
    result = cost_of_one_pizza
    return result

 Executed result: 17.0
[EXP] 783: [success_rate]: False, [answer]: 54, [output]: def solution():
    days = 7
    usual_rides_per_day = 3
    bonus_rides_per_day = 2 * usual_rides_per_day
    total_days_with_usual_rides = 5
    total_days_with_bonus_rides = 2
    total_rides = (total_days_with_usual_rides * usual_rides_per_day) + (total_days_with_bonus_rides * bonus_rides_per_day)
    result = total_rides
    return result

 Executed result: 27
[EXP] 784: [success_rate]: False, [answer]: 4, [output]: def solution():
    fish_initial = 7
    orange_fish_initial = 3
    white_fish_initial = 4
    fish_after_store = fish_initial
    orange_fish_after_store = orange_fish_initial
    white_fish_after_store = white_fish_initial
    total_fish_after_store = fish_after_store
    orange_fish_more_than_white_fish_after_store = orange_fish_after_store > white_fish_after_store
    increase_of_orange_fish = 17 - (orange_fish_after_store - orange_fish_initial)
    increase_of_white_fish = 17 - (white_fish_after_store - white_fish_initial)
    result = increase_of_white_fish
    return result

 Executed result: 17
[EXP] 785: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    distance = 5 # one-way distance between home and office
    day_distance = 2 * distance
    days_per_week = 5
    total_distance_per_week = day_distance * days_per_week
    
    mpg = 10
    gallons_per_week = total_distance_per_week / mpg
    
    cost_per_gallon = 3
    cost_per_week = gallons_per_week * cost_per_gallon
    
    result = cost_per_week
    return result

 Executed result: 15.0
[EXP] 786: [success_rate]: False, [answer]: 155, [output]: 
def solution():
    twenties = 10
    quarters = 140
    total_quarters = quarters / 25  # Calculate the total value of quarters
    total_dollars_spent = total_quarters + (3 / 5 * 20)  # Calculate the total dollars spent
    result = int(dollars * 100) * 2  # Calculate the total amount of money in cents, then convert to cents and back to dollars
    return result

 Executed result: None
[EXP] 787: [success_rate]: True, [answer]: 142, [output]: def solution():
    tomato_plants = 5
    tomato_yield = 22
    eggplant_plants = 8
    eggplant_yield = 4
    total_fruits = tomato_plants * tomato_yield + eggplant_plants * eggplant_yield
    result = total_fruits
    return result

 Executed result: 142
[EXP] 788: [success_rate]: False, [answer]: 25, [output]: def solution():
    total_tv = 40
    tv_types = {"Smart TVs": total_tv / 4, "Analog TVs": total_tv / 8, "OLED TVs": 0}
    
    for key, value in tv_types.items():
        if key != "OLED TVs":
            tv_types["OLED TVs"] = total_tv - value
    
    result = tv_types["OLED TVs"]
    return result

 Executed result: 35.0
[EXP] 789: [success_rate]: True, [answer]: 100, [output]: def solution():
    school_trip_cost = 300
    aid_from_school = school_trip_cost / 2
    john_morning = 50
    money_missing = school_trip_cost - (aid_from_school + john_morning)
    result = money_missing
    return result

 Executed result: 100.0
[EXP] 790: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    temperature_initial = 45
    temperature_drop = 33
    temperature_desired = 32
    temperature_left = temperature_initial - temperature_drop
    temperature_needed = temperature_desired - temperature_left
    logs_needed = temperature_needed // 5
    result = logs_needed
    return result

 Executed result: 4
[EXP] 791: [success_rate]: False, [answer]: 108, [output]: 
def solution():
    total_people = 90
    people_per_group = 9
    number_of_groups = total_people // people_per_group
    seashells_per_group = 2
    fraction_of_groups = 3 / 5
    number_of_groups_with_seashells = int(number_of_groups * fraction_of_groups)
    total_seashells = number_of_groups_with_seashells * seashells_per_group
    result = total_seashells
    return result

 Executed result: 12
[EXP] 792: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    people_initial = 172
    people_get_off_first_stop = 47
    people_get_on_first_stop = 13
    people_get_off_second_stop = 38
    people_left_first_stop = people_initial - people_get_off_first_stop + people_get_on_first_stop
    people_after_second_stop = people_left_first_stop - people_get_off_second_stop
    result = people_after_second_stop
    return result

 Executed result: 100
[EXP] 793: [success_rate]: True, [answer]: 75, [output]: 
def solution():
    days_in_month = 30
    bottle_caps_found_per_day = 10
    value_of_bottle_caps = 0.25
    total_bottle_caps = bottle_caps_found_per_day * days_in_month
    total_value = total_bottle_caps * value_of_bottle_caps
    result = total_value
    return result

 Executed result: 75.0
[EXP] 794: [success_rate]: True, [answer]: 250, [output]: def solution():
    regular_pay_per_hour = 20
    hours_per_day = 8
    special_rate = 1.5
    total_hours_worked = 11
    regular_pay = regular_pay_per_hour * hours_per_day * 1
    special_pay = (total_hours_worked - hours_per_day) * regular_pay_per_hour * special_rate
    total_pay = regular_pay + special_pay
    result = total_pay
    return result

 Executed result: 250.0
[EXP] 795: [success_rate]: True, [answer]: 32, [output]: 
def solution():
    female_lions = 12
    male_lions = female_lions // 2
    lion_cubs = 14
    total_lions = female_lions + male_lions + lion_cubs
    result = total_lions
    return result

 Executed result: 32
[EXP] 796: [success_rate]: True, [answer]: 20, [output]: def solution():
    original_price = 40
    discount = 0.25
    discount_price = original_price * (1 - discount)
    money_paid = 50
    change = money_paid - discount_price
    result = change
    return result

 Executed result: 20.0
[EXP] 797: [success_rate]: False, [answer]: 2880000, [output]: 
def solution():
    employees_initial = 200
    employees_hired = 20
    months = 3
    employees_after = employees_initial + (employees_hired * months)
    employees_salary = employees_after * 4000
    result = employees_salary
    return result

 Executed result: 1040000
[EXP] 798: [success_rate]: True, [answer]: 540, [output]: def solution():
    deck_the_halls = 150
    jingle_bells = 240
    total_seconds = deck_the_halls * 2 + jingle_bells
    result = total_seconds
    return result

 Executed result: 540
[EXP] 799: [success_rate]: False, [answer]: 20, [output]: def solution():
    billy_hourly_rate_first = 10
    billy_raise1 = 0.5
    billy_raise2 = 1
    billy_hours_worked = 20
    billy_earnings_per_month = (billy_hourly_rate_first + billy_hourly_rate_first + billy_raise1 + billy_hourly_rate_first + billy_raise1 + billy_raise2) * billy_hours_worked
    billy_annual_earnings = billy_earnings_per_month * 12
    sally_hourly_rate = billy_hourly_rate_first + 0.5
    sally_earnings = sally_hourly_rate * billy_hours_worked * 12
    billy_diff = billy_annual_earnings - sally_earnings
    result = billy_diff
    return result

 Executed result: 5160.0
[EXP] 800: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    loaf_price = 2
    bagel_price = 1
    loaves = 3
    bagels = 2
    total_loaf_price = loaves * loaf_price
    total_bagel_price = bagels * bagel_price
    price_diff = total_loaf_price - total_bagel_price
    result = price_diff
    return result

 Executed result: 4
[EXP] 801: [success_rate]: False, [answer]: 428, [output]: def solution():
    points_piserson = 278
    points_nikita = (points_piserson // 2) * 11
    total_points = points_piserson + points_nikita
    result = total_points
    return result

 Executed result: 1807
[EXP] 802: [success_rate]: True, [answer]: 1240, [output]: 
def solution():
    trees_students = 40 * 25
    trees_teachers = 40 * 3 * 2
    total_trees = trees_students + trees_teachers
    result = total_trees
    return result

 Executed result: 1240
[EXP] 803: [success_rate]: False, [answer]: 6, [output]: def solution():
    stuffed_puppies = 3
    stuffed_koalas = 5
    stuffed_zebras = 2
    stuffed_frogs = 4
    stuffed_animals_total = stuffed_puppies + stuffed_koalas + stuffed_zebras + stuffed_frogs

    percentage_to_goats = 0.30
    stuffed_animals_to_goats = percentage_to_goats * stuffed_animals_total
    stuffed_animals_to_goats_int = round(stuffed_animals_to_goats)

    result = stuffed_animals_to_goats_int
    return result

 Executed result: 4
[EXP] 804: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    total_hours_required = 30
    half_hours_per_day = 0.5
    full_hours_per_day = 2
    days_week = 7

    full_weeks = 2
    hours_at_first = half_hours_per_day * days_week * full_weeks

    full_weeks_after = 1
    hours_at_second = full_hours_per_day * days_week * full_weeks_after

    total_hours_played = hours_at_first + hours_at_second
    hours_left = total_hours_required - total_hours_played
    result = hours_left
    return result

 Executed result: 9.0
[EXP] 805: [success_rate]: True, [answer]: 20, [output]: def solution():
    car1_speed = 60
    car2_speed = 70
    time = 2

    distance_car1 = car1_speed * time
    distance_car2 = car2_speed * time

    gap_initial = 0  # initial distance between cars

    gap_total = distance_car2 - distance_car1 - gap_initial

    result = gap_total

    return result

 Executed result: 20
[EXP] 806: [success_rate]: False, [answer]: 1170, [output]: 
def solution():
    diamond_cost = 600
    gold_cost = 300
    premium = 0.3
    premium_cost = diamond_cost * premium
    total_cost = premium_cost + diamond_cost + gold_cost
    result = total_cost
    return result

 Executed result: 1080.0
[EXP] 807: [success_rate]: False, [answer]: 70, [output]: 
def solution():
    third_grade_passed = 340
    third_grade_total = 500
    fourth_grade_passed = 40
    fourth_grade_total = 100
    fifth_grade_passed = fourth_grade_passed * 2
    fifth_grade_total = 400
    total_students = third_grade_total + fourth_grade_total + fifth_grade_total
    total_passed = third_grade_passed + fourth_grade_passed + fifth_grade_passed
    school_pass_rate = (total_passed / total_students) * 100
    result = round(school_pass_rate, 2)
    return result

 Executed result: 46.0
[EXP] 808: [success_rate]: False, [answer]: 4, [output]: def solution():
    glass_chips_per_inch = 12
    glass_chips_per_bag = 72
    num_bags = 2
    total_glass_chips = num_bags * glass_chips_per_bag
    chips_per_square_inch = 12
    length_of_mosaic = total_glass_chips // chips_per_square_inch
    result = length_of_mosaic * 3  # multiply by the height
    return result

 Executed result: 36
[EXP] 809: [success_rate]: True, [answer]: 12, [output]: def solution():
    total_quarts = 0
    total_students = 4 + 16
    used_quarts = 1.5 * 4 + 2 * 16
    total_quarts = 10 + used_quarts
    total_gallons = total_quarts / 4
    result = total_gallons
    return result

 Executed result: 12.0
[EXP] 810: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    total_candies = 100
    candies_sold = 150
    extra_candies_order = 100
    total_selling = total_candies + extra_candies_order
    candies_sold_already = total_selling - candies_sold
    result = total_selling - candies_sold_already
    return result

 Executed result: 150
[EXP] 811: [success_rate]: False, [answer]: 310, [output]: 
def solution():
    students_initial = 10
    increase_per_month = 10 ** (1 / 12) - 1
    months_in_may = 5
    students_added = 0
    for month in range(months_in_may):
        students_initial *= 2
        students_added += students_initial - 2 ** month
    result = int(students_added)
    return result

 Executed result: 589
[EXP] 812: [success_rate]: True, [answer]: 60, [output]: def solution():
    money_made = 105
    cost_per_branch = 0.25
    total_branches = money_made / cost_per_branch
    branches_per_day = total_branches / 7  # 7 days in a week
    result = branches_per_day
    return result

 Executed result: 60.0
[EXP] 813: [success_rate]: True, [answer]: 79, [output]: def solution():
    petals_initial = 3 * 5 + 4 * 6 + 5 * 4 + 6 * 7
    petals_lost = 1 * 5 + 1 * 6 + 1 * 4 + 1 * 7
    petals_in_vase = petals_initial - petals_lost
    result = petals_in_vase
    return result

 Executed result: 79
[EXP] 814: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    marshmallows_in_bag = 35
    marshmallows_used_for_smores = 9 + 9 + 3
    marshmallows_left = marshmallows_in_bag - marshmallows_used_for_smores
    smores_per_kid = int(marshmallows_left / 2)
    result = smores_per_kid
    return result

 Executed result: 7
[EXP] 815: [success_rate]: False, [answer]: 11, [output]: def solution():
    jack_plays = 20
    jack_friend_worse_plays = jack_plays / 2
    jack_friend_better_plays = jack_plays * 1.5
    time_played = 4 * 60  # 4 hours converted to minutes
    minutes_friends_play = jack_friend_worse_played = (jack_friend_worse_plays * 2 + jack_friend_better_played * 1.5) * 4
    minutes_jack_played = 3 *  jack_plays * 4
    total_minutes_played = minutes_friends_play + minutes_jack_played
    quarters_used = total_minutes_played / 20
    result = quarters_used
    return result

 Executed result: None
[EXP] 816: [success_rate]: False, [answer]: 4, [output]: def solution():
    oil = 0

    sugar = 1
    salt = sugar

    zest = salt // 2
    fragrance = zest
    citrus_zest = fragrance

    oil = 2 * salt
    result = oil
    return result

 Executed result: 2
[EXP] 817: [success_rate]: True, [answer]: 4500, [output]: 
def solution():
    goat_cost = 3 * 500
    cow_cost = 2 * 1500
    total_cost = goat_cost + cow_cost
    result = total_cost
    return result

 Executed result: 4500
[EXP] 818: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    cupcakes_total = 63
    cupcakes_chocolate = 8
    cupcakes_toffee = 40
    total_cupcakes_bought = cupcakes_total - (cupcakes_chocolate + cupcakes_toffee)
    result = total_cupcakes_bought
    return result

 Executed result: 15
[EXP] 819: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    robert_cars = 20
    joe_cars = robert_cars * 2
    joe_cars_sold = joe_cars * 0.20
    joe_cars_left_after_selling = joe_cars - joe_cars_sold
    joe_cars_gave_to_mom = joe_cars_sold * 2
    joe_cars_left_after_giving_to_mom = joe_cars_left_after_selling - joe_cars_gave_to_mom
    result = joe_cars_left_after_giving_to_mom
    return result

 Executed result: 16.0
[EXP] 820: [success_rate]: False, [answer]: 6,250, [output]: def solution():
    total_cash_donated = 175000
    cash_donated_by_orgs = 50000
    cash_donated_by_students = total_cash_donated - cash_donated_by_orgs
    num_students = 20
    cash_per_student = cash_donated_by_students / num_students
    result = cash_per_student
    return result

 Executed result: 6250.0
[EXP] 821: [success_rate]: True, [answer]: 720, [output]: 
def solution():
    hours_first_day = 8
    hours_second_day = hours_first_day / 2
    total_hours = hours_first_day + hours_second_day
    total_minutes = total_hours * 60
    result = total_minutes
    return result

 Executed result: 720.0
[EXP] 822: [success_rate]: True, [answer]: 35, [output]: 
def solution():
    cars_initial = 50
    cars_added = 20
    total_cars = cars_initial + cars_added
    cars_left = total_cars // 2
    cars_missing = total_cars - cars_left
    result = cars_missing
    return result

 Executed result: 35
[EXP] 823: [success_rate]: True, [answer]: 1260, [output]: def solution():
    cycles_per_day = 30
    tasks_per_cycle = 5
    task_price = 1.20
    daily_income = cycles_per_day * tasks_per_cycle * task_price
    weekly_income = daily_income * 7
    result = weekly_income
    return result

 Executed result: 1260.0
[EXP] 824: [success_rate]: False, [answer]: 14, [output]: def solution():
    sasha_points_first_game = 14
    julie_points_first_game = sasha_points_first_game - 4
    sasha_points_second_game = julie_points_first_game - 6
    total_sasha_points = sasha_points_first_game + sasha_points_second_game
    result = total_sasha_points
    return result

 Executed result: 18
[EXP] 825: [success_rate]: True, [answer]: 52, [output]: def solution():
    cat_food_packages = 8
    dog_food_packages = 6
    cat_food_per_package = 11
    dog_food_per_package = 6
    total_cat_food_tins = cat_food_packages * cat_food_per_package
    total_dog_food_tins = dog_food_packages * dog_food_per_package
    difference = total_cat_food_tins - total_dog_food_tins
    result = difference
    return result

 Executed result: 52
[EXP] 826: [success_rate]: False, [answer]: 153, [output]: def solution():
    total_cards = 341
    smendrick_cards = total_cards / 2
    pj_cards = smendrick_cards / 3
    becca_cards = smendrick_cards + 12
    result = becca_cards
    return result

 Executed result: 182.5
[EXP] 827: [success_rate]: True, [answer]: 27, [output]: 
def solution():
    green_eggs = 5
    blue_eggs = green_eggs * 2
    pink_eggs = blue_eggs - 1
    yellow_eggs = pink_eggs // 3
    total_eggs = green_eggs + blue_eggs + pink_eggs + yellow_eggs
    result = total_eggs
    return result

 Executed result: 27
[EXP] 828: [success_rate]: True, [answer]: 11, [output]: 
def solution():
    weight = 4
    cost = 32
    distance = 20
    shipping_per_pound = 0.35
    shipping_per_mile = 0.08
    total_shipping_cost = weight * shipping_per_pound + distance * shipping_per_mile
    refund = cost * 0.75
    loss = cost - refund + total_shipping_cost
    result = loss
    return result

 Executed result: 11.0
[EXP] 829: [success_rate]: True, [answer]: 60, [output]: def solution():
    money_initial = 40
    dad_gave_mulan = 100
    money_total = money_initial + dad_gave_mulan
    jeans_cost = 2 * 30
    bag_cost = 20
    money_spent = jeans_cost + bag_cost
    money_left = money_total - money_spent
    result = money_left
    return result

 Executed result: 60
[EXP] 830: [success_rate]: False, [answer]: 14,000, [output]: def solution():
    total_production = 50000
    week1_production = 8000
    week2_production = week1_production / 2
    week3_production = week1_production * 3
    week1_to_week3_production = week1_production + week2_production + week3_production
    week4_production = total_production - week1_to_week3_production
    result = week4_production
    return result

 Executed result: 14000.0
[EXP] 831: [success_rate]: False, [answer]: 1128, [output]: def solution():
    time_per_video = 4  # 4 minutes
    videos_per_week = 18
    time_per_week = time_per_video * videos_per_week  # time per week = 72 minutes = 1.2 hours
    time_per_song = 2  # hours
    time_per_makeup = 15  # 15 minutes
    time_per_makeup_per_day = time_per_makeup / 60  # convert minutes to hours
    time_per_makeup_per_week = time_per_makeup_per_day * 6  # 6 days
    total_time_per_week = time_per_week + time_per_song + time_per_makeup_per_week  # 4.2 hours
    total_time_per_month = total_time_per_week * 4  # 4 weeks
    result = total_time_per_month
    return result

 Executed result: 302.0
[EXP] 832: [success_rate]: False, [answer]: 324, [output]: def solution():
    base_installation_cost = 129.00
    item_costs = 15.00
    total_items = 6 + 2 + 20 # total number of items to be installed
    extra_items = total_items - 4 - 2 - 1 - 10 # number of items extra beyond the free ones
    extra_installation_cost = extra_items * item_costs
    total_cost = base_installation_cost + extra_installation_cost
    result = total_cost
    return result

 Executed result: 294.0
[EXP] 833: [success_rate]: False, [answer]: 42, [output]: 
def solution():
    eva_savings = 20
    anthony_savings = eva_savings + 10
    anthony_money_saved_by_chores = anthony_savings
    anthony_savings_increase = 0.4
    anthony_savings = anthony_money_saved_by_chores + (anthony_savings_increase * anthony_money_saved_by_chores)
    roy_savings_increase = 0.4
    roy_money_saved_by_chores = anthony_savings + (anthony_savings_increase * anthony_savings)
    result = roy_money_saved_by_chores
    return result

 Executed result: 58.8
[EXP] 834: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    pompei_mountain_height = 1  # in inches
    saskay_mountain_height = pompei_mountain_height * 12  # in inches
    kagiyami_mountain_height = saskay_mountain_height * 4  # in inches
    naru_mountain_height = kagiyami_mountain_height * 10  # in inches

    feet_in_inches = 12  # 1 foot is 12 inches
    naru_mountain_height_in_feet = naru_mountain_height / feet_in_inches

    result = naru_mountain_height_in_feet
    return result

 Executed result: 40.0
[EXP] 835: [success_rate]: True, [answer]: 80, [output]: def solution():
    miles_per_hour = 8
    hours_journey_one = 4
    hours_journey_two = 6
    total_hours = hours_journey_one + hours_journey_two
    total_miles = miles_per_hour * total_hours
    result = total_miles
    return result

 Executed result: 80
[EXP] 836: [success_rate]: False, [answer]: 48, [output]: def solution():
    speed_kangaroo = 18
    num_kangaroos = 3
    total_hours_kangaroo = speed_kangaroo / num_kangaroos
    speed_turtle = total_hours_kangaroo * 2
    num_turtles = 4
    speed_per_turtle = speed_turtle / num_turtles
    total_hours_turtle = speed_kangaroo / speed_per_turtle
    result = total_hours_turtle
    return result

 Executed result: 6.0
[EXP] 837: [success_rate]: True, [answer]: 140, [output]: def solution():
    kora_clay_dishes = 20
    rory_clay_dishes = kora_clay_dishes + 20
    jada_clay_dishes = 2 * rory_clay_dishes
    total_clay_dishes = kora_clay_dishes + rory_clay_dishes + jada_clay_dishes
    result = total_clay_dishes
    return result

 Executed result: 140
[EXP] 838: [success_rate]: False, [answer]: 120, [output]: def solution():
    price_of_laptop = 600
    discount = 200
    price_after_discount = price_of_laptop - discount
    erika_savings = price_after_discount - 50
    part_time_pay = 150
    mom_help = 80
    total_money = erika_savings + part_time_pay + mom_help
    result = total_money
    return result

 Executed result: 580
[EXP] 839: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    large_apples_to_slice = 3
    small_apples_to_slice = 5
    slices_large_apple = 5
    slices_small_apple = 3
    total_slices = (large_apples_to_slice * slices_large_apple) + (small_apples_to_slice * slices_small_apple)
    slices_eaten = 15
    slices_left = total_slices - slices_eaten
    result = slices_left
    return result

 Executed result: 15
[EXP] 840: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    milk_per_cow = 5
    total_milk_needed = 25
    cows_currently_had = 3
    milk_currently_produced = milk_per_cow * cows_currently_had
    cows_needed = (total_milk_needed - milk_currently_produced) // milk_per_cow + cows_currently_had
    result = cows_needed - cows_currently_had
    return result

 Executed result: 2
[EXP] 841: [success_rate]: False, [answer]: 16, [output]: def solution():
    glue_stick1_left = 1/6
    glue_stick2_left = 2/3
    glue_stick3_left = 1/2
    glue_stick1_used = 1 - glue_stick1_left
    glue_stick2_used = 1 - glue_stick2_left
    glue_stick3_used = 1 - glue_stick3_left
    total_glue_stick1_used = glue_stick1_used * 12
    total_glue_stick2_used = glue_stick2_used * 12
    total_glue_stick3_used = glue_stick3_used * 12
    total_length_unused = total_glue_stick1_used + total_glue_stick2_used + total_glue_stick3_used
    result = 12 - total_length_unused
    return result

 Executed result: -8.0
[EXP] 842: [success_rate]: True, [answer]: 5600, [output]: def solution():
    car_cost = 10000
    phone_cost = 800
    money_from_weekends = 5000
    brother_help = 200
    total_help = money_from_weekends + brother_help
    total_cost = car_cost + phone_cost
    money_needed = total_cost - total_help
    result = money_needed
    return result

 Executed result: 5600
[EXP] 843: [success_rate]: True, [answer]: 10, [output]: def solution():
    hat_cost = 70
    bills_paid = 4 * 20
    change = bills_paid - hat_cost
    result = change
    return result

 Executed result: 10
[EXP] 844: [success_rate]: True, [answer]: 19, [output]: 
def solution():
    money_initial = 2 * 20
    money_spent_on_squirt_guns = 6 * 2
    money_spent_on_water_balloon = 3 * 3
    money_spent = money_spent_on_squirt_guns + money_spent_on_water_balloon
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 19
[EXP] 845: [success_rate]: False, [answer]: 180, [output]: def solution():
    jack_dishes = 60
    jack_dishes_together_with_socks = jack_dishes * 2
    jack_socks = jack_dishes_together_with_socks / 2
    jack_total_items = jack_dishes + jack_socks * 2
    peter_socks = jack_socks * 2
    peter_dishes = jack_socks
    peter_total_items = peter_socks + peter_dishes
    jack_and_peter_total_items = jack_total_items + peter_total_items
    result = jack_and_peter_total_items
    return result

 Executed result: 360.0
[EXP] 846: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    students_initial = 20
    students_good_at_math_only = 5
    students_good_at_english_only = 8
    students_good_at_both = students_initial - students_good_at_math_only - students_good_at_english_only
    students_good_at_math = students_good_at_math_only + students_good_at_both
    result = students_good_at_math
    return result

 Executed result: 12
[EXP] 847: [success_rate]: False, [answer]: 11, [output]: def solution():
    time_per_group_load_in = 2
    time_per_group_performance = 6
    time_per_group_load_out = 2
    time_per_group = time_per_group_load_in + time_per_group_performance + time_per_group_load_out
    time_intermission = 10
    total_time = 2 * 60
    time_available_for_groups = total_time - time_intermission
    groups_per_hour = 60
    minutes_per_group = time_per_group
    groups_per_concert_hour = groups_per_hour * 2
    groups_total_time_per_hour = time_per_group * groups_per_concert_hour
    total_groups = time_available_for_groups / groups_total_time_per_hour
    result = int(total_groups)
    return result

 Executed result: 0
[EXP] 848: [success_rate]: False, [answer]: 975, [output]: 
def solution():
    principal = 300
    interest_rate = 0.75
    time = 3
    total_interest = 0
    for year in range(time + 1):
        if year > 0:
            total_interest += principal * interest_rate
        principal = principal * (1 + interest_rate)
    result = principal + total_interest
    return result

 Executed result: 5102.34375
[EXP] 849: [success_rate]: True, [answer]: 10, [output]: def solution():
    white_shirts = 40
    white_shirts_with_collars = white_shirts // 2
    white_shirts_with_no_collars = white_shirts - white_shirts_with_collars
    floral_shirts = 50
    floral_shirts_with_buttons = 20
    floral_shirts_with_no_buttons = floral_shirts - floral_shirts_with_buttons
    difference = floral_shirts_with_no_buttons - white_shirts_with_no_collars
    result = difference
    return result

 Executed result: 10
[EXP] 850: [success_rate]: True, [answer]: 75, [output]: def solution():
    eggs = 900
    tray_capacity = 30
    trays = eggs // tray_capacity
    eggs_left = eggs % tray_capacity
    earnings = trays * 2.5
    result = earnings
    return result

 Executed result: 75.0
[EXP] 851: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    farm_x_goats_initial = 55
    farm_x_goats_sold = 10
    farm_y_goats_initial = 45
    farm_y_goats_sold = 2 * farm_x_goats_sold
    farm_x_goats_left = farm_x_goats_initial - farm_x_goats_sold
    farm_y_goats_left = farm_y_goats_initial - farm_y_goats_sold
    total_goats_left = farm_x_goats_left + farm_y_goats_left
    result = total_goats_left
    return result

 Executed result: 70
[EXP] 852: [success_rate]: True, [answer]: 110, [output]: def solution():
    shoes_purchased_per_month = 2
    shoes_purchased_per_year = shoes_purchased_per_month * 12
    amount_spent_per_year = 2640
    amount_spent_per_pair = amount_spent_per_year / shoes_purchased_per_year
    result = amount_spent_per_pair
    return result

 Executed result: 110.0
[EXP] 853: [success_rate]: True, [answer]: 123, [output]: 
def solution():
    basket_green = 25
    basket_red = 18
    baskets_green = 3
    baskets_red = 3
    total_cost_without_discount = (basket_green * baskets_green) + (basket_red * baskets_red)
    discount = 2 * baskets_red
    total_cost = total_cost_without_discount - discount
    result = total_cost
    return result

 Executed result: 123
[EXP] 854: [success_rate]: True, [answer]: 15, [output]: def solution():
    rooms_half = 90 // 2
    minutes_per_room = 20
    minutes_half_rooms = rooms_half * minutes_per_room
    hours_half_rooms = minutes_half_rooms / 60
    result = hours_half_rooms
    return result

 Executed result: 15.0
[EXP] 855: [success_rate]: False, [answer]: 144, [output]: def solution():
    homes_first_year = 12
    homes_second_year = 3 * homes_first_year
    homes_third_year = homes_first_year + homes_second_year
    homes_third_year_doubled = homes_third_year * 2
    result = homes_third_year_doubled
    return result

 Executed result: 96
[EXP] 856: [success_rate]: False, [answer]: 13, [output]: def solution():
    my_age = x  # You need to define the variable x to store your age
    brother_age = my_age + 3
    sister_age = my_age - 2
    mom_age = (brother_age * 3) - 1
    
    total_age = my_age + brother_age + sister_age + mom_age
    total_age = 87
    
    my_age = (total_age - (brother_age + sister_age + mom_age))  # Calculate your age from the total age and the ages of others
    result = my_age
    return result

 Executed result: None
[EXP] 857: [success_rate]: True, [answer]: 7, [output]: def solution():
    students = 27
    glue_sticks_per_student = 2
    glue_sticks_per_pack = 8
    
    glue_sticks_total = students * glue_sticks_per_student
    packs_needed = (glue_sticks_total + glue_sticks_per_pack - 1) // glue_sticks_per_pack
    
    result = packs_needed
    return result

 Executed result: 7
[EXP] 858: [success_rate]: True, [answer]: 14000, [output]: 
def solution():
    water_volume_initial = 4000
    water_volume_doubled = water_volume_initial * 2
    water_volume_third_day = water_volume_doubled + 6000
    result = water_volume_third_day
    return result

 Executed result: 14000
[EXP] 859: [success_rate]: True, [answer]: 3430, [output]: def solution():
    infected_people_initial = 10
    people_infected_per_day = 6
    days = 3
    people_infected = infected_people_initial
    for day in range(1, days + 1):
        people_infected = people_infected + (people_infected * people_infected_per_day)
    result = people_infected
    return result

 Executed result: 3430
[EXP] 860: [success_rate]: True, [answer]: 1520, [output]: 
def solution():
    customers = 40
    tip_per_customer = 20
    rafaela_tips = customers * tip_per_customer
    julieta_tips = rafaela_tips * 0.9  # 10% less
    total_tips = rafaela_tips + julieta_tips
    result = total_tips
    return result

 Executed result: 1520.0
[EXP] 861: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    oranges_initial = 12
    oranges_given_to_girls = 2 * 3
    oranges_given_to_boy = 3
    oranges_given_total = oranges_given_to_girls + oranges_given_to_boy
    oranges_left = oranges_initial - oranges_given_total
    result = oranges_left
    return result

 Executed result: 3
[EXP] 862: [success_rate]: False, [answer]: 30, [output]: 
def solution():
    claire_badges_per_month = 1
    amber_badges_per_month = claire_badges_per_month * 2
    wendy_badges_per_month = claire_badges_per_month * 3
    
    badges_per_year = 12  # 12 months in a year
    claire_badges_after_year = claire_badges_per_month * badges_per_year
    amber_badges_after_year = amber_badges_per_month * badges_per_year
    wendy_badges_after_year = wendy_badges_per_month * badges_per_year
    
    difference_wendy_and_amber = wendy_badges_after_year - amber_badges_after_year
    result = difference_wendy_and_amber
    return result

 Executed result: 12
[EXP] 863: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    hours_baking = 5  # from 1:00 PM - 6:00 PM
    loaves_per_hour = 2
    total_loaves = hours_baking * loaves_per_hour
    slices_per_loaf = 8
    total_slices = total_loaves * slices_per_loaf
    cost_per_slice = 0.50
    total_revenue = total_slices * cost_per_slice
    result = total_revenue
    return result

 Executed result: 40.0
[EXP] 864: [success_rate]: True, [answer]: 110, [output]: def solution():
    gold_coins = 70
    silver_coins = gold_coins - 30
    total_coins = gold_coins + silver_coins
    result = total_coins
    return result

 Executed result: 110
[EXP] 865: [success_rate]: True, [answer]: 80, [output]: 
def solution():
    burritos_ordered = 600
    students = 50
    burritos_per_student = 10
    mr_george_burritos = 20
    burritos_taken = students * burritos_per_student + mr_george_burritos
    burritos_left = burritos_ordered - burritos_taken
    result = burritos_left
    return result

 Executed result: 80
[EXP] 866: [success_rate]: True, [answer]: 23, [output]: def solution():
    red_cars = 12
    green_cars = red_cars - 2
    blue_cars = green_cars * 3
    yellow_cars = 75 - (red_cars + green_cars + blue_cars)
    result = yellow_cars
    return result

 Executed result: 23
[EXP] 867: [success_rate]: False, [answer]: 28, [output]: def solution():
    sum_of_books = 85
    sofie_books = Anne_books + 25
    Anne_books = Fawn_books - 12
    anne_books = sum_of_books - sofie_books
    Fawn_books = anne_books + 12
    result = Fawn_books
    return result

 Executed result: None
[EXP] 868: [success_rate]: True, [answer]: 7, [output]: def solution():
    potatoes_weight = 5
    sweet_potatoes_weight = 2 * potatoes_weight
    carrots_weight = sweet_potatoes_weight - 3
    result = carrots_weight
    return result

 Executed result: 7
[EXP] 869: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    jello_boxes_per_kid = 4
    kids = 30
    total_jello_cups = jello_boxes_per_kid * kids
    jello_boxes_needed = total_jello_cups // 10  # divide by 10 since each box makes 10 cups
    total_cost = jello_boxes_needed * 1.25
    result = total_cost
    return result

 Executed result: 15.0
[EXP] 870: [success_rate]: True, [answer]: 500, [output]: def solution():
    phones_initial_price = 700
    number_of_phones = 5
    total_phone_cost = phones_initial_price * number_of_phones
    cash_received = 4000
    change = cash_received - total_phone_cost
    result = change
    return result

 Executed result: 500
[EXP] 871: [success_rate]: True, [answer]: 40, [output]: def solution():
    total_spend = 400
    madeline_spend = total_spend * 0.6
    keenan_spend = total_spend - madeline_spend
    spend_per_week = keenan_spend / 4
    result = spend_per_week
    return result

 Executed result: 40.0
[EXP] 872: [success_rate]: True, [answer]: 48, [output]: def solution():
    pizza_pieces = 60
    pieces_eaten_first_day = int(pizza_pieces * 2 / 5)
    pizza_pieces_after_first_day = pizza_pieces - pieces_eaten_first_day
    pieces_eaten_second_day = 10
    pizza_pieces_after_second_day = pizza_pieces_after_first_day - pieces_eaten_second_day
    pieces_eaten_third_day = int(pizza_pieces_after_second_day * 7 / 13)
    total_pieces_eaten = pieces_eaten_first_day + pieces_eaten_second_day + pieces_eaten_third_day
    result = total_pieces_eaten
    return result

 Executed result: 48
[EXP] 873: [success_rate]: True, [answer]: 13, [output]: def solution():
    soda_price = 21
    water_price = 8
    soda_per_bottle = soda_price / 7
    water_per_bottle = water_price / 4
    cost_of_soda = 3 * soda_per_bottle
    cost_of_water = 2 * water_per_bottle
    total_cost = cost_of_soda + cost_of_water
    result = total_cost
    return result

 Executed result: 13.0
[EXP] 874: [success_rate]: True, [answer]: 12, [output]: def solution():
    money_initial = 12.48
    bolts_to_buy = 16
    cost_per_bolt = 0.03
    cost_of_bolts = bolts_to_buy * cost_per_bolt
    money_spent = cost_of_bolts
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 12.0
[EXP] 875: [success_rate]: True, [answer]: 132, [output]: def solution():
    hours_worked_initial = 3
    amount_earned_initial = 33
    amount_per_hour = amount_earned_initial / hours_worked_initial
    hours_worked_total = 12
    amount_earned_total = hours_worked_total * amount_per_hour
    result = amount_earned_total
    return result

 Executed result: 132.0
[EXP] 876: [success_rate]: True, [answer]: 60, [output]: def solution():
    marbles_initial = 52
    marbles_received = 28
    marbles_total = marbles_initial + marbles_received
    marbles_lost = marbles_total // 4
    marbles_left = marbles_total - marbles_lost
    result = marbles_left
    return result

 Executed result: 60
[EXP] 877: [success_rate]: True, [answer]: 41, [output]: 
def solution():
    multiple_choice_worth_points = 1
    true_or_false_worth_points = 1
    long_answer_worth_points = 5

    multiple_choice_questions = 10
    true_or_false_questions = 20
    long_answer_questions = 5

    multiple_choice_score = (0.8 * multiple_choice_questions) * multiple_choice_worth_points
    true_or_false_score = (0.9 * true_or_false_questions) * true_or_false_worth_points
    long_answer_score = (0.6 * long_answer_questions) * long_answer_worth_points

    total_score = multiple_choice_score + true_or_false_score + long_answer_score
    result = total_score
    return result

 Executed result: 41.0
[EXP] 878: [success_rate]: True, [answer]: 7000, [output]: def solution():
    profit = 2000
    selling_price_per_chicken = 50
    chickens_to_sell = 3 / 5 * 300
    revenue = chickens_to_sell * selling_price_per_chicken
    cost = revenue - profit
    result = cost
    return result

 Executed result: 7000.0
[EXP] 879: [success_rate]: True, [answer]: 5, [output]: def solution():
    glasses_sold = 32
    glasses_sold_julie = 14
    glasses_sold_boys = glasses_sold - glasses_sold_julie
    glasses_sold_micah = glasses_sold_boys // 2
    glasses_diff = glasses_sold_julie - glasses_sold_micah
    result = glasses_diff
    return result

 Executed result: 5
[EXP] 880: [success_rate]: True, [answer]: 575, [output]: def solution():
    money_hair = 400
    money_nail = 1/4 * money_hair
    money_pedicure = 3/4 * money_nail
    total_money_spent = money_hair + money_nail + money_pedicure
    result = total_money_spent
    return result

 Executed result: 575.0
[EXP] 881: [success_rate]: False, [answer]: 10, [output]: def solution():
    rope_length = 20
    rope_cost_per_meter = 2
    rope_cost = rope_length * rope_cost_per_meter
    new_rope_cost_per_meter = 1.5
    new_rope_cost = rope_cost_per_meter * rope_length
    profit = rope_cost - new_rope_cost
    return profit

 Executed result: 0
[EXP] 882: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    present_age = 18 - 10
    thrice_present_age = present_age * 3
    future_age = thrice_present_age
    result = future_age - present_age
    return result

 Executed result: 16
[EXP] 883: [success_rate]: False, [answer]: 5, [output]: def solution():
    budget = 65
    cost_bacon = 10
    cost_chicken = cost_bacon * 2 * 6
    cost_strawberries = 4 * 3
    cost_apples = cost_strawberries / 2 * 7
    total_cost = cost_bacon + cost_chicken + cost_strawberries + cost_apples
    money_left = budget - total_cost
    result = money_left
    return result

 Executed result: -119.0
[EXP] 884: [success_rate]: True, [answer]: 25, [output]: 
def solution():
    concert_runtime = 65
    encore_time = 15
    total_concert_time = concert_runtime - encore_time
    usual_concert_time = total_concert_time / 2
    result = usual_concert_time
    return result

 Executed result: 25.0
[EXP] 885: [success_rate]: True, [answer]: 50, [output]: def solution():
    argo_toys_initial = 200
    argo_toys_given_to_alyssa = 40
    argo_toys_given_to_bonnie = 80
    argo_toys_given_to_nicky = 30
    argo_toys_given = argo_toys_given_to_alyssa + argo_toys_given_to_bonnie + argo_toys_given_to_nicky
    argo_toys_left = argo_toys_initial - argo_toys_given
    result = argo_toys_left
    return result

 Executed result: 50
[EXP] 886: [success_rate]: True, [answer]: 500, [output]: def solution():
    chimichangas_tuesday = 125
    chimichangas_wednesday = 125
    chimichangas_friday = 2 * chimichangas_tuesday
    total_chimichangas = chimichangas_tuesday + chimichangas_wednesday + chimichangas_friday
    result = total_chimichangas
    return result

 Executed result: 500
[EXP] 887: [success_rate]: True, [answer]: 20, [output]: def solution():
    microphones_initial = 50
    microphones_pairs = microphones_initial / 2
    percentage = 20 / 100
    microphones_unpaired = microphones_pairs * percentage
    microphones_pairs = microphones_pairs - microphones_unpaired
    result = int(microphones_pairs)
    return result

 Executed result: 20
[EXP] 888: [success_rate]: True, [answer]: 34, [output]: def solution():
    birds_nesting = 6
    birds_flying = (2 / 3) * birds_nesting
    birds_feeding = 3 * 8
    total_birds = birds_nesting + birds_flying + birds_feeding
    result = total_birds
    return result

 Executed result: 34.0
[EXP] 889: [success_rate]: True, [answer]: 10, [output]: def solution():
    cookies_initial = 55
    cookies_eaten = 5
    cookies_left = cookies_initial - cookies_eaten
    cookies_per_jar = cookies_left // 5
    result = cookies_per_jar
    return result

 Executed result: 10
[EXP] 890: [success_rate]: True, [answer]: 15, [output]: Python
def solution():
    orchids = 5
    orchid_petals = 5
    daisies = 4
    daisy_petals = 10
    petals_ol = orchids * orchid_petals
    petals_od = daisies * daisy_petals
    more_petals = petals_od - petals_ol
    result = more_petals
    return result

 Executed result: 15
[EXP] 891: [success_rate]: True, [answer]: 25, [output]: 
def solution():
    total_plants = 100
    indoor_plants = total_plants // 4
    remaining_plants = total_plants - indoor_plants
    outdoor_plants = remaining_plants * 2 // 3
    flowering_plants = remaining_plants - outdoor_plants
    percentage_flowering_plants = (flowering_plants / total_plants) * 100
    result = percentage_flowering_plants
    return result

 Executed result: 25.0
[EXP] 892: [success_rate]: False, [answer]: 55, [output]: def solution():
    thingamabob_speed = 0
    whirligig_speed = 5 * thingamabob_speed
    whatchamacallit_speed = thingamabob_speed + 11
    whatchamacallit_speed_in_meters = 121  # given
    thingamabob_speed_in_meters = whatchamacallit_speed_in_meters - 11
    thingamabob_speed = thingamabob_speed_in_meters
    whirligig_speed = whirligig_speed + thingamabob_speed
    result = whirligig_speed
    return result

 Executed result: 110
[EXP] 893: [success_rate]: True, [answer]: 1, [output]: def solution():
    total_cost = 11
    salad_cost = 6
    yogurt_cost = salad_cost / 2
    total_food_cost = salad_cost + yogurt_cost
    single_carrot_cost = (total_food_cost - total_cost) / 2
    result = single_carrot_cost
    return result

 Executed result: -1.0
[EXP] 894: [success_rate]: True, [answer]: 480, [output]: def solution():
    hours_per_day = 8
    days_per_week = 5
    original_hourly_wage = 10
    raise_amount = 2
    hourly_wage_after_raise = original_hourly_wage + raise_amount
    daily_income = hours_per_day * hourly_wage_after_raise
    weekly_income = daily_income * days_per_week
    result = weekly_income
    return result

 Executed result: 480
[EXP] 895: [success_rate]: False, [answer]: 26, [output]: def solution():
    total_money = 80
    money_from_lawn_mowing = total_money - money_from_lemonade_sales
    joe_lawns = 6
    kamala_lawns = joe_lawns * 3
    alba_lawns = joe_lawns * 5
    total_lawns = joe_lawns + kamala_lawns + alba_lawns
    money_from_lawn_mowing = total_lawns * 6
    money_from_lemonade_sales = total_money - money_from_lawn_mowing
    result = money_from_lemonade_sales
    return result

 Executed result: -244
[EXP] 896: [success_rate]: True, [answer]: 74, [output]: 
def solution():
    martin_weight = 55
    carls_weight = martin_weight + 16
    christians_weight = carls_weight + 8
    harrys_weight = christians_weight - 5
    result = harrys_weight
    return result

 Executed result: 74
[EXP] 897: [success_rate]: True, [answer]: 250, [output]: def solution():
    hours_per_rental = 3
    rentals_per_month = 10
    hourly_wage = 25
    car_payment = 500
    revenue = (hours_per_rental * hourly_wage) * rentals_per_month
    profit = revenue - car_payment
    result = profit
    return result

 Executed result: 250
[EXP] 898: [success_rate]: True, [answer]: 1, [output]: def solution():
    notebooks_martha_initial = 2  # start with Martha's notebooks without the 5 she bought, which is 7 - 5 = 2
    notebooks_joseph = notebooks_martha_initial * 3
    notebooks_martha = 7
    result = notebooks_martha - notebooks_joseph
    return result

 Executed result: 1
[EXP] 899: [success_rate]: True, [answer]: 110, [output]: 
def solution():
    dijana_miles = 50
    anis_miles = dijana_miles + (dijana_miles/5)
    total_distance = dijana_miles + anis_miles
    result = total_distance
    return result

 Executed result: 110.0
[EXP] 900: [success_rate]: True, [answer]: 16, [output]: def solution():
    cookies_initial = 100
    cookies_taken = 4
    cookies_left = cookies_initial - cookies_taken
    cookies_per_nephew = cookies_left / 6
    result = cookies_per_nephew
    return result

 Executed result: 16.0
[EXP] 901: [success_rate]: False, [answer]: 15, [output]: 
def solution():
    denise_pages_yesterday = 10
    daniel_pages_yesterday = 13
    denise_pages_today = daniel_pages_yesterday
    daniel_pages_today = 0
    total_denise_pages = denise_pages_yesterday + denise_pages_today
    total_daniel_pages = daniel_pages_yesterday
    difference = total_denise_pages - total_daniel_pages
    result = difference
    return result

 Executed result: 10
[EXP] 902: [success_rate]: False, [answer]: 1, [output]: def solution():
    adult_bowls = 4
    child_bowls = 8
    people_eating = 4  # 1 Calvin, 1 wife, 2 children
    bowls_eaten = people_eating
    bowls_of_soups = adult_bowls + (bows_eaten // child_bowls) * child_bowls
    leftover_soups = bowls_of_soups - family_bowls
    bowls_for_child = leftover_soups // 2
    result = bowls_for_child
    return result

 Executed result: None
[EXP] 903: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    notebook_price = 1.5
    ballpen_price = 0.5
    notebook_count = 5
    total_price = (notebook_price * notebook_count) + ballpen_price
    result = total_price
    return result

 Executed result: 8.0
[EXP] 904: [success_rate]: False, [answer]: 16, [output]: 
def solution():
    material_per_small_mask = 2
    material_per_large_mask = 2.25
    small_masks = 20
    large_masks = 8
    total_material_for_small_masks = material_per_small_mask * small_masks
    total_material_for_large_masks = material_per_large_mask * large_masks
    total_material_needed = total_material_for_small_masks + total_material_for_large_masks
    result = total_material_needed
    return result

 Executed result: 58.0
[EXP] 905: [success_rate]: True, [answer]: 8, [output]: def solution():
    movies = 9
    showings = 3
    total_spent = 216
    total_tickets = movies * showings
    average_ticket_price = total_spent / total_tickets
    result = average_ticket_price
    return result

 Executed result: 8.0
[EXP] 906: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    sleep_hours = 10
    work_hours = sleep_hours - 2
    dog_walk_hours = 1
    total_active_hours = work_hours + dog_walk_hours
    free_time = 24 - sleep_hours - total_active_hours
    result = free_time
    return result

 Executed result: 5
[EXP] 907: [success_rate]: False, [answer]: 10, [output]: 
def solution():
    blue_initial = 7
    red_initial = 9
    blue_used = 3
    red_used = int(red_initial / 3)
    blue_left = blue_initial - blue_used
    red_left = red_initial - red_used
    result = f'Tim\'s box has {blue_left} blue and {red_left} red shoe boxes left.'
    return result

 Executed result: Tim's box has 4 blue and 6 red shoe boxes left.
[EXP] 908: [success_rate]: True, [answer]: 16, [output]: def solution():
    books_sarah = 9
    books_joseph_initial = books_sarah * 2
    books_joseph_lost = 2
    books_joseph = books_joseph_initial - books_joseph_lost
    result = books_joseph
    return result

 Executed result: 16
[EXP] 909: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    dean_marbles_initial = 30
    marbles_given_to_jamie = dean_marbles_initial * 1/5
    dean_marbles_after_jamie = dean_marbles_initial - marbles_given_to_jamie
    marbles_given_to_donald = 10
    dean_marbles_after_donald = dean_marbles_after_jamie - marbles_given_to_donald
    result = dean_marbles_after_donald
    return result

 Executed result: 14.0
[EXP] 910: [success_rate]: True, [answer]: 38, [output]: def solution():
    duncan_age_now = 60
    duncan_age_eight_years_ago = duncan_age_now - 8
    
    # Calculate Adam's age four years ago
    adam_age_four_years_ago = duncan_age_eight_years_ago / 2

    # Calculate Adam's age now
    adam_age_now = adam_age_four_years_ago + 4

    # Calculate Adam's age in 8 years
    adam_age_in_8_years = adam_age_now + 8

    result = adam_age_in_8_years
    return result

 Executed result: 38.0
[EXP] 911: [success_rate]: True, [answer]: 700, [output]: def solution():
    brown_farm = 200
    smith_farm = 2 * brown_farm + 100
    total_farms = brown_farm + smith_farm
    result = total_farms
    return result

 Executed result: 700
[EXP] 912: [success_rate]: True, [answer]: 64, [output]: def solution():
    packages_per_hour = 50 - 10
    packages_per_day = packages_per_hour * 8
    money_per_package = 0.20
    money_earned = packages_per_day * money_per_package
    result = money_earned
    return result

 Executed result: 64.0
[EXP] 913: [success_rate]: False, [answer]: 6, [output]: def solution():
    bottles_per_half_hour = 1
    normal_puzzle_time = 45
    bottles_normal_puzzle = bottles_per_half_hour * (normal_puzzle_time / 30)
    extreme_puzzle_time = 4 * normal_puzzle_time
    bottles_extreme_puzzle = bottles_per_half_hour * (extreme_puzzle_time / 30)
    total_bottles = bottles_normal_puzzle + bottles_extreme_puzzle
    result = total_bottles
    return result

 Executed result: 7.5
[EXP] 914: [success_rate]: True, [answer]: 6, [output]: def solution():
    bologna_total = 58
    bologna_red = 2
    red_balloon_num = 20
    bologna_yellow = 3
    total_yellow_bologna = bologna_total - (red_balloon_num * bologna_red)
    yellow_balloon_num = total_yellow_bologna // bologna_yellow
    result = yellow_balloon_num
    return result

 Executed result: 6
[EXP] 915: [success_rate]: True, [answer]: 3, [output]: def solution():
    miles_driven_per_day = 100
    days_in_month = 30
    total_miles_driven = miles_driven_per_day * days_in_month
    miles_between_tune_ups = 1000
    total_tune_ups = total_miles_driven // miles_between_tune_ups
    result = total_tune_ups
    return result

 Executed result: 3
[EXP] 916: [success_rate]: True, [answer]: 23, [output]: 
def solution():
    hours_tuesday = 5
    hours_wednesday = hours_tuesday * 2
    hours_thursday = hours_wednesday - 2
    total_hours = hours_tuesday + hours_wednesday + hours_thursday
    result = total_hours
    return result

 Executed result: 23
[EXP] 917: [success_rate]: False, [answer]: 14, [output]: 
def solution():
    total_cost_cake = 11
    total_cost_balloon = 0.5 * 2 * 12
    total_cost_icecream = 2 * 7
    total_cost = total_cost_cake + total_cost_balloon + total_cost_icecream
    allowance = total_cost
    allowance_per_child = allowance / 2
    result = allowance_per_child
    return result

 Executed result: 18.5
[EXP] 918: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    apples = 3
    bananas = 5
    oranges = 6
    total initial = apples + bananas + oranges
    fruit_eaten = 2
    fruit_left = total_initial - fruit_eaten
    result = fruit_left
    return result

 Executed result: None
[EXP] 919: [success_rate]: True, [answer]: 56, [output]: 
def solution():
    students_playing_tennis = 6
    students_playing_volleyball = 2 * students_playing_tennis
    students_playing_soccer = 16 + 22
    students_in_total = students_playing_tennis + students_playing_volleyball + students_playing_soccer
    result = students_in_total
    return result

 Executed result: 56
[EXP] 920: [success_rate]: True, [answer]: 90, [output]: python
def solution():
    students = 30
    lollipops_sold_per_student = 10
    lollipops_sold = students * lollipops_sold_per_student
    total_cost_lollipops = lollipops_sold * 0.5
    selling_price_per_lollypop = 0.8
    total_income = lollipops_sold * selling_price_per_lollypop
    total_profit = total_income - total_cost_lollipops
    result = total_profit
    return result

 Executed result: 90.0
[EXP] 921: [success_rate]: True, [answer]: 47, [output]: 
def solution():
    cats = 3
    dogs = cats * 3
    rabbits = dogs - 2
    fish = rabbits * 3
    gerbils = fish // 3

    total_pets = cats + dogs + rabbits + fish + gerbils
    result = total_pets
    return result

 Executed result: 47
[EXP] 922: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    slices_initial = 24
    abby_slices_daily = 2
    josh_slices_daily = 2 * abby_slices_daily
    total_slices_daily = abby_slices_daily + josh_slices_daily
    days = slices_initial // total_slices_daily
    result = days
    return result

 Executed result: 4
[EXP] 923: [success_rate]: True, [answer]: 60, [output]: def solution():
    shells_collected_per_year = 12
    years_between_5_and_10 = 5
    total_shells_collected = shells_collected_per_year * years_between_5_and_10
    result = total_shells_collected
    return result

 Executed result: 60
[EXP] 924: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    total_cups = 27
    rows = 3
    mint_cups = total_cups - 15
    mint_cups_per_row = mint_cups // rows
    result = mint_cups_per_row
    return result

 Executed result: 4
[EXP] 925: [success_rate]: False, [answer]: 12, [output]: def solution():
    berries_collection_time = 4
    total_extracted_time = 8
    total_berries = 24
    berries_per_trip = (total_berries * total_extracted_time) // berries_collection_time
    result = berries_per_trip
    return result

 Executed result: 48
[EXP] 926: [success_rate]: True, [answer]: 2000, [output]: 
def solution():
    water_in_pool = 10000
    gallons_taken_out = water_in_pool / 2
    water_in_tank = gallons_taken_out
    gallons_used_per_day = 500
    days = 6
    gallons_used = days * gallons_used_per_day
    water_left = water_in_tank - gallons_used
    result = water_left
    return result

 Executed result: 2000.0
[EXP] 927: [success_rate]: False, [answer]: 1, [output]: def solution():
    colby_money = 150
    popupcorn_price = 8
    candy_box_price = 2
    movies_seen_friday_saturday = 5
    movies_seen_other_days = 8
    popcorn_eaten = 2
    candy_boxes_eaten = 4
    movie_price_donday = 10
    movie_price_other_days = 7
    
    money_spent_friday_saturday = movies_seen_friday_saturday * movie_price_donday
    money_spent_other_days = movies_seen_other_days * movie_price_other_days
    money_spent_on_food = popcorn_eaten * popupcorn_price + candy_boxes_eaten * candy_box_price
    
    total_money_spent = money_spent_friday_saturday + money_spent_other_days + money_spent_on_food
    
    money_left = colby_money - total_money_spent

    result = money_left
    return result

 Executed result: 20
[EXP] 928: [success_rate]: False, [answer]: 85000, [output]: 
def solution():
    cinnamon_rolls = 200
    blueberry_muffins = 300
    normal_cinnamon_calories = 600
    normal_blue_muffin_calories = 450
    mini_cinnamon_calories = normal_cinnamon_calories / 3
    mini_blue_muffin_calories = normal_blue_muffin_calories / 3
    total_cinnamon_calories = cinnamon_rolls * mini_cinnamon_calories
    total-blue_muffin_calories = blueberry_muffins * mini_blue_muffin_calories
    total_calories = total_cinnamon_calories + total_blue_muffin_calories
    result = total_calories
    return result

 Executed result: None
[EXP] 929: [success_rate]: True, [answer]: 60, [output]: def solution():
    junebugs_monday = 39
    junebugs_tuesday = 2 * junebugs_monday
    junebugs_wednesday = 2 * junebugs_monday
    junebugs_thursday = 48
    junebugs_friday = 57
    total_junebugs = junebugs_monday + junebugs_tuesday + junebugs_wednesday + junebugs_thursday + junebugs_friday
    average_junebugs_per_day = total_junebugs / 5
    result = average_junebugs_per_day
    return result

 Executed result: 60.0
[EXP] 930: [success_rate]: True, [answer]: 60, [output]: def solution():
    bus_distance = 60 * 5
    car_distance = 30 * 8
    distance_difference = bus_distance - car_distance
    result = distance_difference
    return result

 Executed result: 60
[EXP] 931: [success_rate]: True, [answer]: 14, [output]: def solution():
    blocks = 31
    stuffed_animals = 8
    rings = 9
    total_with_old_toys = blocks + stuffed_animals + rings
    bouncy_balls = 62 - total_with_old_toys
    result = bouncy_balls
    return result

 Executed result: 14
[EXP] 932: [success_rate]: False, [answer]: 50, [output]: def solution():
    combined_age = 100
    paul_age = combined_age - (combined_age / 3)
    result = paul_age
    return result

 Executed result: 66.66666666666666
[EXP] 933: [success_rate]: False, [answer]: 24, [output]: def solution():
    friends = 4
    balloons_per_friend = 2
    maria_balloons = 1
    total_balloons_start = friends * balloons_per_friend + maria_balloons
    balloons_per_person = 3
    balloons_total = total_balloons_start + friends * balloons_per_person
    result = balloons_total
    return result

 Executed result: 21
[EXP] 934: [success_rate]: False, [answer]: 15, [output]: def solution():
    boxes_donated = 10
    boxes_donated_per_person = 5
    total_boxes_donated = boxes_donated * boxes_donated_per_person
    boxes_already_owned = 10
    total_boxes = total_boxes_donated + boxes_already_owned
    boxes_per_table = 2
    tables_already_owned = 15
    boxes_left_over = total_boxes % boxes_per_table
    if boxes_left_over > 0:
        tables_needed = (total_boxes - boxes_left_over) // boxes_per_table
    else:
        tables_needed = total_boxes // boxes_per_table
    result = tables_needed
    return result

 Executed result: 30
[EXP] 935: [success_rate]: False, [answer]: 410, [output]: 
def solution():
    zoey_seeds = 40
    zoey_distance = 10
    zoey_total = zoey_seeds * zoey_distance
    sydney_seeds = 35
    sydney_distance = 12
    sydney_total = sydney_seeds * sydney_distance
    total_distance = zoey_total + sydney_total
    average_distance = total_distance / (zoey_seeds + sydney_seeds)
    result = average_distance
    return result

 Executed result: 10.933333333333334
[EXP] 936: [success_rate]: True, [answer]: 64800, [output]: def solution():
    widgets_3000_per_hour = 60
    widgets_9000_per_hour = 45
    widgets_3000_per_day = widgets_3000_per_hour * 24
    widgets_3000_per_month = widgets_3000_per_day * 30
    widgets_9000_per_day = widgets_9000_per_hour * 24
    widgets_9000_per_month = widgets_9000_per_day * 30
    widgets_3000 = widgets_3000_per_month
    widgets_9000 = widgets_9000_per_month
    difference = widgets_3000 - widgets_9000
    total_value_3000 = difference * 6
    result = total_value_3000
    return result

 Executed result: 64800
[EXP] 937: [success_rate]: False, [answer]: 250, [output]: def solution():
    stay_hours = int(input("Enter the number of hours stayed: "))
    stay_cost = 0
    
    if stay_hours <= 12:
        stay_cost = 1000
    elif stay_hours > 12:
        stay_cost = 1000 + ((stay_hours - 12) * 70)
    result = 1600 - stay_cost  # total cost of 24-hour stay - cost of stay Cameron chose
    return result

 Executed result: 600
[EXP] 938: [success_rate]: True, [answer]: 159, [output]: 
def solution():
    goats = 15
    sheep = 12
    hay_per_goat = 5
    hay_per_sheep = 2 * hay_per_goat - 3
    hay_needed_per_animal = goats * hay_per_goat + sheep * hay_per_sheep
    result = hay_needed_per_animal
    return result

 Executed result: 159
[EXP] 939: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    hourly_wage = 50
    hours_worked = 6
    weekly_earned = hourly_wage * hours_worked
    weekly_spent = 50
    weekly_savings = weekly_earned - weekly_spent
    cost_per_pencil = 10
    pencils_bought = 5
    pencils_cost = cost_per_pencil * pencils_bought
    weekly_leftover = weekly_savings - pencils_cost
    pens_cost = 25
    pens_bought = int(weekly_leftover / pens_cost)
    result = pens_bought
    return result

 Executed result: 8
[EXP] 940: [success_rate]: True, [answer]: 650, [output]: 
def solution():
    words_craig = 20
    letters_craig = 15
    letters_craig_total = words_craig * letters_craig
    letters_craig_brother = letters_craig_total + 50
    result = letters_craig_total + letters_craig_brother
    return result

 Executed result: 650
[EXP] 941: [success_rate]: True, [answer]: 280, [output]: def solution():
    children_per_row = 8
    rows_per_school = 7
    schools = 5
    total_children = children_per_row * rows_per_school * schools
    result = total_children
    return result

 Executed result: 280
[EXP] 942: [success_rate]: True, [answer]: 842, [output]: 
coupons = 9
coupons_per_bottle = 100
total_bottles = coupons * coupons_per_bottle
bottles_given = 29 * 2
bottles_left = total_bottles - bottles_given
result = bottles_left
return result

 Executed result: 842
[EXP] 943: [success_rate]: False, [answer]: 205, [output]: def solution():
    charge_visit = 40
    labor_hours = 2.25
    labor_rate = 35
    parts_cost = 60
    total_cost = charge_visit + (labor_hours * labor_rate) + parts_cost
    result = total_cost
    return result

 Executed result: 178.75
[EXP] 944: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    new_cds = 10
    price_per_cd = 15
    discount = 0.4
    total_cost = new_cds * price_per_cd
    cost_after_discount = total_cost * discount
    cost_of_sold_cds = 5 * 40
    cost_out = cost_of_sold_cds - cost_after_discount
    result = cost_out
    return result

 Executed result: 140.0
[EXP] 945: [success_rate]: True, [answer]: 34, [output]: def solution():
    yams = 6
    yam_price = 1.5
    yam_earn = yams * yam_price
    sweet_potatoes = 10
    sweet_potato_price = 2
    sweet_potato_earn = sweet_potatoes * sweet_potato_price
    carrots = 4
    carrot_price = 1.25
    carrot_earn = carrots * carrot_price
    total_earn = yam_earn + sweet_potato_earn + carrot_earn
    result = total_earn
    return result

 Executed result: 34.0
[EXP] 946: [success_rate]: True, [answer]: 17, [output]: def solution():
    swimming_distance = 20
    distance_swum = 60 / 100 * swimming_distance
    distance_left = swimming_distance - distance_swum
    time_swimming = distance_swum / 2
    time_rest = time_swimming / 2
    time_further = distance_left / 1
    total_time = time_swimming + time_rest + time_further
    result = total_time
    return result

 Executed result: 17.0
[EXP] 947: [success_rate]: True, [answer]: 450, [output]: def solution():
    sam_bread_last_friday = 70
    bread_negative = 40
    seven_times_sam_bread = sam_bread_last_friday * 7
    bread_bakery = seven_times_sam_bread - bread_negative
    result = bread_bakery
    return result

 Executed result: 450
[EXP] 948: [success_rate]: True, [answer]: 13, [output]: def solution():
    stickers_initial = 0
    stickers_gifted = 15
    stickers_lost = 7
    stickers_gained = 5
    stickers_total = stickers_gifted - stickers_lost + stickers_gained
    result = stickers_total
    return result

 Executed result: 13
[EXP] 949: [success_rate]: False, [answer]: 15, [output]: 
def solution():
    nytimes_cost = 5
    nytimes_num_copies = 6
    nytimes_commission_rate = 0.10
    nytimes_commission = nytimes_num_copies * nytimes_cost * nytimes_commission_rate
    
   -wsj_cost = 15
-wsj_num_copies = 10
-wsj_commission_rate = 0.08
-wsj_commission = -js_num_copies *-wsj_cost *-sj_commission_rate

    total_commission = nytimes_commission + -js_commission
    result = total_commission
    return result

 Executed result: None
[EXP] 950: [success_rate]: False, [answer]: 42, [output]: 
def solution():
    deanna_age = 26
    leos_age = deanna_age + 5 + 2
    result = leos_age
    return result

 Executed result: 33
[EXP] 951: [success_rate]: False, [answer]: 5, [output]: def solution():
    total_points = 45
    bahati_points = Azibo_points + 20
    Azibo_points = bahati_points - 20
    dinar_points = Azibo_points - 10
    bahati_points = total_points - Azibo_points - dinar_points
    Azibo_points = Azibo_points
    result = Azibo_points
    return result

 Executed result: None
[EXP] 952: [success_rate]: True, [answer]: 300, [output]: def solution():
    pages_per_inch = 100
    inch_thick = 1.5
    pages_per_side = 2
    total_pages = pages_per_inch * inch_thick * pages_per_side
    result = total_pages
    return result

 Executed result: 300.0
[EXP] 953: [success_rate]: True, [answer]: 360, [output]: def solution():
    avg_reports_per_minute = 30
    time_taken_hours = 15
    total_minutes = (11 - 8) * 60
    total_reports = avg_reports_per_minute * total_minutes / time_taken_hours
    result = total_reports
    return result

 Executed result: 360.0
[EXP] 954: [success_rate]: False, [answer]: 452, [output]: 
def solution():
    bedtime = 60 * 10
    wake_up_time = 60 * 6
    wake_up_delay = 60 * 5
    sleep_start_time = 60 * 14 + 15
    sleep_end_time = 60 * 2 + 38
    sleep_hours = (wake_up_time - bedtime) + (sleep_start_time - sleep_end_time - wake_up_delay)
    result = sleep_hours
    return result

 Executed result: 157
[EXP] 955: [success_rate]: True, [answer]: 34, [output]: def solution():
    cups = 2 * 12  # convert 2 dozen to 24 cups
    spoons_per_cup = 2 / 3
    spoons = cups * spoons_per_cup
    spoons_gifted = 6
    total_spoons = spoons - spoons_gifted
    total_utensils = cups + int(total_spoons)
    result = total_utensils
    return result

 Executed result: 34
[EXP] 956: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    hospital_capacity = 1000
    occupied_beds = hospital_capacity / 5
    unoccupied_beds = hospital_capacity - occupied_beds
    beds_added_per_day = 50
    days = 2 * 7  # 2 weeks
    total_beds_added = beds_added_per_day * days
    unoccupied_beds_after = unoccupied_beds - total_beds_added
    result = unoccupied_beds_after
    return result

 Executed result: 100.0
[EXP] 957: [success_rate]: True, [answer]: 1, [output]: 
def solution():
    daily_emails = 16
    work_emails = 7
    remaining_emails = daily_emails - work_emails
    family_emails = int(2/3 * remaining_emails)
    other_emails = remaining_emails - family_emails
    boyfriend_emails = int(1/3 * other_emails)
    result = boyfriend_emails
    return result

 Executed result: 1
[EXP] 958: [success_rate]: True, [answer]: 45, [output]: def solution():
    aliya_age = 3
    shawna_age = aliya_age * 3
    father_age = shawna_age * 5
    result = father_age
    return result

 Executed result: 45
[EXP] 959: [success_rate]: False, [answer]: 40, [output]: 
def solution():
    concert_attendance_reported = 48
    overstatement_percentage = 20
    overstatement = concert_attendance_reported * (overstatement_percentage / 100)
    correct_concert_attendance = concert_attendance_reported - overstatement
    result = correct_concert_attendance
    return result

 Executed result: 38.4
[EXP] 960: [success_rate]: True, [answer]: 7, [output]: def solution():
    jason_balls = 2
    jeffrey_balls = jason_balls / 2
    jordan_balls = 2 * jason_balls
    total_balls = jason_balls + jeffrey_balls + jordan_balls
    result = total_balls
    return result

 Executed result: 7.0
[EXP] 961: [success_rate]: True, [answer]: 11, [output]: 
def solution():
    holes_first_day = 10
    holes_second_day = 13
    holes_third_day = 8
    holes_third_day_fill_in = 2
    holes_third_day_total = holes_third_day - holes_third_day_fill_in
    holes_fourth_day = 4 * holes_first_day
    total_holes = holes_first_day + holes_second_day + holes_third_day_total
    holes_fourth_day_before_treasure = holes_fourth_day - total_holes
    result = holes_fourth_day_before_treasure
    return result

 Executed result: 11
[EXP] 962: [success_rate]: True, [answer]: 225, [output]: def solution():
    amount_amora = 70
    amount_lainey = 70
    amount_collins = amount_amora + 15
    total_amount = amount_amora + amount_lainey + amount_collins
    result = total_amount
    return result

 Executed result: 225
[EXP] 963: [success_rate]: False, [answer]: 1000, [output]: def solution():
    supplies_cost = 400
    travel_tickets_cost = supplies_cost * (1 + 0.5)
    result = travel_tickets_cost
    return result

 Executed result: 600.0
[EXP] 964: [success_rate]: False, [answer]: 147, [output]: def solution():
    total_pokemon = 339
    adelewfes_pokemon = stan_pokemon = alex_pokemon = 0
    for adelewfes_pokemon in range(total_pokemon + 1):
        for stan_pokemon in range(total_pokemon + 1):
            alex_pokemon = stan_pokemon + 5
            if 4 * adelewfes_pokemon - 13 == stan_pokemon:
                adelewfes_pokemon = adelewfes_pokemon + 1
            elif stan_pokemon + 5 + adelewfes_pokemon == total_pokemon:
                break
        if alex_pokemon + stan_pokemon + adelewfes_pokemon == total_pokemon:
            break
    result = stan_pokemon
    return result

 Executed result: 0
[EXP] 965: [success_rate]: True, [answer]: 200, [output]: def solution():
    minutes_per_episode = 20
    episodes = minutes_per_episode // 2
    total_minutes = episodes * minutes_per_episode
    result = total_minutes
    return result

 Executed result: 200
[EXP] 966: [success_rate]: True, [answer]: 374, [output]: def solution():
    speed_southerly = 30
    speed_north = 18
    speed_southerly_after_turn = 22
    hours_southerly = 10
    hours_northerly = 2
    hours_southerly_after_turn = 5
    distance_southerly = speed_southerly * hours_southerly
    distance_northerly = speed_north * hours_northerly
    distance_southerly_after_turn = speed_southerly_after_turn * hours_southerly_after_turn
    distance_total = distance_southerly - distance_northerly + distance_southerly_after_turn
    result = distance_total
    return result

 Executed result: 374
[EXP] 967: [success_rate]: False, [answer]: 48, [output]: def solution():
    brownies_initial_batch = 1 * 12
    brownies_office = 1 * 6
    brownies_home = 4 * 12
    brownies_eaten = 1 * 6 + 15
    brownies_total = brownies_initial_batch + brownies_office + brownies_home
    brownies_left = brownies_total - brownies_eaten
    result = brownies_left
    return result

 Executed result: 45
[EXP] 968: [success_rate]: True, [answer]: 30, [output]: def solution():
    age_nani = 8
    age_brother = age_nani * 2
    age_sister = age_nani * (1 - 0.25)
    total_age = age_nani + age_brother + age_sister
    result = total_age
    return result

 Executed result: 30.0
[EXP] 969: [success_rate]: True, [answer]: 227, [output]: 
def solution():
    synthetic_gut = 3
    polyester = 5
    hybrid = 4
    synthetic_time = synthetic_gut * 15
    polyester_time = polyester * 22
    hybrid_time = hybrid * 18
    total_time = synthetic_time + polyester_time + hybrid_time
    result = total_time
    return result

 Executed result: 227
[EXP] 970: [success_rate]: False, [answer]: 1800, [output]: def solution():
    phone_price = 600
    initial_phone = 2
    phone_cost = phone_price
    total_cost = 0
    for i in range(initial_phone, 4):
        if i > initial_phone:
            phone_cost = phone_cost / 2
        total_cost = total_cost + phone_cost
    result = total_cost
    return result

 Executed result: 900.0
[EXP] 971: [success_rate]: True, [answer]: 33, [output]: 
def solution():
    carltons_team = 13
   zekes_TEAM = carltons_team + 7
    total_players = carltons_team + zekes_TEAM
    result = total_players
    return result

 Executed result: 33
[EXP] 972: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    perimeter = 2 * (15 + 10)
    slats_per_foot = 2
    total_slats = perimeter * slats_per_foot
    result = total_slats
    return result

 Executed result: 100
[EXP] 973: [success_rate]: True, [answer]: 120, [output]: def solution():
    boxes_initial = 12
    boxes_given = 2 * 2
    boxes_kept = boxes_initial - boxes_given
    boxes_for_selling = boxes_kept // 4
    boxes_not_sold = boxes_kept - boxes_for_selling
    oranges_per_box = 20
    total_oranges_not_sold = boxes_not_sold * oranges_per_box
    result = total_oranges_not_sold
    return result

 Executed result: 120
[EXP] 974: [success_rate]: False, [answer]: 79, [output]: def solution():
    states_in_usa = 50
    states_in_india = (states_in_usa * 2) + 4
    total_states = states_in_usa + states_in_india
    result = total_states
    return result

 Executed result: 154
[EXP] 975: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_cost = 18 + 13 + 8
    total_saved = 14
    remaining_balance = total_cost - total_saved
    hourly_wage = 5
    hours_to_pay_bill = remaining_balance / hourly_wage
    result = hours_to_pay_bill
    return result

 Executed result: 5.0
[EXP] 976: [success_rate]: True, [answer]: 20, [output]: def solution():
    total_cherries = 60
    robert_cherries = 30
    robert_cherries_minus_richard_cherries = 10

    # Calculate Richard's cherries
    richard_cherries = robert_cherries - robert_cherries_minus_richard_cherries

    # Calculate Jerry's cherries
    jerry_cherries = total_cherries - robert_cherries - richard_cherries

    # Calculate the difference
    result = robert_cherries - jerry_cherries

    return result

 Executed result: 20
[EXP] 977: [success_rate]: False, [answer]: 540, [output]: 
def solution():
    gingerbread_boxes_saturday = 10
    apple_pie_boxes_sunday = gingerbread_boxes_saturday + 6
    apple_pie_boxes_saturday = apple_pie_boxes_sunday - 4

    gingerbread_boxes_sunday = gingerbread_boxes_saturday + 5

    gingerbread_revenue_saturday = gingerbread_boxes_saturday * 6
    apple_pie_revenue_saturday = apple_pie_boxes_saturday * 15
    gingerbread_revenue_sunday = gingerbread_boxes_sunday * 6
    apple_pie_revenue_sunday = apple_pie_boxes_sunday * 15

    total_revenue_saturday = gingerbread_revenue_saturday + apple_pie_revenue_saturday
    total_revenue_sunday = gingerbread_revenue_sunday + apple_pie_revenue_sunday

    total_revenue = total_revenue_saturday + total_revenue_sunday

    result = total_revenue
    return result

 Executed result: 570
[EXP] 978: [success_rate]: True, [answer]: 4, [output]: def solution():
    hours_per_day = 4
    num_days = 8
    total_hours = hours_per_day * num_days
    total_ounces = total_hours
    bottles_per_8oz = 8  # ounces per bottle
    bottles_needed = total_ounces // bottles_per_8oz
    result = bottles_needed
    return result

 Executed result: 4
[EXP] 979: [success_rate]: True, [answer]: 160, [output]: def solution():
    price_blue_car = 100
    discount = (40 / 100) # convert discount to decimal
    price_red_car = price_blue_car * (1 - discount)
    result = price_red_car + price_blue_car
    return result

 Executed result: 160.0
[EXP] 980: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    age_emil = 19
    age_emil_when_24 = 24
    age_emil_at_24 = age_emil_when_24 - age_emil
    age_dad_at_24 = 2 * age_emil_at_24
    age_brother_at_24 = 2 * age_emil_at_24
    age_dad_now = age_dad_at_24 - age_emil_at_24
    age_brother_now = age_brother_at_24 - age_emil_at_24
    result = age_dad_now + age_brother_now
    return result

 Executed result: 10
[EXP] 981: [success_rate]: True, [answer]: 90, [output]: def solution():
    mother_beads = 20
    sister_beads = mother_beads + 10
    friend_beads = mother_beads * 2
    total_beads = mother_beads + sister_beads + friend_beads
    result = total_beads
    return result

 Executed result: 90
[EXP] 982: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    crawfish_caught_thursday = 3
    crawfish_caught_friday = crawfish_caught_thursday * 4
    crawfish_caught_saturday = crawfish_caught_friday // 2
    total_crawfish_caught = crawfish_caught_thursday + crawfish_caught_friday + crawfish_caught_saturday
    servings = total_crawfish_caught // 3
    result = servings
    return result

 Executed result: 7
[EXP] 983: [success_rate]: True, [answer]: 12, [output]: def solution():
    class_size = 30
    football_players = 0.2 * class_size
    students_remaining = class_size - football_players
    cheerleaders_band = 0.25 * students_remaining
    total_students_leaving = football_players + cheerleaders_band
    result = total_students_leaving
    return result

 Executed result: 12.0
[EXP] 984: [success_rate]: True, [answer]: 15, [output]: def solution():
    sophie_boot_size = 5
    charlie_boot_size = 5 * sophie_boot_size
    average_boot_size = (sophie_boot_size + charlie_boot_size) / 2
    result = average_boot_size
    return result

 Executed result: 15.0
[EXP] 985: [success_rate]: False, [answer]: 342, [output]: 
def solution():
    flower_bed_length = 111
    flower_width = 12
    space_between_flowers = 18 # convert 1.5 feet to inches
    total_space_needed = flower_bed_length * 12 # convert feet to inches
    total_space_needed -= flower_bed_length * 12 # subtract the flower width
    flowers_needed = total_space_needed // (space_between_flowers + flower_width)
    flowers_needed += 1 # because we need at least 1 plant
    if flowers_needed < 17:
        flowers_needed = 17
    cost_per_flower = 6
    total_cost = flowers_needed * cost_per_flower
    result = total_cost
    return result

 Executed result: 102
[EXP] 986: [success_rate]: True, [answer]: 63, [output]: def solution():
    pretzels_edgar_eats_per_day = 18
    brother_eats_half_as_many = 1/2
    brother_eats_per_day = pretzels_edgar_eats_per_day * brother_eats_half_as_many
    pretzels_brother_eats_per_week = brother_eats_per_day * 7
    result = pretzels_brother_eats_per_week
    return result

 Executed result: 63.0
[EXP] 987: [success_rate]: True, [answer]: 70, [output]: def solution():
    num_baskets = 5
    petunias_per_basket = 3
    vines_per_basket = 2
    petunias_total = num_baskets * petunias_per_basket
    vines_total = num_baskets * vines_per_basket
    petunias_cost = petunias_total * 3
    vines_cost = vines_total * 2.5
    total_cost = petunias_cost + vines_cost
    result = total_cost
    return result

 Executed result: 70.0
[EXP] 988: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    pounds_soil = 30
    sunflowers = 4
    sunflower_pounds = sunflowers * 3
    carnations = 10
    carnation_pounds = carnations * 1.5
    total_pounds_used = sunflower_pounds + carnation_pounds
    pounds_left = pounds_soil - total_pounds_used
    pounds_per_rose = 1
    roses = pounds_left // pounds_per_rose
    result = roses
    return result

 Executed result: 3.0
[EXP] 989: [success_rate]: True, [answer]: 6, [output]: def solution():
    monthly_income = 2000
    percentage = 0.25
    monthly_savings = monthly_income * percentage
    monthly_savings_per_month = monthly_savings
    monthly_savings_per_year = monthly_savings_per_month * 12
    cost_per_shoe = 1000
    shoes_per_year = monthly_savings_per_year / cost_per_shoe
    result = shoes_per_year
    return result

 Executed result: 6.0
[EXP] 990: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    shrimp_per_minute_peel = 6
    shrimp_per_minute_cook = 30 / 10
    shrimp_total = 90
    time_peel = shrimp_total // shrimp_per_minute_peel
    time_cook = shrimp_total // shrimp_per_minute_cook
    time_total = time_peel + time_cook
    result = time_total
    return result

 Executed result: 45.0
[EXP] 991: [success_rate]: False, [answer]: 14, [output]: 
def solution():
    initial_room_temp = 0
    low_cooling_rate = 2
    high_cooling_rate = 3
    cooling_time_low = 3
    cooling_time_high = 4
    off_time = 2
    current_temp = initial_room_temp
    
    for _ in range(cooling_time_low):
        current_temp += low_cooling_rate

    for _ in range(cooling_time_high):
        current_temp += high_cooling_rate

    for _ in range(off_time):
        current_temp += 2  # the room warms up

    final_temp = current_temp
    result = final_temp
    return result

 Executed result: 22
[EXP] 992: [success_rate]: False, [answer]: 15, [output]: def solution():
    comet_period = 75
    bill_father_age = 30
    bill_age_first_time = comet_period * (bill_father_age // comet_period)
    bill_age_second_time = bill_father_age * 3
    age_difference = bill_age_second_time - bill_father_age
    age_bill_father_was_first_time = bill_age_second_time - age_difference
    result = age_bill_father_was_first_time
    return result

 Executed result: 30
[EXP] 993: [success_rate]: True, [answer]: 52, [output]: def solution():
    checks_per_month = 1 + 1 + 2  # 1 for electric bill, 1 for gas bill, 2 for church
    checks_per_quarter = 1  # 1 for pest and lawn service
    total_checks_per_year = 12 * checks_per_month + 4 * checks_per_quarter
    result = total_checks_per_year
    return result

 Executed result: 52
[EXP] 994: [success_rate]: True, [answer]: 11, [output]: 
def solution():
    flights_per_day = 100  # assuming the first plane flies at least 100 times a day
    flights_to_greece = flights_per_day * 0.75
    flights_to_france = (flights_per_day - flights_to_greece) / 2
    result = int(flights_to_france)
    return result

 Executed result: 12
[EXP] 995: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    tobas_lingth = 20
    chikote_lingth = 2 * tobas_lingth
    igneous_lingth = tobas_lingth + chikote_lingth
    total_lingth = tobas_lingth + chikote_lingth + igneous_lingth
    time_in_minutes = total_lingth / 60
    result = time_in_minutes
    return result

 Executed result: 2.0
[EXP] 996: [success_rate]: True, [answer]: 12, [output]: def solution():
    amount_for_trousers = 30
    money_from_mother = 6
    money_from_father = 2 * money_from_mother
    total_money_received = money_from_mother + money_from_father
    money_contributed = amount_for_trousers - total_money_received
    result = money_contributed
    return result

 Executed result: 12
[EXP] 997: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    total_age = 20
    akbar_age = 3
    alessandro_age = 4
    average_age = (total_age - akbar_age - alessandro_age) / 2
    helene_age = average_age * 2
    wilfred_age = total_age - akbar_age - alessandro_age - helene_age
    result = wilfred_age
    return result

 Executed result: 0.0
[EXP] 998: [success_rate]: False, [answer]: 6,600, [output]: 
def solution():
    money_from_neighbors = 500
    money_from_online = 1500
    money_from_friends = 200
    total_money_collected = money_from_neighbors + money_from_online + money_from_friends
    total_donation_lawyer = total_money_collected * 3
    return total_donation_lawyer

 Executed result: 6600
[EXP] 999: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    cookies_initial = 100 * 15
    cookies_given = cookies_initial * 0.5
    cookies_per_person = 15
    people_in_church = cookies_given / cookies_per_person
    result = round(people_in_church)
    return result

 Executed result: 50
[EXP] 1000: [success_rate]: False, [answer]: 25, [output]: def solution():
    adult_slices = 2
    kid_slices = 4
    total_slices = adult_slices + kid_slices
    adult_portion = (adult_slices / total_slices) * 100
    result = adult_portion
    return result

 Executed result: 33.33333333333333
[EXP] 1001: [success_rate]: True, [answer]: 1, [output]: def solution():
    clinic_hours = 9
    rounds_time = 9 * 20 / 60  # Convert 20 minutes to hours
    appointments_time = 10 * 30 / 60  # Convert 30 minutes to hours
    total_time_spent = rounds_time + appointments_time
    time_left = clinic_hours - total_time_spent
    result = time_left
    return result

 Executed result: 1.0
[EXP] 1002: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    make_batter_time = 20
    bake_time = 30
    cool_time = 120
    frost_time = 10
    total_time = make_batter_time + bake_time + cool_time + frost_time
    start_time = 300 - total_time  # subtract total_time from 5:00 pm
    result = f"Jordan should start making the cake at {start_time // 60}:{start_time % 60:02d} am."
    return result

 Executed result: Jordan should start making the cake at 2:00 am.
[EXP] 1003: [success_rate]: False, [answer]: 8, [output]: 
def solution():
    lisa_sold = 3.5
    peter_sold = 4.5
    total_sold = 64
    total_boxes = lisa_sold + peter_sold
    boxes_per_bar = 1
    bars_total = total_sold
    result = bars_total / boxes_per_bar
    return result

 Executed result: 64.0
[EXP] 1004: [success_rate]: True, [answer]: 480, [output]: def solution():
    session_cost = 25
    student_cost = 1.5
    students = 10
    sessions_per_week = 3
    weeks_in_month = 4
    weekly_earnings = (session_cost + (students * student_cost)) * sessions_per_week
    total_earnings = weekly_earnings * weeks_in_month
    result = total_earnings
    return result

 Executed result: 480.0
[EXP] 1005: [success_rate]: True, [answer]: 8, [output]: python
def solution():
    peter_total = 64
    martha_total = 56
    peter_boxes = 4
    martha_boxes = 7
    peter_chocolates_per_box = peter_total // peter_boxes
    martha_chocolates_per_box = martha_total // martha_boxes
    difference = peter_chocolates_per_box - martha_chocolates_per_box
    result = difference
    return result

 Executed result: 8
[EXP] 1006: [success_rate]: False, [answer]: 1490, [output]: 
def solution():
    population = 50
    percentage_female = 3.0/5.0
    female_population = population * percentage_female
    female_babies_per_month = 4
    males_now = population - female_population
    female_babies = female_population * female_babies_per_month
    total_babies = female_babies
    males_in_year = males_now + (female_babies * 12)
    total_porcupines = population + total_babies
    result = total_porcupines
    return result

 Executed result: 170.0
[EXP] 1007: [success_rate]: True, [answer]: 826, [output]: def solution():
    pool_width = 14
    pool_length = 25
    pool_depth = 4
    volume_pool = pool_width * pool_length * pool_depth
    volume_needed = volume_pool * 5.9
    cost_gallon = 0.10
    total_cost = volume_needed * cost_gallon
    result = total_cost
    return result

 Executed result: 826.0
[EXP] 1008: [success_rate]: True, [answer]: 34, [output]: 
def solution():
    red_sticks = 9
    blue_sticks = red_sticks + 5
    yellow_sticks = blue_sticks - 3
    total_sticks = red_sticks + blue_sticks + yellow_sticks
    result = total_sticks
    return result

 Executed result: 34
[EXP] 1009: [success_rate]: True, [answer]: 230, [output]: 
def solution():
    matteo_speed = 55
    matteo_hours = 4
    matteo_miles = matteo_speed * matteo_hours
    shandy_speed = 45
    shandy_hours = 10
    shandy_miles = shandy_speed * shandy_hours
    distance_difference = shandy_miles - matteo_miles
    result = distance_difference
    return result

 Executed result: 230
[EXP] 1010: [success_rate]: False, [answer]: 1,875, [output]: def solution():
    total_students = 3000
    students_over_16 = total_students // 2
    students_under_16 = total_students - students_over_16
    
    students_over_16_male = students_over_16 // 4
    students_under_16_male = students_under_16 // 2
    
    students_over_16_female = students_over_16 - students_over_16_male
    students_under_16_female = students_under_16 - students_under_16_male
    
    total_female_students = students_over_16_female + students_under_16_female
    result = total_female_students
    return result

 Executed result: 1875
[EXP] 1011: [success_rate]: True, [answer]: 5, [output]: def solution():
    bethany_laps = 10
    trey_laps = bethany_laps + 4
    shaelyn_laps = trey_laps / 2
    quinn_laps = shaelyn_laps - 2
    diff = bethany_laps - quinn_laps
    result = diff
    return result

 Executed result: 5.0
[EXP] 1012: [success_rate]: False, [answer]: 6000, [output]: 
def solution():
    tank_capacity = 18000
    water_pumped_by_wanda_day1 = tank_capacity / 4
    water_pumped_by_msb_day1 = water_pumped_by_wanda_day1 * 3/4
    water_pumped_by_wanda_day2 = water_pumped_by_water_pumped_by_wanda_day1 * 2/3
    water_pumped_by_msb_day2 = water_pumped_by_msb_day1 * 1/3
    water_pumped_in_two_days = water_pumped_by_wanda_day1 + water_pumped_by_msb_day1 + water_pumped_by_wanda_day2 + water_pumped_by_msb_day2
    water_left = tank_capacity - water_pumped_in_two_days
    result = water_left
    return result

 Executed result: None
[EXP] 1013: [success_rate]: False, [answer]: 94, [output]: def solution():
    percent_charged_initial = 100
    percent_lost_hourly_initial = 0.09
    hours_lost_initial = 5
    percent_charged_remaining = 28
    percent_charged_final = (percent_charged_initial * (1 - hours_lost_initial * percent_lost_hourly_initial))
    percent_loss_hourly_secondary = 0.07
    hours_lost_secondary = 3
    new_percent_charged_remaining = percent_charged_final * (1 - hours_lost_secondary * percent_loss_hourly_secondary)
    result = new_percent_charged_remaining
    return result

 Executed result: 43.45000000000001
[EXP] 1014: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    hourly_wage = 10
    hourly_tip = 15
    hours_per_week = 40
    weeks_to_work = 0
    total_weekly_income = hourly_wage * hours_per_week + hourly_tip * hours_per_week
    total_savings_needed = 0.20 * 10000
    while total_weekly_income * weeks_to_work < total_savings_needed:
        weeks_to_work += 1
    result = weeks_to_work
    return result

 Executed result: 2
[EXP] 1015: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    total_money = 10
    tax = 0.10
    peach_cost = 0.5
    pear_cost = 0.5
    kiwi_cost = 1
    apple_cost = 0.75
    plum_cost = 0.25

    money_spent_already = (3 * peach_cost) + (4 * pear_cost) + (2 * kiwi_cost) + (5 * apple_cost)
    money_spent_already += money_spent_already * tax

    money_left = total_money - money_spent_already

    plums_cost = money_left / plum_cost
    result = plums_cost
    return result

 Executed result: -0.7000000000000028
[EXP] 1016: [success_rate]: True, [answer]: 78, [output]: 
def solution():
    total_pieces = 15 * 60
    kept_pieces = 2 * 60
    remaining_pieces = total_pieces - kept_pieces
    friends = 10
    pieces_per_friend = remaining_pieces // friends
    result = pieces_per_friend
    return result

 Executed result: 78
[EXP] 1017: [success_rate]: False, [answer]: 138, [output]: python
def solution():
    price_initial = 120
    percentage_increase = 0.05
    years = 3
    for _ in range(years):
        price = price_initial * (1 + percentage_increase)
        price_initial = round(price)
    result = price_initial
    return result

 Executed result: 126
[EXP] 1018: [success_rate]: False, [answer]: 45, [output]: python
def solution():
    total_pictures = 72
    albums = 8
    pictures_per_album = total_pictures // albums
    selfie_albums = 3
    portrait_albums = 2
    selfies = selfie_albums * pictures_per_album
    portraits = (albums - selfie_albums - portrait_albums) * pictures_per_album
    result = (selfies, portraits)
    return result

 Executed result: (27, 27)
[EXP] 1019: [success_rate]: False, [answer]: 60, [output]: def solution():
    pages_per_minute = 3
    total_pages = 18
    pages_read = total_pages / (pages_per_minute / 10)
    result = int(pages_read * 10)
    return result

 Executed result: 600
[EXP] 1020: [success_rate]: False, [answer]: 98, [output]: def solution():
    guests_initial = 100
    guests_early_checkout = 24
    guests_late_checkout = 15
    guests_checked_in_twice = 2 * guests_late_checkout
    guests_checked_in_after_dinner = 7
    guests_checked_out = guests_early_checkout
    guests_arrived = guests_checked_in_twice + guests_checked_in_after_dinner
    guests_now = guests_initial + guests_arrived - guests_checked_out
    result = guests_now
    return result

 Executed result: 113
[EXP] 1021: [success_rate]: True, [answer]: 22, [output]: 
def solution():
    bananas_wednesday = 4
    bananas_thursday = 6
    bananas_friday = bananas_wednesday * 3
    total_bananas = bananas_wednesday + bananas_thursday + bananas_friday
    result = total_bananas
    return result

 Executed result: 22
[EXP] 1022: [success_rate]: True, [answer]: 36, [output]: 
def solution():
    total_questions = 60
    easy_questions = 0.40 * total_questions
    easy_questions_he_sure_to_get = 0.75 * easy_questions

    average_difficult_questions = total_questions - easy_questions
    average_difficult_questions_he_sure_to_get = 0.5 * average_difficult_questions

    easy_questions_he_sure_to_get = int(easy_questions_he_sure_to_get)
    average_difficult_questions_he_sure_to_get = int(average_difficult_questions_he_sure_to_get)

    total_points_he_sure_to_get = easy_questions_he_sure_to_get + average_difficult_questions_he_sure_to_get
    result = int(total_points_he_sure_to_get)
    return result

 Executed result: 36
[EXP] 1023: [success_rate]: False, [answer]: 12, [output]: def solution():
    sales = 120
    small_cost = 4
    small_sold = sales / (small_cost * 3)
    result = int(small_sold / 2)
    return result

 Executed result: 5
[EXP] 1024: [success_rate]: True, [answer]: 77, [output]: 
def solution():
    man_sandwiches_per_day = 5
    wife_sandwiches_per_day = 4
    son_sandwiches_per_day = 2
    total_sandwiches_per_day = man_sandwiches_per_day + wife_sandwiches_per_day + son_sandwiches_per_day
    sandwiches_per_week = total_sandwiches_per_day * 7
    result = sandwiches_per_week
    return result

 Executed result: 77
[EXP] 1025: [success_rate]: True, [answer]: 300, [output]: def solution():
    cookies_sold = 80
    cookies_price = 1
    cookies_earned = cookies_sold * cookies_price
    
    cupcakes_sold = 60
    cupcakes_price = 4
    cupcakes_earned = cupcakes_sold * cupcakes_price
    
    total_earned = cookies_earned + cupcakes_earned
    
    money_given_to_sisters = 2 * 10
    
    money_left = total_earned - money_given_to_sisters
    
    result = money_left
    
    return result

 Executed result: 300
[EXP] 1026: [success_rate]: True, [answer]: 30, [output]: def solution():
    total_eggs = 100
    smith_eggs = 30 * 2
    smith_eggs = smith_eggs
    friends_eggs = total_eggs - smith_eggs - 10
    result = friends_eggs
    return result

 Executed result: 30
[EXP] 1027: [success_rate]: False, [answer]: 43200, [output]: def solution():
    pounds_per_dwarf_per_day_steel = 12 * 1.5  # first, find the pounds per day per dwarf with a steel pickaxe
    pounds_per_dwarf_per_month_steel = pounds_per_dwarf_per_day_steel * 30  # pounds per month per dwarf
    pounds_all_dwarves_per_month_steel = pounds_per_dwarf_per_month_steel * 40  # pounds all dwarves in a month
    result = pounds_all_dwarves_per_month_steel
    return result

 Executed result: 21600.0
[EXP] 1028: [success_rate]: False, [answer]: 12, [output]: def solution():
    price_per_one_sandwich = (3 - 6) / (2 - 4)
    price_package_8_sandwiches = price_per_one_sandwich * 8
    result = 6 * 2 + price_package_8_sandwiches
    return result

 Executed result: 24.0
[EXP] 1029: [success_rate]: True, [answer]: 200, [output]: def solution():
    bedroom_set_cost = 3000
    old_bedroom_sell = 1000
    payment = bedroom_set_cost - old_bedroom_sell
    monthly_interest = payment * 0.1
    result = monthly_interest
    return result

 Executed result: 200.0
[EXP] 1030: [success_rate]: False, [answer]: 34, [output]: 
def solution():
    red_balloons = 25
    red_balloons_burst = int(0.4 * red_balloons)
    red_balloons_left = red_balloons - red_balloons_burst
    yellow_balloons = 12
    yellow_balloons_released = int(0.5 * yellow_balloons)
    yellow_balloons_left = yellow_balloons - yellow_balloons_released
    blue_balloons = 8
    blue_balloons_added = int(0.75 * blue_balloons)
    total_balloons = red_balloons_left + yellow_balloons_left + blue_balloons_added
    return total_balloons

 Executed result: 27
[EXP] 1031: [success_rate]: False, [answer]: 24, [output]: def solution():
    chance_no_homework = 0.5
    chance_extension = 0.4
    chance_personal_extension = 0.2
    chance_turn_in_homework = 1 - (chance_no_homework * chance_extension * chance_extension * chance_extension)
    result = chance_turn_in_homework * 100
    return result

 Executed result: 96.8
[EXP] 1032: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    space_available = 6000
    seats_claimed = 950 + 300
    tickets_available = space_available - seats_claimed
    graduate_tickets = tickets_available // 950
    result = graduate_tickets
    return result

 Executed result: 5
[EXP] 1033: [success_rate]: True, [answer]: 450, [output]: 
def solution():
    large_beans = 75
    medium_beans = large_beans * 2
    small_beans = medium_beans * 3
    result = small_beans
    return result

 Executed result: 450
[EXP] 1034: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    hours_per_day = 6
    days = 3
    hours_total = hours_per_day * days
    payment_per_day = 15
    parking_cost_per_day = 3
    daily_expenses = parking_cost_per_day
    total_expenses = daily_expenses * days
    total_pay = payment_per_day * days
    total_net_pay = total_pay - total_expenses
    net_pay_per_hour = total_net_pay / hours_total
    result = net_pay_per_hour
    return result

 Executed result: 2.0
[EXP] 1035: [success_rate]: True, [answer]: 66, [output]: 
def solution():
    money_initial = 200
    books_cost = 3 * 16
    pencils_cost = 3 * 6
    total_cost = books_cost + pencils_cost
    money_left = money_initial - total_cost
    result = total_cost
    return result

 Executed result: 66
[EXP] 1036: [success_rate]: False, [answer]: 35, [output]: def solution():
    feet_driveway = 24
    feet_between_bottles = 3
    seconds_per_bottle = 5
    total_seconds = feet_driveway // feet_between_bottles  # calculate total number of bottles
    seconds_setting_up = total_seconds * seconds_per_bottle  # calculate total setting up time
    result = seconds_setting_up
    return result

 Executed result: 40
[EXP] 1037: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    total_apples = 40 * 2
    apples_per_pack = 8
    result = total_apples // apples_per_pack
    return result

 Executed result: 10
[EXP] 1038: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    parmesan_price = 11
    mozzarella_price = 6
    parmesan_pounds = 2
    mozzarella_pounds = 3
    total_price = (parmesan_price * parmesan_pounds) + (mozzarella_price * mozzarella_pounds)
    money_initial = 50
    money_left = money_initial - total_price
    result = money_left
    return result

 Executed result: 10
[EXP] 1039: [success_rate]: False, [answer]: 4, [output]: def solution():
    loans_per_year = 50000
    college_years = 4
    loan_cost = loans_per_year * college_years
    pre_degree_salary = 25000
    money_lost = pre_degree_salary * college_years
    total_all = loan_cost + money_lost
    post_degree_salary = pre_degree_salary * 3
    salary_difference = post_degree_salary - pre_degree_salary
    time_to_earn = total_all / salary_difference
    result = time_to_earn
    return result

 Executed result: 6.0
[EXP] 1040: [success_rate]: False, [answer]: 160, [output]: 
def solution():
    bed_length = 6
    bed_width = 8
    add_length = 2
    add_width = 2
    fabric_length = bed_length + add_length * 2
    fabric_width = bed_width + add_width * 2
    fabric_area = fabric_length * fabric_width
    result = fabric_area
    return result

 Executed result: 120
[EXP] 1041: [success_rate]: True, [answer]: 736, [output]: def solution():
    letters_monday = 425
    letters_tuesday = 425 // 5 + 17
    letters_wednesday = 2 * letters_tuesday + 5
    letters_total = letters_monday + letters_tuesday + letters_wednesday
    result = letters_total
    return result

 Executed result: 736
[EXP] 1042: [success_rate]: True, [answer]: 101, [output]: 
def solution():
    chicken_salad_people = 10
    pasta_salad_people = 6
    chicken_salad_cost = chicken_salad_people * 6.50
    pasta_salad_cost = pasta_salad_people * 6
    total_cost = chicken_salad_cost + pasta_salad_cost
    result = total_cost
    return result

 Executed result: 101.0
[EXP] 1043: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    race_one_loss = 5
    race_two_win = 2 * race_one_loss + 1
    race_three_loss = 1.5 * race_two_win
    total_loss = race_one_loss + race_three_loss
    average_loss = total_loss / 3
    result = average_loss
    return result

 Executed result: 7.166666666666667
[EXP] 1044: [success_rate]: True, [answer]: 130000, [output]: def solution():
    countries = 26
    cities_per_country = 5
    people_per_city = 1000
    total_people_per_country = cities_per_country * people_per_city
    total_people = countries * total_people_per_country
    result = total_people
    return result

 Executed result: 130000
[EXP] 1045: [success_rate]: False, [answer]: 1, [output]: def solution():
    xavier_initial = 4
    xavier_growth = 3
    xavier_height = xavier_initial + xavier_growth
    cole_initial = 50
    cole_growth = 2
    cole_height = cole_initial + cole_growth
    difference = abs(cole_height - xavier_height)
    result = difference
    return result

 Executed result: 45
[EXP] 1046: [success_rate]: False, [answer]: 420, [output]: def solution():
    total_amount = 1920
    secondpersons_share = 80
    thirdpersons_share = secondpersons_share * 2
    firstpersons_share = (total_amount - secondpersons_share - thirdpersons_share)
    result = firstpersons_share
    return result

 Executed result: 1680
[EXP] 1047: [success_rate]: False, [answer]: 189, [output]: 
def solution():
    painters = 4
    days_per_week = 7
    weeks = 3
    hours_per_day = 24
    hours_per_week = hours_per_day / 24
    time_per_day = 3 / 8
    total_time_per_week = time_per_day * hours_per_day
    total_time = total_time_per_week * weeks * days_per_week
    hours_per_painter = total_time / painters
    result = hours_per_painter
    return result

 Executed result: 47.25
[EXP] 1048: [success_rate]: False, [answer]: 10, [output]: 
def solution():
    total_balls = 19
    difference_between_first_and_second_sets = 4
    second_set = (total_balls + difference_between_first_and_second_sets) / 2
    balls_in_first_set = second_set + difference_between_first_and_second_sets
    result = balls_in_first_set
    return result

 Executed result: 15.5
[EXP] 1049: [success_rate]: False, [answer]: 7400, [output]: 
def solution():
    car_price_initial = 20000
    rate_of_depreciation = 0.21
    year=2007
    while year <= 2010:
        car_price = car_price_initial * (1 - rate_of_depreciation) ** (year - 2007)
        year += 1
    result = car_price
    return result

 Executed result: 9860.78
[EXP] 1050: [success_rate]: True, [answer]: 20, [output]: def solution():
    total_books = 50
    english_books = 0.5 * total_books
    german_books = 0.1 * total_books
    spanish_books = total_books - english_books - german_books
    result = spanish_books
    return result

 Executed result: 20.0
[EXP] 1051: [success_rate]: True, [answer]: 655, [output]: def solution():
    total_distance = 1955
    distance_driven = 325 * 4
    distance_left = total_distance - distance_driven
    result = distance_left
    return result

 Executed result: 655
[EXP] 1052: [success_rate]: True, [answer]: 15, [output]: def solution():
    cups_per_day = 8
    days = 30
    cups_in_a_gallon = 16
    cups_drunk_in_30_days = cups_per_day * days
    gallons_drunk_in_30_days = cups_drunk_in_30_days / cups_in_a_gallon
    result = gallons_drunk_in_30_days
    return result

 Executed result: 15.0
[EXP] 1053: [success_rate]: True, [answer]: 110, [output]: 
def solution():
    total_people_train = 120
    people_descriptor_at_start = 20
    people_boarded_at_start = people_descriptor_at_start
    people_descended_at_second_stop = 50
    people_boarded_at_second_stop = 2 * people_descended_at_second_stop
    total_people_at_second_stop = total_people_train + people_boarded_at_start + people_boarded_at_second_stop - people_descended_at_second_stop
    people_descended_at_third_stop = 80
    total_people_at_final_stop = total_people_at_second_stop - people_descended_at_third_stop
    result = total_people_at_final_stop
    return result

 Executed result: 110
[EXP] 1054: [success_rate]: True, [answer]: 55, [output]: def solution():
    tank_top_cost = 10
    shorts_cost = tank_top_cost + 5
    shoes_cost = 48 / 2
    socks_cost = 8 - 2
    total_cost = tank_top_cost + shorts_cost + shoes_cost + socks_cost
    result = total_cost
    return result

 Executed result: 55.0
[EXP] 1055: [success_rate]: True, [answer]: 2400, [output]: 
def solution():
    area_kitchen = 200
    length_tile = 1
    width_tile = 1
    area_tile = length_tile * width_tile
    tiles_required = area_kitchen / area_tile
    tiles_required = round(tiles_required + 0.5)
    tiles_required = int(tiles_required)
    price_tile = 12
    total_price = tiles_required * price_tile
    result = total_price
    return result

 Executed result: 2400
[EXP] 1056: [success_rate]: True, [answer]: 2304, [output]: 
def solution():
    normal_cost = 120
    increase = 0.6
    cost_with_increase = normal_cost * (1 + increase)
    cost_per_year = cost_with_increase * 12
    result = cost_per_year
    return result

 Executed result: 2304.0
[EXP] 1057: [success_rate]: True, [answer]: 156, [output]: def solution():
    beds_per_week = 4 + 1
    twin_beds_per_load = 2
    king_bed_per_load = 1
    loads_per_twin_bed = 1
    loads_per_king_bed = 1
    loads_per_week = (loads_per_twin_bed * twin_beds_per_load) + loads_per_king_bed
    loads_per_year = loads_per_week * 52
    result = loads_per_year
    return result

 Executed result: 156
[EXP] 1058: [success_rate]: True, [answer]: 24, [output]: 
def solution():
    movies_per_sat = 4
    movies_per_sun = movies_per_sat / 2
    total_movies_per_week = movies_per_sat + movies_per_sun
    weeks = 4
    total_movies = total_movies_per_week * weeks
    result = total_movies
    return result

 Executed result: 24.0
[EXP] 1059: [success_rate]: False, [answer]: 250, [output]: def solution():
    stickers_initial = 100
    stickers_last_year = 50
    stickers_this_year = 2 * stickers_last_year
    stickers_total = stickers_initial - stickers_last_year + stickers_this_year
    result = stickers_total
    return result

 Executed result: 150
[EXP] 1060: [success_rate]: True, [answer]: 2, [output]: def solution():
    cat_food_total = 720
    cat_food_per_day = 60
    cat_count = 3
    feeding_times_per_day = 2
    total_food_per_day = cat_food_per_day * feeding_times_per_day
    total_food_used = total_food_per_day * cat_count
    days_food_last = cat_food_total // total_food_used
    result = days_food_last
    return result

 Executed result: 2
[EXP] 1061: [success_rate]: True, [answer]: 31, [output]: 
def solution():
    slices_per_pizza = 8
    total_pizzas = 4
    total_slices = total_pizzas * slices_per_pizza

    jake_slices = 7  # Becky ate 10, so Jake ate 10 - 3 = 7
    silvia_slices = jake_slices * 2

    jake_total = jake_slices
    silvia_total = silvia_slices
    becky_total = 10
    total_slices_eaten = jake_total + silvia_total + becky_total

    result = total_slices_eaten
    return result

 Executed result: 31
[EXP] 1062: [success_rate]: True, [answer]: 58, [output]: 
def solution():
    total_time = 98
    difference_in_time = 18
    donovan_time = (total_time - difference_in_time) / 2
    betsy_time = total_time - donovan_time
    result = betsy_time
    return result

 Executed result: 58.0
[EXP] 1063: [success_rate]: True, [answer]: 482, [output]: def solution():
    cast_cost = 200
    visit_cost = 0.5 * 300  # 30 minutes is 0.5 hour
    painkiller_cost = 4 * 30
    parking_cost = 2 * 6
    total_cost = cast_cost + visit_cost + painkiller_cost + parking_cost
    result = total_cost
    return result

 Executed result: 482.0
[EXP] 1064: [success_rate]: True, [answer]: 320, [output]: def solution():
    emails_per_day = 80
    unnecessary_emails = emails_per_day * 0.2
    emails_to_respond = emails_per_day - unnecessary_emails
    emails_per_week = emails_per_day * 5
    emails_to_respond_in_a_week = emails_per_week - (unnecessary_emails * 5)
    result = emails_to_respond_in_a_week
    return result

 Executed result: 320.0
[EXP] 1065: [success_rate]: True, [answer]: 247, [output]: 
def solution():
    classes_monday = 32
    classes_tuesday = classes_monday * 2
    classes_wednesday = classes_monday * 3
    classes_thursday = 30
    classes_friday = 25
    total_classes = classes_monday + classes_tuesday + classes_wednesday + classes_thursday + classes_friday
    result = total_classes
    return result

 Executed result: 247
[EXP] 1066: [success_rate]: True, [answer]: 95, [output]: def solution():
    john_scores = [100, 100, 100, 80]
    total_score = sum(john_scores)
    average_score = total_score / 4
    result = average_score
    return result

 Executed result: 95.0
[EXP] 1067: [success_rate]: False, [answer]: 14, [output]: def solution():
    pizzas_initial = 20
    pizzas_eaten_glee = 0.7 * pizzas_initial
    pizzas_eaten_football = 2 * pizzas_eaten_glee
    pizzas_initial = pizzas_initial - pizzas_eaten_glee
    pizzas_football = 2 * pizzas_initial
    pizzas_eaten_football = 0.8 * pizzas_football
    total_pizzas_eaten = pizzas_eaten_glee + pizzas_eaten_football
    pizzas_left = pizzas_initial - pizzas_eaten_football
    result = pizzas_left
    return result

 Executed result: -3.6000000000000014
[EXP] 1068: [success_rate]: True, [answer]: 245, [output]: 
def solution():
    small_coupons = 700
    big_coupons = 2 * small_coupons
    total_coupons = small_coupons + big_coupons
    cost_of_small_coupons = small_coupons * 0.05
    cost_of_big_coupons = big_coupons * 0.15
    total_cost = cost_of_small_coupons + cost_of_big_coupons
    result = total_cost
    return result

 Executed result: 245.0
[EXP] 1069: [success_rate]: True, [answer]: 24, [output]: 
def solution():
    meatballs_per_sub = 4
    sub_sandwiches_order = 10 - 3
    meatballs_order = meatballs_per_sub * sub_sandwiches_order
    meatballs_eaten = 4 * meatballs_per_sub
    meatballs_reorder = 3 * meatballs_per_sub
    meatballs_left = meatballs_order - meatballs_eaten + meatballs_reorder
    result = meatballs_left
    return result

 Executed result: 24
[EXP] 1070: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    trucks_initial = 20
    tons_per_truck = 20
    total_tons_initial = trucks_initial * tons_per_truck

    trucks_failed = int(trucks_initial / 4)
    trucks_success = trucks_initial - trucks_failed

    tons_success = trucks_success * tons_per_truck

    result = tons_success

    return result

 Executed result: 300
[EXP] 1071: [success_rate]: False, [answer]: 18, [output]: def solution():
    butter_pounds = 6
    butter_cost = 4.0
    discount = 1/2
    price_before_discount = butter_pounds * butter_cost
    discount_amount = price_before_discount * discount
    price_after_discount = price_before_discount - discount_amount
    result = price_after_discount
    return result

 Executed result: 12.0
[EXP] 1072: [success_rate]: True, [answer]: 251, [output]: def solution():
    theater_fee = 125
    base_guests = 20
    class_guests = 25 + 7
    family_guests = 13
    total_guests = class_guests + family_guests - 4
    total_guests_over_base = total_guests - base_guests
    party_cost = theater_fee + (total_guests_over_base * 6)
    result = party_cost
    return result

 Executed result: 251
[EXP] 1073: [success_rate]: True, [answer]: 85, [output]: def solution():
    maggie_money = 60
    riza_money = 60

    maggie_spend = maggie_money / 4
    riza_spend = riza_money / 3

    maggie_left = maggie_money - maggie_spend
    riza_left = riza_money - riza_spend

    total_maggie_left = maggie_left
    total_riza_left = riza_left
    
    total_left = total_maggie_left + total_riza_left
    result = total_left
    return result

 Executed result: 85.0
[EXP] 1074: [success_rate]: False, [answer]: 21, [output]: def solution():
    total_bananas = 315
    days = 7
    monkey1_bananas = 10
    monkey2_bananas = monkey1_bananas + 4
    total_bananas_eaten_per_day = monkey1_bananas + monkey2_bananas + 315 // days - monkey1_bananas - monkey2_bananas
    third_monkey_bananas = total_bananas_eaten_per_day // days
    result = third_monkey_bananas
    return result

 Executed result: 6
[EXP] 1075: [success_rate]: False, [answer]: 750, [output]: def solution():
    puzzle_pieces_in_first_puzzle = 500
    puzzle_pieces_in_second_puzzle = 500
    puzzle_pieces_teddy_placed = puzzle_pieces_in_first_puzzle + puzzle_pieces_in_second_puzzle
    result = puzzle_pieces_teddy_placed
    return result

 Executed result: 1000
[EXP] 1076: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    num_roses = 15
    cost_per_roses = 2
    cost_for_dozen_roses = 15
    total_cost = num_roses * cost_per_roses
    if num_roses % 12 != 0:
        total_cost += cost_for_dozen_roses - cost_per_roses * 12
    else:
        total_cost -= cost_for_dozen_roses
    initial_money = 5 * 5
    quarter = 0.25
    change = initial_money - total_cost
    num_quarters = int(change / quarter)
    result = num_quarters
    return result

 Executed result: 16
[EXP] 1077: [success_rate]: True, [answer]: 162, [output]: 
def solution():
    milkshakes_sold = 6
    milkshake_price = 5.50
    milkshake_total = milkshakes_sold * milkshake_price

    burger_platters_sold = 9
    burger_platter_price = 11
    burger_platter_total = burger_platters_sold * burger_platter_price

    sodas_sold = 20
    soda_price = 1.50
    soda_total = sodas_sold * soda_price

    total_sales = milkshake_total + burger_platter_total + soda_total
    result = total_sales
    return result

 Executed result: 162.0
[EXP] 1078: [success_rate]: False, [answer]: 145, [output]: 
def solution():
    time_first_train_arrives = 10
    time_first_train_stays = 20
    time_second_train_arrives = time_first_train_arrives + time_first_train_stays
    time_second_train_stays = time_first_train_stays // 4
    time_third_train_arrives = time_second_train_arrives + time_second_train_stays
    time_third_train_stays = 0
    time_fourth_train_arrives = time_third_train_arrives + time_third_train_stays
    paul_wait_time = time_fourth_train_arrives - time_first_train_arrives
    result = paul_wait_time
    return result

 Executed result: 25
[EXP] 1079: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    toothpicks_needed = 200
    toothpicks_saved_per_week = 10
    toothpicks_saved = toothpicks_saved_per_week * 12
    toothpicks_missing = toothpicks_needed - toothpicks_saved
    weeks_needed = toothpicks_missing / toothpicks_saved_per_week
    result = int(weeks_needed)
    return result

 Executed result: 8
[EXP] 1080: [success_rate]: True, [answer]: 10, [output]: def solution():
    original_price = 2000
    price_paid_by_mr_rogers = original_price * 0.75
    price_sold_to_friend = price_paid_by_mr_rogers * 1.2
    discount = (original_price - price_sold_to_friend) / original_price
    discount_percentage = discount * 100
    result = discount_percentage
    return result

 Executed result: 10.0
[EXP] 1081: [success_rate]: False, [answer]: 72000, [output]: 
def solution():
    springs = 5
    seconds_per_jellyfish = 2
    hours = 4
    minutes = hours * 60
    seconds = minutes * 60
    jellyfish_per_second = 1 / seconds_per_jellyfish
    jellyfish_per_minute = jellyfish_per_second * 60
    jellyfish_per_hour = jellyfish_per_minute * 60
    total_jellyfish_per_hour = springs * jellyfish_per_hour
    jellyfish_in_4_hours = total_jellyfish_per_hour * hours
    result = jellyfish_in_4_hours
    return result

 Executed result: 36000.0
[EXP] 1082: [success_rate]: True, [answer]: 195, [output]: def solution():
    binkie_score = 90
    frankie_score = 2 * binkie_score + 15
    result = frankie_score
    return result

 Executed result: 195
[EXP] 1083: [success_rate]: True, [answer]: 2, [output]: def solution():
    distance_to_store = 4
    speed = 4
    distance_half_way = distance_to_store / 2
    time_half_way = distance_half_way / speed
    time_first_half_trip = 2 * time_half_way
    result = time_first_half_trip
    return result

 Executed result: 1.0
[EXP] 1084: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    bananas_per_bunch = 4
    bunches_bought = 10
    total_bananas = bananas_per_bunch * bunches_bought

    individual_banana_price = 0.8
    individual_cost = total_bananas * individual_banana_price

    bunch_price = 3.0
    bunch_cost = bunches_bought * bunch_price

    savings = individual_cost - bunch_cost
    result = savings
    return result

 Executed result: 2.0
[EXP] 1085: [success_rate]: False, [answer]: 20, [output]: def solution():
    total_feet = 100
    sam_feet = 0
    harry_feet = 0
    for i in range(total_feet):
        if i <= (total_feet - 60):
            sam_feet += 1
        else:
            harry_feet += 1
    result = sam_feet
    return result

 Executed result: 41
[EXP] 1086: [success_rate]: False, [answer]: 26, [output]: def solution():
    inches_grown_per_year = 8
    years = 4
    inches_grown_in_those_years = inches_grown_per_year * years
    inches_grown_per_year_for_13_years = inches_grown_per_year * 13
    result = inches_grown_in_those_years + (inches_grown_per_year_for_13_years - inches_grown_per_year * 4)
    return result

 Executed result: 104
[EXP] 1087: [success_rate]: True, [answer]: 131250, [output]: def solution():
    mtb_price = 500
    bmx_price = mtb_price / 2
    trekking_price = 450
    total_bikes = 300
    trekking_bikes = total_bikes / 2
    bmx_bikes = total_bikes * 0.15
    mtb_bikes = total_bikes - trekking_bikes - bmx_bikes
    mtb_revenue = mtb_bikes * mtb_price
    bmx_revenue = bmx_bikes * bmx_price
    trekking_revenue = trekking_bikes * trekking_price
    total_revenue = mtb_revenue + bmx_revenue + trekking_revenue
    result = total_revenue
    return result

 Executed result: 131250.0
[EXP] 1088: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    bales_per_hour_farmer = 5
    bales_per_hour_truck = 3
    hours_worked = 6
    bales_farmer_made = bales_per_hour_farmer * hours_worked
    bales_truck_collected = bales_per_hour_truck * hours_worked
    total_bales_collected = bales_farmer_made + bales_truck_collected
    bales_left = 0  # Initialize the number of bales left to 0
    # Since this is a trick question, there is no information about the initial amount of hay.
    # Therefore, the function will correctly calculate the total number of bales collected, but not leave any information about the number of bales remaining in the field.
    result = total_bales_collected
    return result

 Executed result: 48
[EXP] 1089: [success_rate]: False, [answer]: 30, [output]: def solution():
    add_classes = 2
    class_length = 40
    class_minutes = add_classes * class_length
    days_a_week = 5  # normal 5 weekdays
    total_minutes_a_week = class_minutes * days_a_week
    saturday_learning_time = total_minutes_a_week / 16
    sunday_learning_time = saturday_learning_time
    total_learning_time_hours = (total_minutes_a_week + saturday_learning_time + sunday_learning_time) / 60
    result = total_learning_time_hours
    return result

 Executed result: 7.5
[EXP] 1090: [success_rate]: True, [answer]: 32, [output]: 
def solution():
    initial_height = 3 * 24
    height_after_first_bounce = 2 / 3 * initial_height
    height_after_second_bounce = 2 / 3 * height_after_first_bounce
    result = height_after_second_bounce
    return result

 Executed result: 32.0
[EXP] 1091: [success_rate]: True, [answer]: 72, [output]: 
def solution():
    first_child_height = 6 * 12  # convert feet to inches
    second_child_height = first_child_height + 2
    third_child_height = second_child_height - 5
    fourth_child_height = third_child_height + 3
    result = fourth_child_height
    return result

 Executed result: 72
[EXP] 1092: [success_rate]: False, [answer]: 1000, [output]: 
def solution():
    total_apples = 2000
    apples_per_bag = 10
    total_bags = total_apples // apples_per_bag  # integer division to find the number of full bags
    apples leftover = total_apples % apples_per_bag  # calculate the remaining apples
    if apples_leftover > 0:
        total_bags += 1  # add 1 more bag for the remaining apples
    revenue_per_bag = 5
    revenue = total_bags * revenue_per_bag
    result = revenue
    return result

 Executed result: 1005
[EXP] 1093: [success_rate]: True, [answer]: 1080, [output]: 
def solution():
    meat_left = 270
    raptors_eaten = meat_left
    allosaurus_eaten = raptors_eaten
    rex_eaten = allosaurus_eaten * 2
    original_meat = rex_eaten * 2
    result = original_meat
    return result

 Executed result: 1080
[EXP] 1094: [success_rate]: True, [answer]: 144, [output]: 
def solution():
    north_south_walls = 2
    wall_length = 10
    wall_height = 8
    area_north_south = north_south_walls * wall_length * wall_height
    east_west_walls = 2
    east_west_wall_length = 5
    east_west_wall_height = 8
    area_east_west = east_west_walls * east_west_wall_length * east_west_wall_height
    total_area = area_north_south + area_east_west
    area_per_gallon = 20
    total_gallons = total_area / area_per_gallon
    cost_per_gallon = 12
    total_cost = total_gallons * cost_per_gallon
    result = total_cost
    return result

 Executed result: 144.0
[EXP] 1095: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    sodas_initial = 12
    sodas_shaken = 9
    sodas_taken_ellen = 1
    sodas_taken_bro = 1 + 2
    total_sodas_left = sodas_initial - sodas_taken_ellen - sodas_taken_bro
    sodas_for_friend = total_sodas_left
    total_sodas_sprayed = sodas_broken = sodas_shaken  # since all cans are either shaken or unshaken
    probability_friend_gets_sprayed = (sodas_shaken / total_sodas_sprayed) * 100
    result = probability_friend_gets_sprayed
    return result

 Executed result: 100.0
[EXP] 1096: [success_rate]: True, [answer]: 270, [output]: 
def solution():
    distance_per_hour_km = 60
    other_distance_per_hour_km = distance_per_hour_km / 2
    total_distance_per_hour_km = distance_per_hour_km + other_distance_per_hour_km
    distance_after_3_hours_km = total_distance_per_hour_km * 3
    result = distance_after_3_hours_km
    return result

 Executed result: 270.0
[EXP] 1097: [success_rate]: False, [answer]: 240, [output]: def solution():
    days_in_march = 31
    days_off = 0.2 * days_in_march
    days_worked = days_in_march - days_off
    
    people_helped_per_hour = 2
    hours_worked_per_day = 3
    
    hours_worked = people_helped_per_hour * hours_worked_per_day
    people_helped = hours_worked * days_worked
    
    result = people_helped
    return result

 Executed result: 148.8
[EXP] 1098: [success_rate]: True, [answer]: 480, [output]: def solution():
    cars = 20
    buses = 12
    car_passengers = 3
    bus_capacity = 35
    total_car_passengers = cars * car_passengers
    total_bus_passengers = buses * bus_capacity
    total_people_inside = total_car_passengers + total_bus_passengers
    result = total_people_inside
    return result

 Executed result: 480
[EXP] 1099: [success_rate]: True, [answer]: 30, [output]: def solution():
    mike_age = 24
    martha_age = mike_age - 4
    jeff_age = martha_age + 10
    result = jeff_age
    return result

 Executed result: 30
[EXP] 1100: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    length_biggest_slide = 300
    speed_biggest_slide = 60
    length_second_biggest_slide = 240
    speed_second_biggest_slide = 80

    time_biggest_slide = length_biggest_slide / speed_biggest_slide
    time_second_biggest_slide = length_second_biggest_slide / speed_second_biggest_slide

    time_difference = time_biggest_slide - time_second_biggest_slide

    result = time_difference
    return result

 Executed result: 2.0
[EXP] 1101: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    lunch_minutes = 30
    break_minutes = 30  # 2 * 15 minutes break
    total_minutes_per_day = lunch_minutes + break_minutes
    minutes_after_five_days = total_minutes_per_day * 5
    hours = minutes_after_five_days / 60
    result = hours
    return result

 Executed result: 5.0
[EXP] 1102: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    miles_total = 52
    miles_amber = 8
    miles_micah = 3.5 * miles_amber  # miles_micah = 3.5 * 8 = 28
    miles_ahito = miles_total - miles_amber - miles_micah
    result = miles_ahito
    return result

 Executed result: 16.0
[EXP] 1103: [success_rate]: False, [answer]: 113, [output]: def solution():
    initial_balance = 85.00
    return_cost = 15.00

 Executed result: None
[EXP] 1104: [success_rate]: False, [answer]: 90, [output]: def solution():
    jellyfish_changed_color = 6  # jellyfish that changed color
    large_jellyfish_that_change_color = jellyfish_changed_color * 3  # (1/3) * 6 = 2
    total_large_jellyfish = large_jellyfish_that_change_color * 5  # (1/5) * 2 = 0.4 = 2 (approx.) rounded up, so 5
    small_jellyfish = total_large_jellyfish * 2  # 5 * 2 = 10
    total_jellyfish = large_jellyfish_that_change_color + small_jellyfish + jellyfish_changed_color
    result = total_jellyfish
    return result

 Executed result: 204
[EXP] 1105: [success_rate]: True, [answer]: 24, [output]: 
def solution():
    chris_age = 4
    ben_age = chris_age * 2
    caroline_age = ben_age * 3
    result = caroline_age
    return result

 Executed result: 24
[EXP] 1106: [success_rate]: False, [answer]: 40, [output]: 
def solution():
    salary = 100000
    annual_savings = 0.2 * salary
    living_cost = 0.4 * salary
    retirement_savings = 20 * salary * 0.2
    total_savings = annual_savings + living_cost
    years_to_save = retirement_savings / total_savings
    number_of_years = int(years_to_save)
    remaining_years = years_to_save - number_of_years
    result = round(remaining_years)
    return result

 Executed result: 1
[EXP] 1107: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    total_ribbon = 100
    cuts_to_divide_into_4 = 1
    cuts_to_divide_into_5 = 1
    length_per_cut_4 = total_ribbon / cuts_to_divide_into_4
    length_per_cut_5 = length_per_cut_4 / cuts_to_divide_into_5
    result = length_per_cut_5
    return result

 Executed result: 100.0
[EXP] 1108: [success_rate]: True, [answer]: 360, [output]: 
def solution():
    boys = 240
    total_students = boys / 0.4
    girls = total_students - boys
    result = girls
    return result

 Executed result: 360.0
[EXP] 1109: [success_rate]: True, [answer]: 38, [output]: 
def solution():
    pots_price = 19
    soil_price = 26
    total_price = pots_price + soil_price
    discount = 7
    final_price = total_price - discount
    result = final_price
    return result

 Executed result: 38
[EXP] 1110: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    women_with_4inchheels = 3
    women_with_2inchheels = 3
    total_height = 4 * women_with_4inchheels + 2 * women_with_2inchheels
    average_height = total_height / (women_with_4inchheels + women_with_2inchheels)
    result = average_height
    return result

 Executed result: 3.0
[EXP] 1111: [success_rate]: True, [answer]: 60, [output]: def solution():
    miles_to_walk = 9300
    days = 30
    miles_per_day_one_way = 125
    miles_per_day_total = miles_per_day_one_way * 2
    total_miles_per_day = miles_to_walk / days
    difference = total_miles_per_day - miles_per_day_total
    result = difference
    return result

 Executed result: 60.0
[EXP] 1112: [success_rate]: True, [answer]: 157, [output]: 
def solution():
    red_balls = 3
    blue_balls = 11
    green_balls = 25
    red_price = 9
    blue_price = 5
    green_price = 3
    total_revenue = red_balls * red_price + blue_balls * blue_price + green_balls * green_price
    result = total_revenue
    return result

 Executed result: 157
[EXP] 1113: [success_rate]: True, [answer]: 5, [output]: def solution():
    apples_initial = 12
    peter_apples = apples_initial / 4
    paul_apples = apples_initial / 3
    james_apples = apples_initial - peter_apples - paul_apples
    result = james_apples
    return result

 Executed result: 5.0
[EXP] 1114: [success_rate]: True, [answer]: -3, [output]: 
def solution():
    temperature_initial = 2
    temperature_dropped = 8
    temperature_increased = 3
    temperature_morning = temperature_initial - temperature_dropped + temperature_increased
    result = temperature_morning
    return result

 Executed result: -3
[EXP] 1115: [success_rate]: True, [answer]: 8, [output]: def solution():
    money_initial = 21
    money_saved = 11
    money_spent_comic_book = 5
    money_spent_puzzle = 19
    money_saved_directly = money_initial + money_saved
    money_spent = money_spent_comic_book + money_spent_puzzle
    money_left = money_saved_directly - money_spent
    result = money_left
    return result

 Executed result: 8
[EXP] 1116: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    budget_initial = 16
    budget_spent = 4
    budget_left = 2
    budget = budget_initial - budget_spent
    cost_per_book = (budget - budget_left) / 2
    result = cost_per_book
    return result

 Executed result: 5.0
[EXP] 1117: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    students_initial = 50
    increase_percentage = 20
    increase_value = (students_initial * increase_percentage) / 100
    students_added = increase_value
    students_total = students_initial + students_added
    result = students_total
    return result

 Executed result: 60.0
[EXP] 1118: [success_rate]: False, [answer]: 9, [output]: def solution():
    light_blanks_per_minute = 255
    total_blanks = 459
    minutes_to_blink = total_blanks / light_blanks_per_minute
    result = minutes_to_blink
    return result

 Executed result: 1.8
[EXP] 1119: [success_rate]: True, [answer]: 5, [output]: def solution():
    male_guppies_initial = 4
    female_guppies_initial = 7
    male_goldfish_initial = 3
    female_goldfish_initial = 5
    
    male_guppies_additional = 2
    female_guppies_additional = 1
    male_goldfish_additional = 2
    female_goldfish_additional = 3
    
    male_guppies = male_guppies_initial + male_guppies_additional
    female_guppies = female_guppies_initial + female_guppies_additional
    male_goldfish = male_goldfish_initial + male_goldfish_additional
    female_goldfish = female_goldfish_initial + female_goldfish_additional
    
    total_male = male_guppies + male_goldfish
    total_female = female_guppies + female_goldfish
    
    female_fish_than_male_fish = total_female - total_male
    result = female_fish_than_male_fish
    return result

 Executed result: 5
[EXP] 1120: [success_rate]: True, [answer]: 18, [output]: 
def solution():
    amalia_time = 4
    megan_time = amalia_time + 2
    doir_time = amalia_time + 4
    total_time = amalia_time + megan_time + doir_time
    result = total_time
    return result

 Executed result: 18
[EXP] 1121: [success_rate]: True, [answer]: 560, [output]: 
def solution():
    trips_per_month = 2
    round_trip_time = 2
    distance_per_trip = 70 * 2
    total_distance_per_month = trips_per_month * 2 * distance_per_trip
    result = total_distance_per_month
    return result

 Executed result: 560
[EXP] 1122: [success_rate]: False, [answer]: 35, [output]: def solution():
    sofie_miles_per_day = 10
    sofie_days = 7
    sofie_miles = sofie_miles_per_day * sofie_days
    sofie_twice_as_far_as_brian = sofie_miles * 2
    brian_miles = sofie_twice_as_far_as_brian / 2
    result = int(brian_miles)

 Executed result: None
[EXP] 1123: [success_rate]: False, [answer]: 18, [output]: def solution():
    total_toys = 400
    total_toys_completed = 2 * 6 * 10 + 2 * 4 * 10
    remaining_toys = total_toys - total_toys_completed
    total_hours = 10
    producer_5_toys_per_hour = (total_toys - remaining_toys) / (total_hours)
    result = producer_5_toys_per_hour
    return result

 Executed result: 20.0
[EXP] 1124: [success_rate]: True, [answer]: 105, [output]: def solution():
    kory_dog_weight = 60
    elijah_dogs_weights = [kory_dog_weight / 4, 0.5 * kory_dog_weight]
    total_weight = kory_dog_weight + sum(elijah_dogs_weights)
    result = total_weight
    return result

 Executed result: 105.0
[EXP] 1125: [success_rate]: False, [answer]: 64, [output]: 
def solution():
    kris_stickers = 7
    luis_stickers = kris_stickers + 9
    luis_stickers_used = luis_stickers // 2
    luis_stickers_left = luis_stickers - luis_stickers_used
    stickers_to_luis = luis_left_stickers
    luis_stickers_from_seth = stickers_to_luis // 2
    stickers_initial = luis_stickers_from_seth * 2
    result = stickers_initial
    return result

 Executed result: None
[EXP] 1126: [success_rate]: True, [answer]: 90, [output]: 
def solution():
    large_bags = 3
    ounces_per_bag = 10
    total_ounces = large_bags * ounces_per_bag
    m_and_m_per_ounce = 30
    total_m_and_m = total_ounces * m_and_m_per_ounce
    small_bags = total_m_and_m // 10
    result = small_bags
    return result

 Executed result: 90
[EXP] 1127: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_distance = 40000 / 2  # distance around half of the earth
    distance_per_day = 400
    total_days = total_distance / distance_per_day
    result = total_days
    return result

 Executed result: 50.0
[EXP] 1128: [success_rate]: True, [answer]: 750, [output]: def solution():
    avg_speed = 120
    speed_of_2nd_fastest = avg_speed * 5
    speed_of_faster_car = speed_of_2nd_fastest * 1.25
    result = speed_of_faster_car
    return result

 Executed result: 750.0
[EXP] 1129: [success_rate]: False, [answer]: 9, [output]: def solution():
    liam_age_now = 16
    liam_age_two_years_ago = liam_age_now - 2
    liam_age_two_years_ago_twice = liam_age_two_years_ago * 2
    vince_age_two_years_ago = liam_age_two_years_ago_twice / 2
    vince_age_now = vince_age_two_years_ago + 2
    result = vince_age_now
    return result

 Executed result: 16.0
[EXP] 1130: [success_rate]: False, [answer]: 8, [output]: 
def solution():
    total_eggs = 56
    arnold_eggs = (total_eggs - (Camden_eggs - Sarah_eggs)) // 2
    Camden_eggs = Sarah_eggs + 12
    eggs_diff = Camden_eggs - arnold_eggs
    result = eggs_diff
    return result

 Executed result: None
[EXP] 1131: [success_rate]: True, [answer]: 25, [output]: def solution():
    crayons = 200
    crayons_per_box = 8
    total_boxes = crayons // crayons_per_box
    total_crays_per_box = total_boxes * crayons_per_box
    total_crayons = total_crays_per_box
    total_octane = total_crayons * 1 + total_boxes * 8
    total_pounds = total_octane // 16
    result = total_pounds
    return result

 Executed result: 25
[EXP] 1132: [success_rate]: False, [answer]: 96, [output]: 
def solution():
    tree_initial = 80
    logs_possible = 80 * 0.8
    log_length = 4
    planks_per_log = 5
    price_per_plank = 1.2
    
    logs = int(logs_possible)
    total_planks = logs * planks_per_log
    total_plank_length = logs * log_length
    total_rsf = total_plank_length / log_length
    total_planks = int(total_rsf)
    
    revenue = total_planks * price_per_plank
    
    result = revenue
    return result

 Executed result: 76.8
[EXP] 1133: [success_rate]: False, [answer]: 45000, [output]: def solution():
    valerie_salary = 5000
    brother_salary = valerie_salary * 2
    mother_salary = valerie_salary + brother_salary * 2
    total_salary = valerie_salary + brother_salary + mother_salary
    result = total_salary
    return result

 Executed result: 40000
[EXP] 1134: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    beach_distance = 2
    sidewalk_distance = 1
    total_distance = beach_distance + sidewalk_distance
    if sidewalk_distance == total_distance - beach_distance:
        beach_time = 40
        sidewalk_time = beach_time * 2
        total_time = beach_time + sidewalk_time
        result = total_time
        return result

 Executed result: 120
[EXP] 1135: [success_rate]: True, [answer]: 7, [output]: def solution():
    money_saved_per_week = 4
    weeks_saved = 8
    total_money_saved = money_saved_per_week * weeks_saved
    target_money = 60
    money_left_to_save = target_money - total_money_saved
    money_per_week_to_save = money_left_to_save
    total_weeks_to_save = money_left_to_save / money_saved_per_week
    weeks_left_to_save = round(total_weeks_to_save)
    result = weeks_left_to_save
    return result

 Executed result: 7
[EXP] 1136: [success_rate]: True, [answer]: 32, [output]: def solution():
    tree1 = 7
    tree2 = 7
    tree3 = 7
    tree4 = 4
    tree5 = 4
    tree6 = 3
    total_blue_birds = tree1 + tree2 + tree3 + tree4 + tree5 + tree6
    result = total_blue_birds
    return result

 Executed result: 32
[EXP] 1137: [success_rate]: False, [answer]: 26, [output]: def solution():
    marbles_initial = 0
    dozen = 2
    marbles_per_dozen = 12
    marbles_received = dozen * marbles_per_dozen
    marbles_initial += marbles_received
    marbles_after_receiving = marbles_initial
    marbles_lost = 10
    marbles_left = marbles_after_receiving - marbles_lost
    result = marbles_left
    return result

 Executed result: 14
[EXP] 1138: [success_rate]: False, [answer]: 68, [output]: def solution():
    donny_bottle isempty = True
    unknown_bottle_temperature = 0
    while not donny_bottle isempty:
        donny_take_4_ounces = 4
        unknown_take_1_ounce = 1
        unknown_bottle_temperature_prev = unknown_bottle_temperature
        unknown_bottle_temperature = unknown_bottle_temperature - unknown_take_1_ounce

        donny_bottle_pcm = 33
        mystery_taken_ounces = 4 + 1
        donny_bottle_pcnew = (donny_bottle_pcm - (donny_bottle_pcm * (donny_take_4_ounces / 16)) + (unknown_bottle_temperature_prev * (mystery_taken_ounces / 16)))
        if donny_bottle_pcnew >= 40:
            donny_bottle isempty = False
        else:
            unknown_bottle_temperature = unknown_bottle_temperature_prev + 1
        return unknown_bottle_temperature

 Executed result: 1
[EXP] 1139: [success_rate]: True, [answer]: 700, [output]: 
def solution():
    cows_initial = 50
    chickens_initial = 20
    cows_per_day = 20
    chickens_per_day = 10
    days = 3 * 7  # three weeks
    cows_added = cows_per_day * days
    chickens_added = chickens_per_day * days
    total_cows = cows_initial + cows_added
    total_chickens = chickens_initial + chickens_added
    total_animals = total_cows + total_chickens
    result = total_animals
    return result

 Executed result: 700
[EXP] 1140: [success_rate]: True, [answer]: 1, [output]: 
def solution():
    num_packs = 4
    cost_per_pack = 10.0
    bagels_per_pack = 9
    total_bagels = num_packs * bagels_per_pack
    discount = 0.10
    total_cost = cost_per_pack * num_packs * (1 - discount)
    cost_per_bagel = total_cost / total_bagels
    result = cost_per_bagel
    return result

 Executed result: 1.0
[EXP] 1141: [success_rate]: False, [answer]: 27, [output]: def solution():
    potatoes_per_scoop = 6 - 3
    scoops_of_mashed_potatoes = 3 - 1
    mashed_potatoes = scoops_of_mashed_potatoes * potatoes_per_scoop
    scoops_eaten = 23 - 5
    potatoes_eaten = scoops_eaten * mashed_potatoes
    result = potatoes_eaten
    return result

 Executed result: 108
[EXP] 1142: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    eggs_per_day_initial = 3
    days_initial = 30
    eggs_eaten_initial = eggs_per_day_initial * days_initial

    eggs_per_day_later = 5
    days_later = 30
    eggs_eaten_later = eggs_per_day_later * days_later

    eggs_eaten_total = eggs_eaten_initial + eggs_eaten_later

    total_eggs = eggs_eaten_total
    dozens_eggs = total_eggs // 12

    result = dozens_eggs
    return result

 Executed result: 20
[EXP] 1143: [success_rate]: True, [answer]: 9, [output]: def solution():
    green_jellybeans = 17
    red_jellybeans = 2 * green_jellybeans
    total_jellybeans = 60
    blue_jellybeans = total_jellybeans - (green_jellybeans + red_jellybeans)
    result = blue_jellybeans
    return result

 Executed result: 9
[EXP] 1144: [success_rate]: False, [answer]: 300, [output]: def solution():
    trees_initial = 5

#define the number of lemons each tree gives every year
    lemons_per_tree = 6

#define the number of years in a decade
    years_per_decade = 10

#define the total number of lemons Tim gets in a decade
    lemons_in_decade = (trees_initial * lemons_per_tree * years_per_decade)

#define the result
    result = lemons_in_decade

#return the result

 Executed result: None
[EXP] 1145: [success_rate]: True, [answer]: 34, [output]: 
def solution():
    ratio_men = 5
    ratio_women = 9
    total_passengers = 84
    total_women = total_passengers * (ratio_women / (ratio_women + ratio_men))
    women_alight = 20
    women_remaining = total_women - women_alight
    result = women_remaining
    return result

 Executed result: 34.00000000000001
[EXP] 1146: [success_rate]: False, [answer]: 291, [output]: def solution():
    faraday_earned_per_sunflower = 2
    faraday_earned_per_bouquet = 8
    faraday_earned_per_day = 26 + 56
    faraday_earned_in_three_days = faraday_earned_per_day * 3
    money_from_bouquets = faraday_earned_in_three_days - (faraday_earned_per_sunflower * faraday_earned_in_three_days)
    no_of_bouquets = money_from_bouquets / faraday_earned_per_bouquet
    no_of_sunflowers = no_of_bouquets * 12
    result = no_of_sunflowers
    return result

 Executed result: -369.0
[EXP] 1147: [success_rate]: False, [answer]: 16, [output]: 
def solution():
    money_initial = 100
    market_price = 5
    selling_price = 7
    profit_per_rock = selling_price - market_price
    total_rock_cost = market_price * (money_initial / profit_per_rock)  # calculate total cost of buying all rocks
    total_sold = total_rock_cost * 0.6  # calculate total revenue gained from selling
    loss = total_rock_cost - total_sold
    result = loss
    return result

 Executed result: 100.0
[EXP] 1148: [success_rate]: False, [answer]: 22, [output]: def solution():

 Executed result: None
[EXP] 1149: [success_rate]: True, [answer]: 9, [output]: def solution():
    eggs_prepared = 3 * 12
    children = 4
    eggs_per_child = eggs_prepared // children
    result = eggs_per_child
    return result

 Executed result: 9
[EXP] 1150: [success_rate]: False, [answer]: 93, [output]: 
def solution():
    fish = 3
    fish_food_cost = 1
    days_in_a_month = 30
    total_cost = fish * fish_food_cost * days_in_a_month
    result = total_cost
    return result

 Executed result: 90
[EXP] 1151: [success_rate]: True, [answer]: 21, [output]: def solution():
    roses_initial = 30
    roses_given_to_mother = 24
    roses_bought = 15
    roses_lost = roses_initial - roses_given_to_mother
    roses_total = roses_lost + roses_bought
    result = roses_total
    return result

 Executed result: 21
[EXP] 1152: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_distance = 110 + 140
    total_hours = 2 + 3
    average_speed = total_distance / total_hours
    result = average_speed
    return result

 Executed result: 50.0
[EXP] 1153: [success_rate]: True, [answer]: 12, [output]: def solution():
    prob_win1 = 0.2
    prob_win2 = 3 * prob_win1
    prob_win_both = prob_win1 * prob_win2
    result = round(prob_win_both * 100, 2)
    return result

 Executed result: 12.0
[EXP] 1154: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    carrey_seashells = x  # this is the unknown number of seashells that Carrey collected
    carlos_seashells = 2 * carrey_seashells  # Carlos collected twice as many as Carrey
    jim_seashells = carlos_seashells + 5  # Jim collected 5 more than Carlos
    total_seashells = carrey_seashells + carlos_seashells + jim_seashells
    seashells_per_person = total_seashells / 3
    return int(seashells_per_person)

 Executed result: None
[EXP] 1155: [success_rate]: True, [answer]: 30, [output]: def solution():
    carrots_per_weekday = 4
    carrots_per_weekend = 5
    weekdays = 5
    weekend_days = 2
    weekday_carrots = carrots_per_weekday * weekdays
    weekend_carrots = carrots_per_weekend * weekend_days
    total_carrots_eaten = weekday_carrots + weekend_carrots
    result = total_carrots_eaten
    return result

 Executed result: 30
[EXP] 1156: [success_rate]: True, [answer]: 13, [output]: def solution():
    song1_length = 5
    song2_length = 5 * 1.6
    total_cassette_length = song1_length + song2_length
    result = total_cassette_length
    return result

 Executed result: 13.0
[EXP] 1157: [success_rate]: True, [answer]: 120, [output]: def solution():
    profit_per_device = 20 * 2 - 20  # price sold - price bought = profit
    devices_bought_monday = 2
    devices_bought_tuesday = 4
    total_devices_bought = devices_bought_monday + devices_bought_tuesday
    total_profit = total_devices_bought * profit_per_device
    result = total_profit
    return result

 Executed result: 120
[EXP] 1158: [success_rate]: True, [answer]: 3, [output]: def solution():
    isabel_height = 7
    ned_height = isabel_height - 2
    carl_height = ned_height + 1
    carl_cane_length = carl_height / 2
    result = carl_cane_length
    return result

 Executed result: 3.0
[EXP] 1159: [success_rate]: False, [answer]: 7300, [output]: 
def solution():
    daily_energy_demand = 100
    people = 2300
    daily_energy_per_person = daily_energy_demand * people
    daily_energy_covered = daily_energy_per_person * 0.20
    bottles_needed = daily_energy_per_person - daily_energy_covered
    bottles_per_person = bottles_needed / 4200
    extra_bottles = bottles_per_person * people
    result = extra_bottles
    return result

 Executed result: 100761.90476190476
[EXP] 1160: [success_rate]: True, [answer]: 50, [output]: def solution():
    octuplets = 8
    purple_octuplets = int(3/4 * octuplets)
    blue_octuplets = octuplets - purple_octuplets
    purple_octuplets_wearing_bow = int(1/3 * purple_octuplets)
    blue_octuplets_wearing_bow = blue_octuplets
    bow_wearers = purple_octuplets_wearing_bow + blue_octuplets_wearing_bow
    purple_bow_wearers = purple_octuplets_wearing_bow
    chance_of_purple_bow = (purple_bow_wearers / bow_wearers) * 100
    result = chance_of_purple_bow
    return result

 Executed result: 50.0
[EXP] 1161: [success_rate]: True, [answer]: 1125, [output]: 
def solution():
    IRS_reports_initial = 5168
    reports_monday_tuesday = 1907
    reports_thursday_friday = 2136
    reports_wednesday = IRS_reports_initial - reports_monday_tuesday - reports_thursday_friday
    result = reports_wednesday
    return result

 Executed result: 1125
[EXP] 1162: [success_rate]: True, [answer]: 170, [output]: 
def solution():
    land_initial = 80
    land_sold_first = land_initial / 2
    money_sold_first = 50
    land_left = land_initial - land_sold_first
    land_sold_second = land_left / 4
    money_sold_second = 30
    land_left = land_left - land_sold_second
    money_sold_third = land_left * 3
    result = money_sold_first + money_sold_second + money_sold_third
    return result

 Executed result: 170.0
[EXP] 1163: [success_rate]: True, [answer]: 3, [output]: def solution():
    haley_age = 26
    geb_age = 1 / 2 * haley_age - 10
    result = geb_age
    return result

 Executed result: 3.0
[EXP] 1164: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    face_masks_per_outing = 2
    outings_per_day = 3
    face_masks_per_day = face_masks_per_outing * outings_per_day
    face_masks_per_2_days = face_masks_per_day * 2
    result = face_masks_per_2_days
    return result

 Executed result: 12
[EXP] 1165: [success_rate]: True, [answer]: 9, [output]: def solution():
    eggs_initial = 3 * 12  # 3 dozen eggs is equal to 36
    lamars_eggs = 5
    stacys_eggs = lamars_eggs * 2
    charlies_eggs = stacys_eggs - 2
    meis_eggs = charlies_eggs / 2
    total_eggs_found = lamars_eggs + stacys_eggs + charlies_eggs + meis_eggs
    eggs_left = eggs_initial - total_eggs_found
    result = eggs_left
    return result

 Executed result: 9.0
[EXP] 1166: [success_rate]: True, [answer]: 1248, [output]: 
def solution():
    apartments_first_two = 200 * 2
    apartments_third = apartments_first_two * 1.6  # 60% bigger
    apartments_total = apartments_first_two + apartments_third
    collections_per_week = 3
    payment_per_collection = 0.40
    
    total_collections = collections_per_week * apartments_total
    weekly_income = total_collections * payment_per_collection
    
    result = weekly_income
    return result

 Executed result: 1248.0
[EXP] 1167: [success_rate]: False, [answer]: 2350, [output]: 
def solution():
    fruits_5_year = 50
    fruits_6_year = 3 * fruits_5_year
    fruits_7_year = 7 * fruits_5_year
    fruits_8_year = 3 * fruits_5_year - 200
    fruits_10_year = 20 * fruits_5_year
    total_fruits = fruits_5_year + fruits_6_year + fruits_7_year + fruits_8_year + fruits_10_year
    result = total_fruits
    return result

 Executed result: 1500
[EXP] 1168: [success_rate]: True, [answer]: 120, [output]: def solution():
    jack_dollars = 100
    sophia_dollars = 100
    sophia_gave = sophia_dollars // 5
    jack_got = sophia_gave
    result = jack_dollars + jack_got
    return result

 Executed result: 120
[EXP] 1169: [success_rate]: False, [answer]: 20, [output]: def solution():
    combined_length = 37
    yellow_rope_length = ''
    blue_rope_length = ''
    while True:
        if combined_length >= 0:
            yellow_rope_length = ''
            blue_rope_length = ''
        
        combined_length = combined_length - blue_rope_length
        yellow_rope_length = 1 + yellow_rope_length

        while True:
            if combined_length >= 0:
                combined_length = combined_length - red_rope_length - blue_rope_length
                red_rope_length = red_rope_length + 1
            else:
                break

    result = red_rope_length
    return result

 Executed result: None
[EXP] 1170: [success_rate]: False, [answer]: 2, [output]: def solution():
    ronnie_money = 5
    rissa_money = 5 * 3
    money_given = ronnie_money
    rissa_money_after = (rissa_money - money_given) / 5 * 4
    ronnie_money_after = ronnie_money - money_given
    result = ronnie_money_after
    return result

 Executed result: 0
[EXP] 1171: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    total_paint = 12
    mural_yellow = 1/2
    mural_red = mural_white = mural_purple = total_paint * (1 - mural_yellow) / 3
    result = mural_red
    return result

 Executed result: 2.0
[EXP] 1172: [success_rate]: True, [answer]: 3160, [output]: def solution():
    bedrooms = 4
    bedroom_area = 20 * 12
    total_bedroom_area = bedrooms * bedroom_area
    living_room_area = bedroom_area * 5
    other_area = 1000
    total_area = total_bedroom_area + living_room_area + other_area
    result = total_area
    return result

 Executed result: 3160
[EXP] 1173: [success_rate]: True, [answer]: 93, [output]: 
def solution():
    clouds_monday = 3
    clouds_tuesday = clouds_monday * 2
    clouds_wednesday = clouds_tuesday * 2
    clouds_thursday = clouds_wednesday * 2
    clouds_friday = clouds_thursday * 2
    total_clouds = clouds_monday + clouds_tuesday + clouds_wednesday + clouds_thursday + clouds_friday
    result = total_clouds
    return result

 Executed result: 93
[EXP] 1174: [success_rate]: True, [answer]: 10, [output]: def solution():
    normal_price = 12
    normal_cycles = 100
    new_cycles = normal_cycles + (normal_cycles * 20)/100
    new_price = normal_price
    cycles_per_dollar = new_cycles / new_price
    cycles_per_pod = cycles_per_dollar
    result = cycles_per_pod
    return result

 Executed result: 10.0
[EXP] 1175: [success_rate]: True, [answer]: 240, [output]: def solution():
    initial_bills = 1000 / 20
    bills_lost = 10
    bills_remaining = initial_bills - bills_lost
    bills_used_for_bills = int(bills_remaining / 2)
    bills_during_triple = bills_remaining - bills_used_for_bills
    bills_after_triple = bills_during_triple * 3
    bills_converted = bills_after_triple * 20 / 5
    result = int(bills_converted)
    return result

 Executed result: 240
[EXP] 1176: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    goals_team_a_first_half = 4
    goals_team_b_first_half = goals_team_a_first_half - 2
    goals_team_b_second_half = goals_team_b_first_half * 4
    goals_team_a_second_half = goals_team_b_second_half / 4
    total_goals_a = goals_team_a_first_half + goals_team_a_second_half
    total_goals_b = goals_team_b_first_half + goals_team_b_second_half
    result = total_goals_a + total_goals_b
    return result

 Executed result: 16.0
[EXP] 1177: [success_rate]: False, [answer]: 2, [output]: def solution():
    chalk_initial_length = 5
    chalk_used_on_monday = 45 / 100 * chalk_initial_length
    chalk_left_on_monday = chalk_initial_length - chalk_used_on_monday
    chalk_percentage = 20 / 100
    days_left = max(int(chalk_left_on_monday / chalk_percentage), 0)
    return days_left

 Executed result: 13
[EXP] 1178: [success_rate]: True, [answer]: 17, [output]: def solution():
    boys = 12
    girls = 12
    varsity_girls = girls // 3
    varsity_boys = boys // 4
    total_students = boys + girls
    students_varsity = varsity_girls + varsity_boys
    students_not_varsity = total_students - students_varsity
    result = students_not_varsity
    return result

 Executed result: 17
[EXP] 1179: [success_rate]: False, [answer]: 17, [output]: def solution():
    face_masks_mike = 5
    face_masks_johnny = 2 * 3 * face_masks_mike
    result = face_masks_johnny
    return result

 Executed result: 30
[EXP] 1180: [success_rate]: True, [answer]: 50, [output]: def solution():
    teeth_initial = 30
    teeth_drilled = 4
    teeth_cap = teeth_drilled + 7
    total_fixed = teeth_drilled + teeth_cap
    total_teeth = teeth_initial
    percentage_fixed = (total_fixed / total_teeth) * 100
    result = round(percentage_fixed)
    return result

 Executed result: 50
[EXP] 1181: [success_rate]: True, [answer]: 5600, [output]: 
def solution():
    total_milk = 4000
    cost_per_gallon = 3.5
    milk_refunds = total_milk * 2/5
    refund_amount = milk_refunds * cost_per_gallon
    result = refund_amount
    return result

 Executed result: 5600.0
[EXP] 1182: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    wendy_age_now = x  # This is the unknown age of Wendy
    colin_age_seven_years_later = y  # This is also unknown
    wendy_five_times_colin_age_seven_years_later = 5 * colin_age_seven_years_later
    wendy_age_now = wendy_five_times_colin_age_seven_years_later
    
    colin_age_now = colin_age_seven_years_later - 7
    
    colin_age_in_25_years = colin_age_now + 25
    
    colin_age_in_25_years_is earthquarter_of_wendy_age = wendy_age_now
    
    colin_age_now = colin_age_in_25_years - 25
    
    result = colin_age_now
    return result

 Executed result: None
[EXP] 1183: [success_rate]: False, [answer]: 1800, [output]: def solution():
    total_dollars = 27000
    total_books_available = 100
    cost_per_book = 500
    cost_per_book_group = cost_per_book
    total_books_per_group = total_dollars // cost_per_book_group
    books_per_school = total_books_per_group
    result = books_per_school
    return result

 Executed result: 54
[EXP] 1184: [success_rate]: False, [answer]: 11, [output]: def solution():

 Executed result: None
[EXP] 1185: [success_rate]: True, [answer]: 306, [output]: 
def solution():
    kilos_of_coal = 850
    kilos_per_bag = 50
    cost_per_bag = 18
    number_of_bags = kilos_of_coal // kilos_per_bag
    leftover_kilos = kilos_of_coal % kilos_per_bag
    cost = number_of_bags * cost_per_bag + (18 * leftover_kilos)
    result = cost
    return result

 Executed result: 306
[EXP] 1186: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    cheese_slices = 12
    pepperoni_slices = 8
    friends = 6
    slices_per_friend = 6 + 4
    total_slices = friends * slices_per_friend
    cheese_pieces = total_slices // cheese_slices
    pepperoni_pieces = total_slices // pepperoni_slices
    total_pies = max(cheese_pieces, pepperoni_pieces) + 1
    result = total_pies
    return result

 Executed result: 8
[EXP] 1187: [success_rate]: True, [answer]: 19, [output]: def solution():
    monday_wednesday_friday = 3
    tuesday_thursday = 5
    total_distance = (monday_wednesday_friday * 3) + (tuesday_thursday * 2)
    result = total_distance
    return result

 Executed result: 19
[EXP] 1188: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    snowballs_per_hour = 20
    snowballs_per_fifteen_minutes = 2
    total_snowballs = 60
    current_snowballs = 0
    time_elapsed = 0
    while current_snowballs < total_snowballs:
        current_snowballs += snowballs_per_hour
        current_snowballs -= snowballs_per_fifteen_minutes * 2
        time_elapsed += 1
    result = time_elapsed
    return result

 Executed result: 4
[EXP] 1189: [success_rate]: True, [answer]: 24, [output]: def solution():
    john_age_now = 28
    john_age_twenty_years_ago = john_age_now - 20
    product_age = 2
    jim_age_twenty_years_ago = john_age_twenty_years_ago / product_age
    jim_age_now = jim_age_twenty_years_ago + 20
    result = jim_age_now
    return result

 Executed result: 24.0
[EXP] 1190: [success_rate]: True, [answer]: 6, [output]: python
def solution():
    slices_total = 8
    doxa_slices = 1
    sister_slices = doxa_slices + 1
    brother_slices = sister_slices + 1
    total_slices_eaten = doxa_slices + sister_slices + brother_slices
    result = total_slices_eaten
    return result

 Executed result: 6
[EXP] 1191: [success_rate]: False, [answer]: 19, [output]: def solution():
    bandages_used_first_day = 38
    bandages_used_second_day = bandages_used_first_day - 10
    bandages_used_third_day = bandages_used_second_day - 24  # 50 - 1/2 (since half a pack was used)
    bandages_ordered_third_day = 50 * 2  # 2 bulk packs
    bandages_left = 78
    total_bandages_ordered = 1 + 2  # 1 on the first day, 2 on the third day
    total_bandages_used = bandages_used_first_day + bandages_used_second_day + bandages_used_third_day
    bandages_initial = total_bandages_used + total_bandages_ordered - bandages_left
    result = bandages_initial
    return result

 Executed result: -5
[EXP] 1192: [success_rate]: True, [answer]: 100, [output]: def solution():
    color_cost = 40
    starting_length = 10
    ending_length = 8
    length_cut = starting_length - ending_length
    haircut_cost = length_cut * 30
    total_cost = color_cost + haircut_cost
    result = total_cost
    return result

 Executed result: 100
[EXP] 1193: [success_rate]: True, [answer]: 280, [output]: 
def solution():
    hours_per_day = 7.5
    days_per_week = 6
    weeks_in_april = 4
    hours_per_week = hours_per_day * days_per_week
    total_hours_in_april = hours_per_week * weeks_in_april
    hourly_rate = 1.5
    total_payment = total_hours_in_april * hourly_rate
    attendance_bonus = 10
    total = total_payment + attendance_bonus
    result = total
    return result

 Executed result: 280.0
[EXP] 1194: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    earnings_per_task = {"laundry": 3.00, "room": 1.50, "trash": 0.75, "dishwasher": 0.50}
    tasks_performed = {"laundry": 1, "room": 1, "trash": 2, "dishwasher": 6}
    total_earned = 0
    for task, num_performed in tasks_performed.items():
        total_earned += num_performed * earnings_per_task[task]
    result = total_earned
    return result

 Executed result: 9.0
[EXP] 1195: [success_rate]: True, [answer]: 1200, [output]: 
def solution():
    gallons_of_blood_per_whale = 40
    gallons_of_blood_per_shark = 3 * gallons_of_blood_per_whale
    gallons_of_blood_per_ten_sharks = 10 * gallons_of_blood_per_shark
    result = gallons_of_blood_per_ten_sharks
    return result

 Executed result: 1200
[EXP] 1196: [success_rate]: True, [answer]: 320, [output]: def solution():
    people_morning = 50
    people_lunch = 40
    people_lunch_doubled = people_lunch * 2
    people_evening = people_morning
    people_evening_triple = people_evening * 3
    total_people = people_morning + people_lunch + people_lunch_doubled + people_evening_triple
    result = total_people
    return result

 Executed result: 320
[EXP] 1197: [success_rate]: True, [answer]: 75, [output]: def solution():
    red_pens = 5
    black_pens = 2 * red_pens
    pens_per_pack = 5
    total_pens = red_pens + black_pens
    pens = pens_per_pack * total_pens
    result = pens
    return result

 Executed result: 75
[EXP] 1198: [success_rate]: True, [answer]: 2400, [output]: def solution():
    scotch_bottles = 10
    scotch_cost = 600
    scotch_cost_per_bottle = scotch_cost / scotch_bottles
    cognac_bottles = 2 * scotch_bottles
    cognac_cost_per_bottle = scotch_cost_per_bottle * 1.5
    total_cost_scotch = scotch_cost
    total_cost_cognac = cognac_bottles * cognac_cost_per_bottle
    total_cost = total_cost_scotch + total_cost_cognac
    result = total_cost
    return result

 Executed result: 2400.0
[EXP] 1199: [success_rate]: True, [answer]: 140, [output]: 
def solution():
    white_oak_day_one = 20
    lodgepole_pine_day_one = 2 * white_oak_day_one
    total_day_one = white_oak_day_one + lodgepole_pine_day_one

    white_oak_day_two = white_oak_day_one + 10
    lodgepole_pine_day_two = lodgepole_pine_day_one + (lodgepole_pine_day_one // 4)

    total_day_two = white_oak_day_two + lodgepole_pine_day_two
    all_tree_total = total_day_one + total_day_two
    result = all_tree_total
    return result

 Executed result: 140
[EXP] 1200: [success_rate]: True, [answer]: 2, [output]: def solution():
    root_beer_initial = 24
    root_beer_drunk_1 = 4
    root_beer_spilled = 7
    root_beer_taken_3rd_day = 5
    root_beer_left = root_beer_initial - root_beer_drunk_1 - root_beer_spilled - root_beer_taken_3rd_day
    root_beer_per_person = root_beer_left // (3 + 1)
    result = root_beer_per_person
    return result

 Executed result: 2
[EXP] 1201: [success_rate]: False, [answer]: 8, [output]: def solution():
    coffee_mugs = 0
    equation = 4 * coffee_mugs + 8
    equation solve for coffee_mugs

    result = coffee_mugs
    return result

 Executed result: 0
[EXP] 1202: [success_rate]: True, [answer]: 42, [output]: def solution():
    fish_total = 66
    fish_with_red_stripes = fish_total // 3
    remaining_fish = fish_total - fish_with_red_stripes
    fish_with_blue_stripes = remaining_fish * 5 // 11
    fish_with_red_or_blue_stripes = fish_with_red_stripes + fish_with_blue_stripes
    result = fish_with_red_or_blue_stripes
    return result

 Executed result: 42
[EXP] 1203: [success_rate]: True, [answer]: 19, [output]: 
def solution():
    eyeshadow_palettes_initial = 2
    colors_per_palette = 4
    total_colors_palettes = eyeshadow_palettes_initial * colors_per_palette
    makeup_sets = 3
    colors_per_set = 6
    total_colors_sets = makeup_sets * colors_per_set
    total_colors_initial = total_colors_palettes + total_colors_sets
    sister_stole = 1
    colors_stolen = colors_per_palette
    colors_used = total_colors_initial - colors_stolen
    half_set_used = colors_per_set // 2
    colors_used_after_set = colors_used - half_set_used
    result = colors_used_after_set
    return result

 Executed result: 19
[EXP] 1204: [success_rate]: True, [answer]: 240, [output]: def solution():
    mattison_height = 60
    house_height = mattison_height * 7
    first_floor_height = mattison_height * 3
    second_floor_height = house_height - first_floor_height
    result = second_floor_height
    return result

 Executed result: 240
[EXP] 1205: [success_rate]: True, [answer]: 168, [output]: 
def solution():
    shells_total = 700
    shells_alphas = shells_total * 0.4
    shells_remaining = shells_total - shells_alphas
    shells_finders = shells_remaining * 0.6
    shells_gogetters = shells_remaining - shells_finders
    result = shells_gogetters
    return result

 Executed result: 168.0
[EXP] 1206: [success_rate]: True, [answer]: 4, [output]: def solution():
    total_miles_per_day = 4 * 3
    total_milesneeded = 7  # sum of 1, 4 and 3
    last_miles = total_miles_per_day - total_milesneeded
    result = last_miles
    return result

 Executed result: 5
[EXP] 1207: [success_rate]: False, [answer]: 40,000, [output]: def solution():
    house_value = 250000
    loan_value = 0.4 * house_value
    loan_used_to_pay_debts = 0.6 * loan_value
    leftover = house_value - loan_value + loan_used_to_pay_debts
    result = leftover
    return result

 Executed result: 210000.0
[EXP] 1208: [success_rate]: True, [answer]: 64, [output]: def solution():
    tuna1_weight = 56
    tuna2_weight = 46
    tuna3_weight = 26
    total_weight = tuna1_weight + tuna2_weight + tuna3_weight
    total_euro = total_weight * 0.5
    result = total_euro
    return result

 Executed result: 64.0
[EXP] 1209: [success_rate]: False, [answer]: 27, [output]: def solution():
    magazines_cost = 72
    magazines_price = 0.875 * magazines_cost
    profit = magazines_price - magazines_cost
    result = profit
    return result

 Executed result: -9.0
[EXP] 1210: [success_rate]: True, [answer]: 29, [output]: def solution():
    liter_per_day_low = 1
    liter_per_day_medium = 2 * liter_per_day_low
    liter_per_day_high = 2 * liter_per_day_medium
    
    water_removed_low = liter_per_day_low * 3
    water_removed_medium = liter_per_day_medium * 3
    water_removed_high = liter_per_day_high * 5
    
    total_water_removed = water_removed_low + water_removed_medium + water_removed_high
    
    result = total_water_removed
    return result

 Executed result: 29
[EXP] 1211: [success_rate]: True, [answer]: 288, [output]: python
def solution():
    packs_taken = 10
    balloons_per_pack = 30
    total_balloons_initial = packs_taken * balloons_per_pack
    balloons_left = 12
    balloons_thrown = total_balloons_initial - balloons_left
    result = balloons_thrown
    return result

 Executed result: 288
[EXP] 1212: [success_rate]: True, [answer]: 448, [output]: def solution():
    medicine1 = 14
    medicine2 = medicine1 * 3
    medicine_total_1dose = medicine1 + medicine2
    medicine_total_8doses = medicine_total_1dose * 8
    result = medicine_total_8doses
    return result

 Executed result: 448
[EXP] 1213: [success_rate]: True, [answer]: 150, [output]: 
def solution():
    ali_capacity = 120
    john_class_capacity = ali_capacity / 8
    john_school_capacity = john_class_capacity * 2
    combined_capacity = ali_capacity + john_school_capacity
    result = combined_capacity
    return result

 Executed result: 150.0
[EXP] 1214: [success_rate]: False, [answer]: 31, [output]: 
def solution():
    borrowed_money = 300
    interest_rate = 0.02
    amountंयITHER = borrowed_money * interest_rate
    amount.MenuStrip = borrowed_money + amountваются
    monthly_payment = 25
    total_paid = monthly_payment * 11
    remaining_amount = amount<|start_header_id|><|start_header_id|>assistant<|end_header_id|>

Here is the solution in Python:


 Executed result: None
[EXP] 1215: [success_rate]: True, [answer]: 5, [output]: Python
def solution():
    children = 2
    diapers_per_child = 5
    diapers_per_day = children * diapers_per_child
    jordan_changes = diapers_per_day / 2
    jason_changes = diapers_per_day - jordan_changes
    result = jason_changes
    return result

 Executed result: 5.0
[EXP] 1216: [success_rate]: True, [answer]: 36, [output]: def solution():
    jelly_bean_size = 0.15
    jar_side_length = 6
    jar_height = 15
    jar_volume = jar_side_length ** 2 * jar_height
    jar_red_efficiency = 0.8
    jar_red_proportion = 0.3
    true_red_jelly_bees = 900
    jar_red_volume = jar_volume * jar_red_proportion * jar_red_efficiency
    total_jelly_bees = jar_red_volume / jelly_bean_size
    guess = round(total_jelly_bees)
    result = abs(guess - true_red_jelly_bees)
    return result

 Executed result: 36
[EXP] 1217: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    bus_capacity = 200
    people_on_bus_initial = 20
    people_inserted_at_first_stop = 40
    people_inserted_at_second_stop = int(0.75 * 40)
    people_total = people_on_bus_initial + people_inserted_at_first_stop + people_inserted_at_second_stop
    people_doubling_at_third_stop = people_total * 2
    people_spaces_left = bus_capacity - people_total
    result = people_spaces_left
    return result

 Executed result: 110
[EXP] 1218: [success_rate]: False, [answer]: 75, [output]: 
def solution():
    visits_per_year = 3
    years = 5 + 3
    visits_total = visits_per_year * years
    increased_cost = 2 * 2.5
    cost_per_visit = increased_cost
    cost_total = cost_per_visit * visits_total
    result = cost_total
    return result

 Executed result: 120.0
[EXP] 1219: [success_rate]: True, [answer]: 225, [output]: def solution():
    students_per_grade = 10
    total_students = 4 * students_per_grade
    groups_per_time = 8
    time_per_group = 45
    time_taken = (total_students // groups_per_time) * time_per_group
    if total_students % groups_per_time != 0:
        time_taken += time_per_group
    result = time_taken
    return result

 Executed result: 225
[EXP] 1220: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    tables = 4
    table_cost = 20
    tables_cost = tables * table_cost
    roof_frames = 2
    roof_frames_cost = 10
    roof_frames_cost_total = roof_frames * roof_frames_cost
    total_cost = tables_cost + roof_frames_cost_total
    result = total_cost
    return result

 Executed result: 100
[EXP] 1221: [success_rate]: True, [answer]: 32, [output]: 
def solution():
    total_length = 40
    longer_piece_length = X  # this variable will be calculated

    # we know that longer_piece_length is 4 times the shorter piece length
    shorter_piece_length = longer_piece_length / 4

    # the sum of the lengths of both pieces must equal the total length
    longer_piece_length + shorter_piece_length = total_length

    # solve for longer_piece_length
    longer_piece_length = (total_length * 4) / 5
    result = longer_piece_length
    return result

 Executed result: 32.0
[EXP] 1222: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    meatballs_needed = 80
    meatballs_per_pound = 16
    pounds_of_meat = meatballs_needed / meatballs_per_pound
    tablespoons_of_seasoning_per_pound = 2
    total_tablespoons_of_seasoning = pounds_of_meat * tablespoons_of_seasoning_per_pound
    result = total_tablespoons_of_seasoning
    return result

 Executed result: 10.0
[EXP] 1223: [success_rate]: True, [answer]: 350, [output]: def solution():
    window_count = 5
    window_width = 35
    total_window_width = window_count * window_width
    needed_fabric = 2 * total_window_width
    result = needed_fabric
    return result

 Executed result: 350
[EXP] 1224: [success_rate]: True, [answer]: 8, [output]: def solution():
    minutes_until_discount = 16
    discount_rate = 0.2
    above_discount_rate = 0.25
    price_first_minutes = minutes_until_discount * above_discount_rate
    price_above_discount = (36 - minutes_until_discount) * discount_rate
    total_price = price_first_minutes + price_above_discount
    result = total_price
    return result

 Executed result: 8.0
[EXP] 1225: [success_rate]: True, [answer]: 5, [output]: def solution():
    rain_monday = 2
    rain_tuesday = 2 * rain_monday + 1
    result = rain_tuesday
    return result

 Executed result: 5
[EXP] 1226: [success_rate]: False, [answer]: 3, [output]: def solution():
    cupcakes = ?  # unknown quantity
    brownies = 3 * cupcakes - 2  # 2 less than three times as many brownies as cupcakes
    total_treats = cupcakes + brownies  # total number of cupcakes and brownies
    treats_per_person = 2  # each person gets two treats
    total_people = 5  # 5 people in the class
    total_treats = total_treats  # total number of treats to be shared among the class
    result = cupcakes  # number of cupcakes Carly made
    return result

 Executed result: None
[EXP] 1227: [success_rate]: True, [answer]: 90, [output]: def solution():
    manicure_cost = 35
    pedicure_cost = 40
    discount = 0.20
    manicure_pedicure_total = manicure_cost + pedicure_cost
    discounted_cost = manicure_pedicure_total * (1 - discount)
    nail_art_cost = 3 * 10  # assuming 10 nails
    total_cost = discounted_cost + nail_art_cost
    result = total_cost
    return result

 Executed result: 90.0
[EXP] 1228: [success_rate]: True, [answer]: 66, [output]: 
def solution():
    mag1_issues = 12
    mag1_num = 3
    mag2_issues = 6
    mag3_issues = mag2_issues * 4
    total_issues = mag1_issues * mag1_num + mag2_issues + mag3_issues
    result = total_issues
    return result

 Executed result: 66
[EXP] 1229: [success_rate]: True, [answer]: 31, [output]: def solution():
    samantha_paintings = 27
    shelly_paintings = samantha_paintings + 12
    kim_paintings = shelly_paintings - 8
    result = kim_paintings
    return result

 Executed result: 31
[EXP] 1230: [success_rate]: True, [answer]: 36, [output]: 
def solution():
    original_price = 40
    increase = 0.80
    decrease = 0.50
    price_after_increase = original_price + (original_price * increase)
    price_after_decrease = price_after_increase - (price_after_increase * decrease)
    result = price_after_decrease
    return result

 Executed result: 36.0
[EXP] 1231: [success_rate]: True, [answer]: 440, [output]: 
def solution():
    standard_fee_per_hour = 80
    lesson_time = 1
    standard_lessons = 4
    veteran_lessons = 2
    fee_discount = 0.75  # 25% discount
    
    standard_earnings = standard_fee_per_hour * lesson_time * standard_lessons
    veteran_earnings = standard_fee_per_hour * lesson_time * veteran_lessons * fee_discount
    total_earnings = standard_earnings + veteran_earnings
    result = total_earnings
    return result

 Executed result: 440.0
[EXP] 1232: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    math_quiz_scores = [50, 80, 80, 60, 40, 90, 100, 70, 60]
    sum_scores = sum(math_quiz_scores)
    mean_score = sum_scores / len(math_quiz_scores)
    result = mean_score
    return result

 Executed result: 70.0
[EXP] 1233: [success_rate]: True, [answer]: 15, [output]: def solution():
    pomelos_initial = 20
    pomelos_left = pomelos_initial / 4
    pomelos_given = pomelos_initial - pomelos_left
    result = pomelos_given
    return result

 Executed result: 15.0
[EXP] 1234: [success_rate]: True, [answer]: 81, [output]: 
def solution():
    apples_initial = 60
    apples_eaten = (2/5) * apples_initial
    apples_left = apples_initial - apples_eaten
    apples_given_to_sister = (1/4) * apples_left
    apples_sold = apples_left - apples_given_to_sister
    cost_per_apple = 3
    money_received = apples_sold * cost_per_apple
    result = money_received
    return result

 Executed result: 81.0
[EXP] 1235: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    novels_last_year = 9
    novels_this_year = novels_last_year * 4 / 3
    result = novels_this_year
    return result

 Executed result: 12.0
[EXP] 1236: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    michael_speed = 50
    days = 3
    distance_alaska_to_texas = 6000
    total_distance_covered = michael_speed * days * 24 # 24 hours in a day
    percentage_covered = (total_distance_covered / distance_alaska_to_texas) * 100
    result = percentage_covered
    return result

 Executed result: 60.0
[EXP] 1237: [success_rate]: False, [answer]: 84, [output]: 
def solution():
    madelines_grapes = 6
    brother_grapes = 5 * madelines_grapes
    total_grapes = madelines_grapes + brother_grapes
    mother_pies = 4
    grapes_per_pie = 12
    total_pies = mother_pies * grapes_per_pie
    grapes_used = total_pies
    total_grapes_after_pies = total_grapes - grapes_used
    result = total_grapes
    return result

 Executed result: 36
[EXP] 1238: [success_rate]: True, [answer]: 78, [output]: def solution():
    teachers_initial = 82
    teachers_sick = 13
    teachers_at_school = teachers_initial - teachers_sick
    substitute_teachers = 9
    total_teachers = teachers_at_school + substitute_teachers
    result = total_teachers
    return result

 Executed result: 78
[EXP] 1239: [success_rate]: True, [answer]: 520, [output]: def solution():
    cost_of_pasta = 1.0
    cost_of_cheddar = 3.0
    cost_of_gruyere = 2 * cost_of_cheddar
    total_cost_per_week = cost_of_pasta + cost_of_cheddar + cost_of_gruyere
    money_spent_per_year = total_cost_per_week * 52
    result = money_spent_per_year
    return result

 Executed result: 520.0
[EXP] 1240: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    classrooms = 80
    days = 5
    minutes_per_classroom = 15
    minutes_per_day = 480  # 8 hours per day
    total_minutes = classrooms * minutes_per_classroom
    total_minutes_spent = total_minutes
    time_spent = total_minutes_spent / total_minutes_per_day
    result = (time_spent / 1) * 100
    return result

 Executed result: None
[EXP] 1241: [success_rate]: True, [answer]: 2, [output]: def solution():
    books_per_middle_shelf = 10
    books_per_bottom_shelf = books_per_middle_shelf * 2
    books_per_top_shelf = books_per_bottom_shelf - 5
    books_per_top_shelf = 2 * books_per_middle_shelf

    total_capacity = 2 * books_per_middle_shelf + books_per_bottom_shelf + books_per_top_shelf
    books_needed = 110
    cases_needed = -(-books_needed // total_capacity)

    result = cases_needed
    return result

 Executed result: 2
[EXP] 1242: [success_rate]: False, [answer]: 8, [output]: def solution():
    eggs_purchased = 5
    eggs_cost = 2.40
    total_cost = eggs_cost * eggs_purchased
    profit_per_egg = 1 / 3
    profit = total_cost - (eggs_purchased * profit_per_egg)
    result = profit
    return result

 Executed result: 10.333333333333334
[EXP] 1243: [success_rate]: True, [answer]: 20, [output]: Python
def solution():
    hats_initial = 100
    red_hats = hats_initial // 2
    remaining_hats = hats_initial - red_hats
    blue_hats = remaining_hats * 3 // 5
    white_hats = remaining_hats - blue_hats
    result = white_hats
    return result

 Executed result: 20
[EXP] 1244: [success_rate]: True, [answer]: 50, [output]: def solution():
    price_per_bag = 18
    discount_per_bag = 3
    price_per_bag_with_discount = price_per_bag - discount_per_bag
    sticks_per_bag = 30
    price_per_stick = price_per_bag_with_discount / sticks_per_bag
    price_per_stick_in_cents = int(price_per_stick * 100)
    result = price_per_stick_in_cents
    return result

 Executed result: 50
[EXP] 1245: [success_rate]: False, [answer]: 35, [output]: def solution():
    total_questions_on_first_test = 70
    total_questions_on_second_test = 40
    
    correct_answers_on_first_test = total_questions_on_first_test * 0.6
    questions_left_to_pass = total_questions_on_first_test - correct_answers_on_first_test
    
    questions_to_get_right_on_second_test = (total_questions_on_first_test + total_questions_on_second_test) * 0.7 - correct_answers_on_first_test
    total_questions_needed_correct_answer = total_questions_on_second_test - (cor

 Executed result: None
[EXP] 1246: [success_rate]: False, [answer]: 96, [output]: 
def solution():
    strawberry_cubes = ?  # We need to solve for this first
    blueberry_cubes = 5 * strawberry_cubes - 4
    sum_of_cubes = strawberry_cubes + blueberry_cubes
    strawberry_cubes = 116 - blueberry_cubes
    result = blueberry_cubes
    return result

 Executed result: None
[EXP] 1247: [success_rate]: True, [answer]: 3360, [output]: def solution():
    games_per_year = 40
    score_per_game = 21
    years = 4
    total_games = games_per_year * years
    total_points = total_games * score_per_game
    result = total_points
    return result

 Executed result: 3360
[EXP] 1248: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    marbles_initial = 10
    marbles_dropped = marbles_initial / 2
    marbles_found = 3
    total_marbles = marbles_dropped + marbles_found
    bead_removed = 1
    marbles_after_bead = total_marbles - bead_removed
    result = marbles_after_bead
    return result

 Executed result: 7.0
[EXP] 1249: [success_rate]: True, [answer]: 750, [output]: def solution():
    cars_needed = 15
    customers_per_telephone_call = 1/25 
    customers_per_visit = 1/2
    visits_per_car = 1
    total_customers = cars_needed * visits_per_car / customers_per_visit
    total_telephone_calls = total_customers / customers_per_telephone_call
    result = int(total_telephone_calls)
    return result

 Executed result: 750
[EXP] 1250: [success_rate]: False, [answer]: 56, [output]: def solution():
    rooms = 8
    family_members = 4
    flashlights_per_person = 1
    flashlights_per_room = 2
    total_flashlights = family_members + rooms * flashlights_per_room
    small_candles_per_room = 2
    medium_candles_per_room = 2
    small_candles = rooms // 2 * small_candles_per_room
    medium_candles = rooms // 2 * medium_candles_per_room
    total_candles = small_candles + medium_candles
    total_light_sources = total_flashlights + total_candles
    
    result = total_light_sources
    return result

 Executed result: 36
[EXP] 1251: [success_rate]: True, [answer]: 22, [output]: def solution():
    chips_total = 2 * 55
    family_members = 5
    chips_per_person = chips_total // family_members
    result = chips_per_person
    return result

 Executed result: 22
[EXP] 1252: [success_rate]: False, [answer]: 30, [output]: 
def solution():
    time_for_first_side = 5
    time_for_second_side = 2 * time_for_first_side
    time_for_third_side = 2 * time_for_second_side
    time_for_last_two_sides = time_for_first_side / 2
    total_time = time_for_first_side + time_for_second_side + time_for_third_side + time_for_last_two_sides
    result = total_time
    return result

 Executed result: 37.5
[EXP] 1253: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    helmets = 20
    footballs = helmets * 2
    robots = helmets / 2
    total_items = helmets + footballs + robots
    result = total_items
    return result

 Executed result: 70.0
[EXP] 1254: [success_rate]: True, [answer]: 120, [output]: def solution():
    time_per_call = 15
    time_per_day = 6 * 60
    total_time = time_per_day * 5
    calls = total_time / time_per_call
    result = calls
    return result

 Executed result: 120.0
[EXP] 1255: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    old_time = 7
    new_time = 12
    difference = new_time - old_time
    paintings = 6
    total_difference = difference * paintings
    result = total_difference
    return result

 Executed result: 30
[EXP] 1256: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    cups_initial = 0
    cups_half = 4
    cups_full = 8
    cups_quarter = 20 - cups_half - cups_full
    
    cups_half_plants = cups_half * 0.5
    cups_full_plants = cups_full
    cups_quarter_plants = cups_quarter * 0.25
    total_cups = cups_half_plants + cups_full_plants + cups_quarter_plants
    result = total_cups
    return result

 Executed result: 12.0
[EXP] 1257: [success_rate]: True, [answer]: 15, [output]: def solution():
    distance = 200
    distance_on_land = distance / 2
    distance_in_water = distance / 2
    time_on_land = distance_on_land / 20
    time_in_water = distance_in_water / 10
    total_time = time_on_land + time_in_water
    result = total_time
    return result

 Executed result: 15.0
[EXP] 1258: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    popsicle_sticks_needed = 56
    popsicles_per_box = 8
    cost_per_box = 2.0
    total_cost = (popsicle_sticks_needed / popsicles_per_box) * cost_per_box
    result = total_cost
    return result

 Executed result: 14.0
[EXP] 1259: [success_rate]: True, [answer]: 60, [output]: def solution():
    main_phone_cost = 20
    additional_phone_cost = main_phone_cost / 2
    phone_plan_cost = additional_phone_cost * (5 - 1) + main_phone_cost
    result = phone_plan_cost
    return result

 Executed result: 60.0
[EXP] 1260: [success_rate]: True, [answer]: 7200, [output]: 
def solution():
    doughnuts_per_day = 10
    doughnuts_per_dozen = 12
    doughnuts_per_day_real = doughnuts_per_day * doughnuts_per_dozen
    price_per_doughnut = 2
    money_per_day = doughnuts_per_day_real * price_per_doughnut
    days_in_june = 30
    money_make_in_june = money_per_day * days_in_june
    result = money_make_in_june
    return result

 Executed result: 7200
[EXP] 1261: [success_rate]: True, [answer]: 5, [output]: def solution():
    photos_taken = 210
    photos_per_batch = 7
    batches_per_day = 6

    photos_per_day = photos_per_batch * batches_per_day
    days_required = -(-photos_taken // photos_per_day)

    result = days_required
    return result

 Executed result: 5
[EXP] 1262: [success_rate]: True, [answer]: 235, [output]: 
def solution():
    blouses_per_week = 5
    blouses_cost = 5.0
    blouses_cost_per_week = blouses_per_week * blouses_cost
    pants_per_week = 2
    pants_cost = 8.0
    pants_cost_per_week = pants_per_week * pants_cost
    skirt_per_week = 1
    skirt_cost = 6.0
    skirt_cost_per_week = skirt_per_week * skirt_cost
    total_cost_per_week = blouses_cost_per_week + pants_cost_per_week + skirt_cost_per_week
    total_cost_five_weeks = total_cost_per_week * 5
    result = total_cost_five_weeks
    return result

 Executed result: 235.0
[EXP] 1263: [success_rate]: True, [answer]: 12, [output]: def solution():
    words_per_minute_initial = 150
    speed_increase_factor = 2.5
    speed_after_training = words_per_minute_initial * speed_increase_factor
    words_per_page = 450
    pages = 10
    
    # Assuming he speaks at constant speed after training
    words_spoken = words_per_page * pages
    time_taken = words_spoken / speed_after_training
    
    result = time_taken
    return result

 Executed result: 12.0
[EXP] 1264: [success_rate]: False, [answer]: 500, [output]: 
def solution():
    day1 = 50
    day2 = day1 + 20
    day3 = 2 * day2
    rest_of_week = 5
    average_per_day = 60
    total_on_day1_3 = day1 + day2 + day3
    total_for_week = total_on_day1_3 + rest_of_week * average_per_day
    result = total_for_week
    return result

 Executed result: 560
[EXP] 1265: [success_rate]: False, [answer]: 210, [output]: def solution():
    popped_in_first_30 = 20
    popped_in_next_30 = popped_in_first_30 * 3
    popped_in_next_30_2 = popped_in_next_30 * 4
    popped_in_addditional_30 = popped_in_next_30_2 * 0.5
    popped_in_residual_heat = popped_in_additional_30 * 0.25
    total_popped = popped_in_first_30 + popped_in_next_30 + popped_in_next_30_2 + popped_in_additional_30 + popped_in_residual_heat
    result = total_popped
    return result

 Executed result: None
[EXP] 1266: [success_rate]: False, [answer]: 36, [output]: def solution():
    lemons_per_cup = 6
    cups_per_gallon = 1
    gallons = 5
    total_cups = gallons * cups_per_gallon
    total_lemons = total_cups * lemons_per_cup
    result = total_lemons
    return result

 Executed result: 30
[EXP] 1267: [success_rate]: True, [answer]: 147, [output]: def solution():
    german_shepherds = 3
    bulldogs = 2
    german_shepherd_food = 5
    bulldog_food = 3
    total_food_per_day = german_shepherds * german_shepherd_food + bulldogs * bulldog_food
    total_food_per_week = total_food_per_day * 7
    result = total_food_per_week
    return result

 Executed result: 147
[EXP] 1268: [success_rate]: True, [answer]: 40, [output]: def solution():
    two_legged_animals = 10
    four_legged_animals = 15
    two_legs = two_legged_animals * 2
    four_legs = four_legged_animals * 4
    total_legs = two_legs + four_legs
    total_leg_pairs = total_legs // 2
    result = total_leg_pairs
    return result

 Executed result: 40
[EXP] 1269: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    blue_blocks = 4
    yellow_blocks = blue_blocks * 2
    red_blocks = 32 - (blue_blocks + yellow_blocks)
    result = red_blocks
    return result

 Executed result: 20
[EXP] 1270: [success_rate]: True, [answer]: 54, [output]: 
def solution():
    distance_traveled_to_the_west = 5 * 18
    distance_traveled_to_the_east = 8 * 18
    distance_from_house = distance_traveled_to_the_east - distance_traveled_to_the_west
    result = distance_from_house
    return result

 Executed result: 54
[EXP] 1271: [success_rate]: True, [answer]: 3528, [output]: 
def solution():
    boat_price = 9000
    boat_price_after_first_year = boat_price * 0.7
    boat_price_after_second_year = boat_price_after_first_year * 0.7
    boat_price_after_third_year = boat_price_after_second_year * 0.8
    result = boat_price_after_third_year
    return result

 Executed result: 3528.0
[EXP] 1272: [success_rate]: True, [answer]: 43, [output]: 
def solution():
    total_candies = 232
    red_candies = 54
    orange_candies = red_candies * 2
    yellow_candies = red_candies / 2
    pink_candies = total_candies - (red_candies + orange_candies + yellow_candies)
    result = pink_candies
    return result

 Executed result: 43.0
[EXP] 1273: [success_rate]: True, [answer]: 296, [output]: def solution():
    nights = 3
    bus_trips = 7
    hotel_cost_per_night = 80
    hotel_cost = nights * hotel_cost_per_night
    bus_cost_per_trips = hotel_cost_per_night * 0.1
    bus_cost = bus_cost_per_trips * bus_trips
    total_cost = hotel_cost + bus_cost
    result = total_cost
    return result

 Executed result: 296.0
[EXP] 1274: [success_rate]: False, [answer]: 27, [output]: 
def solution():
    marbles_initial = 52
    marbles_given_to_twins = marbles_initial
    dallas_marbles_initial = 21
    dallas_marbles_after = dallas_marbles_initial - 4
    marbles_gven_to_dallas = dallas_marbles_after
    marbles_gven_to_darla = marbles_gven_to_twins - marbles_gven_to_dallas
    result = marbles_gven_to_darla
    return result

 Executed result: None
[EXP] 1275: [success_rate]: True, [answer]: 38, [output]: 
def solution():
    adult_tickets = 2
    child_ticket = 1
    cost_of_adult_tickets = adult_tickets * 12
    cost_of_child_ticket = child_ticket * 8
    total_cost_tickets = cost_of_adult_tickets + cost_of_child_ticket
    popcorns = 2
    popcorn_cost = popcorns * 3
    total_cost = total_cost_tickets + popcorn_cost
    result = total_cost
    return result

 Executed result: 38
[EXP] 1276: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    car_weight = 1200
    luggage_weight = 250
    children_weight = 75 * 2
    weight_with_luggage_and_children = car_weight + luggage_weight + children_weight
    force_needed = weight_with_luggage_and_children * 0.01
    result = force_needed
    return result

 Executed result: 16.0
[EXP] 1277: [success_rate]: True, [answer]: 70, [output]: def solution():
    fence_length = 20
    fence_width = 15
    perimeter = 2 * (fence_length + fence_width)
    result = perimeter
    return result

 Executed result: 70
[EXP] 1278: [success_rate]: True, [answer]: 48, [output]: 
def solution():
    mia_age = 40
    age_difference = 16
    emma_age = mia_age + age_difference
    average_age = (mia_age + emma_age) / 2
    result = average_age
    return result

 Executed result: 48.0
[EXP] 1279: [success_rate]: True, [answer]: 665, [output]: 
def solution():
    toms_seashells = 214
    nancys_seashells = 432
    bennys_seashells = 86
    total_seashells = toms_seashells + nancys_seashells + bennys_seashells
    cracked_seashells = 67
    good_seashells = total_seashells - cracked_seashells
    result = good_seashells
    return result

 Executed result: 665
[EXP] 1280: [success_rate]: False, [answer]: 180, [output]: def solution():
    people = 12
    plates = 3
    plate_cost = 6
    bowl_cost = 5
    salad_plate_cost = 4
    cost_per_setting = plate_cost + bowl_cost + salad_plate_cost
    total_cost = people * plates * cost_per_setting
    result = total_cost
    return result

 Executed result: 540
[EXP] 1281: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    steve_time = 10
    anna_time = (steve_time / 2) + 2
    result = anna_time
    return result

 Executed result: 7.0
[EXP] 1282: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    feed_ordered = 300
    pigs = 5
    feed_per_pig_per_day = 4
    feed_per_pig_per_day_per_time = 2
    total_feed_per_pig_per_day = feed_per_pig_per_day * feed_per_pig_per_day_per_time
    total_feed_per_week = pigs * total_feed_per_pig_per_day * 7
    feed_consumed = total_feed_per_week
    feed_left = feed_ordered - feed_consumed
    result = feed_left
    return result

 Executed result: 20
[EXP] 1283: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    people_invited = 20
    hot_dogs_per_guest = 2
    hot_dogs_already_have = 4
    total_hot_dogs_needed = people_invited * hot_dogs_per_guest
    hot_dogs_needed = total_hot_dogs_needed - hot_dogs_already_have
    hot_dogs_per_pack = 6
    cost_per_pack = 2
    packs_needed = math.ceil(hot_dogs_needed / hot_dogs_per_pack)
    total_cost = packs_needed * cost_per_pack
    result = total_cost
    return result

 Executed result: None
[EXP] 1284: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    cupcakes_sold = 20
    cupcakes_price = 2
    cupcakes_money = cupcakes_sold * cupcakes_price
    cookies_sold = 40
    cookies_price = 1
    cookies_money = cookies_sold * cookies_price
    trays_bought = 5
    trays_price = 4
    trays_cost = trays_bought * trays_price
    total_spent = trays_cost
    total_earned = cupcakes_money + cookies_money
    result = total_earned - total_spent
    return result

 Executed result: 60
[EXP] 1285: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    children_initial = 5
    children_third_street = children_initial + children_initial + (children_initial * 2)
    children_stop_leaving = children_third_street - children_initial
    result = children_stop_leaving
    return result

 Executed result: 15
[EXP] 1286: [success_rate]: True, [answer]: 1218, [output]: def solution():
    meals_initial = 1360
    meals_given_friday = 64
    meals_given_saturday = 30
    meals_given_sunday = 48
    meals_given = meals_given_friday + meals_given_saturday + meals_given_sunday
    meals_left = meals_initial - meals_given
    result = meals_left
    return result

 Executed result: 1218
[EXP] 1287: [success_rate]: True, [answer]: 105, [output]: 
def solution():
    quarter_value = 25
    nickels = 2
    dimes = 7
    value_quarter = quarter_value
    value_nickels = nickels * 5
    value_dimes = dimes * 10
    value_all = value_quarter + value_nickels + value_dimes
    result = value_all
    return result

 Executed result: 105
[EXP] 1288: [success_rate]: True, [answer]: 84, [output]: def solution():
    sisters_age = 16
    brother1_age = 12
    brother2_age = brother1_age * 2
    total_age = (3 * sisters_age) + brother1_age + brother2_age
    result = total_age
    return result

 Executed result: 84
[EXP] 1289: [success_rate]: False, [answer]: 34, [output]: def solution():
    minutes_per_meditation = 15
    days_per_week = 5
    hours_per_yoga_practice = 1
    minutes_per_yoga_practice = hours_per_yoga_practice * 60
    minutes_per_week = minutes_per_meditation * 2 + minutes_per_yoga_practice
    weeks = 4
    minutes_total = minutes_per_week * days_per_week * weeks
    result = minutes_total
    return result

 Executed result: 1800
[EXP] 1290: [success_rate]: True, [answer]: 101, [output]: 
def solution():
    small_t_shirts = 11
    small_sqft = 3
    small_sqft_total = small_t_shirts * small_sqft

    medium_t_shirts = 8
    medium_sqft = 4
    medium_sqft_total = medium_t_shirts * medium_sqft

    large_t_shirts = 6
    large_sqft = 6
    large_sqft_total = large_t_shirts * large_sqft

    total_sqft = small_sqft_total + medium_sqft_total + large_sqft_total
    result = total_sqft
    return result

 Executed result: 101
[EXP] 1291: [success_rate]: True, [answer]: 90, [output]: 
def solution():
    seeds_small_sunflower = 3 * 12
    seeds_large_sunflower = seeds_small_sunflower + (seeds_small_sunflower * 0.5)
    total_seeds = seeds_small_sunflower + seeds_large_sunflower
    result = total_seeds
    return result

 Executed result: 90.0
[EXP] 1292: [success_rate]: True, [answer]: 27, [output]: def solution():
    george_pens = 18
    timothy_pens = george_pens * 3
    sarah_pens = timothy_pens / 2
    result = sarah_pens
    return result

 Executed result: 27.0
[EXP] 1293: [success_rate]: True, [answer]: 67, [output]: def solution():
    albert_height = 36
    anne_height = albert_height * 2
    jackie_height_now = anne_height - 2
    jackie_height_before = jackie_height_now - 3
    result = jackie_height_before
    return result

 Executed result: 67
[EXP] 1294: [success_rate]: True, [answer]: 140000, [output]: def solution():
    production_per_day = 5000
    production_per_week = production_per_day * 7
    revenue_per_bar = 2
    revenue_per_week = production_per_week * revenue_per_bar
    weeks = 2
    total_revenue = weeks * revenue_per_week
    result = total_revenue
    return result

 Executed result: 140000
[EXP] 1295: [success_rate]: True, [answer]: 36, [output]: python
def solution():
    original_price_per_tshirt = 8
    price_of_first_tshirt = original_price_per_tshirt
    price_of_second_tshirt = original_price_per_tshirt * 0.5
    total_price_of_tshirts = price_of_first_tshirt + price_of_second_tshirt
    original_price_of_shoes = 40
    discounted_price_of_shoes = original_price_of_shoes * 0.6
    total_price = total_price_of_tshirts + discounted_price_of_shoes
    result = total_price
    return result

 Executed result: 36.0
[EXP] 1296: [success_rate]: True, [answer]: 2, [output]: def solution():
    allowance = 6
    weeks = 3
    amount_received = allowance * weeks
    cones_cost = 1.25 * 4
    total_cost = cones_cost + amount_received
    movie_ticket = 6.5
    result = total_cost // movie_ticket
    return result

 Executed result: 3.0
[EXP] 1297: [success_rate]: True, [answer]: 335, [output]: 
def solution():
    ellen_leggings = 100
    ellen_photo_frame = 5
    ellen_total = ellen_leggings + ellen_photo_frame
    lani_sunglasses = 30
    lani_bathrobes = 100 * 2
    lani_total = lani_sunglasses + lani_bathrobes
    total_spent = ellen_total + lani_total
    result = total_spent
    return result

 Executed result: 335
[EXP] 1298: [success_rate]: False, [answer]: 60, [output]: 
def solution():
    jar_cost = 0
    total_jar_cost = 0
    profit = 0

    jar_cost += (2 * 6)
    jar_cost += (1.5 * 8)
    jar_cost += (2 * 10)
    total_jar_cost += jar_cost
    jar_cost = 0
    total_jar_cost_per_jar = total_jar_cost / 1
    jar_cost = (50 * 10) - total_jar_cost_per_jar
    profit = jar_cost

    result = profit
    return result

 Executed result: 456.0
[EXP] 1299: [success_rate]: True, [answer]: 31, [output]: 
def solution():
    quarters = 32
    dimes = 95
    nickels = 120
    pennies = 750
    total_pennies = quarters * 25 + dimes * 10 + nickels * 5 + pennies
    dollars = total_pennies / 100
    result = dollars
    return result

 Executed result: 31.0
[EXP] 1300: [success_rate]: True, [answer]: 13, [output]: 
def solution():
    money_initial = 40
    ice_cream_cost = 3.50
    ticket_cost = 7.50
    bracelet_cost = 8.50
    total_cost = ice_cream_cost + 2 * ticket_cost + bracelet_cost
    money_left = money_initial - total_cost
    result = money_left
    return result

 Executed result: 13.0
[EXP] 1301: [success_rate]: True, [answer]: 120, [output]: def solution():
    cars_per_day = 3
    days_open_per_week = 5  # except Sunday and Wednesday
    weeks = 2
    cars_per_week = cars_per_day * days_open_per_week
    total_cars_per_week = cars_per_week * weeks
    cars_per_week_payment = total_cars_per_week * 4
    result = cars_per_week_payment
    return result

 Executed result: 120
[EXP] 1302: [success_rate]: True, [answer]: 23, [output]: def solution():
    oatmeal_cookies_initial = 9
    chocolate_chip_cookies_initial = 4
    sugar_cookies_initial = 5
    
    oatmeal_cookies_eaten = 3
    chocolate_chip_cookies_eaten = 1
    sugar_cookies_eaten = 1
    
    oatmeal_cookies_after_snack = oatmeal_cookies_initial - oatmeal_cookies_eaten
    chocolate_chip_cookies_after_snack = chocolate_chip_cookies_initial
    sugar_cookies_after_snack = sugar_cookies_initial - sugar_cookies_eaten
    
    sugar_cookies_given = 2
    
    oatmeal_cookies_after_friends = oatmeal_cookies_after_snack
    chocolate_chip_cookies_after_friends = chocolate_chip_cookies_after_snack
    sugar_cookies_after_friends = sugar_cookies_after_snack - sugar_cookies_given
    
    oatmeal_cookies_after_dinner = oatmeal_cookies_after_friends + 4
    chocolate_chip_cookies_after_dinner = chocolate_chip_cookies_after_friends + 4
    sugar_cookies_after_dinner = sugar_cookies_after_friends + 4
    
    cookies_after_dinner = oatmeal_cookies_after_dinner + chocolate_chip_cookies_after_dinner + sugar_cookies_after_dinner
    result = cookies_after_dinner
    return result

 Executed result: 24
[EXP] 1303: [success_rate]: True, [answer]: 72, [output]: 
def solution():
    toy_soldiers = 12
    half_toys = toy_soldiers // 2
    half_toys_price = half_toys * 5
    other_half_toys = toy_soldiers - half_toys
    other_half_toys_price = other_half_toys * 7
    total_elevation = half_toys_price + other_half_toys_price
    result = total_elevation
    return result

 Executed result: 72
[EXP] 1304: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    holes_per_day = 6
    dug_holes = holes_per_day * 14
    filled_holes_per_day = 9
    dog_holes_per_day = 6

    total_holes = dug_holes
    filled_holes = 0

    total_weeks = 0

    while True:
        filled_holes += filled_holes_per_day
        total_holes -= filled_holes_per_day - dog_holes_per_day

        if total_holes <= 0:
            break

        total_weeks += 1

    result = total_weeks
    return result

 Executed result: 27
[EXP] 1305: [success_rate]: True, [answer]: 1000, [output]: def solution():
    norman_students = 4000
    butler_students = 3 / 4 * norman_students
    norman_students_greater_than_butler = norman_students - butler_students
    result = norman_students_greater_than_butler
    return result

 Executed result: 1000.0
[EXP] 1306: [success_rate]: True, [answer]: 2325, [output]: 
def solution():
    total_cookies = 7995
    rainbow_cookies = 2595
    oatmeal_cookies = 3075
    chocolate_cookies = total_cookies - rainbow_cookies - oatmeal_cookies
    result = chocolate_cookies
    return result

 Executed result: 2325
[EXP] 1307: [success_rate]: False, [answer]: 2, [output]: def solution():
    total_items = 29
    test_tubes = 16
    beakers = 7
    petri_dishes = 14
    total_items_accidentally_picked_up = test_tubes + beakers + petri_dishes
    test_tubes_gathered = test_tubes // 2
    petri_dishes_gathered = petri_dishes
    total_items_accidentally_gathered = test_tubes_gathered + petri_dishes_gathered + beakers
    beakers_lost = beakers - (total_items - total_items_accidentally_picked_up - total_items_accidentally_gathered)
    result = beakers_lost
    return result

 Executed result: 44
[EXP] 1308: [success_rate]: True, [answer]: 8, [output]: def solution():
    screws_initial = 40
    legs_per_table = 4
    screws_per_leg = 2
    legs_per_4_tables = legs_per_table * 4
    total_screws_needed = legs_per_4_tables * screws_per_leg
    screws_left = screws_initial - total_screws_needed
    result = screws_left
    return result

 Executed result: 8
[EXP] 1309: [success_rate]: True, [answer]: 30, [output]: def solution():
    eggs_inFirstBasket = 10
    eggs_inSecondBasket = 2 * eggs_inFirstBasket
    totalEggs = eggs_inFirstBasket + eggs_inSecondBasket
    result = totalEggs
    return result

 Executed result: 30
[EXP] 1310: [success_rate]: False, [answer]: 2280, [output]: def solution():
    alexandra_money = 430
    kim_money = alexandra_money + 320
    maryam_money = 300 + 400
    sarah_money = 300
    total_money = alexandra_money + kim_money + maryam_money + sarah_money
    result = total_money
    return result

 Executed result: 2180
[EXP] 1311: [success_rate]: False, [answer]: 64, [output]: def solution():
    vanessa_distance = 4
    aaron_distance = vanessa_distance / 2
    aaron_time = 16
    vanessa_time = (vanessa_distance / aaron_distance) * aaron_time
    result = vanessa_time
    return result

 Executed result: 32.0
[EXP] 1312: [success_rate]: True, [answer]: 594, [output]: def solution():
    dock_length = 200
    line_per_foot = 3
    line_already = 6
    line_needed = dock_length * line_per_foot - line_already
    result = line_needed
    return result

 Executed result: 594
[EXP] 1313: [success_rate]: True, [answer]: 180, [output]: 
def solution():
    reservations_per_night = 6
    meals_per_reservation = 2
    meal_cost = 5
    wine_cost = 5
    total_daily_revenue = (meals_per_reservation * meal_cost) + wine_cost
    weekly_revenue = total_daily_revenue * 2 * reservations_per_night
    result = weekly_revenue
    return result

 Executed result: 180
[EXP] 1314: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    cost = 80
    profit = 0.25
    total_profit = cost * profit
    total_revenue = cost + total_profit
    revenue_per_watermelon = total_revenue / 50
    result = revenue_per_watermelon
    return result

 Executed result: 2.0
[EXP] 1315: [success_rate]: False, [answer]: 8, [output]: def solution():
    john_age_at_james_birth = 19
    john_age_at_johns_youngest_birth = 32
    yearspassed = john_age_at_johns_youngest_birth - john_age_at_james_birth
    james_age = yearspassed + 21
    dora_age_today = james_age / 2
    dora_age_in_3_years = dora_age_today + 3
    youngest_son_age = yearspassed
    youngest_son_age_in_3_years = youngest_son_age + 3
    result = youngest_son_age_in_3_years
    return result

 Executed result: 16
[EXP] 1316: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    minutes_per_orange_anana = 3
    minutes_per_orange_jane = 4
    total_minutes = 60  # 1 hour
    oranges_anana = total_minutes // minutes_per_orange_anana
    oranges_jane = total_minutes // minutes_per_orange_jane
    oranges_dif = oranges_anana - oranges_jane
    result = oranges_dif
    return result

 Executed result: 5
[EXP] 1317: [success_rate]: False, [answer]: 230, [output]: python
def solution():
    discount = 0.80
    radiator_cost = 400
    cost_after_discount = radarior_cost * discount
    labor_cost = 3 * 50 
    total_cost = labor_cost + cost_after_discount
    result = total_cost
    return result

 Executed result: None
[EXP] 1318: [success_rate]: False, [answer]: 5, [output]: def solution():
    animals = 20
    legs_total = 70
    legs_per_chicken = 2
    legs_per_cow = 4
    chicken_legs = legs_total - legs_per_cow * (animals - (legs_total - legs_per_chicken * len(range(lenlegs_total,legs_per_chicken * animals)))))
    result = chicken_legs / legs_per_chicken
    return result

 Executed result: None
[EXP] 1319: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    pizzas = 7
    slices_per_pizza = 8
    total_slices = pizzas * slices_per_pizza
    friends = 3
    slices_per_person = total_slices / (1 + friends)
    result = slices_per_person
    return result

 Executed result: 14.0
[FLOPS] {'avg_prompt_tokens': 0.0, 'avg_prompt_times': 0.0, 'avg_generation_tokens': 0.0, 'avg_reward_tokens': 0.0, 'avg_reward_times': 0.0}
