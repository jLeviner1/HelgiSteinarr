[EXP] 1: [success_rate]: True, [answer]: 18, [output]: def solution():
    eggs_laid = 16
    eggs_eaten = 3
    eggs_used = 4
    eggs_sold = eggs_laid - (eggs_eaten + eggs_used)
    money_made = eggs_sold * 2
    return money_made

 Executed result: 18
[EXP] 2: [success_rate]: True, [answer]: 3, [output]: def solution():
    blue_fiber = 2
    white_fiber = blue_fiber / 2
    total_fiber = blue_fiber + white_fiber
    return total_fiber

 Executed result: 3.0
[EXP] 3: [success_rate]: False, [answer]: 70000, [output]: def solution():
    initial_cost = 80000
    repair_cost = 50000
    cost_after_repair = initial_cost + repair_cost
    new_value = cost_after_repair * 3.5 / 2
    profit = new_value - initial_cost - repair_cost
    return profit

 Executed result: 97500.0
[EXP] 4: [success_rate]: True, [answer]: 540, [output]: def solution():
    meters_per_sprint = 60
    sprints_per_week = 3
    runs_per_week = 3
    return meters_per_sprint * sprints_per_week * runs_per_week

 Executed result: 540
[EXP] 5: [success_rate]: False, [answer]: 20, [output]: def solution():
    total_cups = 15 + 25
    cups_per_chicken = 3
    total_chickens = 20
    cups_per_meal = total_cups / 3
    final_meal_cups = (total_cups // 2) * cups_per_chicken + cups_per_meal - cups_per_cocks
    return final_meal_cups

 Executed result: None
[EXP] 6: [success_rate]: True, [answer]: 64, [output]: def solution():
    first_glasses = 5
    second_glasses = first_glasses * (1 - 0.4)
    total_sum = 0
    for i in range(16):
        if i % 2 == 0:
            total_sum += first_glasses
        else:
            total_sum += second_glasses
    return total_sum

 Executed result: 64.0
[EXP] 7: [success_rate]: True, [answer]: 260, [output]: def solution():
    seattle_sheep = 20
    charleston_sheep = seattle_sheep * 4
    toulouse_sheep = charleston_sheep * 2
    total_sheep = toulouse_sheep + charleston_sheep + seattle_sheep
    return total_sheep

 Executed result: 260
[EXP] 8: [success_rate]: True, [answer]: 160, [output]: def solution():
    total_size = 200
    speed = 2
    restart_delay = 20
    
    # Calculate the time it would take to download the entire file without delays
    total_time = total_size / speed
    
    # Calculate the time it would take to download 40% of the file
    forty_percent_time = total_size / 5  # 40% is 2/5 of the entire file
    total_time += forty_percent_time
    
    # Add the delay for the restart
    total_time += restart_delay
    
    return total_time

 Executed result: 160.0
[EXP] 9: [success_rate]: False, [answer]: 45, [output]: def solution():

 Executed result: None
[EXP] 10: [success_rate]: True, [answer]: 460, [output]: def solution():
    reg_rate = 10
    overtime_rate = 10 * 1.2
    reg_hours = 40
    overtime_hours = 45 - reg_hours
    regular_earnings = reg_rate * reg_hours
    overtime_earnings = overtime_rate * overtime_hours
    total_earnings = regular_earnings + overtime_earnings
    return total_earnings

 Executed result: 460.0
[EXP] 11: [success_rate]: True, [answer]: 366, [output]: def solution():
    downloads1 = 60
    downloads2 = downloads1 * 3
    downloads3 = downloads2 * 0.7
    return downloads1 + downloads2 + downloads3

 Executed result: 366.0
[EXP] 12: [success_rate]: True, [answer]: 694, [output]: def solution():
    donut_cost = 68 * 3
    cupcakes_cost = 80 * 2
    cheesecakes_cost = 55 * 6
    total_cost = donut_cost + cupcakes_cost + cheesecakes_cost
    return total_cost

 Executed result: 694
[EXP] 13: [success_rate]: False, [answer]: 13, [output]: def solution():
    totalCost = 90
    earningPerYear = 7 * 1.5
    annualCost = 3
    years = 0
    while totalCost > earningPerYear - annualCost:
        totalCost = totalCost + annualCost
        years += 1
    return years

 Executed result: None
[EXP] 14: [success_rate]: False, [answer]: 18, [output]: def solution():
    sold_green = 3 * x // 3
    sold_red = 2
    remaining = x - sold_green - sold_red
    sold_orange = remaining // 2
    return x

 Executed result: None
[EXP] 15: [success_rate]: True, [answer]: 60, [output]: def solution():
    total_students = 20
    contemporary_students = int(0.2 * total_students)
    remaining_students = total_students - contemporary_students
    jazz_students = int(0.25 * remaining_students)
    hip_hop_students = remaining_students - jazz_students
    hip_hop_percentage = (hip_hop_students / total_students) * 100
    return hip_hop_percentage

 Executed result: 60.0
[EXP] 16: [success_rate]: True, [answer]: 125, [output]: def solution():
    jewelry_market = 5000 * (1 + 0.025)
    gadgets_market = 8000 * (1 + 0.012)
    profit_jewelry = jewelry_market - 5000
    profit_gadgets = gadgets_market - 8000
    return profit_jewelry if profit_jewelry > profit_gadgets else profit_gadgets

 Executed result: 125.0
[EXP] 17: [success_rate]: False, [answer]: 230, [output]: def solution():
    southwest_distance = 2 * 80
    north_distance = 150
    result = "The distance covered by each train in the two days is %s miles." % (southwest_distance + north_distance)
    return result

 Executed result: The distance covered by each train in the two days is 310 miles.
[EXP] 18: [success_rate]: True, [answer]: 57500, [output]: def solution():
    hourly_rate_teacher = 20
    hourly_rate_coach = 30
    hours_teacher_per_week = 35
    hours_coach_per_week = 15
    weeks_per_year = 50
    
    teacher_salary_per_week = hourly_rate_teacher * hours_teacher_per_week
    coach_salary_per_week = hourly_rate_coach * hours_coach_per_week
    salary_per_week = teacher_salary_per_week + coach_salary_per_week
    annual_salary = salary_per_week * weeks_per_year
    
    return annual_salary

 Executed result: 57500
[EXP] 19: [success_rate]: False, [answer]: 7, [output]: def solution():
    eggs_per_omelet = 3
    omelets_per_day = 1
    days_per_week = 7
    weeks = 4

    total_eggs_per_week = eggs_per_omelet * omelets_per_day * days_per_week
    total_eggs = total_eggs_per_week * weeks

    dozens_eggs = total_eggs // 12
    remainder_eggs = total_eggs % 12

    if remainder_eggs > 0:
        return f"Claire will eat {dozens_eggs} dozen eggs and {remainder_eggs} eggs."

 Executed result: None
[EXP] 20: [success_rate]: False, [answer]: 6, [output]: def solution():
    time_taken = 1 + 1
    distance_covered = 4 + 2
    speed_required = 4
    remaining_distance = 12 - distance_covered
    time_required = remaining_distance / speed_required
    speed = remaining_distance / time_required
    return round(speed)

 Executed result: 4
[EXP] 21: [success_rate]: True, [answer]: 15, [output]: def solution():
    orange_drink = 10 - 1  # subtract 1 liter that was spilled
    orange_water = orange_drink * 2/3  # calculate water in orange drink
    pineapple_drink = 15
    pineapple_water = pineapple_drink * 3/5  # calculate water in pineapple drink
    total_water = orange_water + pineapple_water
    return total_water

 Executed result: 15.0
[EXP] 22: [success_rate]: False, [answer]: 14, [output]: def solution():
    raymond_birth_year = 31 - 6
    raymond_son_born = raymond_birth_year + 23
    son_birth_year = 2023 - raymond_son_born
    return son_birth_year

 Executed result: 1975
[EXP] 23: [success_rate]: True, [answer]: 7, [output]: def solution():
    total_sold = 3 + 2*2
    return total_sold

 Executed result: 7
[EXP] 24: [success_rate]: True, [answer]: 8, [output]: def solution():
    hours = 4  # 5:00 PM - 1:00 PM = 4 hours
    centimeters = hours * 2
    return centimeters

 Executed result: 8
[EXP] 25: [success_rate]: True, [answer]: 26, [output]: def solution():
    discount_price = 19.5
    percentage = 0.25
    original_price = discount_price / (1 - percentage)
    return original_price

 Executed result: 26.0
[EXP] 26: [success_rate]: False, [answer]: 2, [output]: def solution():
    total_cost = 12 + (5 * 3) + (4 * 1.5)
    boxes_of_pizza = 50 - total_cost / 8.50
    return int(boxes_of_pizza)

 Executed result: 46
[EXP] 27: [success_rate]: True, [answer]: 243, [output]: def solution():
    shorts = 3 * 16.50
    pants = 3 * 22.50
    shoes = 3 * 42
    total = shorts + pants + shoes
    return total

 Executed result: 243.0
[EXP] 28: [success_rate]: True, [answer]: 16, [output]: def solution():
    cost_per_carton = 4
    servings_per_carton = 15
    servings_per_day = 1
    days = 60
    total_carts = (days * servings_per_day) // servings_per_carton
    total_cost = total_carts * cost_per_carton
    return total_cost

 Executed result: 16
[EXP] 29: [success_rate]: True, [answer]: 25, [output]: def solution():
    total_miles = 60
    first_stop = 20
    second_stop = total_miles - 15
    
    distance_between_stops = second_stop - first_stop
    return distance_between_stops

 Executed result: 25
[EXP] 30: [success_rate]: False, [answer]: 104, [output]: def solution():
   heels Cost1 = 33
    heelsCost2 = heelsCost1 * 2
    totalHeels = heelsCost1 + heelsCost2
    bootsCost = totalHeels + 5
    return bootsCost

 Executed result: None
[EXP] 31: [success_rate]: False, [answer]: 109, [output]: def solution():

 Executed result: None
[EXP] 32: [success_rate]: True, [answer]: 80, [output]: def solution():
    friend1 = 80
    friend2 = (1/2) * friend1 + 20
    friend3 = friend1 + (1/4) * friend1
    average = (friend1 + friend2 + friend3) / 3
    return average

 Executed result: 80.0
[EXP] 33: [success_rate]: True, [answer]: 35, [output]: def solution():
    hours_per_day = 0.5
    dogs = 10
    hours_per_week = hours_per_day * dogs * 7
    return hours_per_week

 Executed result: 35.0
[EXP] 34: [success_rate]: True, [answer]: 70, [output]: def solution():
    total_coins = 110
    diff = 30
    gold_coins = (total_coins + diff) / 2
    return gold_coins

 Executed result: 70.0
[EXP] 35: [success_rate]: True, [answer]: 23, [output]: def solution():
    raymond_jewels = 40
    aaron_jewels = (raymond_jewels // 2) + 5
    siobhan_jewels = aaron_jewels - 2
    return siobhan_jewels

 Executed result: 23
[EXP] 36: [success_rate]: True, [answer]: 9, [output]: def solution():
    first_half = 4
    second_half = first_half * (1 + 0.25)
    total_points = first_half + second_half
    return total_points

 Executed result: 9.0
[EXP] 37: [success_rate]: True, [answer]: 75, [output]: def solution():
    cost_per_yogurt = 5.0 / 4
    cost_per_day = 2 * cost_per_yogurt
    total_cost = cost_per_day * 30
    return total_cost

 Executed result: 75.0
[EXP] 38: [success_rate]: True, [answer]: 2, [output]: def solution():
    total_money_received = 13 * 15
    total_money_spent = 8 * 20
    money_left = total_money_received - total_money_spent
    if money_left > 0:
        remaining_lego_sets = (money_left // 15)
    else:
        remaining_lego_sets = 0
    return remaining_lego_sets

 Executed result: 2
[EXP] 39: [success_rate]: False, [answer]: 10, [output]: def solution():

 Executed result: None
[EXP] 40: [success_rate]: False, [answer]: 18, [output]: def solution():
    s = 3  # speed while skipping
    r = s * 4  # speed while running
    w = s * 2  # speed while walking
    t_run = 2  # time while running
    t_walk = 4  # time while walking
    run_miles = t_run * r
    walk_miles = t_walk * w
    total_miles = run_miles + walk_miles
    return total_miles

 Executed result: 48
[EXP] 41: [success_rate]: True, [answer]: 8, [output]: def solution():
    suzy_age = 1
    ben_age = suzy_age * 2
    brandon_age = ben_age * 4
    return brandon_age

 Executed result: 8
[EXP] 42: [success_rate]: True, [answer]: 200, [output]: def solution():
    distance_regular = 400
    distance_with_gemstone = distance_regular * 3
    max_distance = 1000 - distance_with_gemstone
    return max_distance

 Executed result: -200
[EXP] 43: [success_rate]: True, [answer]: 26, [output]: def solution():
    total_pieces = 5 * 8
    taken_pieces = total_pieces - 14
    return taken_pieces

 Executed result: 26
[EXP] 44: [success_rate]: False, [answer]: 48, [output]: def solution():
    # Calculate the total calories in 5 servings
    total_calories = 250 * 5
    
    # Subtract the total calories already consumed
    remaining_calories = 2000 - 1800
    
    # Calculate the proportion of total calories to consume
    proportion = remaining_calories / total_calories
    
    # Each serving has 50 grams
    serving_weight = 300 / 5
    
    # Calculate the weight of remaining calories in grams
    result = serving_weight * proportion
    
    return result

 Executed result: 9.6
[EXP] 45: [success_rate]: True, [answer]: 20, [output]: def solution():
    beeswax_price = 10
    candles_per_pound = 10
    price_per_candle = 2
    weight_per_candle = 0.1  # assuming each tapered candle weighs 0.1 pound
    profit = (candles_per_pound * weight_per_candle / 1) * (price_per_candle - beeswax_price / candles_per_pound) * 20
    return round(profit, 2)

 Executed result: 20.0
[EXP] 46: [success_rate]: True, [answer]: 104, [output]: def solution():
    monday_articles = 5
    tuesday_articles = monday_articles + (2/5) * monday_articles
    wednesday_articles = tuesday_articles * 2
    total_articles = monday_articles + tuesday_articles + wednesday_articles
    total_hours = total_articles * 4
    return total_hours

 Executed result: 104.0
[EXP] 47: [success_rate]: False, [answer]: 163, [output]: def solution():
    total_post_it = 80 + 220 + 23
    package_post_it = total_post_it - 80 - 220
    return package_post_it

 Executed result: 23
[EXP] 48: [success_rate]: True, [answer]: 800, [output]: def solution():
    blue_ties = 200 / 40
    red_ties = blue_ties * 2
    red_cost = 1.5 * 40
    red_total = red_ties * red_cost
    return red_total + 200

 Executed result: 800.0
[EXP] 49: [success_rate]: True, [answer]: 8, [output]: def solution():
    length = 4 * 12  # Convert feet to inches
    piece_length = 6
    pieces = length // piece_length
    return pieces

 Executed result: 8
[EXP] 50: [success_rate]: True, [answer]: 30, [output]: def solution():
    total_units = 15 * 8
    occupied_units = (15 * 8) * 3 / 4
    unoccupied_units = total_units - occupied_units
    return unoccupied_units

 Executed result: 30.0
[EXP] 51: [success_rate]: True, [answer]: 294, [output]: def solution():
    daily_eggs = 252
    eggs_per_dozen = 12
    dollars_per_dozen = 2
    daily_income = daily_eggs / eggs_per_dozen * dollars_per_dozen
    weekly_income = daily_income * 7
    return weekly_income

 Executed result: 294.0
[EXP] 52: [success_rate]: True, [answer]: 5, [output]: def solution():
    from_time = 1
    to_time = 4
    travel_time = 3  # 4 - 1 = 3 hours
    return travel_time * 2  # travel time + return time

 Executed result: 6
[EXP] 53: [success_rate]: True, [answer]: 15, [output]: def solution():
    comic_weight = 0.25
    toy_weight = 0.5
    total_weight = 15
    removed_comics = 30
    
    removed_comic_weight = removed_comics * comic_weight
    remaining_weight = total_weight - removed_comic_weight
    needed_toys_weight = remaining_weight / toy_weight
    needed_toys = int(needed_toys_weight)
    
    return needed_toys

 Executed result: 15
[EXP] 54: [success_rate]: False, [answer]: 40, [output]: def solution():
    thursday_truck_revenue = 6 * 60
    thursday_car_revenue = 4 * 40
    thursday_total_revenue = thursday_truck_revenue + thursday_car_revenue
    
    friday_car_revenue = 12 * 40
    friday_total_revenue = friday_car_revenue
    
    fridays_higher_revenue = friday_total_revenue
    
    if thursday_total_revenue > friday_total_revenue:
        fridays_higher_revenue = thursday_total_revenue
    return fridays_higher_revenue - thursday_total_revenue

 Executed result: 0
[EXP] 55: [success_rate]: False, [answer]: 40, [output]: def solution():

 Executed result: None
[EXP] 56: [success_rate]: True, [answer]: 14, [output]: def solution():
    lollipops = 30
    lollipops_eaten = 2
    remaining_lollipops = lollipops - lollipops_eaten
    num_of_bags = remaining_lollipops // 2
    return num_of_bags

 Executed result: 14
[EXP] 57: [success_rate]: False, [answer]: 3, [output]: def solution():

 Executed result: None
[EXP] 58: [success_rate]: True, [answer]: 83, [output]: def solution():
    truck_weight = 3755
    bridge_limit = 5000
    box_weight = 15
    max_boxes = (bridge_limit - truck_weight) // box_weight
    return max_boxes

 Executed result: 83
[EXP] 59: [success_rate]: True, [answer]: 57, [output]: def solution():
    bill = 40.0
    extra_fee = bill * 0.25 + 3.0
    total = bill + extra_fee + 4.0
    return total

 Executed result: 57.0
[EXP] 60: [success_rate]: False, [answer]: 187, [output]: def solution():

 Executed result: None
[EXP] 61: [success_rate]: True, [answer]: 17, [output]: def solution():
    total_oranges = 25
    bad_oranges = 1
    unripe_oranges = int(total_oranges * 0.2)
    sour_oranges = 2
    good_oranges = total_oranges - bad_oranges - unripe_oranges - sour_oranges
    return good_oranges

 Executed result: 17
[EXP] 62: [success_rate]: True, [answer]: 1430, [output]: def solution():
    cost_material = 500
    cost_jeweler = 800
    cost_insurance = (cost_material + cost_jeweler) * 0.1
    total_cost = cost_material + cost_jeweler + cost_insurance
    return total_cost

 Executed result: 1430.0
[EXP] 63: [success_rate]: False, [answer]: 25000, [output]: def solution():
    annual_pension = 50000
    for year in range(20, 40):
        if year > 20:
            annual_pension += 0.05 * annual_pension
    return int(annual_pension)

 Executed result: 126347
[EXP] 64: [success_rate]: False, [answer]: 1596, [output]: def solution():

 Executed result: None
[EXP] 65: [success_rate]: False, [answer]: 300, [output]: def solution():

 Executed result: None
[EXP] 66: [success_rate]: True, [answer]: 36, [output]: def solution():
    hours_reading_tv = 2 * 3 * 4
    hours_reading_tv_in_half = hours_reading_tv / 2
    total_hours = hours_reading_tv + hours_reading_tv_in_half
    return total_hours

 Executed result: 36.0
[EXP] 67: [success_rate]: True, [answer]: 48, [output]: def solution():
    people_per_school = 5 * 2 + 2
    total_people = people_per_school * 4
    return total_people

 Executed result: 48
[EXP] 68: [success_rate]: True, [answer]: 595, [output]: def solution():
    diamonds = 175
    rubies = diamonds - 35
    emeralds = rubies * 2
    total_gems = diamonds + rubies + emeralds
    return total_gems

 Executed result: 595
[EXP] 69: [success_rate]: False, [answer]: 36, [output]: def solution():
    boys = 2 * 60
    students_per_teacher = 5
    teachers = boys + 60 // students_per_teacher
    return teachers

 Executed result: 132
[EXP] 70: [success_rate]: True, [answer]: 60, [output]: def solution():
    total_money = 100
    weekly_allowance = 5
    weeks = 8
    initial_money = total_money - (weekly_allowance * weeks)
    return initial_money

 Executed result: 60
[EXP] 71: [success_rate]: True, [answer]: 7425, [output]: def solution():
    total_students = (5 * 15 * 5) + (15 * 8)
    total_fee = total_students * 15
    return total_fee

 Executed result: 7425
[EXP] 72: [success_rate]: True, [answer]: 60, [output]: def solution():
    total_instructions = 20 + 20 * 2
    return total_instructions

 Executed result: 60
[EXP] 73: [success_rate]: False, [answer]: 221, [output]: def solution():

 Executed result: None
[EXP] 74: [success_rate]: True, [answer]: 255, [output]: def solution():
    installment = 150
    interest_rate = 0.02
    total_installment = installment * 5
    total_interest = total_installment * interest_rate
    total_amount = total_installment + total_interest
    monthly_installment = total_amount / 3
    return monthly_installment

 Executed result: 255.0
[EXP] 75: [success_rate]: False, [answer]: 88, [output]: def solution():

 Executed result: None
[EXP] 76: [success_rate]: False, [answer]: 60, [output]: def solution():
    total = 16 + 16/2 + 16/(2*2)
    average = total / 4
    return average

 Executed result: 7.0
[EXP] 77: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_cups = 1 * 180 + 2 * (365 - 180)
    bags = total_cups // 110
    return bags

 Executed result: 5
[EXP] 78: [success_rate]: True, [answer]: 100, [output]: def solution():
    david_laundry = 400 / 4  # calculate the amount of laundry David does
    raymond_laundry = 400 / 2  # calculate the amount of laundry Raymond does
    return abs(raymond_laundry - david_laundry)  # return the absolute difference

 Executed result: 100.0
[EXP] 79: [success_rate]: True, [answer]: 6, [output]: def solution():
    price1 = 18 // 3 * 2.50
    price2 = 18 // 2 * 1
    difference = price1 - price2
    return difference

 Executed result: 6.0
[EXP] 80: [success_rate]: True, [answer]: 70, [output]: def solution():
    discount = 0.3
    cost = 100
    discount_cost = cost * (1 - discount)
    return discount_cost

 Executed result: 70.0
[EXP] 81: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_water = 24
    water_given_to_girls = 2 * 1/6 * total_water
    water_left = total_water - water_given_to_girls - 6
    return water_left

 Executed result: 10.0
[EXP] 82: [success_rate]: True, [answer]: 17, [output]: def solution():
    stickers = 10 + 21 + 23
    stickers -= 9
    stickers -= 28
    return stickers

 Executed result: 17
[EXP] 83: [success_rate]: True, [answer]: 623, [output]: def solution():
    grace_weight = 125
    alex_weight = 4 * grace_weight - 2
    combined_weight = grace_weight + alex_weight
    return combined_weight

 Executed result: 623
[EXP] 84: [success_rate]: True, [answer]: 600, [output]: def solution():
    thorns = 3 * 25 * 8
    return thorns

 Executed result: 600
[EXP] 85: [success_rate]: False, [answer]: 15, [output]: def solution():
    total = 22
    lost = (total - 8) // 2
    return lost

 Executed result: 7
[EXP] 86: [success_rate]: False, [answer]: 44, [output]: def solution():
    start_age = 23
    current_age = 34
    total_blocks = 0
    for age in range(start_age, current_age + 1):
        total_blocks += 4
    return total_blocks

 Executed result: 48
[EXP] 87: [success_rate]: True, [answer]: 22, [output]: def solution():
    total_rings = 4 + 3 * 4 + 3 * 4 // 2
    return total_rings

 Executed result: 22
[EXP] 88: [success_rate]: False, [answer]: 9360, [output]: def solution():
    initial_salary = 600
    years = 5
    increase_per_year = (10/100)
    annual_salary = initial_salary * (1 + increase_per_year)**(years)
    for year in range(3):
        annual_salary *= 1 + increase_per_year
    return annual_salary

 Executed result: 1286.1532860000007
[EXP] 89: [success_rate]: False, [answer]: 8000, [output]: def solution():
    marilyn_copies = x
    harald_copies = x
    total_copies = marilyn_copies + harald_copies
    
    marilyn_copies = total_copies / 11
    
    harald_copies = total_copies - marilyn_copies
    
    return harald_copies

 Executed result: None
[EXP] 90: [success_rate]: False, [answer]: 24, [output]: def solution():

 Executed result: None
[EXP] 91: [success_rate]: True, [answer]: 225, [output]: def solution():
    adults_eat = 20 * 10
    children_eat = 5 * 10 / 2
    total_eat = adults_eat + children_eat
    return total_eat

 Executed result: 225.0
[EXP] 92: [success_rate]: False, [answer]: 28, [output]: def solution():

 Executed result: None
[EXP] 93: [success_rate]: True, [answer]: 4, [output]: def solution():
    corey_age = 11
    amy_age = corey_age - 2
    jackson_age = amy_age - 5
    return jackson_age

 Executed result: 4
[EXP] 94: [success_rate]: True, [answer]: 36, [output]: def solution():
    lee_time = 38
    gerald_original = lee_time + 2
    gerald_improved = gerald_original - (gerald_original * 0.1)
    return gerald_improved

 Executed result: 36.0
[EXP] 95: [success_rate]: True, [answer]: 348, [output]: def solution():
    dogs = 60
    cats = dogs * 2
    rabbits = dogs + cats - 12
    total_pets = dogs + cats + rabbits
    return total_pets

 Executed result: 348
[EXP] 96: [success_rate]: True, [answer]: 40, [output]: def solution():
    total_students = 200
    boys = (2/5) * total_students
    girls = total_students - boys
    girls_in_scout = (2/3) * girls
    girls_not_in_scout = girls - girls_in_scout
    return girls_not_in_scout

 Executed result: 40.0
[EXP] 97: [success_rate]: True, [answer]: 3, [output]: def solution():
    hours_harry = 9
    hours_james = hours_harry * 2 // 3
    result = hours_harry - hours_james
    return result

 Executed result: 3
[EXP] 98: [success_rate]: True, [answer]: 12, [output]: def solution():
    total_volume = 32
    can_size = 16
    tomatoes_per_can = 3
    cans = total_volume / (0.5 * can_size)
    total_cans = int(cans)
    total_tomatoes = total_cans * tomatoes_per_can
    return total_tomatoes

 Executed result: 12
[EXP] 99: [success_rate]: False, [answer]: 5, [output]: def solution():
    total_cars = 30
    carscksåplan_left = total_cars - 5
    cars_driven_through_remaining = 20
    cars_driven_through_first_15 = cars.toggle_left - cars_driven_through_remaining
    return cars_driven_through_first_15

 Executed result: None
[EXP] 100: [success_rate]: True, [answer]: 58, [output]: def solution():
    total_plants_received = 18
    total_plants_already = 2 * 40
    total_plants_given = 40
    total_plants_remaining = total_plants_received + total_plants_already - total_plants_given
    return total_plants_remaining

 Executed result: 58
[EXP] 101: [success_rate]: False, [answer]: 175, [output]: def solution():
    first_friend = 20
    second_friend = 20 + 20/4
    third_friend = 60 + 10
    total_presses = first_friend + second_friend + third_friend
    return total_presses

 Executed result: 115.0
[EXP] 102: [success_rate]: False, [answer]: 6, [output]: def solution():
    pages_to_read = 4 + 20 + 7 + 8
    total_pages = pages_to_read - 15
    days = 4 + 1
    pages_per_day = total_pages / days
    return pages_per_day

 Executed result: 4.8
[EXP] 103: [success_rate]: True, [answer]: 26, [output]: def solution():
    total_water = 0
    for day in range(7):
        if day < 5:  # weekdays
            total_water += 4  # 4 glasses of water
        else:  # weekends
            total_water += 3  # 3 glasses of water
    return total_water

 Executed result: 26
[EXP] 104: [success_rate]: True, [answer]: 140, [output]: def solution():
    miles = 42
    minutes_per_mile = 10 / 3
    total_minutes = miles * minutes_per_mile
    return total_minutes

 Executed result: 140.0
[EXP] 105: [success_rate]: True, [answer]: 500, [output]: def solution():
    total_pieces = 1000
    pieces_placed = total_pieces // 4
    remaining_pieces = total_pieces - pieces_placed
    mom_pieces = remaining_pieces // 3
    remaining_pieces -= mom_pieces
    return remaining_pieces

 Executed result: 500
[EXP] 106: [success_rate]: True, [answer]: 20, [output]: def solution():
    amir_cookies = 5
    cody_cookies = 3 * amir_cookies
    total_cookies = amir_cookies + cody_cookies
    return total_cookies

 Executed result: 20
[EXP] 107: [success_rate]: True, [answer]: 72, [output]: def solution():
    volume_of_one_box = (5-2)*(6-2)*(4-2)
    return volume_of_one_box * 3

 Executed result: 72
[EXP] 108: [success_rate]: False, [answer]: 3, [output]: def solution():
    # time watched each day in minutes
    monday = 60
    tuesday = 60
    friday = 120 + 120
    thursday = 60 + 30
    
    # total time in minutes
    total_time = monday + tuesday + friday + thursday + (60 * (7 - 4))
    
    # calculate the number of 30-minute episodes
    thirty_minute_episodes = (total_time - friday - monday - tuesday - thursday) // 30

    return thirty_minute_episodes

 Executed result: 6
[EXP] 109: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_cookies = 110
    cookies_baked_this_year = total_cookies + 5
    cookies_meant_to_bake = cookies_baked_this_year - 15
    cookies_baked_last_year = cookies_meant_to_bake / 2
    return cookies_baked_last_year

 Executed result: 50.0
[EXP] 110: [success_rate]: True, [answer]: 28, [output]: def solution():
    gas_price = 3.00
    cashback = 0.20
    gallons = 10
    total = gas_price * gallons
    cashback_rewards = cashback * gallons
    total_after_cashback = total - cashback_rewards
    return total_after_cashback

 Executed result: 28.0
[EXP] 111: [success_rate]: True, [answer]: 45, [output]: def solution():
    beatrice_rolls = 2 * 24
    marcell_rolls = 3 * 14
    total_rolls = beatrice_rolls + marcell_rolls
    average_rolls = total_rolls / 2
    return average_rolls

 Executed result: 45.0
[EXP] 112: [success_rate]: False, [answer]: 16, [output]: def solution():
    seconds_per_foot = 16 / 20
    feet_to_shore = 64 * 10  # 64 seconds, each 10 seconds is 1 foot
    water_taken_on = (feet_to_shore // 10) * 2
    return water_taken_on

 Executed result: 128
[EXP] 113: [success_rate]: True, [answer]: 24, [output]: def solution():
    total_lessons = 4 * 2
    total_cleanings_per_lesson = 3
    total_cleanings_per_day = total_lessons * total_cleanings_per_lesson
    return total_cleanings_per_day

 Executed result: 24
[EXP] 114: [success_rate]: True, [answer]: 25, [output]: def solution():
    flowers_planted = 2
    total_days = 15
    total_flowers = flowers_planted * total_days
    non_grown_flowers = 5
    total_flowers -= non_grown_flowers
    return total_flowers

 Executed result: 25
[EXP] 115: [success_rate]: True, [answer]: 6, [output]: def solution():
    x = 1800 / 7  # 1800 / (6 + 1) = 1800 / 7 = 257.14
    result = x / 50  # 257.14 / 50 = 5.1428, rounded off to 5
    return result

 Executed result: 5.142857142857143
[EXP] 116: [success_rate]: True, [answer]: 90, [output]: def solution():
    total_cost = (10*10) + (5*16)
    total_profit = (10*10*1.5) + (5*16*1.5) - total_cost
    return total_profit

 Executed result: 90.0
[EXP] 117: [success_rate]: False, [answer]: 42, [output]: def solution():
    total_sugar = 120
    ratio_sugar = 7
    total_sugar_taken = total_sugar / ratio_sugar
    return total_sugar_taken

 Executed result: 17.142857142857142
[EXP] 118: [success_rate]: True, [answer]: 360, [output]: def solution():
    pairs = 2
    children = 3
    price = 60
    return pairs * children * price

 Executed result: 360
[EXP] 119: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    original_vehicles = 2 * 5
    new_vehicles = 30
    new_containers = (new_vehicles - original_vehicles) // 5
    return new_containers

 Executed result: 4
[EXP] 120: [success_rate]: False, [answer]: 95200, [output]: def solution():
    adrien_current = (1 + 0.4) * 40000
    lylah_four_years_ago = adrien_four_years_ago * (1 - 0.3)
    lylah_current = (1 + 0.4) * lylah_four_years_ago
    total_salary = adrien_current + lylah_current
    return total_salary

 Executed result: None
[EXP] 121: [success_rate]: True, [answer]: 240, [output]: def solution():
    sheets_per_week = 2 * 30
    weeks_per_month = 4
    sheets_per_month = sheets_per_week * weeks_per_month
    return sheets_per_month

 Executed result: 240
[EXP] 122: [success_rate]: True, [answer]: 27, [output]: def solution():
    morisette_apples = 5
    morisette_oranges = 8
    kael_apples = morisette_apples * 2
    kael_oranges = morisette_oranges // 2
    
    total_apples = morisette_apples + kael_apples
    total_oranges = morisette_oranges + kael_oranges
    
    total_fruits = total_apples + total_oranges
    return total_fruits

 Executed result: 27
[EXP] 123: [success_rate]: False, [answer]: 48, [output]: def solution():

 Executed result: None
[EXP] 124: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_distance = 10 * 3
    total_distance += 5 * (7 - 3)
    return total_distance

 Executed result: 50
[EXP] 125: [success_rate]: False, [answer]: 10, [output]: def solution():
    total_letters = 60
    stamped_letters = 30
    letters_needed = total_letters - stamped_letters
    letters_needed_for_stamping = letters_needed / 3
    initial_stamped_letters = stamped_letters + letters_needed_for_stamping
    return initial_stamped_letters

 Executed result: 40.0
[EXP] 126: [success_rate]: False, [answer]: 10, [output]: def solution():
    total_spoons = 12
    husband_spoons = 5
    used_spoons = 3
    purchased_spoons = total_spoons - (husband_spoons + used_spoons)
    return purchased_spoons

 Executed result: 4
[EXP] 127: [success_rate]: False, [answer]: 82, [output]: def solution():

 Executed result: None
[EXP] 128: [success_rate]: True, [answer]: 120, [output]: def solution():
    lily_friends = 50
    amy_friends = lily_friends + 20
    total_friends = lily_friends + amy_friends
    return total_friends

 Executed result: 120
[EXP] 129: [success_rate]: True, [answer]: 880, [output]: def solution():
    watermelon_price = 15 * 3  # Each watermelon costs 3 times a pepper, which costs 15 dollars
    pepper_price = 15
    orange_price = watermelon_price - 5
    total_watermelon_cost = watermelon_price * 4
    total_pepper_cost = pepper_price * 20
    total_orange_cost = orange_price * 10
    total_cost = total_watermelon_cost + total_pepper_cost + total_orange_cost
    return total_cost

 Executed result: 880
[EXP] 130: [success_rate]: True, [answer]: 10000, [output]: 
def solution():
    patients = 500
    minutes_per_patient = 24
    minutes_per_day = patients * minutes_per_patient
    hours_per_day = minutes_per_day / 60
    doctor_cost = hours_per_day * 150
    patient_income = hours_per_day * 200
    profit = patient_income - doctor_cost
    return profit

 Executed result: 10000.0
[EXP] 131: [success_rate]: True, [answer]: 30, [output]: def solution():
    total_elves = 60
    elves_vomit = total_elves // 3
    total_elves -= elves_vomit
    total_elves -= 10
    return total_elves

 Executed result: 30
[EXP] 132: [success_rate]: False, [answer]: 940, [output]: def solution():

 Executed result: None
[EXP] 133: [success_rate]: True, [answer]: 60, [output]: def solution():
    total_tickets = (2 + 4) * 6 + 2 * 6 + 2 * 6
    return total_tickets

 Executed result: 60
[EXP] 134: [success_rate]: True, [answer]: 13, [output]: def solution():
    monday_mileage = 4
    tuesday_mileage = monday_mileage * 6
    wednesday_mileage = 41 - (monday_mileage + tuesday_mileage)
    return wednesday_mileage

 Executed result: 13
[EXP] 135: [success_rate]: True, [answer]: 720, [output]: def solution():
    total_car_washes = 4 * 12
    total_cost = total_car_washes * 15
    return total_cost

 Executed result: 720
[EXP] 136: [success_rate]: True, [answer]: 40, [output]: def solution():
    brian_games = 20 - 5
    bobby_games = 3 * brian_games - 5
    return bobby_games

 Executed result: 40
[EXP] 137: [success_rate]: True, [answer]: 6, [output]: def solution():
    total_unicorns = 27
    scottish_unicorns = total_unicorns // 3
    female_scottish_unicorns = scottish_unicorns * 2 // 3
    return female_scottish_unicorns

 Executed result: 6
[EXP] 138: [success_rate]: True, [answer]: 29, [output]: def solution():
    total_cost = 2 * 7.50 + 2 * 1.50 + 2 * 1.00
    delivery_fee = total_cost * 0.20
    total_amount = total_cost + delivery_fee
    tip = 5.00
    final_amount = total_amount + tip
    return final_amount

 Executed result: 29.0
[EXP] 139: [success_rate]: True, [answer]: 105, [output]: def solution():
    time_yesterday = 8
    rate_yesterday = 5
    time_today = 6
    rate_today = 5
    completed_yesterday = time_yesterday * rate_yesterday
    remaining_yesterday = 75 - completed_yesterday
    completed_today = time_today * rate_today
    remaining_today = 100 - completed_today
    return remaining_yesterday + remaining_today

 Executed result: 105
[EXP] 140: [success_rate]: True, [answer]: 70, [output]: def solution():
    blue_gumballs = 12
    pink_gumballs = 4 * blue_gumballs + 22
    return pink_gumballs

 Executed result: 70
[EXP] 141: [success_rate]: True, [answer]: 20, [output]: def solution():
    num_cars = 20
    auto_cars = 12
    manual_cars = 4
    semi_auto_cars = num_cars - auto_cars - manual_cars
    percentage = (semi_auto_cars / num_cars) * 100
    return percentage

 Executed result: 20.0
[EXP] 142: [success_rate]: False, [answer]: 400, [output]: def solution():
    total_beans = 700
    bees_per_queen = 2
    bees_per_baby = 2
    baby_beans = total_beans // bees_per_queen
    worker_beans = baby_beans * bees_per_baby
    return worker_beans

 Executed result: 700
[EXP] 143: [success_rate]: False, [answer]: 140, [output]: def solution():

 Executed result: None
[EXP] 144: [success_rate]: True, [answer]: 16, [output]: def solution():
    milk = 2
    eggs = 3
    lights = 3
    cups = 3
    traps = 4

    total_food_cost = milk + eggs
    total_non_food_cost = lights + cups + traps

    tax = 0.1 * total_non_food_cost
    total_cost = total_food_cost + (total_non_food_cost + tax)

    return total_cost

 Executed result: 16.0
[EXP] 145: [success_rate]: True, [answer]: 20, [output]: def solution():
    num_clients = 3 + 5  # Calculate the total number of clients
    bleach_cost = 2  # cost of 1 bottle of bleach
    cloth_cost = 5  # cost of 1 pack of cloths
    num_bleach = 2  # number of bottles of bleach per client
    num_cloths = 1  # number of packs of cloths per client
    total_bleach_cost = num_clients * num_bleach * bleach_cost  # Total cost of bleach
    total_cloth_cost = num_clients * num_cloths * cloth_cost  # Total cost of cloths
    total_expenses = total_bleach_cost + total_cloth_cost  # Total expenses
    total_income = 92  # Total income per week
    total_profit = total_income - total_expenses  # Profit
    return total_profit

 Executed result: 20
[EXP] 146: [success_rate]: True, [answer]: 4000, [output]: def solution():
    hectares = 10
    pineapples_per_hectare = 100
    harvest_every = 3
    harvest_per_year = 12 // harvest_every
    pineapples_per_year = hectares * pineapples_per_hectare * harvest_per_year
    return pineapples_per_year

 Executed result: 4000
[EXP] 147: [success_rate]: False, [answer]: 2,125, [output]: def solution():
    set1 = 500
    set2 = 3 * set1
    set3 = set1 // 4
    total = set1 + set2 + set3
    return total

 Executed result: 2125
[EXP] 148: [success_rate]: False, [answer]: 75, [output]: def solution():
    bees_leaved = 30
    bees_returned_1st_half = bees_leaved // 2

 Executed result: None
[EXP] 149: [success_rate]: False, [answer]: 30, [output]: def solution():
    adult_ticket = 12
    child_ticket = 10
    total_cost = adult_ticket + child_ticket
    given_money = total_cost
    change = given_money - total_cost
    return int(given_money)

 Executed result: 22
[EXP] 150: [success_rate]: True, [answer]: 16, [output]: def solution():
    charlie_friends = 12
    dorthy_friends = charlie_friends / 3
    james_friends = 4 * dorthy_friends
    return james_friends

 Executed result: 16.0
[EXP] 151: [success_rate]: True, [answer]: 4, [output]: def solution():
    distance_steve = 5280 * 3 # Convert miles to feet
    speed_steve = 440
    time_steve = distance_steve / speed_steve
    distance_tim = 5280 * 2 # Convert miles to feet
    speed_tim = 264
    time_tim = distance_tim / speed_tim
    if time_steve < time_tim:
        time_winner_waits = time_steve - time_tim
    else:
        time_winner_waits = time_tim - time_steve
    return time_winner_waits

 Executed result: -4.0
[EXP] 152: [success_rate]: False, [answer]: 5, [output]: def solution():
    bike_tires = 2 * 5
    tricycle_tires = 3 * 3
    unicycle = 1
    total_tires = bike_tires + tricycle_tires + unicycle
    total_cost = total_tires * 0.25
    dollars = total_cost / 100
    return dollars

 Executed result: 0.05
[EXP] 153: [success_rate]: True, [answer]: 4, [output]: def solution():
    pack_price = 10 * 6 * 0.10
    bill = 10.0
    change = bill - pack_price
    return change

 Executed result: 4.0
[EXP] 154: [success_rate]: False, [answer]: 48, [output]: def solution():
    fries_eaten_by_dave = 14
    fries_eaten_by_seagull = fries_eaten_by_dave // 2
    total_fries_eaten = fries_eaten_by_dave + fries_eaten_by_seagull
    fries_eaten_by_pigeons = total_fries_eaten + 3 * 3
    total_fries_eaten_after_pigeons = total_fries_eaten + fries_eaten_by_pigeons
    fries_stolen_by_raccoon = total_fries_eaten_after_pigeons * 2 // 3
    total_fries_left = total_fries_eaten_after_pigeons - fries_stolen_by_raccoon
    final_fries_left = total_fries_left - 1
    total_fries_in_pack = final_fries_left + 5
    return total_fries_in_pack

 Executed result: 21
[EXP] 155: [success_rate]: False, [answer]: 272, [output]: def solution():
    hours_per_week = (3 * 1 + 2 * 2) * 3
    total_hours_in_semester = hours_per_week * 16
    return total_hours_in_semester

 Executed result: 336
[EXP] 156: [success_rate]: False, [answer]: 280, [output]: def solution():
    roll_length = 300 * 4  # roll length in inches
    croissant_length = 120 * 6  # croissant length in inches
    baguette_length = 60 * 2  # baguette length in feet
    
    total_length_in_inches = roll_length + croissant_length
    total_length_in_feet = total_length_in_inches / 12
    
    return total_length_in_feet

 Executed result: 160.0
[EXP] 157: [success_rate]: False, [answer]: 1400, [output]: def solution():

 Executed result: None
[EXP] 158: [success_rate]: False, [answer]: 80, [output]: def solution():
    blake_distance = 2 * 15 * 100
    kelly_distance = 100 * 2 * (34 + 1)
    winner_distance = abs(blake_distance - kelly_distance)
    return winner_distance

 Executed result: 4000
[EXP] 159: [success_rate]: True, [answer]: 34, [output]: def solution():
    total = (4 * 1.5) + (2 * 4) + 20
    return total

 Executed result: 34.0
[EXP] 160: [success_rate]: True, [answer]: 15, [output]: def solution():
    tadpoles = 11
    tadpoles += 6
    tadpoles -= 2
    return tadpoles

 Executed result: 15
[EXP] 161: [success_rate]: True, [answer]: 16, [output]: def solution():
    monday = 17
    tuesday = monday + 7
    wednesday = (tuesday * 2) / 3
    return wednesday

 Executed result: 16.0
[EXP] 162: [success_rate]: True, [answer]: 32, [output]: def solution():
    anakin_starfish = 10
    anakin_sea_horses = 6
    anakin_clownfish = 3
    
    locsin_starfish = anakin_starfish - 5
    locsin_sea_horses = anakin_sea_horses - 3
    locsin_clownfish = anakin_clownfish + 2
    
    total_anakin = anakin_starfish + anakin_sea_horses + anakin_clownfish
    total_locsin = locsin_starfish + locsin_sea_horses + locsin_clownfish
    
    total_fish = total_anakin + total_locsin
    return total_fish

 Executed result: 32
[EXP] 163: [success_rate]: False, [answer]: 92, [output]: def solution():
    price = 20
    month = 0
    while month < 36:
        price *= 1.2
        month += 2
    return price

 Executed result: 532.4666656177045
[EXP] 164: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_cost = 5 * 4 + 3 * 5 + 5 * 3
    return total_cost

 Executed result: 50
[EXP] 165: [success_rate]: True, [answer]: 15, [output]: def solution():
    lost_income = 3 * 35
    accountant_fee = 90
    difference = accountant_fee - lost_income
    return difference

 Executed result: -15
[EXP] 166: [success_rate]: True, [answer]: 77, [output]: def solution():
    budget = 1500
    computer = 1090
    scanner = 157
    cd_burner = 74
    printer = 102
    total_cost = computer + scanner + cd_burner + printer
    money_left = budget - total_cost
    return money_left

 Executed result: 77
[EXP] 167: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_eggs_needed = 15 * 3
    eggs_per_babysit = 9
    babysits_needed = total_eggs_needed // eggs_per_babysit
    return babysits_needed

 Executed result: 5
[EXP] 168: [success_rate]: False, [answer]: 16, [output]: def solution():
    brooke_age = x
    seth_age = 2 * brooke_age
    future_sum = seth_age + brooke_age + 2
    return seth_age - 2

 Executed result: None
[EXP] 169: [success_rate]: True, [answer]: 18, [output]: def solution():
    ethel_money = 8
    jimmy_money = 2 + (ethel_money * 2)
    return jimmy_money

 Executed result: 18
[EXP] 170: [success_rate]: False, [answer]: 120, [output]: def solution():

 Executed result: None
[EXP] 171: [success_rate]: True, [answer]: 150, [output]: def solution():
    hat_cost = 25
    jacket_cost = 3 * hat_cost
    pants_cost = (hat_cost + jacket_cost) / 2
    total_cost = hat_cost + jacket_cost + pants_cost
    return total_cost

 Executed result: 150.0
[EXP] 172: [success_rate]: True, [answer]: 1210, [output]: def solution():
    spider_legs = 80 * 8
    insect_legs = 90 * 6
    rare_legs = 3 * 10
    total_legs = spider_legs + insect_legs + rare_legs
    return total_legs

 Executed result: 1210
[EXP] 173: [success_rate]: False, [answer]: 51, [output]: def solution():
    s32 = 8
    s4 = s32
    gr = s4 / 2
    st = gr + 3
    return s32 + s4 + gr + st

 Executed result: 27.0
[EXP] 174: [success_rate]: True, [answer]: 18000, [output]: def solution():
    student_loans = 300 * 1.5
    credit_card = 200 * 1.5
    mortgage = 500 * 1.5
    total = student_loans + credit_card + mortgage
    total_year = total * 12
    return total_year

 Executed result: 18000.0
[EXP] 175: [success_rate]: False, [answer]: 95, [output]: def solution():
    peeling_time = 90  # 90 seconds = 1.5 minutes
    cutting_time = 5
    total_time = peeling_time + cutting_time
    total_time_for_all_potatoes = total_time * 60
    return total_time_for_all_potatoes

 Executed result: 5700
[EXP] 176: [success_rate]: False, [answer]: 15, [output]: def solution():
    total_lemons = 3
    total_sugar = 2
    total_glasses = 20
    revenue_per_gallon = 0.5
    total_revenue = 25
    total_gallons = total_revenue / (revenue_per_gallon - total_sugar)
    lemons_per_gallons = total_lemons / total_gallons
    lemons_cost = lemons_per_gallons * total_sugar
    return lemons_cost

 Executed result: -0.36
[EXP] 177: [success_rate]: True, [answer]: 100, [output]: def solution():
    total_asians = 240
    japanese = 80
    chinese = total_asians - japanese
    chinese_boys = 60
    chinese_girls = chinese - chinese_boys
    return chinese_girls

 Executed result: 100
[EXP] 178: [success_rate]: True, [answer]: 350, [output]: def solution():
    salary = 6000
    rent = salary / 4
    car_fuel = salary * (1/3)
    remaining = salary - rent - car_fuel
    charity = remaining / 2
    donation = 200 + 700
    total_donations = charity + donation
    remaining_after_donations = salary - rent - car_fuel - total_donations
    return remaining_after_donations

 Executed result: 350.0
[EXP] 179: [success_rate]: True, [answer]: 122, [output]: def solution():
    bo = 40
    monic = bo - 4
    rani = monic + 10
    return bo + monic + rani

 Executed result: 122
[EXP] 180: [success_rate]: False, [answer]: 130, [output]: def solution():

 Executed result: None
[EXP] 181: [success_rate]: True, [answer]: 20, [output]: def solution():
    winner_votes = 3 / 4 * 80
    loser_votes = 80 - winner_votes
    return loser_votes

 Executed result: 20.0
[EXP] 182: [success_rate]: True, [answer]: 160, [output]: def solution():
    white_carnations = 200 // 5
    red_roses = white_carnations * 4
    return red_roses

 Executed result: 160
[EXP] 183: [success_rate]: False, [answer]: 23, [output]: def solution():
    j = 30
    m = j - 2
    m_years_ago = m - 2
    half_jan = j / 2
    m_years_ago_ahead_of_half_jan = m_years_ago + 5
    mark_age = half_jan + m_years_ago_ahead_of_half_jan
    jean_age = mark_age + 2
    return jean_age

 Executed result: 48.0
[EXP] 184: [success_rate]: False, [answer]: 2, [output]: def solution():
    time1 = 55
    time2 = 60
    for i in range(1, 4):
        time2 += 3
    print(time2 - time1 * 4)

return solution()

 Executed result: None
[EXP] 185: [success_rate]: False, [answer]: 25, [output]: def solution():
    # Calculate the probability of rolling a number greater than 3
    greater_than_3 = 1/2  # 3 out of 6 possible outcomes
    # Calculate the probability of rolling two even numbers in a row
    two_even = 1/4  # 1 outcome out of 6 possible outcomes
    # Calculate the difference in probabilities
    difference = greater_than_3 - two_even
    # Calculate the percentage
    percentage = (difference / greater_than_3) * 100
    return percentage

 Executed result: 50.0
[EXP] 186: [success_rate]: True, [answer]: 30, [output]: def solution():
    mom_apples = 20
    jenna_apples = mom_apples / 2
    total_apples = mom_apples + jenna_apples
    return total_apples

 Executed result: 30.0
[EXP] 187: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_straw_rats_hamsters = 160
    straw_per_rat = 6
    straw_per_hamster = 5
    
    total_rats = (total_straw_rats_hamsters - 20 - 10 * straw_per_hamster) // straw_per_rat
    rats_per_cage = total_rats // 3
    
    return rats_per_cage

 Executed result: 5
[EXP] 188: [success_rate]: True, [answer]: 106, [output]: def solution():
    amount_paid = 100 * (1 + 0.02)**3
    return round(amount_paid, 2)

 Executed result: 106.12
[EXP] 189: [success_rate]: True, [answer]: 50, [output]: def solution():
    buy_price = 20
    transport_cost = 2
    sell_price = 30
    total_profit = 400
    
    total_cost = buy_price + transport_cost
    total_revenue = sell_price
    
    profit_per_bag = total_revenue - total_cost
    
    bags_sold = total_profit / profit_per_bag
    
    return int(bags_sold)

 Executed result: 50
[EXP] 190: [success_rate]: False, [answer]: 34, [output]: def solution():
    total_tickets = 3 * 20.25
    total_food = total_tickets - 4.5
    total_rides = 2 * 33
    total_cost = total_tickets + total_food + total_rides
    each_cost = total_cost / 3
    return each_cost

 Executed result: 61.0
[EXP] 191: [success_rate]: True, [answer]: 360, [output]: def solution():
    peaches_per_minute = 2
    minutes_collected = peaches_per_minute * 60   # 60 minutes in an hour
    total_peaches = peaches_per_minute * 60 * 3  # 3 hours, 60 minutes in an hour
    return total_peaches

 Executed result: 360
[EXP] 192: [success_rate]: True, [answer]: 5, [output]: def solution():
    ducks = 10
    insects_per_week = 3.5
    insects_per_day = insects_per_week / 7
    total_insects = ducks * insects_per_day
    return total_insects

 Executed result: 5.0
[EXP] 193: [success_rate]: True, [answer]: 91, [output]: def solution():
    trees = 50
    for i in range(10):
        trees += 10 - 2
    trees = trees * 0.7
    return int(trees)

 Executed result: 91
[EXP] 194: [success_rate]: True, [answer]: 24, [output]: def solution():
    total_flamingos = 18
    taken_back = int(total_flamingos / 3)
    total_flamingos += 18
    white_flamingos = taken_back
    pink_flamingos = total_flamingos - white_flamingos
    return pink_flamingos - white_flamingos

 Executed result: 24
[EXP] 195: [success_rate]: True, [answer]: 10, [output]: def solution():
    cost = 5
    initial_amount = 20
    cost_per_crayon = 2
    
    total_cost = cost * cost_per_crayon
    change = initial_amount - total_cost
    
    return change

 Executed result: 10
[EXP] 196: [success_rate]: True, [answer]: 12, [output]: def solution():
    pen_cost = 0.30 + 1.20
    pen_cost *= 8
    return pen_cost

 Executed result: 12.0
[EXP] 197: [success_rate]: False, [answer]: 120, [output]: def solution():
    total_carrots = 200
    remainder_per_restaurant = 200 % 40
    return remainder_per_restaurant 

 Executed result: 0
[EXP] 198: [success_rate]: True, [answer]: 6277, [output]: def solution():
    inhabitants = 23786
    men = 8417
    women = 9092
    kids = inhabitants - men - women
    return kids

 Executed result: 6277
[EXP] 199: [success_rate]: False, [answer]: 320, [output]: def solution():
    cards = 20
    cards_after_first_month = 3 * cards
    cards_after_second_month = cards_after_first_month - 20
    cards_after_third_month = (cards + cards_after_first_month) * 2
    total_cards = cards + cards_after_first_month + cards_after_second_month + cards_after_third_month
    return total_cards

 Executed result: 280
[EXP] 200: [success_rate]: True, [answer]: 7500, [output]: def solution():
    total_sentences = 1000
    rate_a = 5
    rate_b = 2 * rate_a
    return (total_sentences // 2) * rate_a + (total_sentences // 2) * rate_b

 Executed result: 7500
[EXP] 201: [success_rate]: True, [answer]: 55, [output]: def solution():
    pails_morning = 5
    pails_afternoon = 6
    liters_per_piql = 5
    total_pails = pails_morning + pails_afternoon
    total_liters = total_pails * liters_per_piql
    return total_liters

 Executed result: 55
[EXP] 202: [success_rate]: False, [answer]: 114,200, [output]: def solution():
    salary_per_year = 2000 * 52  # weekly salary for the whole year
    raise_percentage = 0.05  # 5% as a decimal
    one_time_award = 5000
    total_salary = salary_per_year * (1 + raise_percentage)
    total_salary += one_time_award
    return total_salary

 Executed result: 114200.0
[EXP] 203: [success_rate]: True, [answer]: 100, [output]: def solution():
    acres = 10
    ton_per_acre = 5
    tons_per_year = acres * ton_per_acre
    barrels_per_ton = 2
    return tons_per_year * barrels_per_ton

 Executed result: 100
[EXP] 204: [success_rate]: True, [answer]: 31, [output]: def solution():
    sandwiches = 7  # assumption: Carl ate a sandwich every day this week
    omelets = 3  # assumption: Carl ate cheese and egg omelets for 3 days
    sandwich_slices = 2
    omelet_slices = sandwich_slices + 1
    total_slices = sandwiches * sandwich_slices + omelets * omelet_slices + 8
    return total_slices

 Executed result: 31
[EXP] 205: [success_rate]: True, [answer]: 98, [output]: def solution():
    green_pens = 22
    yellow_pens = 10
    blue_pens = 6 * 9
    red_pens = 2 * 6
    total_pens = green_pens + yellow_pens + blue_pens + red_pens
    return total_pens

 Executed result: 98
[EXP] 206: [success_rate]: False, [answer]: 98, [output]: def solution():
    total = sum([89, 71, 92, 100, 86]) - min([89, 71, 92, 100, 86])
    score_needed = (93 * 6) - total
    return score_needed

 Executed result: 191
[EXP] 207: [success_rate]: True, [answer]: 860, [output]: def solution():
    total_kilometer1 = 5 * 25 * 4
    total_kilometer2 = 2 * 60 * 3
    total_kilometer = total_kilometer1 + total_kilometer2
    return total_kilometer

 Executed result: 860
[EXP] 208: [success_rate]: True, [answer]: 2600, [output]: def solution():
    chocolate_weight = 25 * 40
    apple_weight = 80 * 20
    total_weight = chocolate_weight + apple_weight
    return total_weight

 Executed result: 2600
[EXP] 209: [success_rate]: True, [answer]: 76, [output]: def solution():
    cakes_on_monday = 4
    cakes_on_tuesday = 3 * cakes_on_monday
    cakes_on_wednesday = 5 * cakes_on_tuesday
    total_cakes = cakes_on_monday + cakes_on_tuesday + cakes_on_wednesday
    return total_cakes

 Executed result: 76
[EXP] 210: [success_rate]: False, [answer]: 145, [output]: def solution():
    cost_of_plates = 6 * 6000
    cost_of_cups = cost_of_plates - 1200
    cost_per_cup = cost_of_cups // 24
    return cost_per_cup

 Executed result: 1450
[EXP] 211: [success_rate]: False, [answer]: 10, [output]: def solution():
    initial_money = 10
    babysitting_money = 4 * 5
    total_needed = 30 + 2 * 20
    total_money = initial_money + babysitting_money
    if total_money >= total_needed:
        return 0

 Executed result: None
[EXP] 212: [success_rate]: False, [answer]: 4, [output]: def solution():
    red_chickens = 0
    while True:
        white_chickens = red_chicken + 2
        total_eggs = (3 * red_chicken) + (5 * white_chicken)
        if total_eggs == 42:
            return red_chicken

 Executed result: None
[EXP] 213: [success_rate]: False, [answer]: 5, [output]: def solution():

 Executed result: None
[EXP] 214: [success_rate]: True, [answer]: 250, [output]: def solution():
    first_day_customers = 100
    second_day_customers = first_day_customers + 50
    total_customers = first_day_customers + second_day_customers
    third_day_customers = 500 - total_customers
    return third_day_customers

 Executed result: 250
[EXP] 215: [success_rate]: False, [answer]: 8, [output]: def solution():
    r1 = 4
    r2 = 8

    t = 4
    s1 = r1 * t
    s2 = 2 * s1

    r2 = 4 * s1

    return r2 - s1

 Executed result: 48
[EXP] 216: [success_rate]: True, [answer]: 44, [output]: def solution():
    total_cost = 320.00 + 32.00
    hourly_wage = 8.00
    hours_worked = total_cost / hourly_wage
    return hours_worked

 Executed result: 44.0
[EXP] 217: [success_rate]: False, [answer]: 220, [output]: def solution():
    borrowed = 2000
    extra = 0.10
    monthly_payment = 165
    total_payment = monthly_payment * 12
    total_return = total_payment * (1 + extra)

 Executed result: None
[EXP] 218: [success_rate]: True, [answer]: 15, [output]: def solution():
    roses = 4
    dahlias = roses + 7
    total = roses + dahlias
    return total

 Executed result: 15
[EXP] 219: [success_rate]: True, [answer]: 45, [output]: def solution():
    harriet_age = 21
    harriet_age_in_three_years = harriet_age + 3
    adrian_age = harriet_age * 3
    adrian_age_in_three_years = adrian_age + 3
    zack_age = harriet_age * 2
    zack_age_in_three_years = zack_age + 3
    average = (harriet_age_in_three_years + adrian_age_in_three_years + zack_age_in_three_years) / 3
    return average

 Executed result: 45.0
[EXP] 220: [success_rate]: True, [answer]: 54, [output]: def solution():
    naomi_points = 68
    yuri_points = (naomi_points / 2) + 10
    brianna_points = naomi_points + 17
    jojo_points = 251 - (naomi_points + yuri_points + brianna_points)
    return jojo_points

 Executed result: 54.0
[EXP] 221: [success_rate]: True, [answer]: 70, [output]: def solution():
    crossword_time = 3 * 10
    sudoku_time = 8 * 5
    total_time = crossword_time + sudoku_time
    return total_time

 Executed result: 70
[EXP] 222: [success_rate]: False, [answer]: 90, [output]: def solution():
    water_in Tank = 120
    used_water = 90
    water_left = water_in Tank - used_water
    rainwater = water_left * 2
    total_water = water_left + rainwater
    return total_water

 Executed result: None
[EXP] 223: [success_rate]: True, [answer]: 140, [output]: def solution():
    geraniums = 90
    petunias = geraniums - 40
    total = geraniums + petunias
    return total

 Executed result: 140
[EXP] 224: [success_rate]: False, [answer]: 20000, [output]: def solution():
    total adore = 15000 + 15000 / 3
    return total adore

 Executed result: None
[EXP] 225: [success_rate]: True, [answer]: 180, [output]: def solution():
    canoe_rental_cost = 30 * 3
    raft_rental_cost = 18 * 5
    total_cost = canoe_rental_cost + raft_rental_cost
    return total_cost

 Executed result: 180
[EXP] 226: [success_rate]: False, [answer]: 9, [output]: def solution():
    days_to_rochester_by_bus = 6
    days_to_rochester_by_car = days_to_rochester_by_bus / 2
    total_days_to_rochester = days_to_rochester_by_bus + days_to_rochester_by_car
    days_back_by_car = days_to_rochester_by_car
    total_days = total_days_to_rochester + days_back_by_car
    return total_days

 Executed result: 12.0
[EXP] 227: [success_rate]: False, [answer]: 33, [output]: def solution():
    total_cards = 30 + 20 + 40
    water_cards = 40 - 8 + water_cards
    water_percentage = (water_cards / total_cards) * 100
    return round(water_percentage)

 Executed result: None
[EXP] 228: [success_rate]: True, [answer]: 9, [output]: def solution():
    base_price = 6.50
    extra_meat = 2.00
    extra_cheese = 1.00
    avocado = 1.00
    sauces = 0.25 * 2
    meal_upgrade = 3.00
    gift_card = 5.00
    
    total_cost = base_price + extra_meat + extra_cheese + avocado + sauces + meal_upgrade
    remaining_owed = total_cost - gift_card
    
    return remaining_owed

 Executed result: 9.0
[EXP] 229: [success_rate]: True, [answer]: 1, [output]: 
def solution():
    kalinda_speed = 4
    mom_speed = kalinda_speed / 2
    total_speed = kalinda_speed + mom_speed
    pieces_per_minute = total_speed
    total_minutes = 360 / pieces_per_minute
    total_hours = total_minutes / 60
    return total_hours

 Executed result: 1.0
[EXP] 230: [success_rate]: False, [answer]: 21, [output]: def solution():

 Executed result: None
[EXP] 231: [success_rate]: False, [answer]: 276,000, [output]: def solution():
    price_per_car = 20000
    tax_rate = 0.1
    registration_fee = 1000
    
    total_price = price_per_car * 12
    total_tax = total_price * tax_rate
    total_cost = total_price + total_tax + (12 * registration_fee)
    return total_cost

 Executed result: 276000.0
[EXP] 232: [success_rate]: False, [answer]: 50, [output]: def solution():

 Executed result: None
[EXP] 233: [success_rate]: True, [answer]: 75, [output]: def solution():
    ants = 50
    bugs = ants / 2
    total_insects = ants + bugs
    return total_insects

 Executed result: 75.0
[EXP] 234: [success_rate]: True, [answer]: 12, [output]: def solution():
    penguins = 36
    penguins_in_ocean = penguins//3
    penguins_in_cave = penguins//3
    penguins_left = penguins - penguins_in_ocean - penguins_in_cave
    return penguins_left

 Executed result: 12
[EXP] 235: [success_rate]: False, [answer]: 21, [output]: def solution():
    steves_daily_consume = 6
    girlfriend_daily_consume = steves_daily_consume / 2
    total_daily_consume = steves_daily_consume + girlfriend_daily_consume
    daily_consume_per_vine = 3
    total_vines_needed = total_daily_consume / daily_consume_per_vine
    return int(total_vines_needed)

 Executed result: 3
[EXP] 236: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_slices = 20 * 4
    slices_per_pizza = 8
    total_pizzas = -(-total_slices // slices_per_pizza)
    return total_pizzas

 Executed result: 10
[EXP] 237: [success_rate]: False, [answer]: 31, [output]: def solution():
    total_pens = 25
    new_pens = 0
    while total_pens > 0:
        new_pens += 1
        total_pens = (total_pens - 1) // 4
    return new_pens

 Executed result: 3
[EXP] 238: [success_rate]: True, [answer]: 90, [output]: def solution():
    initial_money = 20 + 10
    tripled_money = initial_money * 3
    return tripled_money

 Executed result: 90
[EXP] 239: [success_rate]: True, [answer]: 68, [output]: def solution():
    jessa_age = 20
    joan_age = jessa_age + 5
    mary_age = joan_age - 2
    total_age = jessa_age + joan_age + mary_age
    return total_age

 Executed result: 68
[EXP] 240: [success_rate]: False, [answer]: 280, [output]: def solution():
    no_of_students = 1000
    students_left_after_exit_a = no_of_students * 0.7
    students_went_out_through_exit_b = (no_of_students * 0.3) + students_left_after_exit_a * (3/5)
    students_went_out_through_exit_c = no_of_students - students_went_out_through_exit_a - students_went_out_through_exit_b
    return students_went_out_through_exit_c

 Executed result: None
[EXP] 241: [success_rate]: True, [answer]: 21, [output]: def solution():
    r = (54 // 2)  # Robert's candies
    j = r + 6  # James' candies
    return 54 - j  # John's candies minus James' candies

 Executed result: 21
[EXP] 242: [success_rate]: True, [answer]: 6, [output]: def solution():
    dolly_books = 2
    pandora_books = 1
    dolly_reads = dolly_books + pandora_books
    pandora_reads = pandora_books + dolly_books
    total_books = dolly_reads + pandora_reads
    return total_books

 Executed result: 6
[EXP] 243: [success_rate]: False, [answer]: 3, [output]: def solution():
    pages_per_friend = 2 * 5
    friends = 5 - 2
    pages_written_per_week = pages_per_friend * friends * 2
    minutes_per_page = 6
    pages_in_hour = 60 / 6
    hours_write_per_week = pages_written_per_week / pages_in_hour
    return hours_write_per_week

 Executed result: 6.0
[EXP] 244: [success_rate]: True, [answer]: 250, [output]: def solution():
    minutes_in_total = 1000
    minutes_spent_with_boss = 15 * 30
    extra_minutes = 300
    minutes_spent_in_total = minutes_spent_with_boss + extra_minutes
    minutes_left = minutes_in_total - minutes_spent_in_total
    return int(minutes_left)

 Executed result: 250
[EXP] 245: [success_rate]: False, [answer]: 20, [output]: def solution():
    fries_taken_by_kyle = 5
    fries_taken_by_billy = 2 * fries_taken_by_kyle
    fries_taken_by_colby = fries_taken_by_kyle - 3
    fries_given_by_ginger = 27 - fries_taken_by_colby - fries_taken_by_kyle - fries_taken_by_billy - 24
    return fries_given_by_ginger

 Executed result: -14
[EXP] 246: [success_rate]: False, [answer]: 7, [output]: def solution():
    a = 4
    b = 32
    diff = abs(a - b)
    fish = diff // 2
    return fish, fish

 Executed result: (14, 14)
[EXP] 247: [success_rate]: False, [answer]: 27000, [output]: def solution():

 Executed result: None
[EXP] 248: [success_rate]: True, [answer]: 32, [output]: def solution():
    total_cost = 12 + 43 + 15 + 4 + 22
    total_persons = 3
    person_cost = total_cost / total_persons
    return person_cost

 Executed result: 32.0
[EXP] 249: [success_rate]: True, [answer]: 300, [output]: def solution():
    total_pounds = 4 * 50
    total_cost = total_pounds * 1.50
    return total_cost

 Executed result: 300.0
[EXP] 250: [success_rate]: False, [answer]: 5,600, [output]: def solution():
    sister_monday = 5 * 200
    sister_tuesday = 13 * 200
    sue_monday = 5 * 4 * 200
    sue_tuesday = 13 * 200 * 2
    sue_calories = sue_monday + sue_tuesday
    sister_calories = sister_monday + sister_tuesday
    return sue_calories - sister_calories

 Executed result: 5600
[EXP] 251: [success_rate]: False, [answer]: 17, [output]: def solution():
    total_students = 3 * 20
    first_class_girls = 15
    second_class_girls = 12
    total_girls = first_class_girls + second_class_girls
    third_class_students = total_students - total_girls
    total_boys = total_students - total_girls
    third_class_boys = total_boys
    return third_class_boys

 Executed result: 33
[EXP] 252: [success_rate]: True, [answer]: 70, [output]: def solution():
    apps = 61 - 9 + 18
    return apps

 Executed result: 70
[EXP] 253: [success_rate]: True, [answer]: 73, [output]: def solution():
    wolves_last_night = 10
    cougars_last_night = 15
    cougars_today = cougars_last_night - 3
    wolves_today = cougars_today * 3
    total_animals = wolves_last_night + wolves_today + cougars_last_night + cougars_today
    return total_animals

 Executed result: 73
[EXP] 254: [success_rate]: True, [answer]: 18, [output]: def solution():
    bill_initial_floor = 3
    bill_new_floor = 4 * bill_initial_floor + 6
    return bill_new_floor

 Executed result: 18
[EXP] 255: [success_rate]: True, [answer]: 84, [output]: def solution():
    mitchel_slide = 30
    anne_slide = mitchel_slide * (1 - 0.30)
    robert_slide = anne_slide * 4
    return robert_slide

 Executed result: 84.0
[EXP] 256: [success_rate]: False, [answer]: 192, [output]: def solution():
    total_cows = 10 * 20 + 40
    total_stalls = 20
    cows_per_stall = total_cows // total_stalls
    cows_in_8_stalls = cows_per_stall * 8
    return cows_in_8_stalls

 Executed result: 96
[EXP] 257: [success_rate]: True, [answer]: 45, [output]: def solution():
    penny_value = 0.01
    nickel_value = 0.05
    dime_value = 0.10
    dollar_bill_value = 1.00
    penny_amount = 100
    nickel_amount = 40
    dime_amount = 20
    dollar_bill_amount = 40
    total = (penny_amount * penny_value) + (nickel_amount * nickel_value) + (dime_amount * dime_value) + (dollar_bill_amount * dollar_bill_value)
    return round(total, 2)

 Executed result: 45.0
[EXP] 258: [success_rate]: False, [answer]: 5600, [output]: def solution():

 Executed result: None
[EXP] 259: [success_rate]: True, [answer]: 6, [output]: def solution():
    fine = 0.5 * 8
    fine += 2.0
    return fine

 Executed result: 6.0
[EXP] 260: [success_rate]: True, [answer]: 168, [output]: def solution():
    andrea_apples = 52
    j_apples = andrea_apples - 8
    j_bananas = j_apples + 4
    andrea_bananas = j_bananas // 2
    total_fruits = andrea_apples + andrea_bananas + j_apples + j_bananas
    return total_fruits

 Executed result: 168
[EXP] 261: [success_rate]: True, [answer]: 11, [output]: def solution():
    cookies_today = 36
    cookies_tomorrow = 30
    cups_per_dozen = 2
    total_cookies = cookies_today + cookies_tomorrow
    total_cups = total_cookies // 12 * cups_per_dozen
    remaining_cookies = total_cookies % 12
    if remaining_cookies > 0:
        total_cups += 1
    return total_cups

 Executed result: 11
[EXP] 262: [success_rate]: True, [answer]: 62, [output]: def solution():
    pennies = 9300
    third = pennies // 3
    two_thirds = 2 * third
    dollars = two_thirds * 0.01
    return dollars

 Executed result: 62.0
[EXP] 263: [success_rate]: True, [answer]: 270, [output]: def solution():
    marbles = 50 * 5  # Calculate the total marbles initially
    marbles += 20  # Add the marbles received from the friend
    return marbles

 Executed result: 270
[EXP] 264: [success_rate]: True, [answer]: 8, [output]: def solution():
    chris_trees = 6
    ferdinand_trees = chris_trees // 2
    harry_trees = 2 * ferdinand_trees + 5
    return harry_trees - ferdinand_trees

 Executed result: 8
[EXP] 265: [success_rate]: True, [answer]: 400, [output]: def solution():
    c = 100
    s = c + 25
    d = s + 50
    return c + s + d

 Executed result: 400
[EXP] 266: [success_rate]: True, [answer]: 9500, [output]: def solution():
    selling_price = 350000
    brokerage_fee = selling_price * 0.05
    transfer_fee = selling_price * 0.12
    total_price = selling_price + brokerage_fee + transfer_fee
    excess = total_price - 400000
    return excess

 Executed result: 9500.0
[EXP] 267: [success_rate]: True, [answer]: 118000, [output]: def solution():
    selling_price = 400000
    transfer_fee = (3/100) * selling_price
    brokerage_fee = (5/100) * selling_price
    total_fee = transfer_fee + brokerage_fee
    remaining_loan = 250000
    net_proceeds = selling_price - total_fee - remaining_loan
    return net_proceeds

 Executed result: 118000.0
[EXP] 268: [success_rate]: False, [answer]: 91, [output]: def solution():
    warm_time = 20
    heat_time = warm_time + (warm_time * 0.40)
    cook_time = warm_time - 5
    total_time = warm_time + heat_time + cook_time
    return total_time

 Executed result: 63.0
[EXP] 269: [success_rate]: False, [answer]: 1375, [output]: def solution():

 Executed result: None
[EXP] 270: [success_rate]: True, [answer]: 4, [output]: def solution():
    total_balls = 16
    golf_ball_half = total_balls / 2
    blue_ball_half = golf_ball_half / 2
    return int(blue_ball_half)

 Executed result: 4
[EXP] 271: [success_rate]: False, [answer]: 762, [output]: def solution():

 Executed result: None
[EXP] 272: [success_rate]: False, [answer]: 20, [output]: def solution():
    bedroom_windows = 2 * 3 * 2  # each bedroom has 2 windows, there are 2*3 = 6 bedrooms
    extra_windows = 4 * 2  # there are 4 windows in each house not connected to bedrooms
    total_windows = bedroom_windows + extra_windows * 2  # each house has an extra 4 windows, and there are 2 houses
    return total_windows

 Executed result: 28
[EXP] 273: [success_rate]: True, [answer]: 5, [output]: def solution():
    total = 4.20 + 9.45 + 1.35
    change = 20 - total
    return change

 Executed result: 5.000000000000002
[EXP] 274: [success_rate]: False, [answer]: 315, [output]: def solution():
    body = 900
    collar = body / 10
    rosette = 2 * collar
    total = body + collar + rosette
    sleeve = (total - (body + collar + rosette)) / 2
    return sleeve

 Executed result: 0.0
[EXP] 275: [success_rate]: True, [answer]: 3200, [output]: def solution():
    tomato_seeds = 20
    tomato_price = 40
    celery_seeds = 80
    celery_price = 30
    return (tomato_seeds * tomato_price) + (celery_seeds * celery_price)

 Executed result: 3200
[EXP] 276: [success_rate]: True, [answer]: 138, [output]: def solution():
    song_lines = 54
    first_scene_lines = 2 * song_lines
    first_scene_lines_life = first_scene_lines // 3
    second_scene_lines = song_lines + 6
    second_scene_lines_life = second_scene_lines * 4 // 5
    return first_scene_lines_life + song_lines + second_scene_lines_life

 Executed result: 138
[EXP] 277: [success_rate]: False, [answer]: 9, [output]: def solution():

 Executed result: None
[EXP] 278: [success_rate]: False, [answer]: 4, [output]: def solution():

 Executed result: None
[EXP] 279: [success_rate]: True, [answer]: 40, [output]: def solution():
    current_sum = 20
    return current_sum + 20

 Executed result: 40
[EXP] 280: [success_rate]: False, [answer]: 6, [output]: def solution():
    ruby mCurrentAge = (9 * 3 - 6 * 9) / 3
    return ruby mCurrentAge

 Executed result: None
[EXP] 281: [success_rate]: True, [answer]: 7, [output]: def solution():
    popsicle_price = 20 * 0.25
    ice_cream_price = 4 * 0.50
    total_price = popsicle_price + ice_cream_price
    return total_price

 Executed result: 7.0
[EXP] 282: [success_rate]: True, [answer]: 2450, [output]: def solution():
    spots_per_cobra = 70
    spots_per_mamba = 70 / 2
    total_cobras = 40
    total_mambas = 60
    total_spots = total_cobras * spots_per_cobra + total_mambas * spots_per_mamba
    result = total_spots / 2
    return result

 Executed result: 2450.0
[EXP] 283: [success_rate]: False, [answer]: 195, [output]: def solution():

 Executed result: None
[EXP] 284: [success_rate]: True, [answer]: 68, [output]: def solution():
    silver_length = 25 - 8  # total length minus 8 gemstones
    bead_length = 0.25  # length of each bead
    silver_beads = silver_length / bead_length
    return int(silver_beads)

 Executed result: 68
[EXP] 285: [success_rate]: True, [answer]: 360, [output]: def solution():
    alani_stories = 20
    braylen_stories = 40
    margot_stories = 60
    
    total_first_week = alani_stories + braylen_stories + margot_stories
    
    alani_stories *= 2
    braylen_stories *= 2
    margot_stories *= 2
    
    total_second_week = alani_stories + braylen_stories + margot_stories
    
    total_stories = total_first_week + total_second_week
    
    return total_stories

 Executed result: 360
[EXP] 286: [success_rate]: True, [answer]: 21, [output]: def solution():
    ann_age = 9
    brother_age = 2 * ann_age
    future_brother_age = brother_age + 3
    return future_brother_age

 Executed result: 21
[EXP] 287: [success_rate]: True, [answer]: 90, [output]: def solution():
    quarters = 5 * 25
    dimes = 2 * 10
    total_cents = quarters + dimes
    total_cents -= 55
    return total_cents

 Executed result: 90
[EXP] 288: [success_rate]: False, [answer]: 8, [output]: def solution():
    total_stars = 76
    stars_in_8_rows = 8 * 3
    stars_in_6_rows = 6 * 2
    total_stars_in_8_and_6_rows = stars_in_8_rows + stars_in_6_rows
    rows_of_5_stars = total_stars - total_stars_in_8_and_6_rows
    return rows_of_5_stars

 Executed result: 40
[EXP] 289: [success_rate]: False, [answer]: 3, [output]: def solution():
    total_weight_per_truck = 2000
    weight_per_flagstone = 75
    num_flagstones = 80
    weight_per_truck = (total_weight_per_truck / 8)
    num_trucks_needed = (num_flagstones / 9.5)
    return int(num_trucks_needed)

 Executed result: 8
[EXP] 290: [success_rate]: True, [answer]: 16, [output]: def solution():
    fast_lane_speed = 60  # in miles/hour
    slow_lane_speed = fast_lane_speed / 2
    fast_lane_distance = 480
    fast_lane_time = fast_lane_distance / fast_lane_speed
    slow_lane_time = fast_lane_distance / slow_lane_speed
    return slow_lane_time

 Executed result: 16.0
[EXP] 291: [success_rate]: True, [answer]: 390, [output]: def solution():
    ali = 22
    izzy = ali - 5
    total_medals = ali + izzy
    given_out = total_medals * 10
    return given_out

 Executed result: 390
[EXP] 292: [success_rate]: True, [answer]: 2, [output]: def solution():
    total_chocolate = 8 * 5
    adult_chocolate = 4 * 6
    remaining_chocolate = total_chocolate - adult_chocolate
    child_chocolate = remaining_chocolate // 8
    return child_chocolate

 Executed result: 2
[EXP] 293: [success_rate]: False, [answer]: 75, [output]: def solution():
    hours_worked = 3 - 1/2
    minutes_per_hour = 60
    minutes_worked = hours_worked * minutes_per_hour
    total_minutes = minutes_worked - 30
    money_per_minute = 5 / 10
    total_earn = total_minutes * money_per_minute
    return total_earn

 Executed result: 60.0
[EXP] 294: [success_rate]: True, [answer]: 83, [output]: def solution():
    mike = 21
    jim = mike - 3
    tony = mike * 2
    mike_new = mike
    jim_new = jim
    tony_new = tony
    if mike > 20:
        mike_new += 1
    if jim > 20:
        jim_new += 1
    if tony > 20:
        tony_new += 1
    return mike_new + jim_new + tony_new

 Executed result: 83
[EXP] 295: [success_rate]: True, [answer]: 3, [output]: def solution():
    total_oranges = 15
    oldest_son_oranges = 8
    youngest_son_oranges = oldest_son_oranges // 2
    oranges_washed = oldest_son_oranges + youngest_son_oranges
    oranges_left = total_oranges - oranges_washed
    return oranges_left

 Executed result: 3
[EXP] 296: [success_rate]: True, [answer]: 370, [output]: def solution():
    day1_pushups = 100
    day1_squats = 50
    day1_presses = 20
    day2_pushups = day1_pushups + 20
    day2_squats = day1_squats - 10
    day2_presses = day1_presses * 2

    total_pushups = day1_pushups + day2_pushups
    total_squats = day1_squats + day2_squats
    total_presses = day1_presses + day2_presses

    return total_pushups + total_squats + total_presses

 Executed result: 370
[EXP] 297: [success_rate]: True, [answer]: 3, [output]: def solution():
    total_consumption_per_day = 5 * 0.2 * 2  # calculate the daily total consumption
    total_rice = 42  # total kilograms of rice
    weeks = total_rice / total_consumption_per_day / 7  # calculate the total weeks
    return round(weeks)

 Executed result: 3
[EXP] 298: [success_rate]: False, [answer]: 55, [output]: def solution():
    total_sold = 20 + 15 + 12 + 18
    target = 120
    return target - (7 - 3) - total_sold

 Executed result: 51
[EXP] 299: [success_rate]: False, [answer]: 500, [output]: def solution():
    bid = 200
    for _ in range(3):
        bid += 50
    return bid

 Executed result: 350
[EXP] 300: [success_rate]: False, [answer]: 31800, [output]: def solution():
    miles_per_day = 30 * 2
    daily_cost = miles_per_day * 2
    weekly_cost = daily_cost * 5
    monthly_cost = weekly_cost * 4
    annual_cost = monthly_cost * 12
    bonus = 150 * 12
    total_cost = annual_cost + bonus
    return total_cost

 Executed result: 30600
[EXP] 301: [success_rate]: True, [answer]: 78, [output]: def solution():
    monday_and_sunday_time = 23 + 16
    tuesday_required_time = 2 * monday_and_sunday_time
    return tuesday_required_time

 Executed result: 78
[EXP] 302: [success_rate]: False, [answer]: 8, [output]: def solution():
    return 32//2 + 1

 Executed result: 17
[EXP] 303: [success_rate]: False, [answer]: 15, [output]: def solution():

 Executed result: None
[EXP] 304: [success_rate]: False, [answer]: 1300, [output]: def solution():
    total_books = 250
    first_year_books = 45 * 2
    second_year_books = 45
    unsold_books = total_books - (first_year_books + second_year_books)
    if unsold_books > 0:
        second_year_books -= unsold_books
    total_earned = second_year_books * 20
    return total_earned

 Executed result: -1400
[EXP] 305: [success_rate]: False, [answer]: 3200, [output]: def solution():
    daily_wage = 10
    hours_per_day = 10
    days_per_week = 5
    weeks_per_month = 4
    bonus = 300
    total_wage = (daily_wage * hours_per_day * days_per_week * weeks_per_month) + bonus
    return total_wage

 Executed result: 2300
[EXP] 306: [success_rate]: True, [answer]: 4, [output]: def solution():
    total_people = 20
    percentage_beaten = 80
    percentage_lost = 100 - percentage_beaten
    lost_people = (total_people * percentage_lost) / 100
    return int(lost_people)

 Executed result: 4
[EXP] 307: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_loaves = 60
    loaves_sold_morning = (2/3) * total_loaves
    loaves_left = total_loaves - loaves_sold_morning
    loaves_sold_afternoon_and_evening = loaves_left / 2
    loaves_sold_afternoon = loaves_sold_afternoon_and_evening
    return loaves_sold_afternoon

 Executed result: 10.0
[EXP] 308: [success_rate]: False, [answer]: 16, [output]: def solution():
    joey_losing_per_week = int(8)  # Joey loses 8 pounds in 4 weeks, so 8 / 4 = 2 pounds per week
    weight_needed_to_lose = joey_losing_per_week * 4  # Sandy needs 8 pounds in total
    return weight_needed_to_lose / joey_losing_per_week

 Executed result: 4.0
[EXP] 309: [success_rate]: False, [answer]: 6, [output]: def solution():
    icecream_price = 11
    milk_discount = 0.5
    tubs = 2
    packets = 4
    total_discount = (icecream_price * (tubs - 1)) + (milk_discount * packets)
    return total_discount

 Executed result: 13.0
[EXP] 310: [success_rate]: False, [answer]: 8, [output]: def solution():

 Executed result: None
[EXP] 311: [success_rate]: False, [answer]: 2050, [output]: def solution():
    suit_cost = 6 * 100
    suitcase_cost = 3 * 50
    business_suit_price = 5 * 100
    flight_cost = business_suit_price * 5 + 700
    total_cost = suit_cost + suitcase_cost + flight_cost
    saved = 6000 - (2000 + total_cost)
    return saved

 Executed result: 50
[EXP] 312: [success_rate]: True, [answer]: 91, [output]: def solution():
    total_eggs = (3 * 3) + (2 * (5 - 3))  # calculating daily eggs
    weekly_eggs = total_eggs * 7  # calculating weekly eggs
    return weekly_eggs

 Executed result: 91
[EXP] 313: [success_rate]: False, [answer]: 32, [output]: def solution():
    q = 30
    j = q - 3
    t = q + 5
    return t

 Executed result: 35
[EXP] 314: [success_rate]: False, [answer]: 120000, [output]: def solution():
    cera_age = 46
    noah_age_six_years_ago = cera_age / 2
    population_six_years_ago = noah_age_six_years_ago * 3000
    population_now = population_six_years_ago * 2
    return population_now

 Executed result: 138000.0
[EXP] 315: [success_rate]: False, [answer]: 30, [output]: def solution():
    offense = defense * 2
    special_teams = defense / 2
    total_players = offense + defense + special_teams
    return total_players - defense * 2 - special_teams

 Executed result: None
[EXP] 316: [success_rate]: True, [answer]: 14, [output]: def solution():
    people_invited = 2 * 6 + 3 * 4
    people_couldnt_come = 8 + 8 / 4
    people_who_come = people_invited - people_couldnt_come
    return people_who_come

 Executed result: 14.0
[EXP] 317: [success_rate]: True, [answer]: 156, [output]: def solution():
    marbles_bought = 20
    marbles_in_store = 50
    marbles_father_given = (marbles_bought * 2) / 5
    total_marbles = marbles_bought + marbles_in_store + marbles_father_given
    total_weight = total_marbles * 2
    return total_weight

 Executed result: 156.0
[EXP] 318: [success_rate]: True, [answer]: 12, [output]: def solution():
    area = 6 * 4
    volume = area * 5
    cost = volume * 0.1
    return cost

 Executed result: 12.0
[EXP] 319: [success_rate]: True, [answer]: 123, [output]: def solution():
    boys = 30
    girls = boys * 3
    non_gendered = boys // 10
    total_children = boys + girls + non_gendered
    return total_children

 Executed result: 123
[EXP] 320: [success_rate]: True, [answer]: 15, [output]: def solution():
    ratio = 1/3
    total_wires = 45
    total_poles = round(total_wires*ratio)
    return total_poles

 Executed result: 15
[EXP] 321: [success_rate]: False, [answer]: 8, [output]: def solution():
    total_people = 25 + 15
    total_people_after_leaving = total_people - (total_people/4)
    total_men_left = 22
    total_people_left = total_people_after_leaving - (total_people - total_men_left)
    women_left = total_people_left - total_men_left
    return women_left

 Executed result: -10.0
[EXP] 322: [success_rate]: True, [answer]: 1, [output]: def solution():
    book_price = 4
    magazine_price = book_price / 2
    pen_price = magazine_price - 1
    return pen_price

 Executed result: 1.0
[EXP] 323: [success_rate]: False, [answer]: 9, [output]: def solution():
    jam_pencils = 26
    meg_pencils = 46
    all_pencils = jam_pencils + meg_pencils
    box_capacity = 26
    boxes_needed = -(-all_pencils // box_capacity)
    return boxes_needed

 Executed result: 3
[EXP] 324: [success_rate]: False, [answer]: 75, [output]: def solution():
    cooling_decrease = 12
    cooling_amount = 65 // 13
    liquid_addition = 15
    total_reduction = cooling_amount * cooling_decrease + cooling_amount * 12 + liquid_addition
    return total_reduction

 Executed result: 135
[EXP] 325: [success_rate]: False, [answer]: 14, [output]: def solution():
    total_new_records = 7
    total_people = 5
    new_records_per_trade = 1
    old_records_per_trade = 2
    total_old_records = 0
    for person in range(total_people):
        total_old_records += (new_records_per_trade * old_records_per_trade)
    return total_old_records

 Executed result: 10
[EXP] 326: [success_rate]: True, [answer]: 224000, [output]: def solution():
    total_employees = 100
    junior_programmers = int(total_employees * 2 / 5)
    senior_programmers = total_employees - junior_programmers
    junior_salary = junior_programmers * 2000
    senior_salary = senior_programmers * (2000 + 400)
    total_salary = junior_salary + senior_salary
    return total_salary

 Executed result: 224000
[EXP] 327: [success_rate]: False, [answer]: 14, [output]: def solution():
    people_on_board = 20 - 7
    people_boarded = people_on_board - 8
    return people_boarded

 Executed result: 5
[EXP] 328: [success_rate]: False, [answer]: 31, [output]: def solution():

 Executed result: None
[EXP] 329: [success_rate]: False, [answer]: 2, [output]: def solution():
    full_charge = 100
    current_charge = 60
    full_charge_diff = full_charge - current_charge
    recharge_rate = 1 / 3 / 0.01  # calculate recharge rate in full charge units per minute
    total_time = full_charge_diff * 3 / recharge_rate
    hours = total_time / 60
    return hours

 Executed result: 0.06000000000000001
[EXP] 330: [success_rate]: False, [answer]: 14, [output]: def solution():

 Executed result: None
[EXP] 331: [success_rate]: False, [answer]: 31, [output]: def solution():
    total_spend = 80
    rewards = total_spend // 20
    used_rewards = max(0, rewards - (43 // 20))
    final_cost = max(0, 43 - 2 * used_rewards)
    return final_cost

 Executed result: 39
[EXP] 332: [success_rate]: True, [answer]: 8400, [output]: def solution():
    # Calculate total income of job A
    income_A = 2000 * 15
    # Calculate the tax on the income
    tax_A = (20 / 100) * income_A
    # Calculate the after-tax income of job A
    after_tax_income_A = income_A - tax_A
    
    # Calculate total income of job B
    income_B = 42000
    # Calculate the property tax of job B
    property_tax_B = 6000
    # Calculate the net income of job B
    net_income_B = income_B - property_tax_B
    # Calculate the tax on the net income of job B
    tax_B = (10 / 100) * net_income_B
    # Calculate the after-tax income of job B
    after_tax_income_B = net_income_B - tax_B
    
    # Calculate the difference between the two jobs
    difference = after_tax_income_B - after_tax_income_A
    
    return difference

 Executed result: 8400.0
[EXP] 333: [success_rate]: True, [answer]: 44, [output]: def solution():
    total_castles = 220
    percent_ruins = 0.4
    ruined_castles = total_castles * percent_ruins
    half_ruined = ruined_castles / 2
    return int(half_ruined)

 Executed result: 44
[EXP] 334: [success_rate]: True, [answer]: 100, [output]: def solution():
    furniture_united = 1350 + 6 * 350
    cozy_homes = 1100 + 9 * 250
    difference = furniture_united - cozy_homes
    return difference

 Executed result: 100
[EXP] 335: [success_rate]: True, [answer]: 6, [output]: def solution():
    total_guns = 8 + 10 + 1 + 5
    equal_number = total_guns // 4
    return equal_number

 Executed result: 6
[EXP] 336: [success_rate]: False, [answer]: 310, [output]: def solution():

 Executed result: None
[EXP] 337: [success_rate]: True, [answer]: 72, [output]: def solution():
    share_value = 8
    increase = share_value * 0.5  # 50% increase
    share_value += increase
    decrease = share_value * 0.25 # 25% decrease
    share_value -= decrease
    return share_value * 8  # final value of all shares

 Executed result: 72.0
[EXP] 338: [success_rate]: True, [answer]: 1, [output]: def solution():
    luke_hot_dogs = 2
    thomas_hot_dogs = 3 * luke_hot_dogs
    john_hot_dogs = thomas_hot_dogs / 2
    john_hot_dogs_than_luke = john_hot_dogs - luke_hot_dogs
    return john_hot_dogs_than_luke

 Executed result: 1.0
[EXP] 339: [success_rate]: False, [answer]: 60, [output]: def solution():
    total_students = 200
    diff = (total_students - 2 * (total_students / 3)) // 2
    result = total_students - diff * 2
    return result

 Executed result: 134.0
[EXP] 340: [success_rate]: False, [answer]: 160, [output]: def solution():
    chickens = 60 // 3
    cows = 60 - chickens
    total_legs = (chickens * 2) + (cows * 4)
    return total_legs

 Executed result: 200
[EXP] 341: [success_rate]: True, [answer]: 4, [output]: def solution():
    total_balls = 3 + (4 - 1)  # Calculate the total number of balls
    total_balls -= 3  # Subtract 3 balls that were dropped
    total_balls += 2  # Add back the 2 balls that were caught
    return total_balls

 Executed result: 5
[EXP] 342: [success_rate]: True, [answer]: 260, [output]: def solution():
    pink_frog = 50
    red_bird = pink_frog - 20
    blue_beetle = pink_frog
    green_toad = pink_frog
    yellow_snake = pink_frog + 10
    total_weight = pink_frog + red_bird + blue_beetle + green_toad + yellow_snake + 20
    return total_weight

 Executed result: 260
[EXP] 343: [success_rate]: True, [answer]: 87, [output]: def solution():
    outfits = 24 + 2 * 24 + 15
    return outfits

 Executed result: 87
[EXP] 344: [success_rate]: True, [answer]: 180000, [output]: def solution():
    daily_distance = 5000
    increase_distance = daily_distance * 0.2
    daily_distance += increase_distance
    days_in_a_month = 30
    total_distance = daily_distance * days_in_a_month
    return total_distance

 Executed result: 180000.0
[EXP] 345: [success_rate]: True, [answer]: 2, [output]: def solution():
    a = 4
    b = a + 5
    c = a + 7
    cb_diff = c - b
    return cb_diff

 Executed result: 2
[EXP] 346: [success_rate]: True, [answer]: 310, [output]: def solution():
    total_legs = (40 * 4) + (50 * 3)
    return total_legs

 Executed result: 310
[EXP] 347: [success_rate]: True, [answer]: 9, [output]: def solution():
    bagofcookies = 36
    soncookies = 4 * 5
    husbandcookies = 7
    jennycookies = bagofcookies - soncookies - husbandcookies
    return jennycookies

 Executed result: 9
[EXP] 348: [success_rate]: True, [answer]: 36, [output]: def solution():
    original_price = 2 * 30
    discount = 0.4
    discount_price = original_price * discount
    discounted_price = original_price - discount_price
    return discounted_price

 Executed result: 36.0
[EXP] 349: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_amount_tractor = 10 * 100
    total_amount_silo = 5 * 220
    difference = total_amount_silo - total_amount_tractor
    result = (difference / total_amount_tractor) * 100
    return result

 Executed result: 10.0
[EXP] 350: [success_rate]: True, [answer]: 2640, [output]: def solution():
    food_cost_per_week = 25
    food_cost_per_month = food_cost_per_week * 4
    treats_cost_per_month = 20
    medicine_cost_per_month = 100
    total_cost_per_month = food_cost_per_month + treats_cost_per_month + medicine_cost_per_month
    total_cost_per_year = total_cost_per_month * 12
    return total_cost_per_year

 Executed result: 2640
[EXP] 351: [success_rate]: True, [answer]: 8, [output]: def solution():
    yoga_class = 1
    cooking_class = yoga_class * 3
    cheese_tasting = 0.5
    museum_tour = cooking_class / 2
    errands = 2

    total_hours = yoga_class + cooking_class + cheese_tasting + museum_tour + errands
    return total_hours

 Executed result: 8.0
[EXP] 352: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_daisies = 30
    total_roses = 2 * 30
    total_plant_pots = total_daisies + total_roses
    total_bought = 100
    leftover_pots = total_bought - total_plant_pots
    return leftover_pots

 Executed result: 10
[EXP] 353: [success_rate]: True, [answer]: 21, [output]: def solution():
    total_money = 36
    sweater = 11
    brother = 4
    spent = sweater + brother
    saved = total_money - spent
    return saved

 Executed result: 21
[EXP] 354: [success_rate]: False, [answer]: 20, [output]: def solution():
    boating_time = 6
    swimming_time = boating_time / 2
    show_time = 3 * 2
    total_time = boating_time + swimming_time + show_time
    sightseeing_time = (total_time * 40) / 100
    return sightseeing_time

 Executed result: 6.0
[EXP] 355: [success_rate]: False, [answer]: 45, [output]: def solution():
    money_needed = 400 - 80
    job1_salary = 20 * 10
    job2_salary = 15 * 5
    total_salary = job1_salary + job2_salary
    amount_saved = money_needed + total_salary
    return money_needed - amount_saved

 Executed result: -275
[EXP] 356: [success_rate]: True, [answer]: 34, [output]: def solution():
    short_tree = 6
    middle_tree = short_tree + 5
    tall_tree = 2 * (short_tree + middle_tree)
    return tall_tree

 Executed result: 34
[EXP] 357: [success_rate]: False, [answer]: 21, [output]: def solution():

 Executed result: None
[EXP] 358: [success_rate]: False, [answer]: 2, [output]: def solution():
    budget = 90
    mini_golf = 1
    arcade_tokens = 5
    go_karts = 2 * 10
    total_cost = mini_golf + arcade_tokens + go_karts
    friend_cost = (total_cost - budget) / 5
    return int(friend_cost)

 Executed result: -12
[EXP] 359: [success_rate]: True, [answer]: 20, [output]: def solution():
    total_cents = 0
    for day in range(5):
        total_cents += (5 * 100 - (4 * 25))  # converting dollars to cents and subtracting lollipop cost
    total_cents /= 100  # converting cents back to dollars
    return total_cents

 Executed result: 20.0
[EXP] 360: [success_rate]: False, [answer]: 4, [output]: def solution():

 Executed result: None
[EXP] 361: [success_rate]: True, [answer]: 25, [output]: def solution():
    carver_age = 45
    son_age = (carver_age + 5) // 2
    return son_age

 Executed result: 25
[EXP] 362: [success_rate]: True, [answer]: 20, [output]: def solution():
    city1_to_city2 = 75
    city2_to_city3 = 100
    city3_to_city1 = city2_to_city3 + city1_to_city2 - 50
    total_distance = city1_to_city2 + city2_to_city3 + city3_to_city1
    daily_distance = total_distance * 3
    days_between_services = 18000 / daily_distance
    return days_between_services

 Executed result: 20.0
[EXP] 363: [success_rate]: True, [answer]: 23, [output]: def solution():
    rottweiler = 8
    chihuahua = 2
    collie = (rottweiler + chihuahua) / 2
    chihuahua_beds = 4 * 2
    collie_beds = 3 * collie
    return rottweiler * 0 + chihuahua_beds + collie_beds

 Executed result: 23.0
[EXP] 364: [success_rate]: True, [answer]: 6, [output]: def solution():
    trip_to_friend = (200 + 10) / 70
    trip_home = 240 / 80
    total_trip = trip_to_friend + trip_home
    return total_trip

 Executed result: 6.0
[EXP] 365: [success_rate]: False, [answer]: 49, [output]: def solution():
    total_students = 96
    girls = 43
    absent_girls = 5
    absent_boys = 4
    total_boys = total_students - girls - absent_girls
    boys_present = total_boys - absent_boys
    return boys_present

 Executed result: 44
[EXP] 366: [success_rate]: True, [answer]: 18, [output]: def solution():
    boys = 6 * 2
    total_kids = boys + 6
    return total_kids

 Executed result: 18
[EXP] 367: [success_rate]: True, [answer]: 9, [output]: def solution():
    total_points_needed = 42
    points_scored = 15 + 18
    points_needed_third_test = total_points_needed - points_scored
    return points_needed_third_test

 Executed result: 9
[EXP] 368: [success_rate]: True, [answer]: 19, [output]: def solution():
    kicked_out_for_no_mask = 3
    kicked_out_for_shoplifting = 4 * kicked_out_for_no_mask - 5
    kicked_out_for_physical_violence = 3 * kicked_out_for_shoplifting
    total_people = kicked_out_for_no_mask + kicked_out_for_shoplifting + kicked_out_for_physical_violence
    kicked_out_for_other_reasons = 50 - total_people
    return kicked_out_for_other_reasons

 Executed result: 19
[EXP] 369: [success_rate]: False, [answer]: 18, [output]: def solution():
    Erin_points = 14
    Sara_points = 8
    difference = Erin_points - 14
    Sara_points_after = Sara_points + difference / 3
    Erin_points_before = Erin_points - 14 - difference
    return Erin_points_before

 Executed result: 0
[EXP] 370: [success_rate]: False, [answer]: 1198, [output]: def solution():
    picture_frames = 20 * (44 - int(44 / 4))
    logo_cost = picture_frames * (20 / 100)
    total_frame_cost = picture_frames + logo_cost
    officer_cords = 12 * int(44 / 4)
    pins = 5 * 2
    total_cost = total_frame_cost + officer_cords + pins
    return total_cost

 Executed result: 934.0
[EXP] 371: [success_rate]: True, [answer]: 320, [output]: def solution():
    market_price = 400
    saving = market_price * 0.2
    diy_cost = market_price - saving
    return diy_cost

 Executed result: 320.0
[EXP] 372: [success_rate]: True, [answer]: 50, [output]: def solution():
    friday_sales = 14
    saturday_sales = 2 * friday_sales
    sunday_sales = saturday_sales // 2 - 6
    return friday_sales + saturday_sales + sunday_sales

 Executed result: 50
[EXP] 373: [success_rate]: True, [answer]: 5, [output]: def solution():
    tuesday_practice = 1
    thursday_practice = 2
    saturday_practice = tuesday_practice * 2
    total_practice = tuesday_practice + thursday_practice + saturday_practice
    return total_practice

 Executed result: 5
[EXP] 374: [success_rate]: True, [answer]: 240000, [output]: def solution():
    total_cost = 400000
    percentage = 0.40
    faulty_cost = total_cost * percentage
    cost_of_functioning_pieces = total_cost - faulty_cost
    return(cost_of_functioning_pieces)

 Executed result: 240000.0
[EXP] 375: [success_rate]: True, [answer]: 45, [output]: def solution():
    milk_per_sheep = [1, 2]
    total_milk_per_day = (milk_per_sheep[0] + milk_per_sheep[1]) * (30 / 2)
    return total_milk_per_day

 Executed result: 45.0
[EXP] 376: [success_rate]: True, [answer]: 48, [output]: def solution():
    initial_rolls = 12
    rolls_given_to_kids = 6
    rolls_remaining = initial_rolls - rolls_given_to_kids
    pieces_per_roll = 8
    pieces_fed_to_chickens = rolls_remaining * pieces_per_roll
    return pieces_fed_to_chickens

 Executed result: 48
[EXP] 377: [success_rate]: True, [answer]: 15, [output]: def solution():
    total_pupils = 40
    pupils_like_blue = total_pupils // 2
    remaining_pupils = total_pupils - pupils_like_blue
    pupils_like_green = remaining_pupils // 4
    pupils_like_yellow = remaining_pupils - pupils_like_green
    return pupils_like_yellow

 Executed result: 15
[EXP] 378: [success_rate]: True, [answer]: 50, [output]: def solution():
    mon_apples = 56 / 4
    tue_apples = 12
    wed_apples = 2 * tue_apples
    total_apples = mon_apples + tue_apples + wed_apples
    return int(total_apples)

 Executed result: 50
[EXP] 379: [success_rate]: True, [answer]: 15, [output]: def solution():
    pairs = 10 * 2
    loose = 15
    total_washed = pairs + loose
    total_missing = 50 - total_washed
    return total_missing

 Executed result: 15
[EXP] 380: [success_rate]: True, [answer]: 21, [output]: def solution():
    cookies = 23 + 42
    cookies = cookies - 44
    return cookies

 Executed result: 21
[EXP] 381: [success_rate]: False, [answer]: 803, [output]: def solution():
    total_amount = 3650
    months = 5
    interest_rate = 0.10
    total_interest = total_amount * interest_rate * months
    total_amount_with_interest = total_amount + total_interest
    monthly_payment = total_amount_with_interest / months
    return round(monthly_payment)

 Executed result: 1095
[EXP] 382: [success_rate]: True, [answer]: 67, [output]: def solution():
    cho_distance = 14 * 8
    chloe_distance = 9 * 5
    distance_difference = cho_distance - chloe_distance
    return distance_difference

 Executed result: 67
[EXP] 383: [success_rate]: True, [answer]: 350, [output]: def solution():
    axel_silver = 50
    axel_gold = 80
    anna_silver = axel_silver * 2
    anna_gold = axel_gold + 40
    total_silver = axel_silver + anna_silver
    total_gold = axel_gold + anna_gold
    return total_silver + total_gold

 Executed result: 350
[EXP] 384: [success_rate]: False, [answer]: 2, [output]: def solution():
    total_cups = 3 * 12
    profit = total_cups * 1
    total_cost = 18
    profit_per_hour = profit / total_cups / 4
    return profit_per_hour

 Executed result: 0.25
[EXP] 385: [success_rate]: True, [answer]: 32, [output]: def solution():
    total = (5/2) * 12.8
    return total

 Executed result: 32.0
[EXP] 386: [success_rate]: True, [answer]: 16, [output]: def solution():
    total = 52
    boys_and_girls = total / 2
    girls = boys_and_girls
    performers = girls
    cannot_make_it = performers / 2
    performance_menbers = girls - cannot_make_it + 3
    return performance_menbers

 Executed result: 16.0
[EXP] 387: [success_rate]: True, [answer]: 80, [output]: def solution():
    scores = [65, 94, 81, 86, 74]
    average = sum(scores) / len(scores)
    return average

 Executed result: 80.0
[EXP] 388: [success_rate]: True, [answer]: 36, [output]: def solution():
    eraser_cost = 2
    pencil_cost = 3
    eraser_total = eraser_cost * 6
    pencil_total = pencil_cost * 8
    total_cost = eraser_total + pencil_total
    return total_cost

 Executed result: 36
[EXP] 389: [success_rate]: True, [answer]: 88, [output]: def solution():
    messages_to_thompson = 66
    messages_to_yu = messages_to_thompson // 3
    total_messages = messages_to_thompson + messages_to_yu
    return total_messages

 Executed result: 88
[EXP] 390: [success_rate]: False, [answer]: 6, [output]: def solution():
    bracelet_cost = 30
    ticket_cost = 2 * 2
    total_ticket_cost = ticket_cost * 9
    total_cost = 2 * total_ticket_cost - bracelet_cost
    return total_cost

 Executed result: 42
[EXP] 391: [success_rate]: True, [answer]: 12, [output]: def solution():
    total_gifts = 6 + 4 + 2
    total_inches = 144
    bow_inches = total_inches // total_gifts
    return bow_inches

 Executed result: 12
[EXP] 392: [success_rate]: True, [answer]: 15, [output]: def solution():
    ratio = [5, 6]
    total = 165
    sam_popsicles = ratio[1] * (total // sum(ratio))
    betty_popsicles = ratio[0] * (total // sum(ratio))
    return sam_popsicles - betty_popsicles

 Executed result: 15
[EXP] 393: [success_rate]: True, [answer]: 34, [output]: def solution():
    cable_package = 60
    netflix = 10
    hulu = 10
    disney_plus = 10
    bundling_discount = (hulu + disney_plus) * 20/100
    total_streaming = netflix + hulu + disney_plus - bundling_discount
    savings = cable_package - total_streaming
    return savings

 Executed result: 34.0
[EXP] 394: [success_rate]: True, [answer]: 20, [output]: def solution():
    total_time = 4 * 60 + (4 / 2) * 60 + 90
    time_spent_editing = 90
    percentage = (time_spent_editing / total_time) * 100
    return percentage

 Executed result: 20.0
[EXP] 395: [success_rate]: True, [answer]: 92, [output]: def solution():
    total_books = 6 * 6  # calculate the initial number of books
    more_books = 2 * total_books + 20  # calculate the number of books Wendy needs to carry
    return more_books

 Executed result: 92
[EXP] 396: [success_rate]: True, [answer]: 38, [output]: def solution():
    valentines_made = 20
    valentines_received = 2 * 15
    valentines_given = 24 + 5
    valentines_received_back = 17
    total_valentines = valentines_made + valentines_received - valentines_given + valentines_received_back
    return total_valentines

 Executed result: 38
[EXP] 397: [success_rate]: True, [answer]: 3, [output]: def solution():
    total_slices = 12
    bill_slices = total_slices * (1 / 3)
    mark_slices = total_slices * (1 / 4)
    slices_given = bill_slices + mark_slices
    slices_eaten = 2
    slices_left = total_slices - slices_given - slices_eaten
    return slices_left

 Executed result: 3.0
[EXP] 398: [success_rate]: True, [answer]: 25, [output]: def solution():
    daily_earn = 10
    bike_price = 300
    daily_save = daily_earn
    current_money = 50
    days = 0
    while current_money < bike_price:
        current_money += daily_save
        days += 1
    return days

 Executed result: 25
[EXP] 399: [success_rate]: True, [answer]: 168, [output]: def solution():
    spiders = 90
    millipedes = spiders // 3
    stink_bugs = 2 * millipedes - 12
    return spiders + millipedes + stink_bugs

 Executed result: 168
[EXP] 400: [success_rate]: True, [answer]: 12, [output]: def solution():
    erica_age = 30
    beth_age = erica_age + 5
    alice_age = beth_age + 7
    age_diff = alice_age - erica_age
    return age_diff

 Executed result: 12
[EXP] 401: [success_rate]: True, [answer]: 48, [output]: def solution():
    ounces_per_glass = 8
    glasses_drunk = 2
    calories_per_ounce = 3
    total_calories = ounces_per_glass * glasses_drunk * calories_per_ounce
    return total_calories

 Executed result: 48
[EXP] 402: [success_rate]: False, [answer]: 14400, [output]: def solution():
    days_per_year = 52
    days_per_week = 6
    days_per_month = days_per_week * 4
    days_per_year * days_per_month * 50
    return 5200

 Executed result: 5200
[EXP] 403: [success_rate]: True, [answer]: 4, [output]: def solution():
    flour_needed = 4 * 3
    milk_needed = 4 * 1
    flour_bags_needed = flour_needed // 2
    milk_bottles_needed = milk_needed // 2
    return flour_bags_needed - milk_bottles_needed

 Executed result: 4
[EXP] 404: [success_rate]: True, [answer]: 81, [output]: def solution():
    initial_energy_consumption = 900 * 8
    reduced_energy_consumption = initial_energy_consumption - 5 * 900
    monthly_energy_saved = reduced_energy_consumption * 30
    return monthly_energy_saved / (1000)

 Executed result: 81.0
[EXP] 405: [success_rate]: True, [answer]: 22, [output]: def solution():
    total_stripes = 2 * 17 + 36 + 36 / 2
    num_zebras = 4
    average = total_stripes / num_zebras
    return average

 Executed result: 22.0
[EXP] 406: [success_rate]: False, [answer]: 50, [output]: def solution():

 Executed result: None
[EXP] 407: [success_rate]: False, [answer]: 200, [output]: def solution():
    initial_cannolis = 40
    additional_cannolis = 60
    corns = 2 * initial_cannolis
    new_corns = corns - 40
    total_cannolis = initial_cannolis + additional_cannolis
    total_corns = new_corns
    total = total_cannolis + total_corns
    return total

 Executed result: 140
[EXP] 408: [success_rate]: False, [answer]: 2000, [output]: def solution():
    total_steps = 10000
    steps_so_far = total_steps // 2 + 1000
    steps_left = total_steps - steps_so_far
    jog_steps = steps_left
    return jog_steps

 Executed result: 4000
[EXP] 409: [success_rate]: True, [answer]: 20, [output]: def solution():
    # calculate total words in book
    total_words = 45 * 200
    
    # calculate time required to read book
    reading_time = total_words / 300
    
    # calculate total time including travel
    total_time = reading_time + 10
    
    # calculate time difference with scheduled time
    time_diff = 60 - total_time
    
    return time_diff

 Executed result: 20.0
[EXP] 410: [success_rate]: True, [answer]: 168000, [output]: def solution():
    wage_per_hour = 15
    hourly_workweek = 40
    employees_hired = 40
    hours_per_month = hourly_workweek * 4
    total_hours = employees_hired * hours_per_month

    may_salary = total_hours * wage_per_hour
    expired_employees = employees_hired // 4
    remaining_employees = employees_hired - expired_employees
    remaining_hours = remaining_employees * hours_per_month
    june_salary = remaining_hours * wage_per_hour

    total_pay = may_salary + june_salary
    return total_pay

 Executed result: 168000
[EXP] 411: [success_rate]: False, [answer]: 3, [output]: def solution():
    original_taffy_price = 3
    discount = 1.5
    total_discount = 1 - (discount / 2)
    discounted_taffy_price = original_taffy_price * (1 - total_discount) * 2
    total_cost = 3 + 1.5 + 0.25 * 4
    total_spent = discounted_taffy_price + total_cost
    remaining_money = 10 - total_spent
    return round(remaining_money, 2)

 Executed result: 0.0
[EXP] 412: [success_rate]: True, [answer]: 1110, [output]: def solution():
    total = 0
    initial_packages = 400 + 400 * 2
    discounted_packages = initial_packages - (initial_packages * 0.2)
    total = discounted_packages + 150
    return total

 Executed result: 1110.0
[EXP] 413: [success_rate]: True, [answer]: 5, [output]: def solution():
    cookies_per_day = 2
    days = 30
    cookies_per_recipes = 12
    return -(-days * cookies_per_day // cookies_per_recipes)

 Executed result: 5
[EXP] 414: [success_rate]: False, [answer]: 25, [output]: def solution():

 Executed result: None
[EXP] 415: [success_rate]: True, [answer]: 56, [output]: def solution():
    original_price = 20
    discount = 30 / 100
    discounted_price = original_price - (original_price * discount)
    total_cost = discounted_price * 4
    return total_cost

 Executed result: 56.0
[EXP] 416: [success_rate]: True, [answer]: 350, [output]: def solution():
    joanne_tallest = 30
    joanne_shortest = joanne_tallest / 2
    sister_tallest = joanne_tallest * 2
    sister_shortest = joanne_shortest * 3
    joanne_average = 500 - (joanne_tallest + joanne_shortest + sister_tallest + sister_shortest)
    return int(joanne_average)

 Executed result: 350
[EXP] 417: [success_rate]: False, [answer]: 56, [output]: def solution():
    total_humps = 304
    camels_humps = 304 - total_humps
    camels = total_humps // 2
    dromedaries = 180 - camels
    return dromedaries

 Executed result: 28
[EXP] 418: [success_rate]: False, [answer]: 3140, [output]: def solution():
    total_distance = 0
    for i in range(4):
        total_distance += 200
    for i in range(2):
        total_distance += 200 * 0.3
    total_distance += 0
    for i in range(7, 14):
        total_distance += 300
    return total_distance

 Executed result: 3020.0
[EXP] 419: [success_rate]: True, [answer]: 40, [output]: def solution():
    peter_cubic_inches = 5
    zack_cubic_inches = peter_cubic_inches * 4
    timothy_cubic_inches = zack_cubic_inches * 2
    return timothy_cubic_inches

 Executed result: 40
[EXP] 420: [success_rate]: True, [answer]: 3000, [output]: def solution():
    start_elevation = 3000
    destination_elevation = 10000 - 4000
    climb_height = destination_elevation - start_elevation
    return climb_height

 Executed result: 3000
[EXP] 421: [success_rate]: True, [answer]: 17000, [output]: def solution():
    initial_capital = 5000
    first_bank = 4000
    second_bank = 2 * first_bank
    total_money = initial_capital + first_bank + second_bank
    return total_money

 Executed result: 17000
[EXP] 422: [success_rate]: True, [answer]: 12, [output]: def solution():
    total_cats = 50 
    taken_away = 4 * 5 
    remaining_cats = total_cats - taken_away
    cats_run_after_mouse = int(remaining_cats * 3/5)
    cats_left = remaining_cats - cats_run_after_mouse
    return cats_left

 Executed result: 12
[EXP] 423: [success_rate]: False, [answer]: 284, [output]: def solution():
    totalBill = (8 * 6) + (12 * 8) + (14 * 18)
    return totalBill

 Executed result: 396
[EXP] 424: [success_rate]: False, [answer]: 8, [output]: def solution():
    tattered_jeans_price = 28
    jogger_jeans_price = tattered_jeans_price - 6
    total_savings = tattered_jeans_price - jogger_jeans_price
    spared_saved_savings = total_savings//3
    saved_from_tattered = total_savings - spared_saved_savings
    difference = jogger_jeans_price - tattered_jeans_price
    return difference

 Executed result: -6
[EXP] 425: [success_rate]: True, [answer]: 570, [output]: def solution():
    total_seats = 4 * 60 + 6 * 30 + 10 * 15
    return total_seats

 Executed result: 570
[EXP] 426: [success_rate]: True, [answer]: 150, [output]: def solution():
    self_built_feeders = 3
    store_bought_feeders = 3
    self_built_birds = 20 + 10
    store_bought_birds = 20
    total_birds = self_built_feeders * self_built_birds + store_bought_feeders * store_bought_birds
    return total_birds

 Executed result: 150
[EXP] 427: [success_rate]: True, [answer]: 11, [output]: def solution():
    bagel_price = 4
    soup_price = bagel_price * 1.25
    cake_price = bagel_price / 2
    total_price = bagel_price + soup_price + cake_price
    return total_price

 Executed result: 11.0
[EXP] 428: [success_rate]: False, [answer]: 150, [output]: def solution():
    ticket_cost = 100
    initial_cash = 0
    spent_cash = 50
    card_sold_price = 1.5
    card_kept_percentage = 1 / 3
    card_kept = 0
    cards_sold = spent_cash / card_sold_price
    cards_started_with = 0
    while True:
        cards_started_with += 1
        cards_kept = int(cards_started_with * card_kept_percentage)
        cards_sold = cards_started_with - cards_kept
        card_price_total = cards_sold * card_sold_price
        if card_price_total >= ticket_cost:
            return cards_started_with - 1

 Executed result: 99
[EXP] 429: [success_rate]: False, [answer]: 26, [output]: def solution():
    num_guests = 40
    num_hotdogs = 36 * 2
    second_hotdog_guests = num_guests - 36
    return second_hotdog_guestsliest

 Executed result: None
[EXP] 430: [success_rate]: True, [answer]: 13, [output]: def solution():
    indras_letters = 6
    sister_letters = (indras_letters // 2) + 4
    total_letters = indras_letters + sister_letters
    return total_letters

 Executed result: 13
[EXP] 431: [success_rate]: True, [answer]: 132, [output]: def solution():
    total_cost = 120 + 20 + (5 * 5)
    discount = total_cost * 0.20
    result = total_cost - discount
    return result

 Executed result: 132.0
[EXP] 432: [success_rate]: True, [answer]: 1, [output]: def solution():
    total_cost = 6 + 11 + 2
    total_money = 2 + 16
    return total_cost - total_money

 Executed result: 1
[EXP] 433: [success_rate]: True, [answer]: 30, [output]: def solution():
    prince_thaddeus_dragons = 100
    prince_arthur_dragons = prince_thaddeus_dragons * 3 / 4
    prince_walter_dragons = prince_arthur_dragons * 2
    prince_bruce_dragons = prince_walter_dragons / 5
    return round(prince_bruce_dragons)

 Executed result: 30
[EXP] 434: [success_rate]: True, [answer]: 6, [output]: def solution():
    total_gallons = 15
    num_containers = 5
    portions_per_container = 1 / 4
    total_pints = (total_gallons / num_containers) * portions_per_container * 8
    return total_pints

 Executed result: 6.0
[EXP] 435: [success_rate]: False, [answer]: 5, [output]: def solution():
    total = 5
    cost_per_chip = 40 / 100  # conversion from cents to dollars
    num_chips = 3
    total_spent_on_chips = num_chips * cost_per_chip
    
    remaining_money = total - total_spent_on_chips
    percentage = 1 / 100
    
    money_left_as_cents = int(remaining_money / percentage * 100)
    money_left_as_cents -= total_spent_on_chips * 100
    
    cost_per_candy_bar = 75 / 100  # conversion from cents to dollars
    num_candy_bars = money_left_as_cents / cost_per_candy_bar
    
    return int(num_candy_bars)

 Executed result: 50506
[EXP] 436: [success_rate]: False, [answer]: 5, [output]: def solution():

 Executed result: None
[EXP] 437: [success_rate]: False, [answer]: 15, [output]: def solution():

 Executed result: None
[EXP] 438: [success_rate]: True, [answer]: 7, [output]: def solution():
    total_oranges = 34 + 22
    friends = 6 + 2  # including Sitti and Juris
    return total_oranges // friends

 Executed result: 7
[EXP] 439: [success_rate]: True, [answer]: 2, [output]: def solution():
    onions = 2 * 2
    beef_stock = 2 * 2
    total_cost = onions * 2 + beef_stock * 2
    cost_per_serving = total_cost / 6
    return round(cost_per_serving)

 Executed result: 3
[EXP] 440: [success_rate]: False, [answer]: 17, [output]: def solution():
    wayne_time = 4
    bernadette_time = 4 * 4
    want_diff = 5
    bernadette_earlier = bernadette_time - wayne_time - want_diff
    return bernadette_earlier

 Executed result: 7
[EXP] 441: [success_rate]: True, [answer]: 98, [output]: def solution():
    area = 360
    length_in_feet = 3 * 3  # 3 yards = 3 * 3 feet
    width = area / length_in_feet
    perimeter = 2 * (length_in_feet + width)
    return perimeter

 Executed result: 98.0
[EXP] 442: [success_rate]: True, [answer]: 80, [output]: def solution():
    elizabeth_beads = (1 + 2) * 20
    margareth_beads = (3 + 4) * 20
    difference = abs(elizabeth_beads - margareth_beads)
    return difference

 Executed result: 80
[EXP] 443: [success_rate]: True, [answer]: 49, [output]: def solution():
    initial_temp = 40
    house_temp = initial_temp + 3 * 5
    cooling_time = 30 // 10
    house_temp = house_temp - 2 * cooling_time
    return house_temp

 Executed result: 49
[EXP] 444: [success_rate]: False, [answer]: 59, [output]: def solution():
    j_swim = 40
    j_bike = 80  # 1h20 = 80 minutes
    j_run = 50

    j_time = j_swim + j_bike + j_run
    j_time_win = j_time - 10

    j_swim_rate = 0.9
    j_bike_rate = j_bike + 5
    james_time_swim = j_swim * j_swim_rate
    james_time_bike = j_bike_rate
    james_time_run = j_time_win - (james_time_swim + james_time_bike)

    return j_run - james_time_run

 Executed result: 11.0
[EXP] 445: [success_rate]: False, [answer]: 20, [output]: def solution():
    c = 1.25 * 60  # convert 1.25 hours to minutes
    b = c + 5
    a = c / 4
    return int(a)

 Executed result: 18
[EXP] 446: [success_rate]: True, [answer]: 6, [output]: def solution():
    mph = 32
    minutes = 30
    total_miles = (mph * minutes) / 60
    hay_cost = (total_miles / 2) * 3
    total_cost = hay_cost
    michael_money = 6 * 5
    change = michael_money - total_cost
    return change

 Executed result: 6.0
[EXP] 447: [success_rate]: True, [answer]: 2, [output]: def solution():
    total_eggs = 4 * 12 + 2  # calculate the total number of eggs
    tray_capacity = 5  # trays can hold 5 glasses
    eggs_per_glass = 5  # each glass requires 5 eggs
    
    eggnog_trays = total_eggs // (eggs_per_glass * tray_capacity)  # divide total eggs by the number of eggs required per tray
    return eggnog_trays

 Executed result: 2
[EXP] 448: [success_rate]: True, [answer]: 5, [output]: def solution():
    joey_points = 214 + 26
    marcy_points = 225 + 10
    return abs(joey_points - marcy_points)

 Executed result: 5
[EXP] 449: [success_rate]: False, [answer]: 539, [output]: def solution():
    total_sneakers = 48
    cost_per_sneaker = 576 / total_sneakers
    profit_from_flash_sale = 17 * 20
    remaining_sneakers = total_sneakers - 17
    profit_from_rest = remaining_sneakers * 25
    total_profit = profit_from_flash_sale + profit_from_rest
    return total_profit

 Executed result: 1115
[EXP] 450: [success_rate]: True, [answer]: 112, [output]: def solution():
    return 6 * 8 + 4 * 16

 Executed result: 112
[EXP] 451: [success_rate]: False, [answer]: 4, [output]: def solution():
    super_ticket_price = 20
    regular_movie_ticket_price = 12
    soda_price = 3
    save = 2
    super_ticket_popcorn_soda_price = super_ticket_price + 1
    regular_ticket_popcorn_soda_price = regular_movie_ticket_price + soda_price + [regular_price]
    regular_price = (regular_ticket_popcorn_soda_price - super_ticket_popcorn_soda_price + save) - soda_price
    return regular_price

 Executed result: None
[EXP] 452: [success_rate]: True, [answer]: 11050, [output]: def solution():
    # original cost per balloon
    original_cost_per_balloon = 900 / 20
    
    # cost increase per balloon
    cost_increase = 20
    
    # new cost per balloon
    new_cost_per_balloon = original_cost_per_balloon + cost_increase
    
    # total cost for 170 balloons
    total_cost = new_cost_per_balloon * 170
    
    return total_cost

 Executed result: 11050.0
[EXP] 453: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_distance = 60 * 2 + 30
    total_time = 2 + 1
    average_speed = total_distance / total_time
    return average_speed

 Executed result: 50.0
[EXP] 454: [success_rate]: True, [answer]: 6400, [output]: def solution():
    sapphires = 8
    sapphires_traded = 3
    rubies = 2
    sapphire_worth = 800
    ruby_worth = 1200
    
    sapphires_left = sapphires - sapphires_traded
    money_in_sapphires = sapphire_worth * sapphires_left
    money_in_rubies = ruby_worth * rubies
    
    total_money = money_in_sapphires + money_in_rubies
    return total_money

 Executed result: 6400
[EXP] 455: [success_rate]: False, [answer]: 150, [output]: def solution():
    daily_apples = 4
    days = 30
    apples_in_a_day = 2 * daily_apples
    total_apples = apples_in_a_day * days
    return total_apples

 Executed result: 240
[EXP] 456: [success_rate]: True, [answer]: 1920, [output]: def solution():
    volume_per_bed = 2 * 8 * 2  # volume of each bed in cubic feet
    total_volume = volume_per_bed * 10  # total volume of all beds
    bags_needed = total_volume // 2  # calculate the number of bags needed
    total_cost = bags_needed * 12  # total cost in dollars
    return total_cost

 Executed result: 1920
[EXP] 457: [success_rate]: True, [answer]: 78, [output]: def solution():
    red_cards = 15
    more_green_cards = 60 / 100
    green_cards = red_cards * (1 + more_green_cards)
    yellow_cards = red_cards + green_cards
    total_cards = red_cards + green_cards + yellow_cards
    return total_cards

 Executed result: 78.0
[EXP] 458: [success_rate]: True, [answer]: 45, [output]: def solution():
    total_fairies = 50
    new_fairies = total_fairies // 2
    total_fairies += new_fairies
    total_fairies -= 30
    return total_fairies

 Executed result: 45
[EXP] 459: [success_rate]: True, [answer]: 35, [output]: def solution():
    total_puppies = 8 + 12
    puppies_with_spots = 3 + 4
    percentage = (puppies_with_spots / total_puppies) * 100
    return percentage

 Executed result: 35.0
[EXP] 460: [success_rate]: True, [answer]: 2, [output]: def solution():
    total_weight = 2 + 4 * 12 + 42 * 75 + 20 * 65
    trips = -(-total_weight // 2250)
    return trips

 Executed result: 2
[EXP] 461: [success_rate]: True, [answer]: 84, [output]: def solution():
    cans_week = 3 * 2
    bottles_week = 5 * 3
    earnings_per_week = cans_week + bottles_week
    four_weeks_earnings = earnings_per_week * 4
    return four_weeks_earnings

 Executed result: 84
[EXP] 462: [success_rate]: False, [answer]: 9, [output]: def solution():

 Executed result: None
[EXP] 463: [success_rate]: True, [answer]: 71, [output]: def solution():
    ali_money = 21
    leila_money = 100
    ali_received = leila_money / 2
    ali_total = ali_money + ali_received
    return ali_total

 Executed result: 71.0
[EXP] 464: [success_rate]: True, [answer]: 18, [output]: def solution():
    pizza_cost = 15
    tip = pizza_cost / 5
    total = pizza_cost + tip
    return total

 Executed result: 18.0
[EXP] 465: [success_rate]: False, [answer]: 6, [output]: def solution():
    start_position = 1
    back = 5
    ahead = 2
    fall_back = 3
    ahead_again = 1
    
    current_position = start_position - back + ahead - fall_back + ahead_again
    
    return current_position

 Executed result: -4
[EXP] 466: [success_rate]: True, [answer]: 30, [output]: def solution():
    basketball_cards = 6 * 25
    baseball_cards = 5 * 40
    total_cards = basketball_cards + baseball_cards - 50
    students_cards = total_cards // 10
    return students_cards

 Executed result: 30
[EXP] 467: [success_rate]: True, [answer]: 1, [output]: def solution():
    becky_cost = 20 * 0.45 - 1
    kelly_cost = 20 * 0.5 * (1 - 0.1)
    return kelly_cost - becky_cost

 Executed result: 1.0
[EXP] 468: [success_rate]: True, [answer]: 1200, [output]: def solution():
    sheets = 2
    comforter = 1
    pillows = 2 * sheets
    towels = 2 * pillows
    total_pieces_per_room = 2 + 1 + pillows + towels
    total_pieces = total_pieces_per_room * 80
    return total_pieces

 Executed result: 1200
[EXP] 469: [success_rate]: True, [answer]: 120, [output]: def solution():
    shoes = 200
    shoes += 5 * 2
    shoes += 15 * 2
    shoes += 30 * 2
    shoes -= 180
    return shoes

 Executed result: 120
[EXP] 470: [success_rate]: False, [answer]: 4, [output]: def solution():
    jars = 6
    cupcakes_per_jar = 8
    pans_per_cupcakes = 12 / 8
    pans = jars * cupcakes_per_jar / pans_per_cupcakes
    return pans

 Executed result: 32.0
[EXP] 471: [success_rate]: True, [answer]: 3, [output]: def solution():
    pen_price = 2
    paper_price = 3 * pen_price - 1
    total_cost = pen_price + paper_price
    change = 10 - total_cost
    return change

 Executed result: 3
[EXP] 472: [success_rate]: True, [answer]: 80, [output]: def solution():
    total_pencils = 30 * 10
    total_pencils_used = total_pencils * 0.2
    remaining_pencils = total_pencils - total_pencils_used
    remaining_pencils_left = remaining_pencils * 0.3333333333333333
    return remaining_pencils_left

 Executed result: 80.0
[EXP] 473: [success_rate]: True, [answer]: 6, [output]: def solution():
    cookies = 5
    carrot_sticks = (cookies - 2) * 2
    return carrot_sticks

 Executed result: 6
[EXP] 474: [success_rate]: True, [answer]: 10, [output]: def solution():
    shark_length = 10  # in feet
    remora_length = 6  # in inches
    total_remora_length = 2 * remora_length
    total_remora_length_inches = total_remora_length
    total_remora_length_feet = total_remora_length_inches / 12  # convert inches to feet
    combined_length = shark_length + total_remora_length_feet
    percentage = (total_remora_length_feet / shark_length) * 100
    return round(percentage, 2)

 Executed result: 10.0
[EXP] 475: [success_rate]: False, [answer]: 80, [output]: def solution():
    total_students = 3/4 * x
    no_desktop_students = 20
    desktop_students = total_students - no_desktop_students
    result = total_students
    return result

 Executed result: None
[EXP] 476: [success_rate]: False, [answer]: 20, [output]: def solution():
    total_minutes = 240
    walk_days = 4
    total_weeks = 3
    total_walk_days = total_weeks * 7
    walk_minutes_per_week = total_minutes / walk_days
    walk_minutes_per_day = walk_minutes_per_week / total_walk_days
    return walk_minutes_per_day

 Executed result: 2.857142857142857
[EXP] 477: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_books = 300/15
    shared_books = total_books // 4
    return shared_books

 Executed result: 5.0
[EXP] 478: [success_rate]: True, [answer]: 20, [output]: def solution():
    kids_on_dairy = 9
    kids_on_peanuts = 6
    kids_on_both = 3
    kids_on_neither = 32 - (kids_on_dairy + kids_on_peanuts - kids_on_both)
    return kids_on_neither

 Executed result: 20
[EXP] 479: [success_rate]: True, [answer]: 621, [output]: def solution():
    num_groups = 3
    employees_per_group = 200
    tour_guides_per_group = 7
    total_employees = num_groups * employees_per_group
    total_tour_guides = num_groups * tour_guides_per_group
    total_people = total_employees + total_tour_guides
    return total_people

 Executed result: 621
[EXP] 480: [success_rate]: True, [answer]: 15400, [output]: def solution():
    cost = 5000 * 2  # both plane tickets
    normal_hotel = 1500
    hotel = normal_hotel * (1 + 0.2)  # 20% more expensive
    cost += hotel * 3  # hotel for 3 days
    return cost

 Executed result: 15400.0
[EXP] 481: [success_rate]: True, [answer]: 11, [output]: def solution():
    ben_blue = 4
    ben_yellow = 3
    jasper_blue = ben_blue // 2
    jasper_yellow = ben_yellow * 3
    return jasper_blue + jasper_yellow

 Executed result: 11
[EXP] 482: [success_rate]: True, [answer]: 84, [output]: def solution():
    weight_1959 = 48
    weight_2010 = weight_1959 * 3/4
    total_weight = weight_1959 + weight_2010
    return total_weight

 Executed result: 84.0
[EXP] 483: [success_rate]: False, [answer]: 26, [output]: def solution():

 Executed result: None
[EXP] 484: [success_rate]: True, [answer]: 40, [output]: def solution():
    gabriel_songs = 100 - 20
    luri_songs = 100 - 3 * 20
    return luri_songs - gabriel_songs

 Executed result: -40
[EXP] 485: [success_rate]: True, [answer]: 240, [output]: def solution():
    oranges = 60
    portion = 2/5
    total_oranges_eaten = oranges * portion
    amount_lost = total_oranges_eaten * 10
    return amount_lost

 Executed result: 240.0
[EXP] 486: [success_rate]: True, [answer]: 220, [output]: def solution():
    shoes_price = 80
    bag_price = 3 * shoes_price - 20
    return bag_price

 Executed result: 220
[EXP] 487: [success_rate]: True, [answer]: 6, [output]: def solution():
    daily_distance = 12
    weekly_distance = daily_distance * 5
    hourly_distance = 10
    hours = weekly_distance / hourly_distance
    return hours

 Executed result: 6.0
[EXP] 488: [success_rate]: False, [answer]: 4, [output]: def solution():
    total_ounces_per_day = 4 * 2 * 5 * 16  # 4 horses * 2 meals/day * 5 pounds/horse/meal * 16 ounces/pound
    total_days = 5
    total_ounces_needed = total_ounces_per_day * total_days
    total_bags_needed = total_ounces_needed // 50
    return total_bags_needed + " bags"

 Executed result: None
[EXP] 489: [success_rate]: True, [answer]: 6, [output]: def solution():
    total_puppies = 27
    pom = 2 * total_puppies / 3
    pom_girl = pom / 3
    return pom_girl

 Executed result: 6.0
[EXP] 490: [success_rate]: True, [answer]: -10, [output]: def solution():
    temperatures = [-48, 21, -3]
    return sum(temperatures) / len(temperatures)

 Executed result: -10.0
[EXP] 491: [success_rate]: True, [answer]: 4, [output]: def solution():
    remaining_amount = 12 - 4
    daily_savings = 2
    days = remaining_amount // daily_savings
    return days

 Executed result: 4
[EXP] 492: [success_rate]: True, [answer]: 16, [output]: def solution():
    eggs = 64
    trays = 2
    max_eggs_per_tray = 24
    eggs_in_trays = trays * max_eggs_per_tray
    eggs_left_over = eggs - eggs_in_trays
    return eggs_left_over

 Executed result: 16
[EXP] 493: [success_rate]: True, [answer]: 32, [output]: def solution():
    small_pizza = 8
    family_pizza = small_pizza * 3
    total = small_pizza + family_pizza
    return total

 Executed result: 32
[EXP] 494: [success_rate]: False, [answer]: 25, [output]: def solution():
    total_cost = (2 * 4) + (2 * 0)  # One pack is free, so we buy 2 packs and the second pack is free 
    total_cost -= 2  # Apply the coupon
    total_cost *= 100  # Convert to cents
    price_per_razor = total_cost / 8  # 2 packs with 4 razors each
    return int(price_per_razor)

 Executed result: 75
[EXP] 495: [success_rate]: False, [answer]: 21, [output]: def solution():
    height = 64 * 4 + 64 * 3 + 64 * 2 + 60
    height_in_feet = height / 12
    return int(height_in_feet)

 Executed result: 53
[EXP] 496: [success_rate]: True, [answer]: 200, [output]: def solution():
    total_minutes = 5 * 8 * 5
    return total_minutes

 Executed result: 200
[EXP] 497: [success_rate]: False, [answer]: 38, [output]: def solution():
    brett_age = 14
    brett_age_in_four_years = brett_age + 4
    angela_age_in_four_years = brett_age_in_four_years * 3
    angela_age_now = angela_age_in_four_years - 4
    return angela_age_now

 Executed result: 50
[EXP] 498: [success_rate]: False, [answer]: 112, [output]: def solution():
    total_cost = (6 + 2) * 2 * 14
    return total_cost

 Executed result: 224
[EXP] 499: [success_rate]: True, [answer]: 40, [output]: def solution():
    ashley_oranges = 5 * 10
    brianne_oranges = ashley_oranges + 20
    total_oranges = ashley_oranges + brianne_oranges
    pies = total_oranges // 3
    return pies

 Executed result: 40
[EXP] 500: [success_rate]: True, [answer]: 10, [output]: def solution():
    fee1 = 200
    fee2 = 0
    rate1 = 5
    rate2 = 25
    x = (fee1 - fee2) / (rate2 - rate1)
    return round(x)

 Executed result: 10
[EXP] 501: [success_rate]: False, [answer]: 16, [output]: def solution():
    total = 43
    b_insects = x  # let variable 'x' store the number of insects Bodhi found
    d_insects = x / 2  # since David found half of what Bodhi found
    l_insects = d_insects + 7  # Lily found 7 more than David
    return l_insects  # return the number of insects Lily found

 Executed result: None
[EXP] 502: [success_rate]: True, [answer]: 273, [output]: def solution():
    yards_marah = 364 / 4
    yards_grandma = 364 / 2
    total_yards = yards_marah + yards_grandma
    return total_yards

 Executed result: 273.0
[EXP] 503: [success_rate]: False, [answer]: 26, [output]: def solution():

 Executed result: None
[EXP] 504: [success_rate]: True, [answer]: 18, [output]: def solution():
    chair_width = 3
    rug_width = chair_width + 5
    rug_length = 2 * rug_width
    couch_length = rug_length + 2
    return couch_length

 Executed result: 18
[EXP] 505: [success_rate]: True, [answer]: 2, [output]: def solution():
    total_cost = 7
    grape_pack_cost = 2
    apple_pack_cost = grape_pack_cost / 2
    strawberry_packs = 2
    return (total_cost - grape_pack_cost - apple_pack_cost) / strawberry_packs

 Executed result: 2.0
[EXP] 506: [success_rate]: False, [answer]: 1,600, [output]: def solution():

 Executed result: None
[EXP] 507: [success_rate]: False, [answer]: 144, [output]: def solution():

 Executed result: None
[EXP] 508: [success_rate]: True, [answer]: 2, [output]: def solution():
    trip_cost = 2.20
    days_in_week = 5
    
    daily_cost = 2 * trip_cost
    weekly_cost = daily_cost * days_in_week
    
    weekly_pass_cost = 20
    
    weekly_saving = weekly_cost - weekly_pass_cost
    
    return weekly_saving

 Executed result: 2.0
[EXP] 509: [success_rate]: False, [answer]: 120, [output]: def solution():
    farm_cows = 30
    zoo_cows = farm_cows * 2
    farm_sheep = zoo_cows / 2
    zoo_sheep = 20
    total_farm = farm_cows + farm_sheep
    total_zoo = zoo_cows + zoo_sheep
    return total_farm + total_zoo

 Executed result: 140.0
[EXP] 510: [success_rate]: False, [answer]: 4, [output]: def solution():
    rose_onions = 12
    rose_potatoes = 4
    if rose_onions < rose_potatoes:
        onions = rose_onions
        potatoes = rose_potatoes
    else:
        onions = rose_potatoes
        potatoes = rose_onions
    sophia_total = (onions // 5) + (potatoes // 5)
    return sophia_total

 Executed result: 2
[EXP] 511: [success_rate]: False, [answer]: 525, [output]: def solution():
    days_to_goal = (datetime.datetime(2023, 7, 19) - datetime.datetime(2023, 12, 31)).days + 1
    pounds_to_lose = 30
    calories_per_pound = 3500
    
    total_calories_to_burn = pounds_to_lose * calories_per_pound
    daily_calorie_deficit = total_calories_to_burn / days_to_goal
    return daily_calorie_deficit

 Executed result: None
[EXP] 512: [success_rate]: True, [answer]: 110, [output]: def solution():
    daily_payment = 30
    weeks_salary = daily_payment * 7
    total_spent = 100
    money_left = weeks_salary - total_spent
    return money_left

 Executed result: 110
[EXP] 513: [success_rate]: True, [answer]: 120, [output]: def solution():
    num_laps = 8
    distance_per_lap = 0.25
    ml_per_km = 60
    total_distance = num_laps * distance_per_lap
    total_ml = total_distance * ml_per_km
    return total_ml

 Executed result: 120.0
[EXP] 514: [success_rate]: True, [answer]: 300, [output]: def solution():
    amount = 500
    amount -= (20/100) * amount
    amount -= (25/100) * amount
    return amount

 Executed result: 300.0
[EXP] 515: [success_rate]: True, [answer]: 90000, [output]: def solution():
    total = 120000
    lot = total / 4
    house = 3 * lot
    return house

 Executed result: 90000.0
[EXP] 516: [success_rate]: False, [answer]: 160, [output]: def solution():
    cost = 8 * 5 * 4
    revenue = 8 * 8 * 8
    profit = revenue - cost
    return profit

 Executed result: 352
[EXP] 517: [success_rate]: True, [answer]: 375, [output]: def solution():
    punches_per_minute = 25
    minutes_per_round = 3
    rounds = 5
    total_minutes = minutes_per_round * rounds
    total_punches = punches_per_minute * total_minutes
    return total_punches

 Executed result: 375
[EXP] 518: [success_rate]: True, [answer]: 18, [output]: def solution():
    suzanne_cookies = 36
    josh_cookies = suzanne_cookies // 4
    kelsie_cookies = 2 * josh_cookies
    return kelsie_cookies

 Executed result: 18
[EXP] 519: [success_rate]: False, [answer]: 32, [output]: def solution():
    total_money = (4 * 10) + (6 * 20)
    half_money = total_money / 2
    remaining_money = total_money - half_money
    remaining_money_after_dinner = remaining_money * 0.8
    return remaining_money_after_dinner

 Executed result: 64.0
[EXP] 520: [success_rate]: True, [answer]: 280, [output]: def solution():
    rob_time = 2 * 60
    royce_time = rob_time * 2 + 40
    return royce_time

 Executed result: 280
[EXP] 521: [success_rate]: True, [answer]: 63, [output]: def solution():
    skaing_for_hairy_triplets = (2 + 4 + 12 + 1 + 2) * 3
    return skaing_for_hairy_triplets

 Executed result: 63
[EXP] 522: [success_rate]: True, [answer]: 39, [output]: def solution():
    total_problems = 100
    problems_completed_on_monday = 12
    problems_completed_on_tuesday = 12 * 3
    problems_completed_on_wednesday = (total_problems - (problems_completed_on_monday + problems_completed_on_tuesday)) // 4

    remaining_problems = total_problems - (problems_completed_on_monday + problems_completed_on_tuesday + problems_completed_on_wednesday)
    return remaining_problems

 Executed result: 39
[EXP] 523: [success_rate]: True, [answer]: 29, [output]: def solution():
    tony = 6
    bobby = tony - 1
    kathy = 2 * bobby
    ricky = kathy - 2
    total = tony + bobby + kathy + ricky
    return total

 Executed result: 29
[EXP] 524: [success_rate]: False, [answer]: 74, [output]: def solution():
    total_bread = 200
    sold_in_morning = 93
    sold_in_afternoon = 39
    returned = 6

 Executed result: None
[EXP] 525: [success_rate]: False, [answer]: 9, [output]: def solution():
    red_rows = int((36 / 6) + 0.5)
    blue_rows = int((24 / 8) + 0.5)
    return red_rows, blue_rows

 Executed result: (6, 3)
[EXP] 526: [success_rate]: False, [answer]: 12, [output]: def solution():
    cups_in_cookies = 3/4
    total_cups = 27
    total_cookies = total_cups / (1 - cups_in_cookies)
    return int(total_cookies)

 Executed result: 108
[EXP] 527: [success_rate]: True, [answer]: 21, [output]: def solution():
    daily_rate_before = 12 * 1.50
    daily_rate_after = (12 + 2) * 1.50
    weekly_rate_before = daily_rate_before * 7
    weekly_rate_after = daily_rate_after * 7
    difference = weekly_rate_after - weekly_rate_before
    return difference

 Executed result: 21.0
[EXP] 528: [success_rate]: True, [answer]: 48, [output]: def solution():
    time_for_one_person = 5 * 2  # time for one person to paint a full house
    time_for_multiple_people = time_for_one_person * (1/5)  # time for 5 people to paint a full house
    return time_for_multiple_people * 24  # convert days to hours

 Executed result: 48.0
[EXP] 529: [success_rate]: False, [answer]: 172, [output]: def solution():

 Executed result: None
[EXP] 530: [success_rate]: True, [answer]: 11, [output]: def solution():
    price_of_cd = 4
    price_in_total = 48
    price_of_headphones = price_in_total - price_of_cd
    number_of_more_cds = price_of_headphones // price_of_cd
    return number_of_more_cds

 Executed result: 11
[EXP] 531: [success_rate]: True, [answer]: 36, [output]: def solution():
    total_hours = 0
    for i in range(8):
        if i == 2 or i == 3:
            total_hours += 5
        elif i == 6:
            total_hours += 6
        else:
            total_hours += 4
    return total_hours

 Executed result: 36
[EXP] 532: [success_rate]: False, [answer]: 66, [output]: def solution():
    bus_capacity = 48
    bus_level = bus_capacity - 8
    bus_level += 8 * 5
    bus_level -= 21
    bus_level += (8 * 5) // 3
    return bus_level

 Executed result: 72
[EXP] 533: [success_rate]: False, [answer]: 25, [output]: def solution():
    jam_age = 22
    cousin_age = (8 + 10) * 2 - 5
    return abs(jam_age - cousin_age)

 Executed result: 9
[EXP] 534: [success_rate]: True, [answer]: 300, [output]: def solution():
    total_cost = 2400
    computer_cost = 1100
    printer_cost = computer_cost - 400
    monitor_cost_per = (total_cost - computer_cost - printer_cost) / 2
    return monitor_cost_per

 Executed result: 300.0
[EXP] 535: [success_rate]: False, [answer]: 300, [output]: def solution():
    boys_seashells = 60
    girl_seashells = boys_seashells * 4 + boys_seashells
    return girl_seashells // 10

 Executed result: 30
[EXP] 536: [success_rate]: True, [answer]: 16, [output]: def solution():
    george_candies = 3 + 5
    nick_candies = george_candies * 2
    return nick_candies

 Executed result: 16
[EXP] 537: [success_rate]: True, [answer]: 8, [output]: def solution():
    chenny_age = 10
    alyana_age = chenny_age - 4
    anne_age = alyana_age + 2
    return anne_age

 Executed result: 8
[EXP] 538: [success_rate]: True, [answer]: 188, [output]: def solution():
    first_book = 31
    second_book = 50
    third_book = second_book - 5
    fourth_book = 2 * first_book
    total = first_book + second_book + third_book + fourth_book
    return total

 Executed result: 188
[EXP] 539: [success_rate]: True, [answer]: 18, [output]: def solution():
    emma_upload = 72
    week1 = 18
    week2 = 21
    week3 = 15
    vlogs_uploaded = week1 + week2 + week3
    vlogs_left = emma_upload - vlogs_uploaded
    return vlogs_left

 Executed result: 18
[EXP] 540: [success_rate]: False, [answer]: 35, [output]: def solution():
    bill = 50
    tip = bill * 0.20
    total = bill + tip
    split = total / 2
    return split * 2 + tip

 Executed result: 70.0
[EXP] 541: [success_rate]: False, [answer]: 39, [output]: def solution():
    total = 18
    eldest_add = 5
    total = total + eldest_add
    eldest_add += 10
    total = total - 8
    result = total + eldest_add
    result *= 3
    return result

 Executed result: 90
[EXP] 542: [success_rate]: False, [answer]: 50, [output]: def solution():

 Executed result: None
[EXP] 543: [success_rate]: True, [answer]: 7, [output]: def solution():
    apples = 3 * 1.5
    oranges = 5 * 0.8
    peaches = 6 * 0.75
    total_cost = apples + oranges + peaches
    change = 20 - total_cost
    return change

 Executed result: 7.0
[EXP] 544: [success_rate]: True, [answer]: 6, [output]: def solution():
    jairus_won = 0.8 * 20
    jenny_won = 0.5 * 20
    jairus_gets_more = jairus_won - jenny_won
    return jairus_gets_more

 Executed result: 6.0
[EXP] 545: [success_rate]: True, [answer]: 80, [output]: def solution():
    total = 100
    brad_gets = total / 5
    jeff_gets = brad_gets * 4
    return jeff_gets

 Executed result: 80.0
[EXP] 546: [success_rate]: True, [answer]: 30, [output]: def solution():
    work_distances = 3 * 2  # each day, Jeff walks 3 miles away and back, so it's 3 * 2
    total_distance = work_distances * 5  # he works 5 times a week
    return total_distance

 Executed result: 30
[EXP] 547: [success_rate]: False, [answer]: 130, [output]: def solution():
    full_write = 2 * 26  # 26 letters in alphabet
    half_write = 26 // 2  # half of alphabet
    total_write = full_write + full_write + half_write
    return total_write

 Executed result: 117
[EXP] 548: [success_rate]: True, [answer]: 81, [output]: def solution():
    families = 3
    for _ in range(3):
        families *= 3
    return families

 Executed result: 81
[EXP] 549: [success_rate]: True, [answer]: 100, [output]: def solution():
    initial_weight = 70 + 10 * 3
    return initial_weight

 Executed result: 100
[EXP] 550: [success_rate]: False, [answer]: 398, [output]: def solution():
    james_toys = 80
    sorted_set_five_times = 5 * james_toys
    total_toys = sorted_set_five_times + 2
    jonathan_toys = total_toys - 2
    return jonathan_toys

 Executed result: 400
[EXP] 551: [success_rate]: True, [answer]: 27, [output]: def solution():
    notebook = 5 * 1.5
    pen = 2 * 0.25
    calculator = 12
    geometry_set = 10
    total_cost = notebook + pen + calculator + geometry_set
    discount = total_cost * 0.1
    total_cost -= discount
    return total_cost

 Executed result: 27.0
[EXP] 552: [success_rate]: True, [answer]: 17, [output]: def solution():
    hamburgers = 5 * 4
    fries = 10 * 0.3
    drinks = 5 * 2
    total_cost = hamburgers + fries + drinks
    change = 50 - total_cost
    return change

 Executed result: 17.0
[EXP] 553: [success_rate]: False, [answer]: 450, [output]: def solution():
    sales = 2500
    commission_1 = (sales / 1000) * 0.3
    commission_2 = sales - 1000
    commission_2 = commission_2 * 0.1
    total_commission = commission_1 + commission_2
    total_sale = sales * 0.3
    result = total_sale + total_commission
    return result

 Executed result: 900.75
[EXP] 554: [success_rate]: True, [answer]: 92, [output]: def solution():
    total_water = 2 * 24
    guests = 70
    bottles_per_guest = 2
    total_needed = guests * bottles_per_guest
    total_missing = total_needed - total_water
    return total_missing

 Executed result: 92
[EXP] 555: [success_rate]: False, [answer]: 54, [output]: def solution():
    cold_time = 16
    warm_time = 2 * 16 + 2
    return (2 * warm_time - cold_time * 3)

 Executed result: 20
[EXP] 556: [success_rate]: False, [answer]: 2, [output]: def solution():

 Executed result: None
[EXP] 557: [success_rate]: True, [answer]: 160, [output]: def solution():
    fish_sub = 40
    cold_cut_sub = fish_sub * 3
    total_cost = fish_sub + cold_cut_sub
    return total_cost

 Executed result: 160
[EXP] 558: [success_rate]: True, [answer]: 70, [output]: def solution():
    num_buttons = 21
    num_two_holes = 7
    num_four_holes = num_buttons - num_two_holes
    total_holes = 2 * num_two_holes + 4 * num_four_holes
    return total_holes

 Executed result: 70
[EXP] 559: [success_rate]: True, [answer]: 3, [output]: def solution():
    timothy = 24
    zack = timothy / 2
    peter = zack / 4
    return peter

 Executed result: 3.0
[EXP] 560: [success_rate]: True, [answer]: 16, [output]: def solution():
    octavia_cups = 2  # half the daily recommended cups
    daily_recommended_cups = 4  # daily recommended cups
    juan_cups = octavia_cups * 10  # Juan’s current daily coffee intake
    reduction = juan_cups - daily_recommended_cups  # by how many cups Juan must reduce
    return reduction

 Executed result: 16
[EXP] 561: [success_rate]: False, [answer]: 45, [output]: def solution():
    total_hamsters = 3 * 10
    total_guinea_pigs = 3 * 5
    total rodents = total_hamsters + total_guinea_pigs
    return total rodents

 Executed result: None
[EXP] 562: [success_rate]: True, [answer]: 180, [output]: def solution():
    mark = 150
    susan = mark - 20
    bob = susan * 2
    average = (mark + susan + bob) / 3
    return average

 Executed result: 180.0
[EXP] 563: [success_rate]: True, [answer]: 82, [output]: def solution():
    initial_angle = 32
    hourly_angle = 5
    total_angle = initial_angle + (hourly_angle * 10)
    return total_angle

 Executed result: 82
[EXP] 564: [success_rate]: True, [answer]: 12, [output]: def solution():
    age1 = 12
    age2 = 12 - 4
    total_age = age1 + age2
    num_of_packs = -(-total_age // 5)  # use -(-a // b) to get ceiling division
    price = num_of_packs * 3
    return price

 Executed result: 12
[EXP] 565: [success_rate]: False, [answer]: 240, [output]: def solution():
    minutes_per_week_1 = 15 * 7  # 15 minutes per night for 7 nights
    pages_per_minutes = 2  # 2 pages per 1.5 minutes
    minutes_per_week_2 = 100 / pages_per_minutes * 1.5  # calculate minutes she read in second week
    total_minutes = minutes_per_week_1 + minutes_per_week_2
    total_pages = total_minutes * pages_per_minutes
    return total_pages

 Executed result: 360.0
[EXP] 566: [success_rate]: False, [answer]: 5, [output]: def solution():

 Executed result: None
[EXP] 567: [success_rate]: False, [answer]: 10, [output]: def solution():
    now_nephew_age = x
    future_shiloh_age = 44 + 7
    future_nephew_age = 44 / 3
    now_nephew_age = future_nephew_age - 7
    return now_nephew_age

 Executed result: 7.666666666666666
[EXP] 568: [success_rate]: True, [answer]: 9, [output]: def solution():
    first_tooth = 5
    last_three_tooth = 1
    second_last_tooth = last_three_tooth / 2
    last_tooth = second_last_tooth / 2
    total_amount = first_tooth + 3 * last_three_tooth + 2 * second_last_tooth
    return total_amount

 Executed result: 9.0
[EXP] 569: [success_rate]: True, [answer]: 175, [output]: def solution():
    r = 80  # goals scored by Richie
    m = r - 20  # goals scored by Mark
    a = r - 45  # goals scored by Anna
    return r + m + a

 Executed result: 175
[EXP] 570: [success_rate]: True, [answer]: 21, [output]: def solution():
    liam_money = 63
    mitchell_find = 21
    mitchell_rate = 4
    mitchell_money = mitchell_find * mitchell_rate
    diff = mitchell_money - liam_money
    return diff

 Executed result: 21
[EXP] 571: [success_rate]: False, [answer]: 23, [output]: def solution():
    total_money = 70
    days = 7
    days1 = 4  # Sunday through Wednesday
    days2 = days - days1  # Thursday through Saturday
    spend1 = 5  # cost of each wooden action figure
    spend2 = 2  # cost of each plastic action figure
    
    wooden_action_figures = total_money // (5 * days1)
    plastic_action_figures = total_money - (wooden_action_figures * 5 * days1) // (days2 * 2)
    
    return wooden_action_figures + plastic_action_figures

 Executed result: 63
[EXP] 572: [success_rate]: True, [answer]: 308, [output]: def solution():
    spaying_cost = 200
    vaccine_cost = 3 * 20
    vase_cost = 4 * 12
    total_cost = spaying_cost + vaccine_cost + vase_cost
    return total_cost

 Executed result: 308
[EXP] 573: [success_rate]: False, [answer]: 100, [output]: def solution():
    weekly roses_per_shop = [20, 15, 30]
    weekly_total_ros = sum(weekly_ros_per_shop)

    weekly_demand = weekly_total_ros
    weekly_supply = 40
    weekly_lack = weekly_demand - weekly_supply

    monthly_demand = weekly_demand * 4
    monthly_supply = weekly_supply * 4
    monthly_lack = monthly_demand - monthly_supply

    return monthly_lack

 Executed result: None
[EXP] 574: [success_rate]: False, [answer]: 600, [output]: def solution():

 Executed result: None
[EXP] 575: [success_rate]: False, [answer]: 37, [output]: 
def solution():
    cost_per_loaf = 3.0
    bread_per_sandwich = 0.3
    cheese_per_sandwich = 3.0
    price_per_sandwich = 7.0
    loaf_per_sandwich = 10
    
    sandwiches_sold = 10
    loaves_needed = math.ceil(sandwiches_sold / loaf_per_sandwich)
    total_bread_cost = loaves_needed * cost_per_loaf
    total_cheese_cost = cheese_per_sandwich * sandwiches_sold
    total_revenue = sandwiches_sold * price_per_sandwich
    total_cost = total_bread_cost + total_cheese_cost
    
    return total_revenue - total_cost

 Executed result: None
[EXP] 576: [success_rate]: False, [answer]: 36, [output]: def solution():

 Executed result: None
[EXP] 577: [success_rate]: True, [answer]: 11232, [output]: def solution():
    length = 18
    width = 12
    area = length * width
    carpet_cost = (12 + 2) * area
    remove_cost = 4 * area
    install_cost = 34 * area
    total_cost = carpet_cost + remove_cost + install_cost
    return total_cost

 Executed result: 11232
[EXP] 578: [success_rate]: True, [answer]: 40, [output]: def solution():
    total_birds = 50 + 0 + 120 + 20 + 90
    days = 7
    average_birds = total_birds / days
    return average_birds

 Executed result: 40.0
[EXP] 579: [success_rate]: True, [answer]: 48, [output]: def solution():
    x = 20
    result = ((x + x/2) / 5) * (x - 12)
    return result

 Executed result: 48.0
[EXP] 580: [success_rate]: True, [answer]: 7, [output]: def solution():
    boy_cards = 5
    brother_cards = boy_cards - 3
    total_cards = boy_cards + brother_cards
    return total_cards

 Executed result: 7
[EXP] 581: [success_rate]: False, [answer]: 500, [output]: def solution():
    percent_diff = (468 - 450) / 450
    actual_temp = 520 * (1 + percent_diff)
    return actual_temp

 Executed result: 540.8000000000001
[EXP] 582: [success_rate]: True, [answer]: 215, [output]: def solution():
    first_movie = 90  # minutes
    second_movie = 125  # minutes
    total_minutes = first_movie + second_movie
    return total_minutes

 Executed result: 215
[EXP] 583: [success_rate]: True, [answer]: 129200, [output]: def solution():
    herb_house = 76000
    discount = herb_house * 0.3
    juan_house = herb_house - discount
    total_houses = herb_house + juan_house
    return total_houses

 Executed result: 129200.0
[EXP] 584: [success_rate]: False, [answer]: 120, [output]: def solution():
    cups_judy = 12
    dishes_judy = 2 * cups_judy
    total_judy = 2 * (cups_judy + dishes_judy)

    cups_friend = 40
    dishes_friend = cups_friend + 20

    total_friend = cups_friend + dishes_friend

    return total_judy + total_friend

 Executed result: 172
[EXP] 585: [success_rate]: False, [answer]: 2, [output]: def solution():
    # calculate price of one box
    price_per_box = 100.00 * 0.9  # 10% off
    
    # 90 contacts per box, 2 boxes, so 180 contacts
    total_contacts = 180
    
    # 1 pair of contacts will be (90 / 2) = 45 contacts
    contacts_per_pair = 45
    
    # price per pair
    price_per_pair = (total_contacts / contacts_per_pair) / 50.0  # 50 contacts in 1 pair
    
    return price_per_pair

 Executed result: 0.08
[EXP] 586: [success_rate]: True, [answer]: 40, [output]: def solution():
    jill_saturday = 2
    john_saturday = 2 * 2
    jill_sunday = 1
    john_sunday = 1 * 3
    
    jill_amount = jill_saturday * 10 + jill_sunday * 10
    john_amount = john_saturday * 10 + john_sunday * 10
    
    john_earned_more = john_amount - jill_amount
    
    return john_earned_more

 Executed result: 40
[EXP] 587: [success_rate]: True, [answer]: 800, [output]: def solution():
    total_calories = (2 * 500) + (1 * 600)
    ml_water = (total_calories // 200) * 100
    return ml_water

 Executed result: 800
[EXP] 588: [success_rate]: False, [answer]: 30, [output]: def solution():
    red = (blue * 99) // 100
    green = (blue * 101) // 100
    return (green - red)

 Executed result: None
[EXP] 589: [success_rate]: True, [answer]: 52, [output]: def solution():
    first_speed = 47
    second_speed = 52
    third_speed = 52 + 5
    average_speed = (first_speed + second_speed + third_speed) / 3
    return average_speed

 Executed result: 52.0
[EXP] 590: [success_rate]: True, [answer]: 15, [output]: def solution():
    loss_week = -1.25
    gain_week = 1.75
    difference_week = loss_week - gain_week
    result = difference_week * 5
    return result

 Executed result: -15.0
[EXP] 591: [success_rate]: False, [answer]: 319, [output]: def solution():
    invited_friends = 100 * 2
    friends_and_spouses = 10 * 2 + 8 * 2
    total_invites = invited_friends + friends_and_spouses
    return total_invites + 1 #for Alex herself

 Executed result: 237
[EXP] 592: [success_rate]: True, [answer]: 220, [output]: def solution():
    dachshund_weight = 10 * 2
    papillon_weight = dachshund_weight / 4
    mastiff_weight = papillon_weight * 44
    return mastiff_weight

 Executed result: 220.0
[EXP] 593: [success_rate]: True, [answer]: 1, [output]: def solution():
    amazon_price = 16
    amazon_shipping = 4
    ebay_price = 13
    ebay_shipping = 2 * amazon_shipping
    price_diff = ebay_price + ebay_shipping - (amazon_price + amazon_shipping)
    return price_diff

 Executed result: 1
[EXP] 594: [success_rate]: True, [answer]: 3, [output]: def solution():
    day = 0
    height = 4
    while height <= 20:
        height *= 2
        day += 1
    return day

 Executed result: 3
[EXP] 595: [success_rate]: True, [answer]: 42, [output]: def solution():
    grams_per_day = 3 / 100 * 200
    grams_per_week = grams_per_day * 7
    return grams_per_week

 Executed result: 42.0
[EXP] 596: [success_rate]: False, [answer]: 13, [output]: def solution():
    current_age = input("Enter Jerry's current age: ")
    current_age = int(current_age)
    original_age = (current_age / 2)
    original_age = int(original_age)
    future_age = current_age + 3
    print("Jerry will be", future_age, "years old in 3 years.")

return solution()

 Executed result: None
[EXP] 597: [success_rate]: False, [answer]: 260, [output]: def solution():
    base_price = 2 * 2000
    extra_cost = 500
    total_without_deposit = base_price + extra_cost
    total_with_deposit = total_without_deposit + 600
    hourly_income = 15
    hours_worked = (total_with_deposit) / hourly_income
    return round(hours_worked)

 Executed result: 340
[EXP] 598: [success_rate]: False, [answer]: 90, [output]: def solution():
    x = int(input("Enter the smallest angle: "))
    y = 2*x
    z = 3*x
    return max(x, y, z)

 Executed result: None
[EXP] 599: [success_rate]: True, [answer]: 69, [output]: def solution():
    total_cents = (8 * 25) + (6 * 10) + (14 * 5) + 15
    total_nickels = total_cents // 5
    return total_nickels

 Executed result: 69
[EXP] 600: [success_rate]: True, [answer]: 48, [output]: def solution():
    dogs_legs = 5 * 4
    cats_legs = 2 * 4
    birds_legs = 10 * 2
    total_legs = dogs_legs + cats_legs + birds_legs
    return total_legs

 Executed result: 48
[EXP] 601: [success_rate]: True, [answer]: 10, [output]: def solution():
    weight = 8
    weight += weight * 0.5
    weight -= 2
    return weight

 Executed result: 10.0
[EXP] 602: [success_rate]: False, [answer]: 104, [output]: def solution():
    total_games = 5
    for _ in range(2):
        for _ in range(12):
            total_games += 1
        total_games += 5
    for _ in range(12):
        total_games += 2
    total_games += 5
    for _ in range(12):
        total_games += 4
    total_games += 5
    return total_games

 Executed result: 121
[EXP] 603: [success_rate]: False, [answer]: 5, [output]: def solution():
    total_miles = 1200
    total_hours = 3
    additional_miles = 2000
    additional_hours = (additional_miles / total_miles) * total_hours
    return additional_hours, additional_miles

 Executed result: (5.0, 2000)
[EXP] 604: [success_rate]: False, [answer]: 1800, [output]: def solution():
    ruiz_in_2_hours = 120
    marissa_in_one_hour = (ruiz_in_2_hours / 2) * (3 / 4)
    total_ruiz_pounds = ruiz_in_2_hours * 6
    total_marissa_pounds = marissa_in_one_hour * 12
    return total_ruiz_pounds + total_marissa_pounds

 Executed result: 1260.0
[EXP] 605: [success_rate]: True, [answer]: 12, [output]: def solution():
    money = 100
    money -= 8
    money -= 2 * 8
    money -= 4 * 2 * 8
    return money

 Executed result: 12
[EXP] 606: [success_rate]: True, [answer]: 42, [output]: def solution():
    revenue_hour1 = 15 * 0.5 * 4
    revenue_hour2 = 10 * 0.6 * 2
    total_revenue = revenue_hour1 + revenue_hour2
    return total_revenue

 Executed result: 42.0
[EXP] 607: [success_rate]: False, [answer]: 6, [output]: def solution():
    total_rotations = 4 * 725 * 400  # every 2 miles, 4 tires, total miles driven
    years_in_rotations = 10,440,000 / total_rotations
    return 1 / years_in_rotations

 Executed result: None
[EXP] 608: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_cost = 2400  # cost in cents
    total_pumps = 2
    cost_per_pump = total_cost / (total_pumps * 120)
    return int(cost_per_pump)

 Executed result: 10
[EXP] 609: [success_rate]: True, [answer]: 8, [output]: def solution():
    shirt_price = 25
    shorts_price = 35
    discount_percentage = 0.3
    discount = (shirt_price * discount_percentage) + (shorts_price * discount_percentage)
    total_cost = shirt_price + shorts_price - discount
    change = 50 - total_cost
    return change

 Executed result: 8.0
[EXP] 610: [success_rate]: False, [answer]: 7, [output]: def solution():
    total_croissants = 4 * 12 * 7  # total croissants to be made
    butter_per_dozen = 0.25  # butter per dozen croissants
    total_butter = total_croissants * butter_per_dozen
    return total_butter

 Executed result: 84.0
[EXP] 611: [success_rate]: False, [answer]: 65,960, [output]: def solution():
    cost_monica_street = 150 * 194
    cost_lewis_street = 490 * 194
    cost_diff = cost_lewis_street - cost_monica_street
    return cost_diff

 Executed result: 65960
[EXP] 612: [success_rate]: False, [answer]: 1,450,000, [output]: def solution():
    total_funding = 100000
    for _ in range(4):
        total_funding += total_funding * 1.5
    return total_funding

 Executed result: 3906250.0
[EXP] 613: [success_rate]: True, [answer]: 30, [output]: def solution():
    steak_1 = 6
    beef_tips = 8
    steak_3 = 16  # 1 pound is 16 ounces
    total_meat = steak_1 + beef_tips + steak_3
    return total_meat

 Executed result: 30
[EXP] 614: [success_rate]: True, [answer]: 93000, [output]: def solution():
    num_members = 1000
    avg_posts_per_day = 3
    num_days_in_march = 31
    total_posts = num_members * avg_posts_per_day * num_days_in_march
    return total_posts

 Executed result: 93000
[EXP] 615: [success_rate]: True, [answer]: 312, [output]: def solution():
    loads_per_week = 2
    water_per_load = 20
    water_cost_per_gallon = 0.15
    total_gallons_per_year = loads_per_week * 52 * water_per_load
    total_cost_per_year = total_gallons_per_year * water_cost_per_gallon
    return total_cost_per_year

 Executed result: 312.0
[EXP] 616: [success_rate]: True, [answer]: 33, [output]: def solution():
    total = 10.00  # cost of the aquarium
    total += 2 * 2.50  # cost of rocks
    total += 3 * 2.00  # cost of coral
    total += 20 * 0.50  # cost of fish
    total += 2.00  # cost of fish food
    return total

 Executed result: 33.0
[EXP] 617: [success_rate]: True, [answer]: 10, [output]: def solution():
    height = 3
    height *= 2
    height += 4
    return height

 Executed result: 10
[EXP] 618: [success_rate]: True, [answer]: 5, [output]: def solution():
    hourly_selling_weight = 15
    daily_selling_weight = hourly_selling_weight * 10
    bull_weight = 750
    days = bull_weight / daily_selling_weight
    return days

 Executed result: 5.0
[EXP] 619: [success_rate]: True, [answer]: 36, [output]: def solution():
    total_seats = 4 * 18
    occupied_by_admins = total_seats // 4
    remaining_seats = total_seats - occupied_by_admins
    occupied_by_parents = remaining_seats // 3
    students = remaining_seats - occupied_by_parents
    return students

 Executed result: 36
[EXP] 620: [success_rate]: True, [answer]: 76, [output]: def solution():
    poles_per_intersection = 6
    intersections = 4
    total_streets = poles_per_intersection * intersections
    total_functioning = total_streets * 4 - 20
    return total_functioning

 Executed result: 76
[EXP] 621: [success_rate]: True, [answer]: 1509, [output]: def solution():
    DVD1 = 1000 - 356
    DVD2 = 1000 - 135
    total = DVD1 + DVD2
    return total

 Executed result: 1509
[EXP] 622: [success_rate]: True, [answer]: 3000, [output]: def solution():
    cost_per_hour = 125
    hours_per_week = 2
    weeks = 6
    total_hours = hours_per_week * weeks
    total_sessions = total_hours * 2
    total_cost = total_sessions * cost_per_hour
    return total_cost

 Executed result: 3000
[EXP] 623: [success_rate]: True, [answer]: 7, [output]: def solution():
    total_gum = 20
    hours_at_school = 8
    pieces_chewed_in_school = hours_at_school // 2
    total_pieces_chewed = pieces_chewed_in_school + 2
    remaining_gum = total_gum - total_pieces_chewed
    half_gum_given = remaining_gum // 2
    return remaining_gum - half_gum_given

 Executed result: 7
[EXP] 624: [success_rate]: True, [answer]: 8, [output]: def solution():
    current_age = 16 - 12
    future_age = current_age + 4
    return future_age

 Executed result: 8
[EXP] 625: [success_rate]: True, [answer]: 85, [output]: def solution():
    baseball_cost = 9 * 3
    basketball_cost = 8 * 14
    difference = basketball_cost - baseball_cost
    return difference

 Executed result: 85
[EXP] 626: [success_rate]: False, [answer]: 160, [output]: def solution():

 Executed result: None
[EXP] 627: [success_rate]: True, [answer]: 72, [output]: def solution():
    seconds_in_hour = 3600
    speed_in_kb = 20
    speed_in_mb_per_second = speed_in_kb / 1000
    speed_in_mb_per_hour = speed_in_mb_per_second * seconds_in_hour
    return speed_in_mb_per_hour

 Executed result: 72.0
[EXP] 628: [success_rate]: True, [answer]: 54, [output]: def solution():
    total_cars = (10 * 3) + (10 - 4) * 4
    return total_cars

 Executed result: 54
[EXP] 629: [success_rate]: True, [answer]: 4, [output]: def solution():
    height_in_feet = 4
    height_in_inches = 12 * height_in_feet
    adam_height = 40
    growth_rate = 2
    years = (height_in_inches - adam_height) // growth_rate
    return years

 Executed result: 4
[EXP] 630: [success_rate]: True, [answer]: 17500, [output]: def solution():
    revenue = 10 * 25000
    cost = revenue * 0.30
    profit = revenue - cost
    commission = profit * 0.10
    return commission

 Executed result: 17500.0
[EXP] 631: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_riders = 100
    percentage_upright = 0.25
    percentage_women = 0.6
    total_upright = int(total_riders * percentage_upright)
    women_upright = int(total_upright * percentage_women)
    men_upright = total_upright - women_upright
    return men_upright

 Executed result: 10
[EXP] 632: [success_rate]: True, [answer]: 4800, [output]: def solution():
    diamond_price = 2000
    gold_price = 4/5 * diamond_price
    silver_price = gold_price - 400
    return diamond_price + gold_price + silver_price

 Executed result: 4800.0
[EXP] 633: [success_rate]: True, [answer]: 45, [output]: def solution():
    snowflakes = 16
    trucks = snowflakes + 3
    roses = trucks - 9
    total = snowflakes + trucks + roses
    return total

 Executed result: 45
[EXP] 634: [success_rate]: True, [answer]: 5, [output]: def solution():
    bob_distance = 75
    bob_speed = 55
    tom_speed = 70
    time = (bob_distance / (bob_speed - tom_speed))
    return time

 Executed result: -5.0
[EXP] 635: [success_rate]: True, [answer]: 14, [output]: def solution():
    naomi_catched = 17
    darren_catched = naomi_catched - 6
    tommy_catched = darren_catched + 3
    return tommy_catched

 Executed result: 14
[EXP] 636: [success_rate]: False, [answer]: 4, [output]: def solution():
    total_cost = 10
    cost_per_class = 60 / 10
    cost_per_missing_class = cost_per_class - 10
    total_missing_classes = 0
    for i in range(1, 10):
        if (i * cost_per_missing_class) > total_cost:
            total_missing_classes = i - 1
            break
    return total_missing_classes

 Executed result: 0
[EXP] 637: [success_rate]: True, [answer]: 1050, [output]: def solution():
    jewel_production = 50 * 7
    juliie_production = jewel_production * 2
    total_production = jewel_production + juliie_production
    return total_production

 Executed result: 1050
[EXP] 638: [success_rate]: False, [answer]: 17, [output]: def solution():
    p = 4
    r = p * 5 + 3
    l = r - 3
    return l

 Executed result: 20
[EXP] 639: [success_rate]: True, [answer]: 12, [output]: def solution():
    cost_per_apple = 5.20 / 4
    cost_per_orange = 3.30 / 3
    total_cost_apples = cost_per_apple * 5
    total_cost_oranges = cost_per_orange * 5
    total_cost = total_cost_apples + total_cost_oranges
    return total_cost

 Executed result: 12.0
[EXP] 640: [success_rate]: True, [answer]: 216, [output]: def solution():
    volume = 6 * 4 * 3
    time_per_cubic_foot = 3
    total_time = volume * time_per_cubic_foot
    return total_time

 Executed result: 216
[EXP] 641: [success_rate]: False, [answer]: 43,500, [output]: def solution():
    base_price = 30000
    driver_upgrade = 7500
    leather_seats = driver_upgrade // 3
    running_boards = leather_seats - 500
    exterior_light_package = 1500
    total_cost = base_price + driver_upgrade + leather_seats + running_boards + exterior_light_package
    return total_cost

 Executed result: 43500
[EXP] 642: [success_rate]: False, [answer]: 262500, [output]: def solution():
    salary = 20000
    raise_percentage = 0.05
    bonus = salary / 2
    new_salary = salary * (1 + raise_percentage)
    total_annual_salary = new_salary * 12 + bonus * 12
    return total_annual_salary

 Executed result: 372000.0
[EXP] 643: [success_rate]: False, [answer]: 10,800, [output]: def solution():
    cost_suit = 750
    cost_pant = cost_suit / 5
    dress_shirt = 60
    total_suits = 10
    total_pants = 10
    total_shirts = total_suits * 3
    total_cost = total_suits * cost_suit + total_pants * cost_pant + total_shirts * dress_shirt
    return total_cost

 Executed result: 10800.0
[EXP] 644: [success_rate]: False, [answer]: 840, [output]: def solution():

 Executed result: None
[EXP] 645: [success_rate]: True, [answer]: 29, [output]: def solution():
    steve_age = 60
    wife_age = steve_age + 4
    son_age = wife_age / 2
    son_wife_age = son_age - 3
    return son_wife_age

 Executed result: 29.0
[EXP] 646: [success_rate]: True, [answer]: 48, [output]: def solution():
    portions_per_bag = 8
    kilograms_per_portion = 2
    bags = 3
    total_flour = kilograms_per_portion * portions_per_bag * bags
    return total_flour

 Executed result: 48
[EXP] 647: [success_rate]: True, [answer]: 79, [output]: def solution():
    alisa_distance = 12 * 4.5
    stanley_distance = 10 * 2.5
    total_distance = alisa_distance + stanley_distance
    return total_distance

 Executed result: 79.0
[EXP] 648: [success_rate]: True, [answer]: 10, [output]: def solution():
    soil_time = 24 / 4  # 24 feet of soil, takes 6 hours to dig
    clay_time = 8 / 2  # 8 feet of clay, takes 4 hours to dig
    total_time = soil_time + clay_time
    return total_time

 Executed result: 10.0
[EXP] 649: [success_rate]: True, [answer]: 54, [output]: def solution():
    total_cupcakes = 2 * (1 + 1 + 25)
    return total_cupcakes

 Executed result: 54
[EXP] 650: [success_rate]: True, [answer]: 162000, [output]: def solution():
    initial_likes = 2000
    new_likes = 20000
    three_weeks = 70 * 2000
    total_likes = initial_likes + three_weeks + new_likes
    return total_likes

 Executed result: 162000
[EXP] 651: [success_rate]: True, [answer]: 142, [output]: def solution():
    price1 = 20 * 20 - 2
    price2 = (30 * 20) * 0.9
    return abs(price1 - price2)

 Executed result: 142.0
[EXP] 652: [success_rate]: False, [answer]: 2100, [output]: def solution():
    red_sales = 400
    green_sales = red_sales * 2
    total_sales_first_month = green_sales
    total_sales_second_month = total_sales_first_month * 3/4
    return red_sales + green_sales + total_sales_second_month

 Executed result: 1800.0
[EXP] 653: [success_rate]: False, [answer]: 75, [output]: def solution():
    start_time = 5
    end_time = 9
    free_time = 1
    
    paid_time = end_time - start_time - free_time
    
    price = 15 * 2 ** (paid_time - 1)
    
    return price

 Executed result: 60
[EXP] 654: [success_rate]: True, [answer]: 80, [output]: def solution():
    salary = 300
    total = 420
    initial = 200
    withheld = salary - (total - initial)
    return withheld

 Executed result: 80
[EXP] 655: [success_rate]: True, [answer]: 2, [output]: def solution():
    deviled_eggs_per_guest = 3
    guests = 16
    deviled_eggs_total = deviled_eggs_per_guest * guests
    eggs_needed = deviled_eggs_total / 2
    egg_dozens_needed = eggs_needed / 12
    return int(egg_dozens_needed)

 Executed result: 2
[EXP] 656: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_pages = 15
    done_pages = total_pages // 3
    remaining_pages = total_pages - done_pages
    return remaining_pages

 Executed result: 10
[EXP] 657: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_pages = 200
    pages_per_day = 10
    days = 0
    current_pages = 0
    while current_pages < total_pages:
        current_pages += pages_per_day
        days += 1
    return days - 30

 Executed result: -10
[EXP] 658: [success_rate]: False, [answer]: 330000, [output]: def solution():
    plane_cost = 150000
    hanger_per_month = 5000
    fuel_per_month = 2 * hanger_per_month
    total_per_month = plane_cost + hanger_per_month + fuel_per_month
    total_for_year = total_per_month * 12
    return total_for_year

 Executed result: 1980000
[EXP] 659: [success_rate]: True, [answer]: 120, [output]: def solution():
    rice = 30
    pork = rice + 20
    beans = (rice + pork) / 2
    total_time = rice + pork + beans
    return total_time

 Executed result: 120.0
[EXP] 660: [success_rate]: True, [answer]: 3, [output]: def solution():
    cost_almonds = 10
    cost_walnuts = 15
    
    half_pound_almonds = 0.5 * cost_almonds
    one_third_pound_walnuts = 0.33 * cost_walnuts
    
    fifth_pound_almonds = 0.2 * cost_almonds
    third_pound_walnuts = one_third_pound_walnuts
    
    mixed_cost1 = half_pound_almonds + one_third_pound_walnuts
    mixed_cost2 = fifth_pound_almonds + third_pound_walnuts
    
    return mixed_cost1 - mixed_cost2

 Executed result: 2.999999999999999
[EXP] 661: [success_rate]: False, [answer]: 15, [output]: def solution():
    sheep_heads_and_legs = 70
    heads = 20
    sheep_heads = heads - 1
    sheep = sheep_heads // 1
    return sheep

 Executed result: 19
[EXP] 662: [success_rate]: True, [answer]: 44, [output]: def solution():
    normal_price = 5
    expensive_price = normal_price * 1.20
    coffee_per_week = 1 * 7
    coffee_cost = coffee_per_week * expensive_price
    donut_cost = 2
    total_cost = coffee_cost + donut_cost
    return total_cost

 Executed result: 44.0
[EXP] 663: [success_rate]: False, [answer]: 7, [output]: def solution():

 Executed result: None
[EXP] 664: [success_rate]: False, [answer]: 193, [output]: def solution():

 Executed result: None
[EXP] 665: [success_rate]: True, [answer]: 32, [output]: def solution():
    total_class_time = 4 * 2 * 6 * 60  # Calculate total class time in minutes
    total_class_time /= 60  # Convert total class time to hours
    recipes_learned = total_class_time // 1.5  # Calculate total recipes learned
    return recipes_learned

 Executed result: 32.0
[EXP] 666: [success_rate]: True, [answer]: 360, [output]: def solution():
    total_teachers = 150
    history_teachers = total_teachers * 0.6
    math_teachers = total_teachers - history_teachers
    total_sleeping_time = math_teachers * 6
    return total_sleeping_time

 Executed result: 360.0
[EXP] 667: [success_rate]: True, [answer]: 120, [output]: def solution():
    aurelia_money = 120
    kassidy_money = aurelia_money * (3/4)
    rayna_money = kassidy_money + 60
    
    total_money = aurelia_money + kassidy_money + rayna_money
    equal_parts = total_money / 3
    
    return equal_parts

 Executed result: 120.0
[EXP] 668: [success_rate]: True, [answer]: 53, [output]: def solution():
    quarter_length = 12
    total_lengths = 4 * quarter_length
    extension_time = 5
    total_duration = total_lengths + extension_time
    return total_duration

 Executed result: 53
[EXP] 669: [success_rate]: True, [answer]: 3, [output]: def solution():
    total_employees = 50
    total_management = 0.2 * total_employees
    overseas_management = 0.3 * total_management
    return int(overseas_management)

 Executed result: 3
[EXP] 670: [success_rate]: False, [answer]: 132, [output]: def solution():
    flour = 5
    sugar = 3
    dry_ingredients_per_muffin = flour + sugar
    total_dry_ingredients = dry_ingredients_per_muffin * 16
    return total_dry_ingredients

 Executed result: 128
[EXP] 671: [success_rate]: True, [answer]: 4, [output]: def solution():
    total_candy = 3 + 5 + 4
    equal_candy = total_candy / len([3, 5, 4])
    return equal_candy

 Executed result: 4.0
[EXP] 672: [success_rate]: False, [answer]: 4, [output]: def solution():

 Executed result: None
[EXP] 673: [success_rate]: False, [answer]: 2, [output]: def solution():
    total_good_days = 12
    total_days = 30
    if (good_days := 8) < total_good_days:
        total_good_days -= good_days
    if (bad_days := 8) < total_good_days:
        total_good_days -= bad_days
    if (neutral_days := total_days - good_days - bad_days) < 3:
        return total_good_days

 Executed result: None
[EXP] 674: [success_rate]: True, [answer]: 9, [output]: def solution():
    janey_book = 21
    sally_book = (janey_book - 3) / 2
    return sally_book

 Executed result: 9.0
[EXP] 675: [success_rate]: True, [answer]: 12, [output]: def solution():
    current_height = 20 * 12  # convert feet to inches
    target_height = 600
    growth_rate = 30
    days = (target_height - current_height) / growth_rate
    return int(days) + 1  # add 1 because the bamboo grows each day

 Executed result: 13
[EXP] 676: [success_rate]: False, [answer]: 33, [output]: def solution():
    toys_on_hand = 4
    dogs_initial = 4
    dogs_additional = 8
    dogs_total = dogs_initial + dogs_additional
    dogs_again = dogs_total * 2
    dogs_gone = dogs_total + dogs_again - 3
    toys_total = toys_on_hand + dogs_total + dogs_again - dogs_gone
    return toys_total

 Executed result: 7
[EXP] 677: [success_rate]: True, [answer]: 240, [output]: def solution():
    total = 1200
    dylan_investment = total * 2/5
    remaining = total - dylan_investment
    frances_investment = remaining * 2/3
    skyler_investment = remaining - frances_investment
    return skyler_investment

 Executed result: 240.0
[EXP] 678: [success_rate]: True, [answer]: 36, [output]: def solution():
    signatures_c = 20
    signatures_j = 44
    total_signatures = signatures_c + signatures_j
    total_signatures_goal = 100
    signatures_left_c = total_signatures_goal - total_signatures
    return signatures_left_c

 Executed result: 36
[EXP] 679: [success_rate]: True, [answer]: 120, [output]: def solution():
    lorie_hourly_rate = 10
    karen_hourly_rate = 2 * lorie_hourly_rate
    karen_daily_earnings = karen_hourly_rate * 3
    karen_total_earnings = karen_daily_earnings * 2
    return karen_total_earnings

 Executed result: 120
[EXP] 680: [success_rate]: True, [answer]: 576, [output]: def solution():
    potato_ratio = 6 / 36
    hash_browns_per_potato = 1 / potato_ratio
    return 96 * hash_browns_per_potato

 Executed result: 576.0
[EXP] 681: [success_rate]: True, [answer]: 20, [output]: def solution():
    total_weight = (8 * 80) + 1*80
    exceeded_load = total_weight - 700
    return exceeded_load

 Executed result: 20
[EXP] 682: [success_rate]: False, [answer]: 298, [output]: def solution():
    cookie_monster_cookies = x 
    max_cookies = cookie_monster_cookies + 12
    katarina_cookies = max_cookies - 5
    summer_cookies = max_cookies + 23
    total_cookies = cookie_monster_cookies + max_cookies + katarina_cookies + summer_cookies
    return total_cookies

 Executed result: None
[EXP] 683: [success_rate]: False, [answer]: 80, [output]: def solution():
    original_length = (final_length - extension) / 1.5
    solution = original_length - 20
    return solution

 Executed result: None
[EXP] 684: [success_rate]: False, [answer]: 50, [output]: def solution():
    turtle_time = 60  # in minutes
    rabbit_time = 40  # in minutes
    total_lawn = 2 * turtle_time  # in minutes
    half_lawn = total_lawn / 2  # in minutes
    turtle_half = half_lawn / turtle_time  # number of hours in turtle mode
    time_taken =  turtle_half * turtle_time + (0.5 - turtle_half) * rabbit_time
    return round(time_taken)  # in minutes

 Executed result: 40
[EXP] 685: [success_rate]: True, [answer]: 11, [output]: def solution():
    time_to_library = 6
    time_to_fire_station = 13
    total_time = time_to_library + time_to_fire_station
    time_left = 30 - total_time
    return time_left

 Executed result: 11
[EXP] 686: [success_rate]: True, [answer]: 14, [output]: def solution():
    total = (4) + (2 * 2) + (2 * 3)
    return total

 Executed result: 14
[EXP] 687: [success_rate]: True, [answer]: 80, [output]: def solution():
    greta_cookies = 30
    celinda_cookies = 2 * greta_cookies
    total_cookies = greta_cookies + celinda_cookies
    eaten_cookies = 10
    cookies_in_box = total_cookies - eaten_cookies
    return cookies_in_box

 Executed result: 80
[EXP] 688: [success_rate]: False, [answer]: 13, [output]: def solution():
    triplet = (x for x in range(11) if (x+7+x) < 44)
    for x in triplet:
        twin_age = 44 - 2*x - 7
        if twin_age > 0:
            return twin_age

 Executed result: 37
[EXP] 689: [success_rate]: True, [answer]: 100, [output]: def solution():
    total_homework = 20 + 40 + 20
    time_before_dinner = 3 * 60  # 3 hours equals 3 x 60 = 180 minutes
    nap_time = time_before_dinner - total_homework
    return nap_time

 Executed result: 100
[EXP] 690: [success_rate]: False, [answer]: 7, [output]: def solution():
    total_Spent = 3.20
    lollipop_Price = 0.40
    num_Lollipops = 5
    
    lollipop_Cost = num_Lollipops * lollipop_Price
    candy_Price = total_Spent - lollipop_Cost

    new_Lollipop_Cost = lollipop_Price * 10
    new_Candy_Price = candy_Price
    new_Total = new_Lollipop_Cost + new_Candy_Price
    
    return round(new_Total, 2)

 Executed result: 5.2
[EXP] 691: [success_rate]: True, [answer]: 5760, [output]: def solution():
    Rong_save = 20 * 12 * 10
    Neil_save = Rong_save * 1.4
    total_save = Rong_save + Neil_save
    return round(total_save)

 Executed result: 5760
[EXP] 692: [success_rate]: False, [answer]: 25, [output]: def solution():
    total_bill = 2 * 20 + 0.6 * (2 * 20)
    change = 125 - total_bill
    return change

 Executed result: 61.0
[EXP] 693: [success_rate]: True, [answer]: 32, [output]: def solution():
    banana_price = 2 * 0.5  # banana price is twice the apple price
    orange_price = 3 * banana_price  # orange price is three times the banana price
    total_price = (5 * banana_price) + (12 * 0.5) + (7 * orange_price)
    return total_price

 Executed result: 32.0
[EXP] 694: [success_rate]: True, [answer]: 68, [output]: def solution():
    red = 14
    blue = red + 4
    green = blue + 6
    white = green - 12
    total_squares = red + blue + green + white
    total_square_feet = total_squares * 1 * 1  # each square is 1 foot by 1 foot
    return total_square_feet

 Executed result: 68
[EXP] 695: [success_rate]: False, [answer]: 9, [output]: def solution():
    total_chairs_needed = 42 + 15
    regular_chairs_needed = total_chairs_needed - 15
    regular_chairs_already_have = 8 * 5
    chairs_needed = regular_chairs_needed - regular_chairs_already_have
    return chairs_needed

 Executed result: 2
[EXP] 696: [success_rate]: True, [answer]: 5, [output]: def solution():
    deer = 50
    bucks = (50/100) * deer
    eight_point_bucks = (20/100) * bucks
    return eight_point_bucks

 Executed result: 5.0
[EXP] 697: [success_rate]: False, [answer]: 145, [output]: def solution():
    ad = 50
    be = ad + (ad * 0.3)
    ma = be + (be - 30)
    to = be - 30
    total_points = ad + be + ma + to
    missing_points = 400 - total_points
    return missing_points

 Executed result: 150.0
[EXP] 698: [success_rate]: False, [answer]: 27, [output]: def solution():
    count = 3  # great-grandma Jones
    for _ in range(3):
        count += 3  # her children
    for _ in range(3):
        count += 3  # her grandchildren
    for _ in range(3):
        count += 3  # her great-grandchildren
    return count

 Executed result: 30
[EXP] 699: [success_rate]: True, [answer]: 720, [output]: def solution():
    paycheck = 2400.00
    retirement = paycheck * 0.5
    car_payment = paycheck * 0.2
    remaining = paycheck - retirement - car_payment
    return remaining

 Executed result: 720.0
[EXP] 700: [success_rate]: True, [answer]: 8, [output]: def solution():
    total_pencils = 20 - 4
    pairs = total_pencils // 2
    return pairs

 Executed result: 8
[EXP] 701: [success_rate]: True, [answer]: 135, [output]: def solution():
    total_fireworks = 15 * 20
    hanhans_seeing = int(0.40 * total_fireworks)
    hanhans_showing = 3 * 5
    total_hannah_sees = hanhans_seeing + hanhans_showing
    return total_hannah_sees

 Executed result: 135
[EXP] 702: [success_rate]: False, [answer]: 200, [output]: def solution():
    total_drinks = (20) * 2
    total_snacks = (20) * 3
    total_cost = total_drinks + total_snacks
    return total_cost

 Executed result: 100
[EXP] 703: [success_rate]: True, [answer]: 2800, [output]: def solution():
    gissela_truck = 4000
    gordy_truck = gissela_truck + 800
    gary_truck = 11600 - gissela_truck - gordy_truck
    return gary_truck

 Executed result: 2800
[EXP] 704: [success_rate]: False, [answer]: 50, [output]: def solution():

 Executed result: None
[EXP] 705: [success_rate]: False, [answer]: 50, [output]: def solution():
    total_money = 100
    gerald_ratio = 3
    sppent_money = 10
    jerrey_left = (total_money * gerald_ratio) - sppent_money
    return jerrey_left

 Executed result: 290
[EXP] 706: [success_rate]: True, [answer]: 120, [output]: def solution():
    cat_speed = 15
    turtle_speed = cat_speed / 5
    turtle_distance = turtle_speed * 40
    return turtle_distance

 Executed result: 120.0
[EXP] 707: [success_rate]: False, [answer]: 9, [output]: def solution():
    total_goal = 6300
    current_earned = 2100
    hours_so_far = 3
    hours_left = (total_goal - current_earned) / (total_goal / hours_so_far)
    return hours_left

 Executed result: 2.0
[EXP] 708: [success_rate]: False, [answer]: 8, [output]: def solution():
    water_used_by_city = 0.4
    water_used_industrially = 0.8
    water_used_non_industrially = water_used_by_city - water_used_industrially
    percentage_used_non_industrially = water_used_non_industrially / water_used_by_city * 100
    return percentage_used_non_industrially

 Executed result: -100.0
[EXP] 709: [success_rate]: True, [answer]: 168, [output]: def solution():
    days_per_week = 7
    weeks = 2
    day_rate = 12
    total_charge = (days_per_week * day_rate) * weeks
    return total_charge

 Executed result: 168
[EXP] 710: [success_rate]: True, [answer]: 3000, [output]: def solution():
    chocolate_quarts = 100
    chocolate_hours = 2
    vanilla_quarts = 50
    vanilla_hours = 4
    total_chocolate_quarts = (chocolate_quarts / chocolate_hours) * 48
    total_vanilla_quarts = (vanilla_quarts / vanilla_hours) * 48
    total_quarts = total_chocolate_quarts + total_vanilla_quarts
    return total_quarts

 Executed result: 3000.0
[EXP] 711: [success_rate]: True, [answer]: 45, [output]: def solution():
    croissant = 5 * 3.00
    cinnamon_rolls = 4 * 2.50
    mini_quiches = 3 * 4.00
    blueberry_muffins = 13 * 1.00
    total_before_discount = croissant + cinnamon_rolls + mini_quiches + blueberry_muffins
    total_discount = total_before_discount * 0.10
    total = total_before_discount - total_discount
    return total

 Executed result: 45.0
[EXP] 712: [success_rate]: False, [answer]: 6, [output]: def solution():
    total_cost = 6.00
    cost_per_scoop = 1.50
    free_scoop_value = 2 * cost_per_scoop
    total_scoops = total_cost // cost_per_scoop
    total_scoops = (total_scoops // 3) * 3  # floors division to get the maximum number of scoops
    return total_scoops

 Executed result: 3.0
[EXP] 713: [success_rate]: True, [answer]: 14, [output]: def solution():
    ginger = 100
    amy = 100
    for day in range(14):
        ginger -= 4
        amy -= 3
    return amy - ginger

 Executed result: 14
[EXP] 714: [success_rate]: True, [answer]: 576, [output]: def solution():
    area = 36 * 2 / 3
    tiles_needed = area * 24
    return tiles_needed

 Executed result: 576.0
[EXP] 715: [success_rate]: True, [answer]: 10, [output]: def solution():
    cost_per_pound = 1.5
    pounds_picked = 30
    total_cost_at_pick = 20 + cost_per_pound * pounds_picked
    cost_at_store = 2.5 * pounds_picked
    total_savings = cost_at_store - total_cost_at_pick
    return total_savings

 Executed result: 10.0
[EXP] 716: [success_rate]: True, [answer]: 385000, [output]: def solution():
    planned_price = 700
    price_increase = planned_price * 0.1
    new_price = planned_price + price_increase
    total_amount = new_price * 500
    return total_amount

 Executed result: 385000.0
[EXP] 717: [success_rate]: True, [answer]: 770, [output]: def solution():
    egg_calories = 6 * 75
    cheese_calories = 2 * 120
    ham_calories = 2 * 40
    total_calories = egg_calories + cheese_calories + ham_calories
    return total_calories

 Executed result: 770
[EXP] 718: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_cost = (0.5 * 6) + (0.25 * 8)
    change = 10 - total_cost
    return change

 Executed result: 5.0
[EXP] 719: [success_rate]: True, [answer]: 2, [output]: def solution():
    applicants = 100
    interviews = 0.3 * applicants
    offers = 0.2 * interviews
    accepted = 1.0/3 * offers
    return int(accepted)

 Executed result: 2
[EXP] 720: [success_rate]: True, [answer]: 175, [output]: def solution():
    total_rice_kg = 20 * 25
    bag_for_cousin_brother = 3 + 4
    bag_kg = bag_for_cousin_brother * 25
    return bag_kg

 Executed result: 175
[EXP] 721: [success_rate]: True, [answer]: 4, [output]: def solution():
    coco_corn_boxes = 3
    fruit_loops_boxes = 5
    last_week_boxes = 4
    this_week_boxes = coco_corn_boxes + fruit_loops_boxes
    difference = this_week_boxes - last_week_boxes
    return difference

 Executed result: 4
[EXP] 722: [success_rate]: False, [answer]: 2450, [output]: def solution():
    total_minutes = 5
    raised_minutes = 2
    total_taps = (total_minutes - raised_minutes) * 300 * 2 + raised_minutes * 200 * 2
    return total_taps

 Executed result: 2600
[EXP] 723: [success_rate]: True, [answer]: 255, [output]: def solution():
    damage_cost = 450
    fine = 120
    asphalt_cost = 3 * 25
    total_cost_if_not_fixed = damage_cost + fine + asphalt_cost
    total_cost_if_fixed = fine + asphalt_cost
    saved_amount = damage_cost - total_cost_if_fixed
    returnsaved_amount

 Executed result: 255
[EXP] 724: [success_rate]: True, [answer]: 160, [output]: def solution():
    normal_chairs = 170 - 20
    baby_chairs = 23 - 13
    total_chairs = normal_chairs + baby_chairs
    return total_chairs

 Executed result: 160
[EXP] 725: [success_rate]: False, [answer]: 18, [output]: def solution():
    total_friends = 5  # Bryce's friends
    friends_who_aTE_23 = 3  # 2 friends + 1 for Bryce
    friends_who_aTE_3_4 = 2  # remaining 2 friends
    slices_per_friend = 12  # slices per pizza
    friends_sliced_23 = friends_who_aTE_23 * (2/3) * slices_per_friend * 4  # 2/3 + 2/3 for Bryce
    friends_sliced_34 = friends_who_aTE_3_4 * (3/4) * slices_per_friend * 2  # ¾ for each of remaining 2 friends
    total_slices_eaten = friends_sliced_23 + friends_sliced_34
    total_slices_initial = total_friends * slices_per_friend * 4  # total slices initially
    total_slices_left = total_slices_initial - total_slices_eaten
    return total_slices_left

 Executed result: 108.0
[EXP] 726: [success_rate]: True, [answer]: 25, [output]: def solution():
    cat_time = 30
    dog_time = cat_time * (2/3)
    total_time = (cat_time + dog_time) / 2
    return total_time

 Executed result: 25.0
[EXP] 727: [success_rate]: False, [answer]: 10, [output]: def solution():
    bobbys_shoe_length = (88+4)-10-9*(12)
    return int(bobbys_shoe_length)

 Executed result: -26
[EXP] 728: [success_rate]: True, [answer]: 112, [output]: def solution():
    student_windows = 64 * 4
    teachers_windows = 32 * 2
    total_windows = student_windows + teachers_windows
    student_smash = student_windows // 4
    teacher_smash = teachers_windows * 3 // 4
    total_smash = student_smash + teacher_smash
    return total_smash

 Executed result: 112
[EXP] 729: [success_rate]: True, [answer]: 40, [output]: def solution():
    total_threads = 15 + 45 + 40 + 50
    total_blue_threads = 15 + 45
    blue_percent = (total_blue_threads / total_threads) * 100
    return blue_percent

 Executed result: 40.0
[EXP] 730: [success_rate]: True, [answer]: 1000, [output]: def solution():
    total_people = 5000
    voted_midday = int(total_people * 2 / 5)
    remaining_people = total_people - voted_midday
    voted_1600 = int((remaining_people * 2) / 3)
    not_voted = remaining_people - voted_1600
    return not_voted

 Executed result: 1000
[EXP] 731: [success_rate]: True, [answer]: 8, [output]: def solution():
    pieces_eaten_per_day = 4
    days_needed = 30
    pieces_per_pack = 15
    total_pieces_needed = pieces_eaten_per_day * days_needed
    packs_needed = total_pieces_needed // pieces_per_pack
    remaining_pieces = total_pieces_needed % pieces_per_pack
    if remaining_pieces > 0:
        packs_needed += 1
    return packs_needed

 Executed result: 8
[EXP] 732: [success_rate]: True, [answer]: 1, [output]: def solution():
    kid_smores = 9 * 2
    adult_smores = 6 * 1
    total_smores = kid_smores + adult_smores
    boxes_needed = (total_smores // 24)
    return boxes_needed

 Executed result: 1
[EXP] 733: [success_rate]: True, [answer]: 87, [output]: def solution():
    dora_age = 15
    dad_age = 2*dora_age + 8
    mom_age = dad_age - 4
    
    total_age = dora_age + dad_age + mom_age
    return total_age

 Executed result: 87
[EXP] 734: [success_rate]: False, [answer]: 5, [output]: def solution():
    money = 20
    siblings = 3
    share = money / siblings
    return share

 Executed result: 6.666666666666667
[EXP] 735: [success_rate]: True, [answer]: 17, [output]: def solution():
    weight_math = 2
    weight_science = 2
    weight_french = 4
    weight_english = 3
    weight_history = 2 * 3
    total_weight = weight_math + weight_science + weight_french + weight_english + weight_history
    return total_weight

 Executed result: 17
[EXP] 736: [success_rate]: True, [answer]: 50, [output]: def solution():
    a = 20  # percentage of votes for A
    b = a + (a * 50 / 100)  # percentage of votes for B
    c = 100 - a - b  # percentage of votes for C
    votes_c = (c / 100) * 100  # calculate votes for C
    return int(votes_c)

 Executed result: 50
[EXP] 737: [success_rate]: True, [answer]: 3, [output]: def solution():
    b_apples = 100
    bck_apples = b_apples - 23
    b_apples -= 10
    bck_apples += 10
    return bck_apples - b_apples

 Executed result: -3
[EXP] 738: [success_rate]: True, [answer]: 2, [output]: def solution():
    total_ounces = 32
    giant_ounces = 3 * 4
    medium_ounces = 7 * 2
    small_ounces = 8 * 0.5
    total_used_ounces = giant_ounces + medium_ounces + small_ounces
    leftover_ounces = total_ounces - total_used_ounces
    return leftover_ounces

 Executed result: 2.0
[EXP] 739: [success_rate]: False, [answer]: 4, [output]: def solution():
    a = steven + 6
    c = steven * 2
    return c - a

 Executed result: None
[EXP] 740: [success_rate]: False, [answer]: 98, [output]: def solution():
    half_gallon_price = 5 - 2
    total_half_gallon = half_gallon_price * 16
    total_gallon = 5 * 10
    total_failt_cost = total_gallon + total_half_gallon
    return total_cost

 Executed result: None
[EXP] 741: [success_rate]: True, [answer]: 25, [output]: def solution():
    basketball_players = 5
    music_players = 2 * basketball_players
    video_game_players = 50 - 10 - basketball_players - music_players
    return video_game_players

 Executed result: 25
[EXP] 742: [success_rate]: True, [answer]: 28, [output]: def solution():
    birds = 12
    birds_scared = int(birds * 1/3)
    birds_left = birds - birds_scared
    birds_total = birds_left + 20
    return birds_total

 Executed result: 28
[EXP] 743: [success_rate]: True, [answer]: 24, [output]: def solution():
    total_students = 80
    ratio_girls = 0.4
    total_girls = total_students * ratio_girls
    total_boys = total_students - total_girls
    class_students = total_students // 2
    boys_per_class = total_boys // 2
    return boys_per_class

 Executed result: 24.0
[EXP] 744: [success_rate]: True, [answer]: 8, [output]: def solution():
    total_slices = 2 + 3  # initial slices
    sliced_triple = total_slices * 3  # triple the slices
    slices_aft_eating = sliced_triple - 2  # eat 2 slices
    slices_aft_stolen = slices_aft_eating - 5  # stolen slices
    return slices_aft_stolen

 Executed result: 8
[EXP] 745: [success_rate]: True, [answer]: 4, [output]: def solution():
    total_animals = 8 + 5 + 3 + 12
    number_of_days = 7
    animals_per_day = total_animals / number_of_days
    return animals_per_day

 Executed result: 4.0
[EXP] 746: [success_rate]: True, [answer]: 1100, [output]: def solution():
    pack_cost = 1800
    packs = 3
    pack_total_cost = pack_cost * packs
    value_of_cards = 4000 + 1000 + 30 * 50
    total_profit = value_of_cards - pack_total_cost
    return total_profit

 Executed result: 1100
[EXP] 747: [success_rate]: False, [answer]: 28, [output]: def solution():

 Executed result: None
[EXP] 748: [success_rate]: False, [answer]: 350, [output]: def solution():
    cost_per_tomato_per_day = 0.5 - 0.4
    number_of_tomatoes = 500
    cost_per_day = cost_per_tomato_per_day * number_of_tomatoes
    return cost_per_day

 Executed result: 49.999999999999986
[EXP] 749: [success_rate]: True, [answer]: 336, [output]: def solution():
    sean_marbles = 56
    cal_marbles = sean_marbles * 2
    carl_marbles = sean_marbles * 4
    total_marbles = cal_marbles + carl_marbles
    return total_marbles

 Executed result: 336
[EXP] 750: [success_rate]: False, [answer]: 3, [output]: def solution():
    needed_groups = 54 // 6
    total_required_groups = needed_groups * 12
    needed_more_groups = total_required_groups - 54
    return needed_more_groups

 Executed result: 54
[EXP] 751: [success_rate]: True, [answer]: 4000, [output]: def solution():
    total_chairs = 0
    for _ in range(2):  # 2 months
        for _ in range(4):  # 4 weeks
            for _ in range(5):  # 5 weekdays
                total_chairs += 60
            total_chairs += 100 * 2  # weekend
    return total_chairs

 Executed result: 4000
[EXP] 752: [success_rate]: True, [answer]: 43, [output]: def solution():
    bananas = 48
    bananas -= 48 // 2  # Arnold stole 24 bananas
    bananas += 25  # Gunther added 25 bananas
    bananas -= 12  # Arnold stole 12 bananas
    bananas += 6  # Gunther added 6 bananas
    return bananas

 Executed result: 43
[EXP] 753: [success_rate]: False, [answer]: 240, [output]: def solution():
    total_bill = 12 * 100  # total bill for a year
    num_roommates = 4
    share_per_roommate = total_bill / num_roommates
    return share_per_roommate

 Executed result: 300.0
[EXP] 754: [success_rate]: False, [answer]: 128, [output]: def solution():
    # Convert dozen to number of items
    glasses_dozen = 8
    plates_dozen = 4
    
    # Convert dozen to number of items
    glasses = glasses_dozen * 12
    plates = plates_dozen * 12
    
    # Calculate broken glasses and plates
    broken_glasses = 10
    broken_plates = 6
    
    # Calculate the total remaining items
    remaining_glasses = glasses - broken_glasses
    remaining_plates = plates - broken_plates
    
    # Return the result
    return remaining_glasses, remaining_plates

 Executed result: (86, 42)
[EXP] 755: [success_rate]: False, [answer]: 89, [output]: def solution():
    small_stickers = 30
    large_stickers = 40
    
    # convert 90% of small stickers to buttons
    small_buttons = int(small_stickers * 0.9)
    buttons = 0
    for i in range(small_buttons):
        buttons += 1

    # convert 50% of large stickers to buttons
    large_buttons = int(large_stickers * 0.5)
    buttons += large_buttons * 1
    
    # convert remaining large stickers to small buttons
    small_buttons += 10
    buttons += small_buttons * 3
    
    return int(buttons)

 Executed result: 158
[EXP] 756: [success_rate]: True, [answer]: 7, [output]: def solution():
    monday_matches = 2
    saturday_matches = 2 * monday_matches
    total_matches = monday_matches + 1 + saturday_matches
    return total_matches

 Executed result: 7
[EXP] 757: [success_rate]: False, [answer]: 22, [output]: def solution():
    against_votes = int(input("Enter the number of votes against the regulation: "))
    favor_votes = against_votes * 2
    return favor_votes

 Executed result: None
[EXP] 758: [success_rate]: True, [answer]: 75, [output]: def solution():
    extra_small = 11
    small = extra_small * 2
    medium = small - 4
    large = medium // 2
    extra_large = large + 6
    total = extra_small + small + medium + large + extra_large
    return total

 Executed result: 75
[EXP] 759: [success_rate]: True, [answer]: 133, [output]: def solution():
    price = 140
    discount = price * 0.05
    final_price = price - discount
    return final_price

 Executed result: 133.0
[EXP] 760: [success_rate]: True, [answer]: 60000, [output]: 
def solution():
    num_playlists = 20
    songs_per_playlist = 300
    time_per_song = 10
    total_hours = num_playlists * songs_per_playlist * time_per_song
    return total_hours

 Executed result: 60000
[EXP] 761: [success_rate]: True, [answer]: 16, [output]: def solution():
    people = 50
    horse2 = 0.2 * people
    people -= horse2
    horse7 = 0.6 * people
    horse12 = people - horse7
    return horse12

 Executed result: 16.0
[EXP] 762: [success_rate]: False, [answer]: 27, [output]: def solution():
    Pomeranian_girls = 6
    total_pomeranians = Pomeranian_girls * 3
    total_puppies = total_pomeranians / 3 * 2
    return int(total_puppies)

 Executed result: 12
[EXP] 763: [success_rate]: True, [answer]: 85, [output]: def solution():
    initial_amount = 70
    sister_allowance = 90
    half_sister_allowance = sister_allowance / 2
    total_amount = initial_amount + half_sister_allowance
    camera_cost = 200
    amount_needed = camera_cost - total_amount
    return amount_needed

 Executed result: 85.0
[EXP] 764: [success_rate]: False, [answer]: 100, [output]: def solution():
    total_cases = 250
    second_house_cases = total_cases
    first_house_cases = second_house_cases / 2
    third_house_cases = first_house_cases * 2
    return third_house_cases

 Executed result: 250.0
[EXP] 765: [success_rate]: True, [answer]: 14, [output]: def solution():
    leila_cost = 3 * 2
    jack_cost = 5 * 1
    chase_cost = 3 * 1
    total_cost = leila_cost + jack_cost + chase_cost
    return total_cost

 Executed result: 14
[EXP] 766: [success_rate]: True, [answer]: 490, [output]: def solution():
    bananas = 200
    pears = (45 / 100) * bananas + bananas
    total_fruits = pears + bananas
    return total_fruits

 Executed result: 490.0
[EXP] 767: [success_rate]: True, [answer]: 12, [output]: def solution():
    money_before_ball = 80
    money_after_ball = money_before_ball - 20
    candy_bar_cost = 5
    number_of_candy_bars = money_after_ball // candy_bar_cost
    return number_of_candy_bars

 Executed result: 12
[EXP] 768: [success_rate]: True, [answer]: 60, [output]: def solution():
    total_oranges = 4 * 5
    total_cost = total_oranges * 3
    return total_cost

 Executed result: 60
[EXP] 769: [success_rate]: False, [answer]: 675, [output]: def solution():

 Executed result: None
[EXP] 770: [success_rate]: False, [answer]: 110, [output]: def solution():
    monday_classes = 4
    monday_hours = 5
    tursday_classes = 2
    tursday_hours = 2
    extra_classes = 1
    if monday_classes > 3:
        extra_classes += 1
    if tursday_classes > 3:
        extra_classes += 1
    total_hours = monday_hours + tursday_hours
    daily_earning = 15 * total_hours + extra_classes * 5
    return daily_earning * 2

 Executed result: 230
[EXP] 771: [success_rate]: True, [answer]: 4, [output]: def solution():
    vanilla_sales = 5 * 4
    fruity_sales = 2 * 8
    return vanilla_sales - fruity_sales

 Executed result: 4
[EXP] 772: [success_rate]: True, [answer]: 3, [output]: def solution():
    total_money = 20 * 3
    total_ears = 25
    remaining_money = 135 - total_money
    price_per_ear = remaining_money / total_ears
    return price_per_ear

 Executed result: 3.0
[EXP] 773: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_hours = 7 + 5
    reading_time = 3
    remaining_time = total_hours - reading_time
    video_games_time = remaining_time / 3
    soccer_time = total_hours - reading_time - video_games_time
    soccer_percentage = (soccer_time / total_hours) * 100
    return soccer_percentage

 Executed result: 50.0
[EXP] 774: [success_rate]: True, [answer]: 10, [output]: def solution():
    total = 50
    given_to_bradon = total // 2
    remaining = total - given_to_bradon
    given_to_charlie = remaining * 3 // 5
    left = remaining - given_to_charlie
    return left

 Executed result: 10
[EXP] 775: [success_rate]: True, [answer]: 10, [output]: def solution():
    driving_time = 150 / 75 + 150 / 75
    return driving_time + 6

 Executed result: 10.0
[EXP] 776: [success_rate]: True, [answer]: 276, [output]: def solution():
    total_wheels_needed = (57 * 4) + (73 * 2)
    total_wheels_in_box = 650
    total_wheels_left = total_wheels_in_box - total_wheels_needed
    return total_wheels_left

 Executed result: 276
[EXP] 777: [success_rate]: False, [answer]: 800, [output]: def solution():

 Executed result: None
[EXP] 778: [success_rate]: True, [answer]: 4400, [output]: def solution():
    total_movies = 600
    series_movies = int(total_movies / 3)
    remaining_movies = total_movies - series_movies
    old_movies = int((remaining_movies / 100) * 40)
    new_movies = remaining_movies - old_movies
    cost_of_series = series_movies * 6
    cost_of_old = old_movies * 5
    cost_of_new = new_movies * 10
    total_cost = cost_of_series + cost_of_old + cost_of_new
    return total_cost

 Executed result: 4400
[EXP] 779: [success_rate]: True, [answer]: 38, [output]: def solution():
    peach_price = 2
    plum_price = 1
    apricot_price = 3
    peaches = 6
    plums = 8
    apricots = 6
    total_cost = peach_price * peaches + plum_price * plums + apricot_price * apricots
    return total_cost

 Executed result: 38
[EXP] 780: [success_rate]: False, [answer]: 255, [output]: def solution():
    drive_hours = 6 - 1.5
    drive_speed = 50
    hike_speed = (50 / 2) - 5
    drive_distance = drive_hours * drive_speed
    hike_distance = hike_hours * hike_speed
    return drive_distance + hike_distance

 Executed result: None
[EXP] 781: [success_rate]: False, [answer]: 25, [output]: def solution():
    enemies = 8
    berries = 3
    seconds = 4
    emma_enemies = enemies - 8
    emma_berry_points = 5 * (8 - 3)
    emma_time_points = 30 * (30 + 4)
    emma_points = emma_enemies * 10 + emma_berry_points + emma_time_points
    ava_points = (8 + 8) * 10 + (8 + 3) * 5 + 30 * 26
    return abs(ava_points - emma_points)

 Executed result: 50
[EXP] 782: [success_rate]: True, [answer]: 17, [output]: def solution():
    total_cost = 64
    cost_of_2_pizzas = 30
    cost_of_total_pizzas = total_cost - cost_of_2_pizzas
    cost_of_one_pizza = cost_of_total_pizzas / 2
    return cost_of_one_pizza

 Executed result: 17.0
[EXP] 783: [success_rate]: False, [answer]: 54, [output]: def solution():
    normal_days = 3 * 5
    double_days = 2 * (3 * 2)
    total_rides = normal_days + double_days
    return total_rides

 Executed result: 27
[EXP] 784: [success_rate]: False, [answer]: 4, [output]: def solution():
    total_orange = 3
    total_white = 4
    total_white_after = (total_orange * 2)
    total렸다 = total_orange + total_white + 17
    total_white_after_shop = total_related - total_orange
    return total_white_after_shop - total_white

 Executed result: None
[EXP] 785: [success_rate]: True, [answer]: 15, [output]: def solution():
    mpg = 10
    gas_price = 3
    daily_distance = 5 * 2
    daily_gas_consumption = daily_distance / mpg
    weekly_gas_consumption = daily_gas_consumption * 5
    weekly_gas_cost = weekly_gas_consumption * gas_price
    return weekly_gas_cost

 Executed result: 15.0
[EXP] 786: [success_rate]: False, [answer]: 155, [output]: def solution():
    twenties = 10
    quarters = 140
    total_quarters = quarters / 25
    total_twenties = 0.6 * twenties
    total_amount = total_twenties + total_quarters
    return total_amount

 Executed result: 11.6
[EXP] 787: [success_rate]: True, [answer]: 142, [output]: def solution():
    tomato_yield = 5 * 22
    eggplant_yield = 8 * 4
    total_yield = tomato_yield + eggplant_yield
    return total_yield

 Executed result: 142
[EXP] 788: [success_rate]: True, [answer]: 25, [output]: def solution():
    total_tv = 40
    smart_tv = total_tv // 4
    analog_tv = total_tv // 8
    oled_tv = total_tv - smart_tv - analog_tv
    return oled_tv

 Executed result: 25
[EXP] 789: [success_rate]: False, [answer]: 100, [output]: def solution():

 Executed result: None
[EXP] 790: [success_rate]: False, [answer]: 4, [output]: def solution():
    initial_temp = 45
    decrease = 33
    min_temp = 32
    temp_decrease = initial_temp - min_temp
    logs_needed = temp_decrease // 5
    return logs_needed

 Executed result: 2
[EXP] 791: [success_rate]: False, [answer]: 108, [output]: def solution():
    total_people = 90
    groups = total_people // 9
    seashells = (3/5) * groups * 2
    return seashells

 Executed result: 12.0
[EXP] 792: [success_rate]: True, [answer]: 100, [output]: def solution():
    people = 172
    people -= 47
    people += 13
    people -= 38
    return people

 Executed result: 100
[EXP] 793: [success_rate]: True, [answer]: 75, [output]: def solution():
    daily_cap = 10
    cap_value = .25
    total_days = 30
    total_cap = daily_cap * total_days
    total_money = total_cap * cap_value
    return total_money

 Executed result: 75.0
[EXP] 794: [success_rate]: True, [answer]: 250, [output]: def solution():
    regular_hourly_rate = 20
    regular_hours = 8
    overtime_hours = 11 - regular_hours
    overtime_hourly_rate = regular_hourly_rate * 1.5
    total_payable_amount = (regular_hours * regular_hourly_rate) + (overtime_hours * overtime_hourly_rate)
    return total_payable_amount

 Executed result: 250.0
[EXP] 795: [success_rate]: True, [answer]: 32, [output]: def solution():
    female_lions = 12
    male_lions = female_lions // 2
    total_lions = female_lions + male_lions + 14
    return total_lions

 Executed result: 32
[EXP] 796: [success_rate]: True, [answer]: 20, [output]: def solution():
    original_price = 40
    discount = (25/100) * original_price
    final_price = original_price - discount
    change = 50 - final_price
    return change

 Executed result: 20.0
[EXP] 797: [success_rate]: True, [answer]: 2880000, [output]: def solution():
    salary_per_employee = 4000
    employees = 200
    months = 3
    total_salary = 0
    for _ in range(months):
        employees += 20
        total_salary += (employees * salary_per_employee)
    return total_salary

 Executed result: 2880000
[EXP] 798: [success_rate]: False, [answer]: 540, [output]: def solution():

 Executed result: None
[EXP] 799: [success_rate]: False, [answer]: 20, [output]: def solution():

 Executed result: None
[EXP] 800: [success_rate]: True, [answer]: 4, [output]: def solution():
    bread_cost = 2
    bagel_cost = 1
    bread_cost_than_2_bagels = 3 * bread_cost - 2 * bagel_cost
    return bread_cost_than_2_bagels

 Executed result: 4
[EXP] 801: [success_rate]: True, [answer]: 428, [output]: def solution():
    pierson_score = 278
    nikita_score = (pierson_score / 2) + 11
    return pierson_score + nikita_score

 Executed result: 428.0
[EXP] 802: [success_rate]: True, [answer]: 1240, [output]: def solution():
    students_per_class = 25
    teachers_per_class = 3
    total_classes = 40
    trees_planted_by_students = students_per_class * total_classes
    trees_planted_by_teachers = teachers_per_class * 2 * total_classes
    total_trees = trees_planted_by_students + trees_planted_by_teachers
    return total_trees

 Executed result: 1240
[EXP] 803: [success_rate]: False, [answer]: 6, [output]: def solution():
    total = 3 + 5 + 2 + 4
    stuffed_goats = total * 30 / 100
    stuffed_goats_to_buy = int(stuffed_goats - round(stuffed_goats))
    return stuffed_goats_to_buy

 Executed result: 0
[EXP] 804: [success_rate]: False, [answer]: 9, [output]: def solution():
    daily_halfhours = 2 * 7  # Kris plays 2 weeks for half an hour each day
    daily_hours = daily_halfhours / 2  # convert half hours to full hours
    weekly_hours = 7  # Kris plays 1 week for 2 hours each day
    total_hours_played = daily_hours + weekly_hours
    hours_needed = 30 - total_hours_played
    return hours_needed

 Executed result: 16.0
[EXP] 805: [success_rate]: False, [answer]: 20, [output]: def solution():

 Executed result: None
[EXP] 806: [success_rate]: True, [answer]: 1170, [output]: def solution():
    diamond_cost = 600
    gold_cost = 300
    premium = (diamond_cost + gold_cost) * 0.3
    total_cost = diamond_cost + gold_cost + premium
    return total_cost

 Executed result: 1170.0
[EXP] 807: [success_rate]: False, [answer]: 70, [output]: def solution():
    third_grade_pass_rate = 340 / 500
    fourth_grade_pass_rate = 40 / 100
    fifth_grade_pass_rate = 2 * fourth_grade_pass_rate
    fifth_grade_pass_rate_percentage = fifth_grade_pass_rate * 400
    total_pass = 340 + 40 + fifth_grade_pass_rate_percentage
    total_students = 500 + 100 + 400
    overall_pass_rate = total_pass / total_students
    return overall_pass_rate

 Executed result: 0.7
[EXP] 808: [success_rate]: False, [answer]: 4, [output]: def solution():
    chips_per_inch = 12
    chips_per_bag = 72
    num_bags = 2
    inch_length = (num_bags * chips_per_bag) // chips_per_inch
    return inch_length

 Executed result: 12
[EXP] 809: [success_rate]: True, [answer]: 12, [output]: def solution():
    total_drunk = (4 * 1.5) + (16 * 2)
    gallons_at_beginning = 10 + total_drunk
    gallons = gallons_at_beginning / 4
    return gallons

 Executed result: 12.0
[EXP] 810: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_candies = 100  # Initial amount of candies
    sold_candies = 150  # Number of candies sold
    additional_candies = 100  # Additional candies ordered
    
    total_sold = sold_candies  # Add sold candies to the total
    total_total = total_candies + additional_candies  # Add additional candies to the total
    
    remaining_candies = total_total - total_sold  # Calculate remaining candies
    
    return remaining_candies

 Executed result: 50
[EXP] 811: [success_rate]: False, [answer]: 310, [output]: def solution():
    students = 10
    additional_students = 0
    months = 0
    while months < 5:
        students *= 2
        additional_students += students - 11
        months += 1
    return additional_students

 Executed result: 565
[EXP] 812: [success_rate]: False, [answer]: 60, [output]: def solution():
    weekly_income = 105
    branches_cost = 0.25
    daily_income_per_branch = daily_income = weekly_income / 7

    day = 1
    while daily_income_per_branch > 0:
        daily_income = 0
        i = 0
        while daily_income < daily_income_per_branch:
            daily_income += branches_cost
            i += 1
        print(f'Day {day}: {i} branches')
        day += 1
        daily_income_per_branch /= branches_cost

    return 'program finished'

 Executed result: None
[EXP] 813: [success_rate]: False, [answer]: 79, [output]: def solution():
    total_petals = (3 * 5) + (4 * 6) + (5 * 4) + (6 * 7) - 4
    return total_petals

 Executed result: 97
[EXP] 814: [success_rate]: False, [answer]: 7, [output]: def solution():
    total_marshmallows = 35
    total_marshmallows_used = 9 + 9
    total_marshmallows_lost = 3
    marshmallows_left = total_marshmallows - total_marshmallows_used - total_marshmallows_lost
    return f"John and DeSean can have {marshmallows_left//12} S'mores with the marshmallows left in the bag each."

 Executed result: John and DeSean can have 1 S'mores with the marshmallows left in the bag each.
[EXP] 815: [success_rate]: False, [answer]: 11, [output]: def solution():
    minutes_per_hour = 60
    total_minutes = minutes_per_hour * 4
    jack_minutes = 20
    slow_friend_minutes = jack_minutes / 2
    fast_friend_minutes = jack_minutes * 1.5
    total_jack_minutes = (total_minutes // jack_minutes) * jack_minutes
    total_slow_friend_minutes = (total_minutes // slow_friend_minutes) * slow_friend_minutes
    total_fast_friend_minutes = (total_minutes // fast_friend_minutes) * fast_friend_minutes
    total_friends_minutes = total_jack_minutes + total_slow_friend_minutes + total_fast_friend_minutes
    remaining_minutes = total_minutes - total_friends_minutes
    jack_minutes_together = 20 * (total_friends_minutes // 20)
    total_quarters = (total_friends_minutes // 20) + (remaining_minutes // 20) + (jack_minutes_together // 20)
    return total_quarters

 Executed result: 48.0
[EXP] 816: [success_rate]: False, [answer]: 4, [output]: def solution():
    zest = sugar = salt = 1
    oil = 2 * salt
    return oil

 Executed result: 2
[EXP] 817: [success_rate]: True, [answer]: 4500, [output]: def solution():
    goatCost = 3 * 500
    cowCost = 2 * 1500
    totalCost = goatCost + cowCost
    return totalCost

 Executed result: 4500
[EXP] 818: [success_rate]: True, [answer]: 15, [output]: def solution():
    total_cupcakes = 63
    cupcakes_found = 8 + 40
    return total_cupcakes - cupcakes_found

 Executed result: 15
[EXP] 819: [success_rate]: True, [answer]: 16, [output]: def solution():
    robert = 20
    joe = robert * 2
    joe_sold = joe * 0.2
    joe_given_to_mother = joe_sold * 2
    joe_remain = joe - joe_sold - joe_given_to_mother
    return joe_remain

 Executed result: 16.0
[EXP] 820: [success_rate]: False, [answer]: 6,250, [output]: def solution():
    total_amount = 175000
    org_amount = 50000
    student_amount = total_amount - org_amount
    student_amount_per = student_amount // 20
    return student_amount_per

 Executed result: 6250
[EXP] 821: [success_rate]: True, [answer]: 720, [output]: def solution():
    hours_day1 = 8
    hours_day2 = 8 // 2
    total_hours = hours_day1 + hours_day2
    total_minutes = total_hours * 60
    return total_minutes

 Executed result: 720
[EXP] 822: [success_rate]: False, [answer]: 35, [output]: def solution():
    total_cars = 50
    cars_in_lot = 50 + 20
    half_of_cars = cars_in_lot // 2
    cars_left = cars_in_lot - half_of_cars
    return total_cars - cars_left

 Executed result: 15
[EXP] 823: [success_rate]: True, [answer]: 1260, [output]: def solution():
    daily_earnings = 30 * 5 * 1.20
    weekly_earnings = daily_earnings * 7
    return weekly_earnings

 Executed result: 1260.0
[EXP] 824: [success_rate]: False, [answer]: 14, [output]: def solution():
    sasha1 = 14
    julie1 = sasha1 - 4
    sasha2 = julie1 - 6
    return sasha1 + sasha2

 Executed result: 18
[EXP] 825: [success_rate]: True, [answer]: 52, [output]: def solution():
    cat_tins = 8 * 11
    dog_tins = 6 * 6
    return cat_tins - dog_tins

 Executed result: 52
[EXP] 826: [success_rate]: False, [answer]: 153, [output]: def solution():
    cards_smendrick = x
    cards_pj = x / 3
    cards_becca = cards_smendrick + 12
    for cards_smendrick in range(0, 341):
        cards_pj = cards_smendrick / 3
        cards_becca = cards_smendrick + 12
        if cards_smendrick + cards_pj + cards_becca == 341:
            return cards_becca

 Executed result: None
[EXP] 827: [success_rate]: True, [answer]: 27, [output]: def solution():
    green_eggs = 5
    blue_eggs = 2 * green_eggs
    pink_eggs = blue_eggs - 1
    yellow_eggs = pink_eggs // 3
    total_eggs = green_eggs + blue_eggs + pink_eggs + yellow_eggs
    return total_eggs

 Executed result: 27
[EXP] 828: [success_rate]: True, [answer]: 11, [output]: def solution():
    pound_cost = 4 * 0.35
    mileage_cost = 20 * 0.08
    total_cost = pound_cost + mileage_cost
    refund = 0.75 * 32
    loss = float(total_cost + 32 - refund)
    return round(loss, 2)

 Executed result: 11.0
[EXP] 829: [success_rate]: False, [answer]: 60, [output]: def solution():
    money = 100 - 40
    money -= 30 * 2
    money -= 20
    return money

 Executed result: -20
[EXP] 830: [success_rate]: False, [answer]: 14,000, [output]: def solution():
    total = 8000
    total += 8000 // 2  # second week
    total += 8000 * 3  # third week
    remaining = 50000 - total
    return remaining

 Executed result: 14000
[EXP] 831: [success_rate]: False, [answer]: 1128, [output]: def solution():
    video_time = 4 * 60  # convert 4 minutes to seconds
    video_minutes = video_time * 18  # calculate total video minutes per week
    song_time = 60 * 120  # convert 2 hours to minutes
    makeup_time = 15 * 6  # calculate total makeup minutes per week
    weekly_time = video_minutes + song_time + makeup_time  # calculate total weekly time
    monthly_time = weekly_time * 4  # calculate total monthly time
    return monthly_time

 Executed result: 46440
[EXP] 832: [success_rate]: True, [answer]: 324, [output]: def solution():
    base_cost = 129.00
    additional_mirrors = 6 - 4
    additional_chandeliers = 2 - 1
    additional_pictures = 20 - 10
    total_additional_items = additional_mirrors + additional_chandeliers + additional_pictures
    total_cost = base_cost + (total_additional_items * 15.00)
    return total_cost

 Executed result: 324.0
[EXP] 833: [success_rate]: True, [answer]: 42, [output]: def solution():
    eva = 20
    anthony = eva + 10
    roy = anthony + (anthony * 40 / 100)
    return roy

 Executed result: 42.0
[EXP] 834: [success_rate]: True, [answer]: 40, [output]: def solution():
    p = 1  # initial height of Pompei
    s = p * 12  # height of Saskay
    k = s * 4  # height of Kagiyami
    n = k * 10  # height of Naruto
    result = n / 12  # convert to feet
    return result

 Executed result: 40.0
[EXP] 835: [success_rate]: True, [answer]: 80, [output]: def solution():
    total_distance = (8 * 4) + (8 * 6)
    return total_distance

 Executed result: 80
[EXP] 836: [success_rate]: False, [answer]: 48, [output]: def solution():
    k_speed = 18 / 3  # speed of a kangaroo in hours
    t_speed = k_speed / 2  # speed of a turtle in hours
    t_total_hours = 18 * 3 / 4  # total hours required for turtles
    return t_total_hours

 Executed result: 13.5
[EXP] 837: [success_rate]: True, [answer]: 140, [output]: def solution():
    kora = 20
    rory = kora + 20
    jada = rory * 2
    total = kora + rory + jada
    return total

 Executed result: 140
[EXP] 838: [success_rate]: False, [answer]: 120, [output]: def solution():
    laptop_price = 600
    discount = 200
    savings = 150
    mom_help = 80
    need = 50
    purse_money = savings + mom_help - (laptop_price - discount)
    return purse_money - need

 Executed result: -220
[EXP] 839: [success_rate]: True, [answer]: 15, [output]: def solution():
    large_apples = 3
    small_apples = 5
    large_slices = 3 * 5
    small_slices = 5 * 3
    total_slices = large_slices + small_slices
    eaten_slices = 15
    total_slices -= eaten_slices
    return total_slices

 Executed result: 15
[EXP] 840: [success_rate]: False, [answer]: 2, [output]: def solution():
    total_milk_needed = 25
    milk_per_cow = 5
    cows_currently_having = 3
    milk_per_cow_needed = total_milk_needed / milk_per_cow
    cows_required = math.ceil(milk_per_cow_needed / milk_per_cow)
    return cows_required - cows_currently_having

 Executed result: None
[EXP] 841: [success_rate]: False, [answer]: 16, [output]: def solution():
    total_used = 1/6 + 2/3 + 1/2
    total_unused = 1 - total_used
    return 12 * total_unused

 Executed result: -3.999999999999999
[EXP] 842: [success_rate]: True, [answer]: 5600, [output]: def solution():
    car_price = 10000
    phone_price = 800
    money_from_weekend = 5000
    brother_help = 200
    total_amount_needed = car_price + phone_price
    total_money_got = money_from_weekend + brother_help
    remaining_money = total_amount_needed - total_money_got
    return remaining_money

 Executed result: 5600
[EXP] 843: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_paid = 4 * 20
    change = total_paid - 70
    return change

 Executed result: 10
[EXP] 844: [success_rate]: True, [answer]: 19, [output]: def solution():
    total_money = 2 * 20  # initial money
    cost_squirt_guns = 6 * 2  # cost of squirt guns
    cost_water_balloon = 3 * 3  # cost of water balloons
    total_cost = cost_squirt_guns + cost_water_balloon  # total cost
    money_left = total_money - total_cost  # money left
    return money_left

 Executed result: 19
[EXP] 845: [success_rate]: False, [answer]: 180, [output]: def solution():
    jack_dishes = 60
    jack_sock = jack_dishes / 2
    peters_sock = jack_sock * 2
    return (peters_sock + jack_dishes)

 Executed result: 120.0
[EXP] 846: [success_rate]: True, [answer]: 12, [output]: def solution():
    total_math_students = 5
    both_students = 20 - 5 - 8
    return total_math_students + both_students

 Executed result: 12
[EXP] 847: [success_rate]: False, [answer]: 11, [output]: def solution():

 Executed result: None
[EXP] 848: [success_rate]: True, [answer]: 975, [output]: def solution():
    principal = 300
    rate = 0.75
    time = 3
    interest = principal * rate * time
    total = principal + interest
    return total

 Executed result: 975.0
[EXP] 849: [success_rate]: True, [answer]: 10, [output]: def solution():
    white_shirts = 40
    white_collared = white_shirts // 2
    floral_shirts = 50
    floral_buttoned = 20
    white_non_collared = white_shirts - white_collared
    floral_non_buttoned = floral_shirts - floral_buttoned
    return floral_non_buttoned - white_non_collared

 Executed result: 10
[EXP] 850: [success_rate]: True, [answer]: 75, [output]: def solution():
    trays = 900 // 30
    cost = trays * 2.50
    return cost

 Executed result: 75.0
[EXP] 851: [success_rate]: True, [answer]: 70, [output]: def solution():
    goats_x = 55
    goats_sold_x = 10
    goats_y = 45
    goats_sold_y = 2 * goats_sold_x
    goats_left_x = goats_x - goats_sold_x
    goats_left_y = goats_y - goats_sold_y
    total_goats = goats_left_x + goats_left_y
    return total_goats

 Executed result: 70
[EXP] 852: [success_rate]: False, [answer]: 110, [output]: def solution():

 Executed result: None
[EXP] 853: [success_rate]: False, [answer]: 123, [output]: def solution():

 Executed result: None
[EXP] 854: [success_rate]: True, [answer]: 15, [output]: def solution():
    total_minutes = 20 * 90
    half_rooms = total_minutes // 2
    hours = half_rooms // 60
    return hours

 Executed result: 15
[EXP] 855: [success_rate]: True, [answer]: 144, [output]: def solution():
    homes_in_first_year = 12
    homes_in_second_year = homes_in_first_year * 3
    total_homes_in_two_years = homes_in_first_year + homes_in_second_year
    homes_in_third_year = total_homes_in_two_years * 2
    total_homes = homes_in_first_year + homes_in_second_year + homes_in_third_year
    return total_homes

 Executed result: 144
[EXP] 856: [success_rate]: False, [answer]: 13, [output]: def solution():
    x = int((87 - 3) / 2)   # I am 2 years older than my sister, so subtract 2 from the total age.
    z = x + 3             # I am three years younger than my brother, so we subtract 3 from my age to get his age.
    y = (z + 3) - 1      # My mom's age is one less than three times my brother's age, so calculate it.
    return x

 Executed result: 42
[EXP] 857: [success_rate]: True, [answer]: 7, [output]: def solution():
    glue_per_student = 2
    glue_per_pack = 8
    total_students = 27
    glue_total = glue_per_student * total_students
    packs_needed = (glue_total + glue_per_pack - 1) // glue_per_pack
    return packs_needed

 Executed result: 7
[EXP] 858: [success_rate]: True, [answer]: 14000, [output]: def solution():
    original = 4000
    after_rain = original * 2
    after_third_day = after_rain + 6000
    return after_third_day

 Executed result: 14000
[EXP] 859: [success_rate]: True, [answer]: 3430, [output]: def solution():
    infected = 10
    for i in range(3):
        infected += infected * 6
    return infected

 Executed result: 3430
[EXP] 860: [success_rate]: True, [answer]: 1520, [output]: def solution():
    rafaela_tips = 40 * 20
    julieta_tips = rafaela_tips - (10 / 100) * rafaela_tips
    total_tips = rafaela_tips + julieta_tips
    return total_tips

 Executed result: 1520.0
[EXP] 861: [success_rate]: True, [answer]: 3, [output]: def solution():
    total_oranges = 12
    daughters_oranges = 2 * 3
    boy_oranges = 3
    oranges_left = total_oranges - (daughters_oranges + boy_oranges)
    return oranges_left

 Executed result: 3
[EXP] 862: [success_rate]: False, [answer]: 30, [output]: def solution():
    claire_badges = 12
    amber_badges = claire_badges * 2
    wendy_badges = claire_badges * 3
    return wendy_badges - amber_badges

 Executed result: 12
[EXP] 863: [success_rate]: True, [answer]: 40, [output]: def solution():
    hours = 5
    slices_per_loaf = 8
    slices_per_hour = 2 * slices_per_loaf
    total_slices = hours * slices_per_hour
    cost_per_slice = 0.50
    total_cost = total_slices * cost_per_slice
    return total_cost

 Executed result: 40.0
[EXP] 864: [success_rate]: False, [answer]: 110, [output]: def solution():

 Executed result: None
[EXP] 865: [success_rate]: True, [answer]: 80, [output]: def solution():
    total_burritos = 600
    students = 50
    burritos_per_student = 10
    mr_george_burritos = 20
    
    total_burritos_given_to_students = students * burritos_per_student
    total_burritos_consumed = total_burritos_given_to_students + mr_george_burritos
    leftover_burritos = total_burritos - total_burritos_consumed
    
    return leftover_burritos

 Executed result: 80
[EXP] 866: [success_rate]: True, [answer]: 23, [output]: def solution():
    red = 12
    green = red - 2
    blue = green * 3
    total = red + green + blue
    yellow = 75 - total
    return yellow

 Executed result: 23
[EXP] 867: [success_rate]: False, [answer]: 28, [output]: def solution():
    s = a + 25
    a = f - 12
    f = (85 - s - a) // 1
    return f

 Executed result: None
[EXP] 868: [success_rate]: True, [answer]: 7, [output]: def solution():
    potatoes = 5
    sweet_potatoes = 2 * potatoes
    carrots = sweet_potatoes - 3
    return carrots

 Executed result: 7
[EXP] 869: [success_rate]: True, [answer]: 15, [output]: def solution():
    cups_per_box = 10
    boxes_needed = 4 * 30 // 10
    total_cost = boxes_needed * 1.25
    return total_cost

 Executed result: 15.0
[EXP] 870: [success_rate]: True, [answer]: 500, [output]: def solution():
    cost_per_phone = 700
    total_cost = cost_per_phone * 5
    total_paid = 4000
    change = total_paid - total_cost
    return change

 Executed result: 500
[EXP] 871: [success_rate]: False, [answer]: 40, [output]: def solution():
    total = 400
    madeline_portion = 0.6
    keenan_portion = 1 - madeline_portion
    four_weeks_in_month = 4
    weeks_in_month = 4
    keenan_per_week = (total * keenan_portion) / (weeks_in_month * four_weeks_in_month)
    return int(keenan_per_week)

 Executed result: 10
[EXP] 872: [success_rate]: True, [answer]: 48, [output]: def solution():
    total_pieces = 60
    pieces_eaten_on_first_day = int(total_pieces * 2/5)
    remaining_pieces = total_pieces - pieces_eaten_on_first_day
    pieces_eaten_on_second_day = 10
    remaining_pieces = remaining_pieces - pieces_eaten_on_second_day
    pieces_eaten_on_third_day = int(remaining_pieces * 7/13)
    total_pieces_eaten = pieces_eaten_on_first_day + pieces_eaten_on_second_day + pieces_eaten_on_third_day
    return total_pieces_eaten

 Executed result: 48
[EXP] 873: [success_rate]: True, [answer]: 13, [output]: def solution():
    soda_price = 21.00 / 7
    water_price = 8.00 / 4
    soda_cost = 3 * soda_price
    water_cost = 2 * water_price
    total_cost = soda_cost + water_cost
    return total_cost

 Executed result: 13.0
[EXP] 874: [success_rate]: True, [answer]: 12, [output]: def solution():
    david_money = 12.48
    bolt_cost = 0.03
    bolt_count = 16
    total_cost = bolt_count * bolt_cost
    remaining_money = david_money - total_cost
    return remaining_money

 Executed result: 12.0
[EXP] 875: [success_rate]: True, [answer]: 132, [output]: def solution():
    per_hour = 33 / 3
    hours = 12
    return per_hour * hours

 Executed result: 132.0
[EXP] 876: [success_rate]: True, [answer]: 60, [output]: def solution():
    total = 52 + 28
    lost = total // 4
    result = total - lost
    return result

 Executed result: 60
[EXP] 877: [success_rate]: False, [answer]: 41, [output]: def solution():

 Executed result: None
[EXP] 878: [success_rate]: False, [answer]: 7000, [output]: def solution():
    total_chickens = 300
    sell_chickens = total_chickens * 3 // 5
    cost_per_chicken = 50
    return sell_chickens * cost_per_chicken

 Executed result: 9000
[EXP] 879: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_glasses = 32
    julie_glasses = 14
    boys_glasses = total_glasses - julie_glasses
    difference = julie_glasses - boys_glasses
    return difference

 Executed result: -4
[EXP] 880: [success_rate]: True, [answer]: 575, [output]: def solution():
    hair = 400
    manicure = hair / 4
    pedicure = manicure * 3 / 4
    total = hair + manicure + pedicure
    return total

 Executed result: 575.0
[EXP] 881: [success_rate]: True, [answer]: 10, [output]: def solution():
    original_price = 20 * 2
    new_ropes_price = 20 * 1.5
    profit = original_price - new_ropes_price
    return profit

 Executed result: 10.0
[EXP] 882: [success_rate]: True, [answer]: 16, [output]: def solution():
    present_age = 18 - 10
    triple_age = 3 * present_age
    future_year = (triple_age - present_age)
    return future_year

 Executed result: 16
[EXP] 883: [success_rate]: False, [answer]: 5, [output]: def solution():

 Executed result: None
[EXP] 884: [success_rate]: False, [answer]: 25, [output]: def solution():
    usual_concert_length = 65 // 3 - 15
    return usual_concert_length

 Executed result: 6
[EXP] 885: [success_rate]: True, [answer]: 50, [output]: def solution():
    toys = 200
    toys -= 40
    toys -= 80
    toys -= 30
    return toys

 Executed result: 50
[EXP] 886: [success_rate]: False, [answer]: 500, [output]: def solution():

 Executed result: None
[EXP] 887: [success_rate]: False, [answer]: 20, [output]: def solution():
    total_microphones = 50
    total_pairs = 0
    for i in range(1, total_microphones + 1):
        if (total_microphones - i) >= i:
            total_pairs = i
        else:
            break
    return total_pairs

 Executed result: 25
[EXP] 888: [success_rate]: True, [answer]: 34, [output]: def solution():
    total_birds = 6 + (6 * 2/3) + 8 * 3
    return total_birds

 Executed result: 34.0
[EXP] 889: [success_rate]: False, [answer]: 10, [output]: def solution():

 Executed result: None
[EXP] 890: [success_rate]: True, [answer]: 15, [output]: def solution():
    orchids_petals = 5 * 5
    daisies_petals = 4 * 10
    result = daisies_petals - orchids_petals
    return result

 Executed result: 15
[EXP] 891: [success_rate]: True, [answer]: 25, [output]: def solution():
    total_plants = 100
    indoor_plants = total_plants // 4
    remaining_plants = total_plants - indoor_plants
    outdoor_plants = remaining_plants * 2 // 3
    flowering_plants = remaining_plants - outdoor_plants
    percentage = (flowering_plants / total_plants) * 100
    return round(percentage, 2)

 Executed result: 25.0
[EXP] 892: [success_rate]: False, [answer]: 55, [output]: def solution():
    whatchamacallit_speed = 121
    thingamabob_speed = whatchamacallit_speed / 12  # 121 / 12 = 10.08(or something else)
    whirligig_speed = thingamabob_speed * 5  # 10.08 * 5 = 50.4 or so
    return whirligig_speed

 Executed result: 50.41666666666667
[EXP] 893: [success_rate]: True, [answer]: 1, [output]: def solution():
    total_cost = 11
    salad_cost = 6
    yogurt_cost = salad_cost / 2
    carrot_cost = (total_cost - salad_cost - yogurt_cost) / 2
    return carrot_cost

 Executed result: 1.0
[EXP] 894: [success_rate]: True, [answer]: 480, [output]: def solution():
    previous_pay = 10
    raise_pay = 2
    new_pay = previous_pay + raise_pay
    daily_salary = new_pay * 8
    weekly_salary = daily_salary * 5
    return weekly_salary

 Executed result: 480
[EXP] 895: [success_rate]: True, [answer]: 26, [output]: def solution():
    total_made = 80
    joe_lawn = 6
    kamala_lawn = 3 * joe_lawn
    alba_lawn = 5 * joe_lawn
    lemonade_sales = total_made - joe_lawn - kamala_lawn - alba_lawn
    return lemonade_sales

 Executed result: 26
[EXP] 896: [success_rate]: False, [answer]: 74, [output]: def solution():

 Executed result: None
[EXP] 897: [success_rate]: True, [answer]: 250, [output]: def solution():
    total_paid_hours = 10 * 3  # total hours paid
    total_earned = total_paid_hours * 25  # total earnings
    total_expenses = 500  # car payment
    profit = total_earned - total_expenses  # profit calculation
    return profit

 Executed result: 250
[EXP] 898: [success_rate]: False, [answer]: 1, [output]: def solution():
    joseph_notebooks = 21  # 7 notebooks for Martha,.times 3 for Joseph
    difference = 7 - 21
    return difference

 Executed result: -14
[EXP] 899: [success_rate]: True, [answer]: 110, [output]: def solution():
    diana_distance = 50
    anis_distance = diana_distance + (diana_distance / 5)
    total_distance = diana_distance + anis_distance
    return total_distance

 Executed result: 110.0
[EXP] 900: [success_rate]: True, [answer]: 16, [output]: def solution():
    total_cookies = 100
    cookies_taken_by_husband = 4
    total_cookies -= cookies_taken_by_husband
    cookies_per_nephew = total_cookies // 6
    return cookies_per_nephew

 Executed result: 16
[EXP] 901: [success_rate]: True, [answer]: 15, [output]: def solution():
    yesterday_denise = 10
    yesterday_daniel = 13
    today_denise = yesterday_daniel + 5
    total_denise = yesterday_denise + today_denise
    total_daniel = yesterday_daniel
    return total_denise - total_daniel

 Executed result: 15
[EXP] 902: [success_rate]: False, [answer]: 1, [output]: def solution():
    total_bowls_as_children = 8
    total_family_members = 3
    total_adults = 2
    family_members_eat_one_bowl = total_family_members - total_adults
    remaining_bowls = 4 * total_adults
    child_bowls_per_morning = remaining_bowls // family_members_eat_one_bowl
    return child_bowls_per_morning

 Executed result: 8
[EXP] 903: [success_rate]: True, [answer]: 8, [output]: def solution():
    notebook_price = 1.50
    ballpen_price = 0.50
    notebooks = 5
    ballpen = 1
    total = (notebooks * notebook_price) + (ballpen * ballpen_price)
    return total

 Executed result: 8.0
[EXP] 904: [success_rate]: False, [answer]: 16, [output]: def solution():
    total_material = 0
    material_for_small = 2 * 20  # 20 small masks
    material_for_large = 2.25 * 8  # 8 large masks
    total_material = material_for_small + material_for_large
    return total_material

 Executed result: 58.0
[EXP] 905: [success_rate]: True, [answer]: 8, [output]: def solution():
    total_tickets = 9 * 3
    total_cost = 216
    average_price = total_cost / total_tickets
    return average_price

 Executed result: 8.0
[EXP] 906: [success_rate]: True, [answer]: 5, [output]: def solution():
    sleep_time = 10
    work_time = sleep_time - 2
    dog_walk_time = 1
    total_time = sleep_time + work_time + dog_walk_time
    free_time = 24 - total_time
    return free_time

 Executed result: 5
[EXP] 907: [success_rate]: False, [answer]: 10, [output]: def solution():
    blue_boxes = 7 - 3
    red_boxes = int(9 - (1/3) * 9)
    return blue_boxes, red_boxes

 Executed result: (4, 6)
[EXP] 908: [success_rate]: True, [answer]: 16, [output]: def solution():
    sarah_books = 9
    joseph_books = sarah_books * 2
    joseph_books = joseph_books - 2
    return joseph_books

 Executed result: 16
[EXP] 909: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    marbles = 30
    marbles_given_to_jamie = marbles // 5
    marbles_given_to_donald = 10
    marbles_left = marbles - (marbles_given_to_jamie + marbles_given_to_donald)
    return marbles_left

 Executed result: 14
[EXP] 910: [success_rate]: True, [answer]: 38, [output]: def solution():
    d_age_8_yr_ago = 60 - 8
    a_age_4_yr_ago = (d_age_8_yr_ago) / 2
    a_age_now = a_age_4_yr_ago + 4
    a_age_8_yr_later = a_age_now + 8
    return a_age_8_yr_later

 Executed result: 38.0
[EXP] 911: [success_rate]: True, [answer]: 700, [output]: def solution():
    brown_acres = 200
    smith_acres = 2 * brown_acres + 100
    total_acres = brown_acres + smith_acres
    return total_acres

 Executed result: 700
[EXP] 912: [success_rate]: True, [answer]: 64, [output]: def solution():
    # Calculate the number of packages Colby completes in an hour
    packages_per_hour = 50 - 10
    # Calculate the number of packages Colby completes in a typical eight-hour workday
    packages_per_day = packages_per_hour * 8
    # Calculate the total amount of money Colby earns in a typical eight-hour workday
    total_amount = packages_per_day * 0.20
    return total_amount

 Executed result: 64.0
[EXP] 913: [success_rate]: True, [answer]: 6, [output]: def solution():
    normal_sudoku_minutes = 45
    extreme_sudoku_minutes = 4 * normal_sudoku_minutes
    total_minutes = normal_sudoku_minutes + extreme_sudoku_minutes
    bottles_of_water = total_minutes // 30
    return bottles_of_water

 Executed result: 7
[EXP] 914: [success_rate]: True, [answer]: 6, [output]: def solution():
    total_bologna = 58
    bologna_per_red = 2
    bologna_per_yellow = 3
    num_red = 20
    
    bologna_per_balloon = bologna_per_red * bologna_per_yellow
    bologna_per_red_per_balloon = bologna_per_red
    bologna_per_yellow_per_balloon = bologna_per_yellow

    total_bologna_used_by_red = num_red * bologna_per_red_per_balloon
    total_bologna_used_by_yellow = total_bologna - total_bologna_used_by_red

    return total_bologna_used_by_yellow // bologna_per_yellow

 Executed result: 6
[EXP] 915: [success_rate]: True, [answer]: 3, [output]: def solution():
    num_days = 30
    daily_mileage = 100
    total_mileage = daily_mileage * num_days
    tune_ups = total_mileage // 1000
    return tune_ups

 Executed result: 3
[EXP] 916: [success_rate]: False, [answer]: 23, [output]: def solution():

 Executed result: None
[EXP] 917: [success_rate]: False, [answer]: 14, [output]: def solution():
    total_cost = 11 + (1 * 12 * 0.5) + (2 * 7)
    money = 100  # Initial amount shared by both
    money_divisible = money - total_cost
    money_per_person = money_divisible / 2
    return money_per_person

 Executed result: 34.5
[EXP] 918: [success_rate]: True, [answer]: 12, [output]: def solution():
    total_fruits = 3 + 5 + 6
    eaten = 2
    left = total_fruits - eaten
    return left

 Executed result: 12
[EXP] 919: [success_rate]: True, [answer]: 56, [output]: def solution():
    students_playing_tennis = 6
    students_playing_volleyball = 6 * 2
    students_playing_soccer = 16 + 22
    total_students = students_playing_tennis + students_playing_volleyball + students_playing_soccer
    return total_students

 Executed result: 56
[EXP] 920: [success_rate]: False, [answer]: 90, [output]: def solution():
    total_students = 30
    lolls SOLD_per_student = 10
    cost_per_loll = 0.5
    selling_price_per_loll = 0.8
    total_revenue = (lolls SOLD_per_student * total_students) * selling_price_per_loll
    total_cost = total_students * lolls SOLD_per_student * cost_per_loll
    total_profit = total_revenue - total_cost
    return total_profit

 Executed result: None
[EXP] 921: [success_rate]: True, [answer]: 47, [output]: def solution():
    cats = 3
    dogs = 3 * cats
    rabbits = dogs - 2
    fish = 3 * rabbits
    gerbils = fish // 3
    total_pets = cats + dogs + rabbits + fish + gerbils
    return total_pets

 Executed result: 47
[EXP] 922: [success_rate]: False, [answer]: 4, [output]: def solution():
    total_slices = 24
    abby_slices = 2
    josh_slices = abby_slices * 2
    total eaten_slices_per_day = abby_slices + josh_slices
    total_days = total_slices // total_eaten_slices_per_day
    return total_days

 Executed result: None
[EXP] 923: [success_rate]: True, [answer]: 60, [output]: def solution():
    return 5 * 12 + 1

 Executed result: 61
[EXP] 924: [success_rate]: False, [answer]: 2, [output]: def solution():
    total_cups = 27
    allocated_cups = total_cups - 15
    cups_per_row = allocated_cups // 3
    mint_cups_per_row = cups_per_row
    return mint_cups_per_row

 Executed result: 4
[EXP] 925: [success_rate]: True, [answer]: 12, [output]: def solution():
    total_berry = 24
    time_taken = 8
    trip_time = 4
    berries_per_trip = 0
    for berries in range(1, total_berry + 1):
        if total_berry % berries == 0:
            trips_required = total_berry // berries
            if trips_required * trip_time <= time_taken:
                berries_per_trip = berries
                break
    return berries_per_trip

 Executed result: 12
[EXP] 926: [success_rate]: True, [answer]: 2000, [output]: def solution():
    total_water = 10000
    filled_water = total_water / 2
    used_water = filled_water
    for i in range(6):
        used_water = used_water - 500
    return used_water

 Executed result: 2000.0
[EXP] 927: [success_rate]: False, [answer]: 1, [output]: def solution():
    total_money = 150  # he got $150
    friday_saturday_movies = 5  # he saw 5 movies on Friday or Saturday
    other_day_movies = 8  # he saw 8 movies on other days
    popcorn = 2  # he had 2 tubs of popcorn
    candy = 4  # he had 4 boxes of candy
    
    movies_seen = friday_saturday_movies + other_day_movies  # he saw 5+8 = 13 movies after Friday and Saturday movies
    money_spent = 7 * 8 + 10 * 5 + 8 * 2 + 2 * 4  # he spent money on tickets for other days, 5 movies on Saturday, 1 tub of popcorn, and 4 boxes of candy
    remaining = total_money - money_spent  # he had $150 - spent $money
    
    tickets_per_dollar = 1 - (8 + 7 + 8 + 2) / 150  # after spending $150, he is left with 1 - (43/150) = 0.067
    remaining_movies = remaining * tickets_per_dollar  # how many more movies he can see with his remaining money
    movies_left = int(remaining_movies)
    return movies_left

 Executed result: 16
[EXP] 928: [success_rate]: True, [answer]: 85000, [output]: def solution():
    total_calories = 200 * (600 / 3) + 300 * (450 / 3)
    return total_calories

 Executed result: 85000.0
[EXP] 929: [success_rate]: True, [answer]: 60, [output]: def solution():
    monday = 39
    tuesday = 2 * monday
    wednesday = 2 * monday
    thursday = 48
    friday = 57
    total = monday + tuesday + wednesday + thursday + friday
    average = total / 5
    return average

 Executed result: 60.0
[EXP] 930: [success_rate]: False, [answer]: 60, [output]: def solution():

 Executed result: None
[EXP] 931: [success_rate]: True, [answer]: 14, [output]: def solution():
    total = 31 + 8 + 9
    bouncy_balls = 62 - total
    return bouncy_balls

 Executed result: 14
[EXP] 932: [success_rate]: False, [answer]: 50, [output]: def solution():
    jean_age = 0
    paul_age = 100 / 3
    peter_age = paul_age + (paul_age - jean_age)
    
    return peter_age

 Executed result: 66.66666666666667
[EXP] 933: [success_rate]: False, [answer]: 24, [output]: def solution():
    total_friends = 4
    balloons_per_friend = 2
    total_with_maria = total_friends * balloons_per_friend + 1
    extra_balloons = total_with_maria + total_friends * 3
    return extra_balloons

 Executed result: 21
[EXP] 934: [success_rate]: True, [answer]: 15, [output]: def solution():
    total_boxes = 10 * 5 + 10
    boxes_per_table = 2
    tables_owned = 15
    tables_needed = (-total_boxes // boxes_per_table) + tables_owned
    return tables_needed

 Executed result: -15
[EXP] 935: [success_rate]: False, [answer]: 410, [output]: def solution():
    zoey_distance = 40 * 10
    sydney_distance = 35 * 12
    total_distance = zoey_distance + sydney_distance
    average_distance = total_distance / (40 + 35)
    return average_distance

 Executed result: 10.933333333333334
[EXP] 936: [success_rate]: False, [answer]: 64800, [output]: def solution():
    hours_per_day = 24
    days_per_month = 30
    total_hours_per_month = hours_per_day * days_per_month
    widgeteer_widgets_per_hour = 60
    widgetmaster_widgets_per_hour = 45
    widget_selling_price = 6
    
    widgeteer_monthly_widgets = widgeteer_widgets_per_hour * total_hours_per_month
    widgetmaster_monthly_widgets = widgetmaster_widgets_per_hour * total_hours_per_month
    
    widgeteer_monthly_income = widgeteer_widgets_per_hour * widgeteer_monthly_widgets * widget_selling_price
    widgetmaster_monthly_income = widgetmaster_widgets_per_hour * widgetmaster_monthly_widgets * widget_selling_price
    
    widgeteer_more_income = widgeteer_monthly_income - widgetmaster_monthly_income
    return widgeteer_more_income

 Executed result: 6804000
[EXP] 937: [success_rate]: False, [answer]: 250, [output]: def solution():
    a = 1000
    b = 1600
    c = 5 + 12
    d = 10
    result = b - ((d - c) * 70 + 1000)
    return result

 Executed result: 1090
[EXP] 938: [success_rate]: True, [answer]: 159, [output]: def solution():
    hay_needed_per_goat = 5
    hay_needed_per_sheep = 2 * hay_needed_per_goat - 3
    total_goats = 15
    total_sheep = 12
    hay_needed = total_goats * hay_needed_per_goat + total_sheep * hay_needed_per_sheep
    return hay_needed

 Executed result: 159
[EXP] 939: [success_rate]: False, [answer]: 4, [output]: def solution():
    hourly_wage = 50
    hours_worked = 6
    hours_earned = hourly_wage * hours_worked
    money_spent_on_gas = 50
    pencils_cost = 5 * 10
    money_left = hours_earned - money_spent_on_gas - pencils_cost
    pens_cost = 25
    pens = money_left // pens_cost
    return pens

 Executed result: 8
[EXP] 940: [success_rate]: False, [answer]: 650, [output]: def solution():
    craig_letters = 10 * 15
    brother_letters = craig_letters + 50
    return craig_letters + brother_letters

 Executed result: 350
[EXP] 941: [success_rate]: True, [answer]: 280, [output]: def solution():
    return 8 * 7 * 5

 Executed result: 280
[EXP] 942: [success_rate]: False, [answer]: 842, [output]: def solution():
    total_students = 29
    bottles_per_coupon = 100
    bottles_per_student = 2
    total_coupons = 9
    
    total_bottles_given_out = total_students * bottles_per_student
    total_bottles_redeemed = total_coupons * bottles_per_coupon
    
    total_bottles_given_out += total_bottles_redeemed
    
    remaining_bottles = total_bottles_per_coupon * (total_coupons - 
                                                  (total_bottles_given_out // bottles_per_coupon))
    
    return remaining_bottles

 Executed result: None
[EXP] 943: [success_rate]: False, [answer]: 205, [output]: def solution():

 Executed result: None
[EXP] 944: [success_rate]: False, [answer]: 50, [output]: def solution():
    cost_each = 15
    percent_off = 0.40
    discount = cost_each * (1 - percent_off)
    total_cost = 10 * discount
    total_sold = 5 * 40
    loss = total_cost - total_sold
    return loss

 Executed result: -110.0
[EXP] 945: [success_rate]: True, [answer]: 34, [output]: def solution():
    yam_cost = 1.5
    yams = 6
    sweet_potato_cost = 2
    sweet_potatoes = 10
    carrot_cost = 1.25
    carrots = 4
    total_earning = (yams * yam_cost) + (sweet_potatoes * sweet_potato_cost) + (carrots * carrot_cost)
    return total_earning

 Executed result: 34.0
[EXP] 946: [success_rate]: True, [answer]: 17, [output]: def solution():
    distance = 20
    pace = 2
    distance_swum = distance * 0.6
    time_swimming = distance_swum / pace
    time_resting = time_swimming / 2
    remaining_distance = distance - distance_swum
    time_sprinting = remaining_distance / (pace / 2)
    total_time = time_swimming + time_resting + time_sprinting
    return total_time

 Executed result: 17.0
[EXP] 947: [success_rate]: True, [answer]: 450, [output]: def solution():
    sam_bread = 70
    bakery_bread = 7 * sam_bread - 40
    
    return bakery_bread

 Executed result: 450
[EXP] 948: [success_rate]: True, [answer]: 13, [output]: def solution():
    stickers = 15 - 7 + 5
    return stickers

 Executed result: 13
[EXP] 949: [success_rate]: False, [answer]: 15, [output]: def solution():

 Executed result: None
[EXP] 950: [success_rate]: True, [answer]: 42, [output]: def solution():
    d = 26
    m = d - 5
    l = 2 * m
    return l

 Executed result: 42
[EXP] 951: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_points = 45
    bahati_score = total_points - 10 - 20
    result = bahati_score - 20
    return result

 Executed result: -5
[EXP] 952: [success_rate]: True, [answer]: 300, [output]: def solution():
    pages_per_inch = 100
    inches_thickness = 1.5
    pages = pages_per_inch * inches_thickness * 2
    return pages

 Executed result: 300.0
[EXP] 953: [success_rate]: False, [answer]: 360, [output]: def solution():
    start_time = 8 * 60  # converting 8:00 AM to minutes
    end_time = 23 * 60 + 60  # converting 11:00 PM to minutes
    total_minutes = end_time - start_time
    total_reports = total_minutes // 15 * 30  # because Vince staples 30 reports every 15 minutes
    return total_reports

 Executed result: 1920
[EXP] 954: [success_rate]: False, [answer]: 452, [output]: def solution():
    start_time = (10*60) + 15 # 10 pm = 10*60 = 600 minutes, then add the 15 minutes
    end_time = (2*60) + 38 # 2:15 am = 2*60 = 120 minutes, then add the 38 minutes
    wake_up_time = (6*60) - 5 # 6 am = 6*60 = 360 minutes, then subtract 5 minutes
    time_slept = start_time - end_time
    time_slept_bed = wake_up_time - start_time
    return time_slept_bed

 Executed result: -260
[EXP] 955: [success_rate]: True, [answer]: 34, [output]: def solution():
    cups = 24  # Jonathan has two dozen cups
    spoons = cups * (2/3)
    jsonathan_gifting = 6
    total_spoons = spoons - jsonathan_gifting
    remaining_utensils = cups + total_spoons
    return int(remaining_utensils)

 Executed result: 34
[EXP] 956: [success_rate]: True, [answer]: 100, [output]: def solution():
    capacity = 1000
    occupied = capacity / 5
    unoccupied = capacity - occupied
    daily_new_patients = 50
    duration = 14  # 2 weeks
    for _ in range(duration):
        unoccupied -= daily_new_patients
        if unoccupied < 0:
            unoccupied = 0
    return unoccupied

 Executed result: 100.0
[EXP] 957: [success_rate]: True, [answer]: 1, [output]: def solution():
    total_emails = 16
    work_emails = 7
    remainder = total_emails - work_emails
    family_emails = (2/3)*remainder
    other_emails = remainder - family_emails
    boyfriend_emails = (1/3)*other_emails
    return boyfriend_emails

 Executed result: 1.0
[EXP] 958: [success_rate]: True, [answer]: 45, [output]: def solution():
    aliya_age = 3
    shawna_age = aliya_age * 3
    father_age = shawna_age * 5
    return father_age

 Executed result: 45
[EXP] 959: [success_rate]: False, [answer]: 40, [output]: def solution():
    actual_audience = 48 * (1 - 0.20)
    return actual_audience

 Executed result: 38.400000000000006
[EXP] 960: [success_rate]: False, [answer]: 7, [output]: def solution():
    jeffrey = 2
    jason = 2 * jeffrey
    jordan = 2 * jason
    total = jeffrey + jason + jordan
    return total

 Executed result: 14
[EXP] 961: [success_rate]: False, [answer]: 11, [output]: def solution():
    total_holes = 10
    total_holes += 13
    total_holes += 8 - 2
    total_holes *= 4
    treasure_holes = total_holes
    return treasure_holes - total_holes

 Executed result: 0
[EXP] 962: [success_rate]: True, [answer]: 225, [output]: def solution():
    # if Amora and Lainey got 70 each, then Collins got 70 + 15 = 85
    total_amount = 70 + 70 + 85
    return total_amount

 Executed result: 225
[EXP] 963: [success_rate]: False, [answer]: 1000, [output]: def solution():
    supply_cost = 400
    travel_cost = supply_cost * (1 + 0.5)
    return travel_cost

 Executed result: 600.0
[EXP] 964: [success_rate]: False, [answer]: 147, [output]: def solution():
    a = Adelwolfe_catch = 339 / 5tot
    b = Stan_catch = a - 13 + 4
    c = Alex_catch = b + 5
    result = 339 - a - c
    return result

 Executed result: None
[EXP] 965: [success_rate]: True, [answer]: 200, [output]: def solution():
    minutes_per_episode = 20
    episodes = minutes_per_episode // 2
    total_minutes = episodes * minutes_per_episode
    return total_minutes

 Executed result: 200
[EXP] 966: [success_rate]: True, [answer]: 374, [output]: def solution():
    distance_s = 30 * 10  # distance flown in southern direction initially
    distance_n = 18 * 2  # distance flown in northern direction
    distance_s2 = 22 * 5  # distance flown in southern direction finally
    total_distance = distance_s - distance_n + distance_s2
    return total_distance

 Executed result: 374
[EXP] 967: [success_rate]: False, [answer]: 48, [output]: def solution():

 Executed result: None
[EXP] 968: [success_rate]: True, [answer]: 30, [output]: def solution():
    nani_age = 8
    brother_age = nani_age * 2
    sister_age = nani_age - (25 / 100) * nani_age
    return nani_age + brother_age + sister_age

 Executed result: 30.0
[EXP] 969: [success_rate]: True, [answer]: 227, [output]: def solution():
    synthetic_gut_time = 3 * 15
    polyester_time = 5 * 22
    hybrid_time = 4 * 18
    total_time = synthetic_gut_time + polyester_time + hybrid_time
    return total_time

 Executed result: 227
[EXP] 970: [success_rate]: False, [answer]: 1800, [output]: def solution():
    price = 600
    total = price + 2*price + 0.5*price
    return total

 Executed result: 2100.0
[EXP] 971: [success_rate]: True, [answer]: 33, [output]: def solution():
    carltons_team = 13
    continental_plus_seven = carltons_team + 7
    total_players = carltons_team + continental_plus_seven
    return total_players

 Executed result: 33
[EXP] 972: [success_rate]: True, [answer]: 100, [output]: def solution():
    length = 15
    width = 10
    perimeter = (2 * length) + (2 * width)
    slats_needed = perimeter * 2
    return slats_needed

 Executed result: 100
[EXP] 973: [success_rate]: False, [answer]: 120, [output]: def solution():
    total_oranges = 12 * 20
    oranges_given = 4 * 20
    oranges_kept = total_oranges - oranges_given
    oranges_sold = round(oranges_kept - (oranges_kept // 4 * 4))  
    return oranges_sold

 Executed result: 0
[EXP] 974: [success_rate]: False, [answer]: 79, [output]: 
def solution():
    states_in_usa = 50
    states_in_india = (states_in_usa * 2) + 4
    total_states = states_in_usa + states_in_india
    return total_states

 Executed result: 154
[EXP] 975: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_cost = 18 + 13 + 8
    remaining_to_buy = total_cost - 14
    hours_to_work = remaining_to_buy / 5
    return hours_to_work

 Executed result: 5.0
[EXP] 976: [success_rate]: True, [answer]: 20, [output]: def solution():
    cherries = 60
    robert = 30
    richard = robert - 10
    jerry = cherries - robert - richard
    result = robert - jerry
    return result

 Executed result: 20
[EXP] 977: [success_rate]: False, [answer]: 540, [output]: def solution():
    saturday_gingerbread = 10
    saturday_apple_pie = 10 - 4
    sunday_gingerbread = saturday_gingerbread + 5
    sunday_apple_pie = 15
    total_gingerbread = (saturday_gingerbread * 2) * 6
    total_apple_pie = (saturday_apple_pie + sunday_apple_pie) * 15
    total_earnings = total_gingerbread + total_apple_pie
    return total_earnings

 Executed result: 435
[EXP] 978: [success_rate]: True, [answer]: 4, [output]: def solution():
    hours_outside = 4
    days = 8
    total_hours = hours_outside * days
    total_ounces = total_hours
    total_bottles = -(-total_ounces // 8)
    return total_bottles

 Executed result: 4
[EXP] 979: [success_rate]: True, [answer]: 160, [output]: def solution():
    blue_car_price = 100
    red_car_price = blue_car_price * (1 - 0.4)
    total_cost = blue_car_price + red_car_price
    return total_cost

 Executed result: 160.0
[EXP] 980: [success_rate]: False, [answer]: 50, [output]: def solution():
    emil_age = 19
    emil_future_age = 24
    bro_age = (emil_future_age * 2) / 2
    dad_age = emil_future_age * 2
    dad_real_age = emil_age
    bro_real_age = emil_age - (emil_future_age - 24)
    return dad_real_age + bro_real_age

 Executed result: 38
[EXP] 981: [success_rate]: True, [answer]: 90, [output]: def solution():
    mother_beads = 20
    sister_beads = mother_beads + 10
    friend_beads = mother_beads * 2
    total_beads = mother_beads + sister_beads + friend_beads
    return total_beads

 Executed result: 90
[EXP] 982: [success_rate]: True, [answer]: 7, [output]: def solution():
    thursday_crawfish = 3
    friday_crawfish = thursday_crawfish * 4
    saturday_crawfish = friday_crawfish / 2
    total_crawfish = thursday_crawfish + friday_crawfish + saturday_crawfish
    servings = total_crawfish // 3
    return servings

 Executed result: 7.0
[EXP] 983: [success_rate]: True, [answer]: 12, [output]: def solution():
    total_students = 30
    football_players = 0.2 * total_students
    remaining_students = total_students - football_players
    cheerleaders_or_band = 0.25 * remaining_students
    students_leaving_early = football_players + cheerleaders_or_band
    return students_leaving_early

 Executed result: 12.0
[EXP] 984: [success_rate]: True, [answer]: 15, [output]: def solution():
    size_sophie = 5
    size_charlie = size_sophie * 5
    average = (size_sophie + size_charlie) / 2
    return average

 Executed result: 15.0
[EXP] 985: [success_rate]: False, [answer]: 342, [output]: def solution():
    flower_bed_length = 111  # feet
    flower_size = 12  # inches
    gap_between_plants = 18  # inches
    plants_already_owned = 17
    cost_per_plant = 6  # dollars
    
    total_distance_between_plants = flower_bed_length * 12  # convert feet to inches
    distance_between_plants_in_inches = flower_size + gap_between_plants
    total_plants_needed = math.floor(total_distance_between_plants / distance_between_plants_in_inches) + plants_already_owned
    total_cost = total_plants_needed * cost_per_plant
    
    return total_cost

 Executed result: None
[EXP] 986: [success_rate]: True, [answer]: 63, [output]: def solution():
    brother_eats_per_day = 18 / 2
    brother_eats_per_week = brother_eats_per_day * 7
    return brother_eats_per_week

 Executed result: 63.0
[EXP] 987: [success_rate]: True, [answer]: 70, [output]: def solution():
    petunias_per_basket = 3
    sweet_potato_vines_per_basket = 2
    total_petunias = petunias_per_basket * 5
    total_sweet_potato_vines = sweet_potato_vines_per_basket * 5
    total_cost_petunias = total_petunias * 3.0
    total_cost_sweet_potato_vines = total_sweet_potato_vines * 2.5
    total_cost = total_cost_petunias + total_cost_sweet_potato_vines
    return total_cost

 Executed result: 70.0
[EXP] 988: [success_rate]: True, [answer]: 3, [output]: def solution():
    soil_weight = 30
    sunflower_weight = 4 * 3
    carnation_weight = 10 * 1.5
    total_weight_taken = sunflower_weight + carnation_weight
    roses_left = soil_weight - total_weight_taken
    return int(roses_left)

 Executed result: 3
[EXP] 989: [success_rate]: False, [answer]: 6, [output]: def solution():
    monthly_savings = 2000 * 0.25
    annual_savings = monthly_savings * 12
    shoes_per annum = annual_savings / 1000
    return int(shoes_per_annum)

 Executed result: None
[EXP] 990: [success_rate]: True, [answer]: 45, [output]: def solution():
    time_peeling = 90 // 6
    time_cooking = (90 // 30) * 10
    total_time = time_peeling + time_cooking
    return total_time

 Executed result: 45
[EXP] 991: [success_rate]: False, [answer]: 14, [output]: def solution():
    low_degrees_cooled_per_hour = 2
    high_degrees_cooled_per_hour = 3
    warming_degrees_per_hour = 2
    low_hours = 3
    high_hours = 4
    no_ac_hours = 2
    
    total_degrees_cooled_on_low = low_degrees_cooled_per_hour * low_hours
    total_degrees_cooled_on_high = high_degrees_cooled_per_hour * high_hours
    total_degrees_warmed = warming_degrees_per_hour * no_ac_hours

    total_degrees_cooled = total_degrees_cooled_on_low + total_degrees_cooled_on_high
    degrees_cooled = 6 - total_degrees_warmed - total_degrees_cooled
    return degrees_cooled

 Executed result: -16
[EXP] 992: [success_rate]: False, [answer]: 15, [output]: def solution():
    age_when_seen_fathers_age = 30
    age_when_seen_third_times_fathers_age = 3 * age_when_seen_fathers_age
    time_since_seen = age_when_seen_third_times_fathers_age - age_when_seen_fathers_age
    return 75 * (time_since_seen // 75 + 1)

 Executed result: 75
[EXP] 993: [success_rate]: False, [answer]: 52, [output]: def solution():
    monthly_checks = 2  # 1 for electric bill and 1 for gas bill
    bi_monthly_checks = 2 * 12  # 12 months * 2 checks per month
    quarterly_checks = 12 // 3  # includes remainder which is 1
    total_checks = monthly_checks + bi_monthly_checks + quarterly_checks
    return total_checks

 Executed result: 30
[EXP] 994: [success_rate]: False, [answer]: 11, [output]: def solution():
    first_plane_flights = 0
    second_plane_flights = 0
    total_flights = 0
    while total_flights < 100:  # In reality, the number of flights per day that a plane makes will be much higher, but it's not required for this question to answer
        first_plane_flights += 1
        third_of_first_plane = first_plane_flights // 4
        remainder = first_plane_flights - third_of_first_plane
        second_plane_flights = 22
        first_plane_greece = third_of_first_plane
        first_plane_france_or_germany = remainder // 2
        first_plane_france = first_plane_france_or_germany
        first_plane_germany = first_plane_france_or_germany
        total_flights = first_plane_flights + second_plane_flights
    return first_plane_france

 Executed result: 29
[EXP] 995: [success_rate]: True, [answer]: 2, [output]: def solution():
    tobias = 20  # in seconds
    chikote = tobias * 2  # in seconds
    combined = tobias + chikote  # in seconds
    igneous = combined  # in seconds
    total_time = tobias + chikote + igneous  # in seconds
    minutes = total_time / 60  # convert seconds to minutes
    return round(minutes, 2)

 Executed result: 2.0
[EXP] 996: [success_rate]: True, [answer]: 12, [output]: def solution():
    money_from_mother = 6
    money_from_father = 2 * 6
    total_money_received = money_from_mother + money_from_father
    money_to_contribute = 30 - total_money_received
    return money_to_contribute

 Executed result: 12
[EXP] 997: [success_rate]: False, [answer]: 3, [output]: def solution():
    total_age = 20
    akbar_age = 3
    alessandro_age = 4
    helene_age = (total_age - (akbar_age + alessandro_age)) * 2 / 2
    wilfred_age = total_age - akbar_age - alessandro_age - helene_age
    return wilfred_age

 Executed result: 0.0
[EXP] 998: [success_rate]: False, [answer]: 6,600, [output]: def solution():
    total_donation_from_neighbors_and_online_fund = 500 + 1500
    lawyer_contribution = total_donation_from_neighbors_and_online_fund * 3
    total_donation = total_donation_from_neighbors_and_online_fund + 200
    result = total_donation
    return result

 Executed result: 2200
[EXP] 999: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_cookies = 100 * 15
    cookies_given = total_cookies // 2
    cookies_per_person = 15
    people_in_church = cookies_given // cookies_per_person
    return people_in_church

 Executed result: 50
[EXP] 1000: [success_rate]: False, [answer]: 25, [output]: def solution():
    kids_slice = 1 / 6  # each kid's slice is 1/6 of the watermelon
    adult_slice = kids_slice * 2  # each adult's slice is 2 times of each kid's slice
    adult_percentage = adult_slice / kids_slice * 100  # calculate the percentage
    return adult_percentage

 Executed result: 200.0
[EXP] 1001: [success_rate]: True, [answer]: 1, [output]: def solution():
    total_minutes_clinic = 9 * 60
    time_for_rounds = 9 * 20
    time_for_appointments = 10 * 30
    time_spent = time_for_rounds + time_for_appointments
    total_minutes_left = total_minutes_clinic - time_spent
    hours_left = total_minutes_left / 60
    return hours_left

 Executed result: 1.0
[EXP] 1002: [success_rate]: False, [answer]: 2, [output]: def solution():
    total_minutes = 20 + 30 + 120 + 10
    serving_time = 60 * 5
    start_time = serving_time - total_minutes
    return start_time

 Executed result: 120
[EXP] 1003: [success_rate]: True, [answer]: 8, [output]: def solution():
    lisa_boxes = 3.5
    peter_boxes = 4.5
    total_boxes = lisa_boxes + peter_boxes
    boxes_in_total = 64
    box_chocolate = boxes_in_total / total_boxes
    return int(box_chocolate)

 Executed result: 8
[EXP] 1004: [success_rate]: True, [answer]: 480, [output]: def solution():
    studio_rental = 25
    student_fee = 1.50
    num_students = 10
    num_sessions_per_week = 3
    num_weeks_per_month = 4
    total_rental_cost_per_week = studio_rental * num_sessions_per_week
    total_student_cost_per_week = student_fee * num_students * num_sessions_per_week
    total_cost_per_week = total_rental_cost_per_week + total_student_cost_per_week
    monthly_cost = total_cost_per_week * num_weeks_per_month
    return monthly_cost

 Executed result: 480.0
[EXP] 1005: [success_rate]: True, [answer]: 8, [output]: def solution():
    total_peter = 64
    total_martha = 56
    total_boxes_peter = 4
    total_boxes_martha = 7
    
    per_peter = total_peter / total_boxes_peter
    per_martha = total_martha / total_boxes_martha
    
    difference = per_peter - per_martha
    
    return difference

 Executed result: 8.0
[EXP] 1006: [success_rate]: True, [answer]: 1490, [output]: def solution():
    total_population = 50
    female_population = int(total_population * 3 / 5)
    female_births_per_month = female_population * 4
    female_births_per_year = female_births_per_month * 12
    total_births_in_a_year = female_births_per_year
    final_population = total_population + total_births_in_a_year
    return final_population

 Executed result: 1490
[EXP] 1007: [success_rate]: True, [answer]: 826, [output]: def solution():
    width = 14
    length = 25
    depth = 4
    volume = width * length * depth
    gallons_needed = volume * 5.9
    cost = gallons_needed * 0.10
    return cost

 Executed result: 826.0
[EXP] 1008: [success_rate]: True, [answer]: 34, [output]: def solution():
    red_sticks = 9
    blue_sticks = red_sticks + 5
    yellow_sticks = blue_sticks - 3
    total_sticks = red_sticks + blue_sticks + yellow_sticks
    return total_sticks

 Executed result: 34
[EXP] 1009: [success_rate]: True, [answer]: 230, [output]: def solution():
    matteo_distance = 55 * 4
    shandy_distance = 45 * 10
    difference = shandy_distance - matteo_distance
    return difference

 Executed result: 230
[EXP] 1010: [success_rate]: False, [answer]: 1,875, [output]: def solution():
    total_students = 3000
    students_over_16 = total_students // 2
    male_over_16 = students_over_16 // 4
    female_over_16 = students_over_16 - male_over_16
    students_under_16 = total_students - students_over_16
    male_under_16 = students_under_16 // 2
    female_under_16 = students_under_16 - male_under_16
    female_students = female_over_16 + female_under_16
    return female_students

 Executed result: 1875
[EXP] 1011: [success_rate]: True, [answer]: 5, [output]: def solution():
    beth = 10
    trey = beth + 4
    shaelyn = trey / 2
    quinn = shaelyn - 2
    return beth - quinn

 Executed result: 5.0
[EXP] 1012: [success_rate]: True, [answer]: 6000, [output]: def solution():
    tank_capacity = 18000
    wanda_day1 = tank_capacity / 4
    ms_b_day1 = wanda_day1 * 0.75
    wanda_day2 = wanda_day1 * (2/3)
    ms_b_day2 = ms_b_day1 * (1/3)
    total_added = wanda_day1 + ms_b_day1 + wanda_day2 + ms_b_day2
    return tank_capacity - total_added

 Executed result: 6000.0
[EXP] 1013: [success_rate]: False, [answer]: 94, [output]: def solution():
    init_battery = 0
    for hour in range(5):
        init_battery *= 0.9
    for hour in range(3):
        init_battery *= 0.93
    return init_battery * 100

 Executed result: 0.0
[EXP] 1014: [success_rate]: False, [answer]: 2, [output]: def solution():
    total_salary = 10 + (15 * 40)
    total_to_save = 10000 * 0.20
    weeks_to_save = total_to_save / total_salary
    return weeks_to_save

 Executed result: 3.278688524590164
[EXP] 1015: [success_rate]: False, [answer]: 3, [output]: def solution():

 Executed result: None
[EXP] 1016: [success_rate]: True, [answer]: 78, [output]: def solution():
    total_pieces = 15 * 60
    pieces_given = total_pieces - 2 * 60
    friends_share = pieces_given // 10
    return friends_share

 Executed result: 78
[EXP] 1017: [success_rate]: False, [answer]: 138, [output]: def solution():

 Executed result: None
[EXP] 1018: [success_rate]: False, [answer]: 45, [output]: def solution():
    total_pictures = 72
    total_albums = 8
    selfies = 3
    portraits = 2

    selfies_pictures = total_pictures - (total_albums - selfies - portraits)
    return selfies, selfies_pictures

 Executed result: (3, 69)
[EXP] 1019: [success_rate]: True, [answer]: 60, [output]: def solution():
    pages_per_minute = 3
    total_pages = 18
    minutes_per_pages = 10 / pages_per_minute
    total_minutes = total_pages * minutes_per_pages
    return total_minutes

 Executed result: 60.0
[EXP] 1020: [success_rate]: True, [answer]: 98, [output]: def solution():
    total_guests = 100
    early_checkout = 24
    late_checkout = 15
    checked_in = 2 * late_checkout
    after_dinner = 7
    total_rooms = total_guests - early_checkout - late_checkout
    total_rooms += checked_in
    total_rooms += after_dinner
    return total_rooms

 Executed result: 98
[EXP] 1021: [success_rate]: True, [answer]: 22, [output]: def solution():
    wednesday = 4
    thursday = 6
    friday = wednesday * 3
    total = wednesday + thursday + friday
    return total

 Executed result: 22
[EXP] 1022: [success_rate]: False, [answer]: 36, [output]: def solution():
    easy = int(0.4 * 60)
    average_difficult = int((1 - 0.4) / 2 * 60)
    easy_correct = int(0.75 * easy)
    average_difficult_correct = int(0.5 * average_difficult)
    return easy_correct + average_difficult_correct

 Executed result: 27
[EXP] 1023: [success_rate]: False, [answer]: 12, [output]: def solution():
    let_large = x
    let_small = 2 * x
    let_total_cost = let_large * 4 * 3 + let_small * 4
    let_total_cost = 120
    let_small = let_total_cost - (let_large * 4 * 3)
    let_small = let_small / 4
    return let_small

 Executed result: None
[EXP] 1024: [success_rate]: True, [answer]: 77, [output]: def solution():
    man_sandwiches = 5
    wife_sandwiches = 4
    son_sandwiches = 2
    
    total_sandwiches_per_day = man_sandwiches + wife_sandwiches + son_sandwiches
    sandwiches_per_week = total_sandwiches_per_day * 7
    
    return sandwiches_per_week

 Executed result: 77
[EXP] 1025: [success_rate]: False, [answer]: 300, [output]: def solution():
    money_earned = (80 + 60) * (1 + 4)
    money_given = 2 * 10
    remaining_money = money_earned - money_given
    return remaining_money

 Executed result: 680
[EXP] 1026: [success_rate]: False, [answer]: 30, [output]: def solution():

 Executed result: None
[EXP] 1027: [success_rate]: False, [answer]: 43200, [output]: def solution():
    initial_mine_rate = 12  # pounds per day with bare hands
    iron_mine_rate = initial_mine_rate * 2  # pounds per day with iron pickaxe
    steel_mine_rate = iron_mine_rate * 1.5  # pounds per day with steel pickaxe
    no_of_dwarves = 40
    no_of_days = 30 * 30  # 30 days in a month
    total_mined = no_of_dwarves * no_of_days * steel_mine_rate
    return int(total_mined)

 Executed result: 1296000
[EXP] 1028: [success_rate]: True, [answer]: 12, [output]: def solution():
    ratio = 6 / 4
    price = 6 * (8 / 4)
    return price

 Executed result: 12.0
[EXP] 1029: [success_rate]: True, [answer]: 200, [output]: def solution():
    purchase_price = 3000
    money_paid = 1000
    remaining_balance = purchase_price - money_paid
    monthly_payment = (remaining_balance / 100) * 10
    return monthly_payment

 Executed result: 200.0
[EXP] 1030: [success_rate]: False, [answer]: 34, [output]: def solution():
    red_balloons = 25
    bursted_red = int(red_balloons * 0.4)
    red_balloons -= bursted_red
    yellow_balloons = 12
    released_yellow = int(yellow_balloons / 2)
    yellow_balloons -= released_yellow
    blue_balloons = 8
    added_blue = int(blue_balloons * 0.75)
    total_balloons = red_balloons + yellow_balloons + added_blue
    return total_balloons

 Executed result: 27
[EXP] 1031: [success_rate]: False, [answer]: 24, [output]: def solution():
    chance_of_substitute_teacher = 0.5
    chance_of_normal_teacher_extension = 0.4
    chance_of_personal_extension = 0.2
    total_chance_turn_in_homework = 1 - (chance_of_substitute_teacher * (1 - chance_of_normal_teacher_extension * (1 - chance_of_personal_extension)))
    return (1 - total_chance_turn_in_homework) * 100

 Executed result: 34.0
[EXP] 1032: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_seats = 6000
    occupied_seats = 950 + 300
    available_seats = total_seats - occupied_seats
    seats_per_graduate = available_seats // 950
    return seats_per_graduate

 Executed result: 5
[EXP] 1033: [success_rate]: True, [answer]: 450, [output]: def solution():
    large_beans = 75
    medium_beans = large_beans * 2
    small_beans = medium_beans * 3
    
    return small_beans

 Executed result: 450
[EXP] 1034: [success_rate]: True, [answer]: 2, [output]: def solution():
    total_hours = 6 * 3
    total_income = 15 * 3
    parking_expenses = 3 * 3
    total_expenses = parking_expenses
    hourly_income = (total_income - total_expenses) / total_hours
    return hourly_income

 Executed result: 2.0
[EXP] 1035: [success_rate]: True, [answer]: 66, [output]: def solution():
    total = 200
    book_cost = 3 * 16
    pencil_cost = 3 * 6
    total_cost = book_cost + pencil_cost
    return total_cost

 Executed result: 66
[EXP] 1036: [success_rate]: False, [answer]: 35, [output]: def solution():
    num_bottles = 24 // 3
    total_time = num_bottles * 5
    return total_time

 Executed result: 40
[EXP] 1037: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_apples = 2 * 40  # total apples from two boxes
    packs_per_box = 40 // 8  # apples per pack in one box
    total_packs = total_apples // 8
    
    return total_packs

 Executed result: 10
[EXP] 1038: [success_rate]: True, [answer]: 10, [output]: def solution():
    parmesan_price = 11
    mozzarella_price = 6
    parmesan_quantity = 2
    mozzarella_quantity = 3
    initial_cash = 50
    total_cost = parmesan_price * parmesan_quantity + mozzarella_price * mozzarella_quantity
    remaining_cash = initial_cash - total_cost
    return remaining_cash

 Executed result: 10
[EXP] 1039: [success_rate]: False, [answer]: 4, [output]: def solution():
    total_loan_amount = 4 * 50000
    pre_college_income = 25000
    increased_income = 3 * 25000
    lost_income = 4 * 25000
    total_earning_needed = total_loan_amount + lost_income
    time_taken = (total_earning_needed - 0) / (increased_income - pre_college_income)
    return round(time_taken)

 Executed result: 6
[EXP] 1040: [success_rate]: False, [answer]: 160, [output]: def solution():
    length = 6 + 2
    width = 8 + 2
    fabric potrzebs = 2 * (length * width)
    return fabric potrzebs

 Executed result: None
[EXP] 1041: [success_rate]: True, [answer]: 736, [output]: def solution():
    letters_monday = 425
    letters_tuesday = (letters_monday // 5) + 17
    letters_wednesday = 2 * letters_tuesday + 5
    return letters_monday + letters_tuesday + letters_wednesday

 Executed result: 736
[EXP] 1042: [success_rate]: True, [answer]: 101, [output]: def solution():
    total_cost = (10 * 6.50) + (6 * 6)
    return total_cost

 Executed result: 101.0
[EXP] 1043: [success_rate]: False, [answer]: 3, [output]: def solution():
    first_loss = -5
    second_gain = 2 * first_loss + 1
    third_loss = second_gain * 1.5
    total_loss = first_loss + second_gain + third_loss
    average_loss = total_loss / 3
    return average_loss

 Executed result: -9.166666666666666
[EXP] 1044: [success_rate]: True, [answer]: 130000, [output]: def solution():
    return 26 * 5 * 1000

 Executed result: 130000
[EXP] 1045: [success_rate]: True, [answer]: 1, [output]: def solution():
    xavier_height = 4 * 12 + 3  # convert feet to inches and add the growth
    cole_height = 50 + 2
    difference = abs(cole_height - xavier_height)
    return difference

 Executed result: 1
[EXP] 1046: [success_rate]: False, [answer]: 420, [output]: def solution():
    total = 1920
    second = first + 80
    third = second * 2
    first = total - second - third
    return first

 Executed result: None
[EXP] 1047: [success_rate]: False, [answer]: 189, [output]: def solution():
    days_in_week = 7
    working_hours_per_day = 3/8
    days_worked = 3 * days_in_week
    hours_worked = days_worked * working_hours_per_day
    hours_per_painter = hours_worked / 4
    hours_per_painter = round(hours_per_painter * 24)  # Convert hours to a fraction of a day 
    return hours_per_painter

 Executed result: 47
[EXP] 1048: [success_rate]: False, [answer]: 10, [output]: def solution():
    x = (19 - (8 + (19 - 8) / 2))  # num of balls retrieved in the first set
    return x

 Executed result: 5.5
[EXP] 1049: [success_rate]: False, [answer]: 7400, [output]: def solution():
    price = 20000
    years = 2010 - 2007
    for year in range(1, years + 1):
        price *= (1 - 0.21)
    return price

 Executed result: 9860.78
[EXP] 1050: [success_rate]: True, [answer]: 20, [output]: def solution():
    english_books = 50 / 2
    german_books = 50 * 0.1
    spanish_books = 50 - (english_books + german_books)
    return spanish_books

 Executed result: 20.0
[EXP] 1051: [success_rate]: True, [answer]: 655, [output]: def solution():
    total_distance = 1955
    distance_driven = 325 * 4
    distance_still_needed = total_distance - distance_driven
    return distance_still_needed

 Executed result: 655
[EXP] 1052: [success_rate]: True, [answer]: 15, [output]: def solution():
    cups_per_day = 8
    cups_per_gallon = 16
    total_cups = cups_per_day * 30
    total_gallons = total_cups / cups_per_gallon
    return total_gallons

 Executed result: 15.0
[EXP] 1053: [success_rate]: False, [answer]: 110, [output]: 
def solution():
    people = 120
    people += 20
    people += 50 + 2 * 50
    people -= 80
    return people

 Executed result: 210
[EXP] 1054: [success_rate]: True, [answer]: 55, [output]: def solution():
    tank_top = 10
    running_shorts = tank_top + 5
    tennis_shoes = 48 / 2
    socks = 8 - 2
    total = tank_top + running_shorts + tennis_shoes + socks
    return total

 Executed result: 55.0
[EXP] 1055: [success_rate]: True, [answer]: 2400, [output]: def solution():
    area = 200  # Total area of the kitchen floor in SqFt
    cost = 12  # Cost of each tile in dollars
    tile_length = 1  # Length of each tile side in ft
    tiles_required = area / (tile_length ** 2)  # Calculate the number of tiles required
    total_cost = tiles_required * cost  # Calculate the total cost
    return total_cost

 Executed result: 2400.0
[EXP] 1056: [success_rate]: True, [answer]: 2304, [output]: def solution():
    normal_cost = 120
    increase_percentage = 0.6
    increase_amount = normal_cost * increase_percentage
    accident_cost = normal_cost + increase_amount
    total_yearly_cost = accident_cost * 12

    return total_yearly_cost

 Executed result: 2304.0
[EXP] 1057: [success_rate]: False, [answer]: 156, [output]: def solution():
    twin_loads_per_week = 2
    king_load_per_week = 1
    twin_beds = 4
    king_bed = 1
    weeks_in_year = 52
    
    twin_loads_per_year = (twin_beds // 2) * twin_loads_per_week * weeks_in_year
    king_loads_per_year = king_load_per_week * weeks_in_year
    
    total_loads_per_year = twin_loads_per_year + king_loads_per_year
    
    return total_loads_per_year

 Executed result: 260
[EXP] 1058: [success_rate]: True, [answer]: 24, [output]: def solution():
    movies_per_weekend = 4 + 2  # 4 on Saturday and 2 on Sunday
    total_movies = movies_per_weekend * 4  # 4 weeks
    return total_movies

 Executed result: 24
[EXP] 1059: [success_rate]: True, [answer]: 250, [output]: def solution():
    stickers_2_years_back = 100
    stickers_last_year = 50
    stickers_this_year = 2 * stickers_last_year
    total_stickers = stickers_2_years_back + stickers_last_year + stickers_this_year
    return total_stickers

 Executed result: 250
[EXP] 1060: [success_rate]: True, [answer]: 2, [output]: def solution():
    total_food = 720
    daily_food_consumption = 3 * 2 * 60
    no_of_days = total_food // daily_food_consumption
    return no_of_days

 Executed result: 2
[EXP] 1061: [success_rate]: False, [answer]: 31, [output]: def solution():
    jake_slices = 10 - 3
    silvia_slices = 2 * jake_slices
    total_slices = 4 * 8 + jake_slices + silvia_slices + 10
    return total_slices

 Executed result: 63
[EXP] 1062: [success_rate]: False, [answer]: 58, [output]: def solution():
    x = 98 - 18
    return 18 + x

 Executed result: 98
[EXP] 1063: [success_rate]: True, [answer]: 482, [output]: def solution():
    cast_cost = 200
    visit_cost = 300 * 0.5  # 30 minutes is half an hour
    painkillers_cost = 4 * 30
    parking_cost = 6 * 2  # minimum of 2 hours
    total_cost = cast_cost + visit_cost + painkillers_cost + parking_cost
    return total_cost

 Executed result: 482.0
[EXP] 1064: [success_rate]: True, [answer]: 320, [output]: def solution():
    emails_per_day = 80
    unresponsive = (emails_per_day * 20) // 100
    responsive = emails_per_day - unresponsive
    emails_per_week = responsive * 5
    return emails_per_week

 Executed result: 320
[EXP] 1065: [success_rate]: True, [answer]: 247, [output]: def solution():
    a = 32
    b = a * 2
    c = b * 3
    d = c + 30
    e = d + 25
    return e

 Executed result: 247
[EXP] 1066: [success_rate]: True, [answer]: 95, [output]: def solution():
    total = 100 + 100 + 100 + 80
    avg = total / 4
    return avg

 Executed result: 95.0
[EXP] 1067: [success_rate]: True, [answer]: 14, [output]: def solution():
    pizza_total = (20 + 2 * 20)  # Total pizzas ordered
    glee_club_eaten = 20 * 0.7  # Pizzas eaten by glee club
    football_team_eaten = 2 * 20 * 0.8  # Pizzas eaten by football team
    total_eaten = glee_club_eaten + football_team_eaten  # Total pizzas eaten
    pizzas_left = pizza_total - total_eaten  # Pizzas left
    return pizzas_left

 Executed result: 14.0
[EXP] 1068: [success_rate]: False, [answer]: 245, [output]: def solution():
    small_coupons = 700
    big_coupons = 2 * small_coupons
    small_cost = small_coupons * 5
    big_cost = big_coupons * 15
    total_cost = small_cost + big_cost
    return total_cost

 Executed result: 24500
[EXP] 1069: [success_rate]: False, [answer]: 24, [output]: def solution():

 Executed result: None
[EXP] 1070: [success_rate]: True, [answer]: 300, [output]: def solution():
    trucks = 20
    tons_per_truck = 20
    failed_trucks = trucks // 4  # 20 divisible by 4 is 5 (a quarter)
    total_trucks_reached = trucks - failed_trucks
    total_tons_reached = total_trucks_reached * tons_per_truck
    return total_tons_reached

 Executed result: 300
[EXP] 1071: [success_rate]: False, [answer]: 18, [output]: def solution():
    price_per_pound = 4.0
    discounted_price_per_pound = 4.0 * 0.5
    full_price = 6 * price_per_pound
    discounted_price = full_price - (full_price - discounted_price_per_pound)
    return discounted_price

 Executed result: 2.0
[EXP] 1072: [success_rate]: True, [answer]: 251, [output]: def solution():
    base_rate = 125
    num_guests = 25 + 7 + 13 - 4
    additional_guests = num_guests - 20
    total_cost = base_rate + additional_guests * 6
    return total_cost

 Executed result: 251
[EXP] 1073: [success_rate]: False, [answer]: 85, [output]: def solution():
    moneyleft = 2 * 60
    return moneyleft

 Executed result: 120
[EXP] 1074: [success_rate]: False, [answer]: 21, [output]: def solution():
    total_bananas = 315
    first_monkey_bananas = 10
    second_monkey_bananas = first_monkey_bananas + 4
    total_bananas_per_day = total_bananas
    total_bananas_leftover = 0
    
    while total_bananas_per_day > 0:
        first_monkey_bananas_today = min(total_bananas_per_day, first_monkey_bananas)
        second_monkey_bananas_today = min(total_bananas_per_day - first_monkey_bananas_today, second_monkey_bananas)
        third_monkey_bananas_today = min(total_bananas_per_day - first_monkey_bananas_today - second_monkey_bananas_today, total_bananas_leftover)
        
        total_bananas_per_day -= first_monkey_bananas_today + second_monkey_bananas_today + third_monkey_bananas_today
        total_bananas_leftover += third_monkey_bananas_today
        
        first_monkey_bananas -= first_monkey_bananas_today
        second_monkey_bananas -= second_monkey_bananas_today
        
    return third_monkey_bananas

 Executed result: None
[EXP] 1075: [success_rate]: False, [answer]: 750, [output]: def solution():
    pieces_placed = 500 * 1 + 500
    return pieces_placed

 Executed result: 1000
[EXP] 1076: [success_rate]: False, [answer]: 16, [output]: def solution():
    # 15 roses at $2 each is 15 x 2 = $30
    total_cost = 30
    # Using 5 $5 bills, we have a total of $25
    initial_cash = 5 * 5
    # $25 - $30 = $5 needed for change
    # 5 $1 and 20 quarters = 80 quarters
    return 80

 Executed result: 80
[EXP] 1077: [success_rate]: True, [answer]: 162, [output]: def solution():
    milkshakes = 6 * 5.50
    platters = 9 * 11
    sodas = 20 * 1.50
    total = milkshakes + platters + sodas
    return total

 Executed result: 162.0
[EXP] 1078: [success_rate]: False, [answer]: 145, [output]: def solution():
    t1_arrival = 10
    t1_stay = 20
    t1_leaving = t1_arrival + t1_stay
    
    t2_arrival = t1_leaving + 30
    t2_stay = t1_stay / 4
    t2_leaving = t2_arrival + t2_stay
    
    t3_arrival = t2_leaving + 60
    t3_leaving = t3_arrival
    
    t4_arrival = t3_leaving + 20
    
    return t4_arrival - t1_arrival

 Executed result: 135.0
[EXP] 1079: [success_rate]: True, [answer]: 8, [output]: def solution():
    saved = 12 * 10  # calculate the toothpicks saved so far
    more_needed = 200 - saved  # calculate the toothpicks still needed
    more_weeks = more_needed // 10  # calculate the more weeks needed to save the rest
    return more_weeks

 Executed result: 8
[EXP] 1080: [success_rate]: True, [answer]: 10, [output]: def solution():
    original_price = 2000
    mr_rogers_price = original_price * 0.75
    friend_price = mr_rogers_price * 1.2
    original_price_discount = (original_price - friend_price) / original_price * 100
    return original_price_discount

 Executed result: 10.0
[EXP] 1081: [success_rate]: True, [answer]: 72000, [output]: def solution():
    time_in_seconds = 4 * 60 * 60  # 4 hours in seconds
    jellyfish_per_second = 1
    total_jellyfish = jellyfish_per_second * 5 * time_in_seconds
    return total_jellyfish

 Executed result: 72000
[EXP] 1082: [success_rate]: True, [answer]: 195, [output]: def solution():
    binkie_score = 90
    frankie_score = 2 * binkie_score + 15
    return frankie_score

 Executed result: 195
[EXP] 1083: [success_rate]: False, [answer]: 2, [output]: def solution():

 Executed result: None
[EXP] 1084: [success_rate]: True, [answer]: 2, [output]: def solution():
    cost_per_banana = 0.80
    cost_per_bunch = 3.00
    bananas_per_bunch = 4
    number_of_bunches = 10
    total_bananas = number_of_bunches * bananas_per_bunch
    total_cost_individually = total_bananas * cost_per_banana
    total_cost_in_bunches = number_of_bunches * cost_per_bunch
    savings = total_cost_individually - total_cost_in_bunches
    return round(savings, 2)

 Executed result: 2.0
[EXP] 1085: [success_rate]: True, [answer]: 20, [output]: def solution():
    total_fence = 100
    sam_fence = total_fence // 2 - 30
    return sam_fence

 Executed result: 20
[EXP] 1086: [success_rate]: False, [answer]: 26, [output]: def solution():

 Executed result: None
[EXP] 1087: [success_rate]: False, [answer]: 131250, [output]: def solution():

 Executed result: None
[EXP] 1088: [success_rate]: False, [answer]: 12, [output]: def solution():
    farmer_bales = 5
    truck_bales = 3
    total_bales_per_hour = farmer_bales + truck_bales
    hours_worked = 6
    
    total_bales_collected = total_bales_per_hour * hours_worked
    total_bales_still_in_field = 200 - total_bales_collected
    return total_bales_still_in_field

 Executed result: 152
[EXP] 1089: [success_rate]: False, [answer]: 30, [output]: def solution():
    total_minutes_per_day = 6 * 60 + 2 * 40
    weekly_minutes = total_minutes_per_day * 5
    sat_sun_minutes = weekly_minutes * (1/16)
    daily_learned_minutes = weekly_minutes + sat_sun_minutes
    hours_learned_per_week = daily_learned_minutes / 60
    return hours_learned_per_week

 Executed result: 38.958333333333336
[EXP] 1090: [success_rate]: False, [answer]: 32, [output]: def solution():

 Executed result: None
[EXP] 1091: [success_rate]: True, [answer]: 72, [output]: def solution():
    first_child_height = 6 * 12  # First child's height in inches
    second_child_height = first_child_height + 2
    third_child_height = second_child_height - 5
    fourth_child_height = third_child_height + 3
    return fourth_child_height

 Executed result: 72
[EXP] 1092: [success_rate]: True, [answer]: 1000, [output]: def solution():
    total_apples = 2000
    apples_per_bag = 10
    price_per_bag = 5
    total_earned = (total_apples // apples_per_bag) * price_per_bag
    return total_earned

 Executed result: 1000
[EXP] 1093: [success_rate]: False, [answer]: 1080, [output]: def solution():
    meat_left = 270
    meat_alone = meat_left
    meat_before = 0
    while meat_alone > 0:
        meat_alone //= 2
        if meat_alone <= 0:
            break
        meat_before += meat_alone
    return 2 * meat_before + 270

 Executed result: 802
[EXP] 1094: [success_rate]: True, [answer]: 144, [output]: def solution():
    north_south = 10 * 8 * 2  # calculate the area of the north and south walls
    east_west = 5 * 8 * 2  # calculate the area of the east and west walls
    total_area = north_south + east_west  # calculate the total area to be painted
    gallons_required = total_area / 20  # calculate the number of gallons required
    cost = gallons_required * 12  # calculate the cost
    return cost

 Executed result: 144.0
[EXP] 1095: [success_rate]: False, [answer]: 25, [output]: def solution():
    shaken = 3
    unshaken = 8
    shaken_taken = 1
    unshaken_taken = 2
    total_taken = shaken_taken + unshaken_taken
    left_shaken = shaken - shaken_taken
    left_unshaken = unshaken - unshaken_taken
    friend_gets_sprite = left_shaken
    percentage = (friend_gets_sprite / (shaken + left_unshaken)) * 100
    return percentage

 Executed result: 22.22222222222222
[EXP] 1096: [success_rate]: True, [answer]: 270, [output]: def solution():
    distance1 = 60 * 3
    distance2 = 30 * 3
    total_distance = distance1 + distance2
    return total_distance

 Executed result: 270
[EXP] 1097: [success_rate]: True, [answer]: 240, [output]: def solution():
    total_days = (31 + 19)  # Calculate total days in march and first 19 days of april
    days_off = total_days * 0.2  # Calculate the number of days off
    total_hours = (total_days - days_off) * 3  # Calculate total hours worked
    peoples_per_hour = 2
    total_people = total_hours * peoples_per_hour
    return total_people

 Executed result: 240.0
[EXP] 1098: [success_rate]: True, [answer]: 480, [output]: def solution():
    people_in_buses = 12 * 35
    people_in_cars = 20 * 3
    total_people = people_in_buses + people_in_cars
    return total_people

 Executed result: 480
[EXP] 1099: [success_rate]: True, [answer]: 30, [output]: def solution():
    mikes_age = 24
    martha_age = mikes_age - 4
    jeff_age = martha_age + 10
    return jeff_age

 Executed result: 30
[EXP] 1100: [success_rate]: False, [answer]: 2, [output]: def solution():

 Executed result: None
[EXP] 1101: [success_rate]: True, [answer]: 5, [output]: def solution():
    lunch_time_per_day = 30
    break_time_per_day = 2 * 15
    total_time_per_day = lunch_time_per_day + break_time_per_day
    total_time_in_minutes = total_time_per_day * 5
    total_hours = total_time_in_minutes / 60
    return total_hours

 Executed result: 5.0
[EXP] 1102: [success_rate]: True, [answer]: 16, [output]: def solution():
    a = 8
    m = 3.5 * a
    total = 52
    ahito = total - a - m
    return ahito

 Executed result: 16.0
[EXP] 1103: [success_rate]: False, [answer]: 113, [output]: def solution():
    initial_balance = 85
    returned_item = 15

 Executed result: None
[EXP] 1104: [success_rate]: False, [answer]: 90, [output]: def solution():
    large_jellyfish = 5 / 5 * big_jellyfish
    blue_large_jellyfish = 1 / 3 * large_jellyfish
    blue_jellyfish = blue_large_jellyfish + small_jellyfish
    small_jellyfish = big_jellyfish - large_jellyfish
    return blue_jellyfish + 6

 Executed result: None
[EXP] 1105: [success_rate]: True, [answer]: 24, [output]: def solution():
    chris_age = 4
    ben_age = chris_age * 2
    caroline_age = ben_age * 3
    return caroline_age

 Executed result: 24
[EXP] 1106: [success_rate]: True, [answer]: 40, [output]: def solution():
    salary = 100000
    saving_rate = 0.2
    retirement_years = 20
    living_expense = 0.4 * salary
    annual_savings = salary * saving_rate
    total_saved = 0
    years_worked = 0
    while total_saved < retirement_years * 12 * annual_savings + living_expense * 12 * retirement_years:
        total_saved += annual_savings * 12
        years_worked += 1
    return years_worked - retirement_years

 Executed result: 40
[EXP] 1107: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_ribbon = 100
    num_parts = 4
    per_part_length = total_ribbon // num_parts
    inner_parts = 5
    final_part_length = per_part_length // inner_parts
    return final_part_length

 Executed result: 5
[EXP] 1108: [success_rate]: False, [answer]: 360, [output]: def solution():
    total_students = 0
    total_boys = 240
    total_percentage = 40
    total_girls = (100 - total_percentage) * total_students / total_percentage
    return total_girls

 Executed result: 0.0
[EXP] 1109: [success_rate]: True, [answer]: 38, [output]: def solution():
    total_cost = 19 + 26
    discount = 7
    final_cost = total_cost - discount
    return final_cost

 Executed result: 38
[EXP] 1110: [success_rate]: True, [answer]: 3, [output]: def solution():
    four_heels = 4
    two_heels = 2
    num_heels = 3 + 3
    total_height = four_heels * 3 + two_heels * 3
    average_height = total_height / num_heels
    return average_height

 Executed result: 3.0
[EXP] 1111: [success_rate]: False, [answer]: 60, [output]: def solution():
    total_distance = 9300
    daily_distance = 2 * 125
    remaining_distance = total_distance - (30 * daily_distance)
    required_additional_distance = remaining_distance / (30 - 2)
    return round(required_additional_distance)

 Executed result: 64
[EXP] 1112: [success_rate]: True, [answer]: 157, [output]: def solution():
    total_receipt = (3 * 9) + (11 * 5) + (25 * 3)
    return total_receipt

 Executed result: 157
[EXP] 1113: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_apples = 12
    peter_wants = total_apples / 4
    paul_wants = total_apples / 3
    james_has = total_apples - peter_wants - paul_wants
    return round(james_has)

 Executed result: 5
[EXP] 1114: [success_rate]: True, [answer]: -3, [output]: def solution():
    starting_temperature = 2
    dropped = 8
    increased = 3
    morning_temp = starting_temperature - dropped + increased
    return morning_temp

 Executed result: -3
[EXP] 1115: [success_rate]: True, [answer]: 8, [output]: def solution():
    money = 21
    money += 11
    money -= 5
    money -= 19
    return money

 Executed result: 8
[EXP] 1116: [success_rate]: True, [answer]: 5, [output]: def solution():
    spent = 16 - 2
    total_cost = 4
    books_cost = total_cost - spent
    cost_per_book = books_cost / 2
    return cost_per_book

 Executed result: -5.0
[EXP] 1117: [success_rate]: True, [answer]: 60, [output]: def solution():
    last_year_students = 50
    percentage_increase = 20
    increase = (last_year_students / 100) * percentage_increase
    total_students = last_year_students + increase
    return total_students

 Executed result: 60.0
[EXP] 1118: [success_rate]: False, [answer]: 9, [output]: def solution():
    total_time = 5 * 60  # total time in seconds
    total_blanks = 255
    desired_blanks = 459
    total_seconds = (total_blanks / total_blanks) * total_time
    return total_seconds

 Executed result: 300.0
[EXP] 1119: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_male_fish = (4 + 2) + (3 + 2)
    total_female_fish = (7 + 1) + (5 + 3)
    return total_female_fish - total_male_fish

 Executed result: 5
[EXP] 1120: [success_rate]: False, [answer]: 18, [output]: def solution():
    amalia = 4
    megan = amalia + 2
    dior = amalia + 4 + 4
    total = amalia + megan + dior
    return total

 Executed result: 22
[EXP] 1121: [success_rate]: False, [answer]: 560, [output]: def solution():
    speed = 70
    distance = speed * 2 * 2  # distance of one trip is 2 hours
    total_distance = distance * 2  # round trip
    monthly_distance = total_distance * 2  # two visits per month
    return monthly_distance

 Executed result: 1120
[EXP] 1122: [success_rate]: True, [answer]: 35, [output]: def solution():
    sofie_distance = 10 * 7
    brian_distance = sofie_distance / 2
    return brian_distance

 Executed result: 35.0
[EXP] 1123: [success_rate]: False, [answer]: 18, [output]: def solution():
    total_toys = 400
    worker1_production = 2 * 5 * 6
    worker2_production = 2 * 5 * 4
    total_production = worker1_production + worker2_production
    remaining_toys = total_toys - total_production
    fifth_worker_production = (total_toys - remaining_toys) / 10
    return fifth_worker_production

 Executed result: 10.0
[EXP] 1124: [success_rate]: True, [answer]: 105, [output]: def solution():
    korys_dog_weight = 60
    elijahs_first_dog_weight = korys_dog_weight / 4
    elijahs_second_dog_weight = korys_dog_weight / 2
    total_weight = elijahs_first_dog_weight + elijahs_second_dog_weight + korys_dog_weight
    return total_weight

 Executed result: 105.0
[EXP] 1125: [success_rate]: False, [answer]: 64, [output]: def solution():
    given_to_luis = (n := int(input("Enter the number of stickers Seth had in the beginning:")))/2
    used_by_luis = given_to_luis / 2
    given_to_kris = given_to_luis - used_by_luis
    stickers_left = given_to_kris - 9
    return n

 Executed result: None
[EXP] 1126: [success_rate]: True, [answer]: 90, [output]: def solution():
    ounces_total = 3 * 10
    mms_per_ounce = 30
    mms_in_total = ounces_total * mms_per_ounce
    small_bags = mms_in_total // 10
    return small_bags

 Executed result: 90
[EXP] 1127: [success_rate]: True, [answer]: 50, [output]: def solution():
    earth_circumference = 40000 # in kilometers
    half_earth_distance = earth_circumference / 2 # in kilometers
    flying_distance_per_day = 400 # in kilometers
    days_for_half_earth = half_earth_distance / flying_distance_per_day
    return days_for_half_earth

 Executed result: 50.0
[EXP] 1128: [success_rate]: True, [answer]: 750, [output]: def solution():
    avg_speed = 120
    sec_faster = avg_speed * 5
    fastest = sec_faster * 1.25
    return fastest

 Executed result: 750.0
[EXP] 1129: [success_rate]: False, [answer]: 9, [output]: def solution():
    liam_age = 16
    liam_two_years_ago = liam-age
    vince_age_two_years_ago = liam_two_years_ago / 2
    vince_age_now = vince_age_two_years_ago + 2
    return vince_age_now

 Executed result: None
[EXP] 1130: [success_rate]: False, [answer]: 8, [output]: def solution():
    am = md = x = 0
    cs = x + 12
    am + md + cs + x = 56
    am + cs = 30
    solve for x
    return cs - am

 Executed result: None
[EXP] 1131: [success_rate]: False, [answer]: 25, [output]: def solution():
    total_crayons = 200
    box_weight = 8
    crayon_weight = 1
    total_weight = 8 * (total_crayons // 8) * 2 + total_crayons
    return total_weight / 16

 Executed result: 37.5
[EXP] 1132: [success_rate]: True, [answer]: 96, [output]: def solution():
    length_of_tree = 80
    percentage = 0.8
    logs = length_of_tree * percentage
    individual_log_length = 4
    planks_per_log = 5
    price_per_plank = 1.2
    
    total_logs = logs / individual_log_length
    total_planks = total_logs * planks_per_log
    total_price = total_planks * price_per_plank
    
    return total_price

 Executed result: 96.0
[EXP] 1133: [success_rate]: False, [answer]: 45000, [output]: def solution():
    v = 5000 / 2
    total_earned_by_valerie_and_brother = v + 5000
    total_earned_by_all = 2 * total_earned_by_valerie_and_brother
    return total_earned_by_all

 Executed result: 15000.0
[EXP] 1134: [success_rate]: False, [answer]: 50, [output]: def solution():
    minutes_on_beach = 40
    rate_on_beach = 20     # converting minutes to 20 minutes per mile
    rate_on_sidewalk = rate_on_beach * 2  
    time_on_beach = minutes_on_beach / rate_on_beach 
    time_on_sidewalk = 60 / rate_on_sidewalk
    time_total = time_on_beach + time_on_sidewalk
    
    return time_total

 Executed result: 3.5
[EXP] 1135: [success_rate]: True, [answer]: 7, [output]: def solution():
    initial_savings = 4 * 8
    total_target = 60
    deficit = total_target - initial_savings
    weeks_to_save = deficit / 4
    return int(weeks_to_save) + 1

 Executed result: 8
[EXP] 1136: [success_rate]: True, [answer]: 32, [output]: def solution():
    total_birds = 3 * 7 + 2 * 4 + 1 * 3
    return total_birds

 Executed result: 32
[EXP] 1137: [success_rate]: False, [answer]: 26, [output]: def solution():
    initial_marbles = (60 - 2 * 12) + 10
    return initial_marbles

 Executed result: 46
[EXP] 1138: [success_rate]: False, [answer]: 68, [output]: def solution():
    total_ounces = 4 + 1
    total_degrees = 33 * 4 + x
    return max(40, total_degrees / total_ounces)

 Executed result: None
[EXP] 1139: [success_rate]: False, [answer]: 700, [output]: def solution():

 Executed result: None
[EXP] 1140: [success_rate]: False, [answer]: 1, [output]: def solution():
    cost_per_pack = 10.0
    total_cost = cost_per_pack * 4
    discount = total_cost * 0.10
    total_cost -= discount
    number_of_bagels = 9 * 4
    cost_per_bagel = total_cost / number_of_bagel
    return cost_per_bagel

 Executed result: None
[EXP] 1141: [success_rate]: False, [answer]: 27, [output]: def solution():
    scoops = 23 - 5
    potatoes_per_scoop = (6 - 3) * (3 - 1)
    potatoes = scoops * potatoes_per_scoop
    return potatoes

 Executed result: 108
[EXP] 1142: [success_rate]: False, [answer]: 20, [output]: def solution():
    eggs_per_day = 0
    for days in range(30):
        eggs_per_day += 3
        
    for days in range(30):
        eggs_per_day += 5
        
    total_eggs = eggs_per_day * 60 // 12
    return total_eggs

 Executed result: 1200
[EXP] 1143: [success_rate]: True, [answer]: 9, [output]: def solution():
    green = 17
    red = 2 * green
    blue = 60 - green - red
    return blue

 Executed result: 9
[EXP] 1144: [success_rate]: True, [answer]: 300, [output]: def solution():
    lemons_per_tree_per_year = 6
    trees = 5
    years_in_a_decade = 10
    lemons_per_tree_per_decade = lemons_per_tree_per_year * years_in_a_decade
    total_lemons = lemons_per_tree_per_decade * trees
    return total_lemons

 Executed result: 300
[EXP] 1145: [success_rate]: True, [answer]: 34, [output]: def solution():
    total_passengers = 84
    ratio_women = 9
    initial_women = total_passengers * ratio_women // (ratio_women + 5)
    remaining_women = initial_women - 20
    return remaining_women

 Executed result: 34
[EXP] 1146: [success_rate]: False, [answer]: 291, [output]: def solution():
    sunflower_per_day = (26 + 56) / 8 - 12
    sunflowers_per_day = sunflower_per_day
    total_sunflowers = sunflowers_per_day * 3
    return total_sunflowers

 Executed result: -5.25
[EXP] 1147: [success_rate]: False, [answer]: 16, [output]: def solution():

 Executed result: None
[EXP] 1148: [success_rate]: False, [answer]: 22, [output]: def solution():
    large = 45 / 5
    medium = 36 / 6
    small = 49 / 7
    total_days = max(int(large), int(medium), int(small))
    return int(total_days)

 Executed result: 9
[EXP] 1149: [success_rate]: True, [answer]: 9, [output]: def solution():
    total_eggs = 3 * 12  # calculate total eggs
    children = 4  # number of children
    eggs_per_child = total_eggs // children  # divide total eggs by number of children, integer division
    return eggs_per_child

 Executed result: 9
[EXP] 1150: [success_rate]: False, [answer]: 93, [output]: def solution():
    fish_food_cost_per_day = 3
    fish_food_cost_per_month = fish_food_cost_per_day * 30  # Assuming May has 30 days
    return fish_food_cost_per_month

 Executed result: 90
[EXP] 1151: [success_rate]: True, [answer]: 21, [output]: def solution():
    initial_roses = 30
    given_roses = 24
    new_roses = 15
    total_roses = initial_roses - given_roses + new_roses
    return total_roses

 Executed result: 21
[EXP] 1152: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_distance = 110 + 140
    total_hours = 2 + 3
    average_speed = total_distance / total_hours
    return average_speed

 Executed result: 50.0
[EXP] 1153: [success_rate]: True, [answer]: 12, [output]: def solution():
    winning_probability = 0.20
    second_ticket_winning_probability = winning_probability * 3
    total_probability = winning_probability * second_ticket_winning_probability
    return (total_probability * 100)

 Executed result: 12.000000000000002
[EXP] 1154: [success_rate]: False, [answer]: 20, [output]: def solution():
    carrey_seashells = 5
    carlos_seashells = carrey_seashells * 2 + 5
    jim_seashells = 27
    total_seashells = carrey_seashells + carlos_seashells + jim_seashells
    amount_per_person = total_seashells // 3
    return amount_per_person

 Executed result: 15
[EXP] 1155: [success_rate]: True, [answer]: 30, [output]: def solution():
    weekdays = 5
    carrots_per_weekday = 4
    sat_sun_carrots = 5
    
    total_carrots = (weekdays * carrots_per_weekday) + sat_sun_carrots * 2
    return total_carrots

 Executed result: 30
[EXP] 1156: [success_rate]: True, [answer]: 13, [output]: def solution():
    first_song = 5
    second_song = first_song + (first_song * 0.6)
    total_song = first_song + second_song
    return total_song

 Executed result: 13.0
[EXP] 1157: [success_rate]: True, [answer]: 120, [output]: def solution():
    num_mondays = 2
    num_tuesdays = 4
    profit_per_device = 20 * 2 - 20
    total_devices = num_mondays + num_tuesdays
    total_profit = total_devices * profit_per_device
    return total_profit

 Executed result: 120
[EXP] 1158: [success_rate]: True, [answer]: 3, [output]: def solution():
    isabel_height = 7
    ned_height = isabel_height - 2
    carl_height = ned_height + 1
    cane_length = carl_height / 2
    return cane_length

 Executed result: 3.0
[EXP] 1159: [success_rate]: False, [answer]: 7300, [output]: def solution():
    total_energy_needed = 2300 * 100  # 100% energy needs of 2300 people
    daily_production = 4200
    coverage = 0.2
    total_bottles_needed = total_energy_needed / (20/100)  # convert 20% to decimal
    bottles_not_covered = total_bottles_needed - daily_production
    return int(bottles_not_covered)

 Executed result: 1145800
[EXP] 1160: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_babies = 8
    purple_babies = int(3/4 * 8)
    purple_babies_with_bow = int(purple_babies * 1/3)
    total_babies_with_bow = purple_babies_with_bow + 2  # 2 are blue and wear bows
    chance_purple_bow = purple_babies_with_bow / total_babies_with_bow
    return int(chance_purple_bow * 100)

 Executed result: 50
[EXP] 1161: [success_rate]: True, [answer]: 1125, [output]: def solution():
    total_recevied = 5168
    monday_tuesday_reports = 1907
    thursday_friday_reports = 2136
    wednesday_reports = total_recevied - (monday_tuesday_reports + thursday_friday_reports)
    return wednesday_reports

 Executed result: 1125
[EXP] 1162: [success_rate]: True, [answer]: 170, [output]: def solution():
    total_land = 80
    half_land = total_land // 2
    first_sale = 50
    remaining_land = total_land - half_land
    quarter_land = remaining_land // 4
    second_sale = 30
    remaining_land = remaining_land - quarter_land
    third_sale = remaining_land * 3
    return first_sale + second_sale + third_sale

 Executed result: 170
[EXP] 1163: [success_rate]: True, [answer]: 3, [output]: def solution():
    haley_age = 26
    geb_age = (haley_age / 2) - 10
    return geb_age

 Executed result: 3.0
[EXP] 1164: [success_rate]: True, [answer]: 12, [output]: def solution():
    return 2 * 3 * 2

 Executed result: 12
[EXP] 1165: [success_rate]: True, [answer]: 9, [output]: def solution():
    eggs_hidden = 36  # Cole hid 3 dozen eggs
    lamar_eggs = 5  # Lamar finds 5 eggs
    stacy_eggs = lamar_eggs * 2  # Stacy finds twice as many as Lamar
    charlie_eggs = stacy_eggs - 2  # Charlie finds 2 less than Stacy
    mei_eggs = charlie_eggs // 2  # Mei finds half as many as Charlie
    total_found = lamar_eggs + stacy_eggs + charlie_eggs + mei_eggs
    return eggs_hidden - total_found

 Executed result: 9
[EXP] 1166: [success_rate]: True, [answer]: 1248, [output]: def solution():
    total_apartments = 200 * 2 + int(200 * 2 * 1.6)
    total_collections = 3
    rate = 0.4
    return total_collections * total_apartments * rate

 Executed result: 1248.0
[EXP] 1167: [success_rate]: False, [answer]: 2350, [output]: def solution():
    initial_fruits = 50
    year1 = initial_fruits
    year2 = initial_fruits * 3
    year3 = initial_fruits * 7
    year4 = initial_fruits * 7
    year5 = initial_fruits * 7
    year6 = initial_fruits * 7
    year7 = initial_fruits * 7
    year8 = initial_fruits * 7 - 200
    year9 = 0
    year10 = initial_fruits * 20
    return year1 + year2 + year3 + year4 + year5 + year6 + year7 + year8 + year9 + year10

 Executed result: 3100
[EXP] 1168: [success_rate]: True, [answer]: 120, [output]: def solution():
    jack_cash = 100
    sophia_cash = 100
    given_cash = sophia_cash / 5
    jack_cash += given_cash
    return jack_cash

 Executed result: 120.0
[EXP] 1169: [success_rate]: False, [answer]: 20, [output]: def solution():
    y = x + 7
    b = y - 7
    r = 4 * b
    return r

 Executed result: None
[EXP] 1170: [success_rate]: False, [answer]: 2, [output]: def solution():
    a = 5
    b = 5 * 3
    a_gift = a / 2
    b_gift = b / 2
    b_left = (b - b_gift)
    r = b_left / (b / 5 * 4)
    return a - a_gift + b_gift - r

 Executed result: 9.375
[EXP] 1171: [success_rate]: False, [answer]: 2, [output]: def solution():
    red = white = purple = y = 0
    total = 12
    red = (total - y) // 3
    return red

 Executed result: 4
[EXP] 1172: [success_rate]: False, [answer]: 3160, [output]: def solution():
    bedroom_area = 4 * 20 * 12
    living_room_area = bedroom_area * 5
    remaining_area = 1000
    total_area = bedroom_area + living_room_area + remaining_area
    return total_area

 Executed result: 6760
[EXP] 1173: [success_rate]: False, [answer]: 93, [output]: 
def solution():
    return sum([3 * 2**i for i in range(4)]).sum()

 Executed result: None
[EXP] 1174: [success_rate]: True, [answer]: 10, [output]: def solution():
    regular_pods = 100
    special_pods = regular_pods * (1 + 20/100)
    regular_per_dollar = regular_pods / 12
    special_per_dollar = special_pods / 12
    cycles = special_per_dollar
    return int(cycles)

 Executed result: 10
[EXP] 1175: [success_rate]: True, [answer]: 240, [output]: def solution():
    total_bills = 1000 / 20  # total number of 20 dollar bills
    lost_bills = 10
    remaining_bills = total_bills - lost_bills
    paid_bills = remaining_bills // 2  # convert to int
    remaining_bills -= paid_bills
    total_money = remaining_bills * 20 * 3
    five_hour_bills = total_money // 5  # convert to int
    return five_hour_bills

 Executed result: 240.0
[EXP] 1176: [success_rate]: False, [answer]: 16, [output]: def solution():

 Executed result: None
[EXP] 1177: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    total_chalk = 5
    used_chalk = total_chalk * 0.45  # 45% of chalk used on Monday
    remaining_chalk = total_chalk - used_chalk  # Calculate the remaining chalk
    daily_used_chalk = used_chalk - total_chalk * 0.20  # Daily used chalk after Monday
    days = 0
    while remaining_chalk >= 2 and daily_used_chalk > 0:
        remaining_chalk -= daily_used_chalk
        days += 1
    return days

 Executed result: 1
[EXP] 1178: [success_rate]: True, [answer]: 17, [output]: def solution():
    boys = 12
    girls = 12
    girls_on_varsity = girls // 3
    boys_on_varsity = boys // 4
    total_students = boys + girls
    students_not_on_varsity = total_students - girls_on_varsity - boys_on_varsity
    return students_not_on_varsity

 Executed result: 17
[EXP] 1179: [success_rate]: True, [answer]: 17, [output]: def solution():
    mike_masks = 5
    triple_mike = 3 * mike_masks
    johnny_masks = triple_mike + 2
    return johnny_masks

 Executed result: 17
[EXP] 1180: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_teeth = 30
    drilled_teeth = 4
    capped_teeth = drilled_teeth + 7
    total_fixed_teeth = drilled_teeth + capped_teeth
    percentage = (total_fixed_teeth / total_teeth) * 100
    return percentage

 Executed result: 50.0
[EXP] 1181: [success_rate]: False, [answer]: 5600, [output]: def solution():
    total_cost = 4000 * 3.5
    amount_returned = (2/5) * 4000

 Executed result: None
[EXP] 1182: [success_rate]: False, [answer]: 20, [output]: def solution():
    w = 7 * 5  # Wendy's current age
    w_25 = 2000  # Wendy's age in 25 years
    w_current = w_25 - 25  # Wendy's current age
    c_7 = w / 5  # Colin's age in 7 years
    c_now = 2000 - 25/3*w_current  # Colin's current age
    return c_now

 Executed result: -14458.333333333336
[EXP] 1183: [success_rate]: False, [answer]: 1800, [output]: def solution():
    total_amount = 27000
    cost_per_book = 500
    cost_per_school = total_amount / 3
    books_per_school = cost_per_school / cost_per_book
    return books_per_school

 Executed result: 18.0
[EXP] 1184: [success_rate]: True, [answer]: 11, [output]: def solution():
    total_apples = 2
    total_apples += 5  # total apples after first throw
    total_apples += 6  # total apples after second throw
    total_apples -= 1  # throwing one apple
    total_apples -= 1  # leave one apple in the tree
    return total_apples

 Executed result: 11
[EXP] 1185: [success_rate]: True, [answer]: 306, [output]: def solution():
    cost_per_bag = 18
    cost_per_kg = cost_per_bag / 50
    total_cost = cost_per_kg * 850
    return total_cost

 Executed result: 306.0
[EXP] 1186: [success_rate]: False, [answer]: 6, [output]: def solution():
    total_cheese = 6 * 6
    total_pepperoni = 6 * 4
    total_pizzas = (total_cheese + total_pepperoni) / 12 + (total_pepperoni) / 8
    return math.ceil(total_pizzas)

 Executed result: None
[EXP] 1187: [success_rate]: False, [answer]: 19, [output]: def solution():
    miles_mont = 3
    miles_tues = 2 * 5
    miles = miles_mont + miles_tues
    return miles

 Executed result: 13
[EXP] 1188: [success_rate]: False, [answer]: 5, [output]: def solution():

 Executed result: None
[EXP] 1189: [success_rate]: False, [answer]: 24, [output]: def solution():
    john_age_now = 28
    anniversary_age = john_age_now - 20
    john_age_anniversary = anniversary_age
    jim_age_anniversary = john_age_anniversary // 2
    return jim_age_anniversary

 Executed result: 4
[EXP] 1190: [success_rate]: True, [answer]: 6, [output]: def solution():
    doxa = 1
    sister = doxa + 1
    brother = sister + 1
    return doxa + sister + brother

 Executed result: 6
[EXP] 1191: [success_rate]: False, [answer]: 19, [output]: def solution():
    used = 38
    used += used - 10
    used += 50 + 50 - 25
    start = 78 + 25
    return start

 Executed result: 103
[EXP] 1192: [success_rate]: True, [answer]: 100, [output]: def solution():
    haircut_cost = 30 * (10 - 8)
    total_cost = haircut_cost + 40
    return total_cost

 Executed result: 100
[EXP] 1193: [success_rate]: True, [answer]: 280, [output]: def solution():
    attendance_bonus = 10
    hours_per_week = 7.5 * 6
    days_per_week = 6
    weeks_in_april = 4
    total_hours = hours_per_week * weeks_in_april
    total_earnings = total_hours * 1.5
    total_earnings += attendance_bonus
    return total_earnings

 Executed result: 280.0
[EXP] 1194: [success_rate]: True, [answer]: 9, [output]: def solution():
    laundry = 3.00
    room = 1.50
    trash = 0.75
    dish = 0.50
    total_eb_disposable = laundry + room + trash*2 + dish*6
    total = total_eb_disposable
    return total

 Executed result: 9.0
[EXP] 1195: [success_rate]: True, [answer]: 1200, [output]: def solution():
    whale_blood = 40
    shark_blood = whale_blood * 3
    total_shark_blood = shark_blood * 10
    return total_shark_blood

 Executed result: 1200
[EXP] 1196: [success_rate]: True, [answer]: 320, [output]: def solution():
    people_at_morning = 50
    people_at_10 = 40
    people_later = people_at_10 * 2
    people_evening = people_at_morning * 3
    total_people = people_at_morning + people_at_10 + people_later + people_evening
    return total_people

 Executed result: 320
[EXP] 1197: [success_rate]: True, [answer]: 75, [output]: def solution():
    total_red = 5 * 5  # 5 packs with 5 pens per pack = 25 pens
    total_black = 2 * total_red  # Twice the amount of black pens than red
    total_pens = total_red + total_black  # Total pens = red pens + black pens
    return total_pens

 Executed result: 75
[EXP] 1198: [success_rate]: True, [answer]: 2400, [output]: def solution():
    scotch_cost = 600
    cognac_cost_per_bottle = (scotch_cost / 10) * 1.5
    cognac_cost = 2 * 10 * cognac_cost_per_bottle
    total_cost = scotch_cost + cognac_cost
    return total_cost

 Executed result: 2400.0
[EXP] 1199: [success_rate]: True, [answer]: 140, [output]: def solution():
    white_oak_first_day = 20
    lodgepole_pine_first_day = 20 * 2
    white_oak_second_day = 20 + 10
    lodgepole_pine_second_day = lodgepole_pine_first_day + lodgepole_pine_first_day // 4
    total_trees = white_oak_first_day + lodgepole_pine_first_day + white_oak_second_day + lodgepole_pine_second_day
    return total_trees

 Executed result: 140
[EXP] 1200: [success_rate]: True, [answer]: 2, [output]: def solution():
    total_root_beer = 24 - 4 - 7 - 5  # Subtract the gallons of root beer consumed or spilled
    people_at_party = 3 + 1  # Number of people at the party including Fred
    root_beer_per_person = total_root_beer / people_at_party  # Calculate how much root beer is available for each person
    return root_beer_per_person

 Executed result: 2.0
[EXP] 1201: [success_rate]: True, [answer]: 8, [output]: def solution():
    mugs = (40 - 8) / 4
    return int(mugs)

 Executed result: 8
[EXP] 1202: [success_rate]: True, [answer]: 42, [output]: def solution():
    total_fish = 66
    red_striped_fish = total_fish // 3
    remaining_fish = total_fish - red_striped_fish
    blue_striped_fish = remaining_fish * 5 // 11
    total_striped_fish = red_striped_fish + blue_striped_fish
    return total_striped_fish

 Executed result: 42
[EXP] 1203: [success_rate]: False, [answer]: 19, [output]: def solution():
    colors_from_palettes = 2 * 4
    colors_from_makeup_sets = 3 * 6
    colors_stolen = colors_from_palettes - 4
    colors_used = colors_from_makeup_sets / 2
    colors_left = colors_from_palettes + colors_from_makeup_sets - colors_stolen - colors_used
    return colors_left

 Executed result: 13.0
[EXP] 1204: [success_rate]: False, [answer]: 240, [output]: def solution():
    height = 60
    house_height = height * 7
    first_floor_height = height * 3
    second_floor_to_ceiling = house_height - first_floor_height - height
    return second_floor_to_ceiling

 Executed result: 180
[EXP] 1205: [success_rate]: True, [answer]: 168, [output]: def solution():
    total_shells = 700
    alpha_shells = 0.4 * total_shells
    remaining_shells = total_shells - alpha_shells
    finder_shells = 0.6 * remaining_shells
    gogetter_shells = total_shells - alpha_shells - finder_shells
    return gogetter_shells

 Executed result: 168.0
[EXP] 1206: [success_rate]: True, [answer]: 4, [output]: def solution():
    total_given_miles = 1 + 4 + 3
    total_dogs = 4
    average_miles_per_dog = 3
    miles_needed_by_last_dog = (total_given_miles - total_dogs * average_miles_per_dog)
    return miles_needed_by_last_dog

 Executed result: -4
[EXP] 1207: [success_rate]: False, [answer]: 40,000, [output]: def solution():
    house_value = 250000
    loan = house_value * 0.4
    used = loan * 0.6
    leftover = house_value - loan + used
    return leftover

 Executed result: 210000.0
[EXP] 1208: [success_rate]: True, [answer]: 64, [output]: def solution():
    total_weight = 56 + 46 + 26
    total_cost = total_weight * 0.5
    return total_cost

 Executed result: 64.0
[EXP] 1209: [success_rate]: True, [answer]: 27, [output]: def solution():
    cost = 72
    sell_price = cost * 11/8
    profit = sell_price - cost
    return profit

 Executed result: 27.0
[EXP] 1210: [success_rate]: True, [answer]: 29, [output]: def solution():
    water_removed = (1 * 3) + (2 * 1 * 3) + (2 * 2 * 5)
    return water_removed

 Executed result: 29
[EXP] 1211: [success_rate]: True, [answer]: 288, [output]: def solution():
    total_balloons = 10 * 30
    balloons_left = 12
    balloons_thrown = total_balloons - balloons_left
    return balloons_thrown

 Executed result: 288
[EXP] 1212: [success_rate]: True, [answer]: 448, [output]: def solution():
    one_medicine = 14
    second_medicine = 3 * one_medicine
    total_per_dose = one_medicine + second_medicine
    total_for_8_doses = total_per_dose * 8
    return total_for_8_doses

 Executed result: 448
[EXP] 1213: [success_rate]: True, [answer]: 150, [output]: def solution():
    simon = 120
    john_class1 = simon / 8
    john_class2 = simon / 8
    combined_school = simon + 2 * john_class1
    return combined_school

 Executed result: 150.0
[EXP] 1214: [success_rate]: True, [answer]: 31, [output]: def solution():
    principal = 300
    interest = (principal * 0.02)  # interest for 11 months
    total_with_interest = principal + interest
    monthly_payment = 25 * 11  # $25 per month for 11 months
    remaining_amount = total_with_interest - monthly_payment
    return remaining_amount

 Executed result: 31.0
[EXP] 1215: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_diapers = 2 * 5
    wife_changes = total_diapers / 2
    jordan_changes = total_diapers - wife_changes
    return jordan_changes

 Executed result: 5.0
[EXP] 1216: [success_rate]: True, [answer]: 36, [output]: def solution():
    import math
    volume = math.prod([6, 6, 15])  # calculate the total volume
    total_jelly_beans = math.ceil(volume / 0.15)  # calculate the total number of jelly beans
    packed_jelly_beans = total_jelly_beans * 0.8  # calculate the number of jelly beans packed
    expected_red_jelly_beans = packed_jelly_beans * 0.3  # calculate the expected number of red jelly beans
    distance = abs(expected_red_jelly_beans - 900)
    return distance

 Executed result: 36.0
[EXP] 1217: [success_rate]: False, [answer]: 20, [output]: def solution():
    people_at_first_stop = 40
    people_at_second_stop = people_at_first_stop * 3 // 4
    total_people_on_board = 20
    people_at_previous_stops = people_at_first_stop + people_at_second_stop
    people_at_third_stop = total_people_on_board * 2
    total_people = people_at_third_stop + people_at_previous_stops
    people_required = 200 - total_people
    return people_required

 Executed result: 90
[EXP] 1218: [success_rate]: True, [answer]: 75, [output]: def solution():
    cost_per_visit = 2
    years = 5 + 3
    total_years_with_three_visits = years
    total_years_with Increased_cost = years
    rate_of_increase = 150/100
    cost_per_visit_after_increase = cost_per_visit * (rate_of_increase + 1)
    total_cost_for_five_years = cost_per_visit * 3 * 5
    total_cost_for_three_years = cost_per_visit_after_increase * 3 * 3
    total_cost = total_cost_for_five_years + total_cost_for_three_years
    return total_cost

 Executed result: 75.0
[EXP] 1219: [success_rate]: True, [answer]: 225, [output]: def solution():
    students_per_grade = 10
    students = students_per_grade * 4
    escape_room_capacity = 8
    escape_room_time = 45
    
    total_students = students
    total_time = 0
    total_escape_rooms = 0
    
    while total_students > 0:
        total_students -= escape_room_capacity
        total_time += escape_room_time
        total_escape_rooms += 1
    
    return total_time

 Executed result: 225
[EXP] 1220: [success_rate]: True, [answer]: 100, [output]: def solution():
    cost_of_tables = 4 * 20
    cost_of_frames = 2 * 10
    total_cost = cost_of_tables + cost_of_frames
    return total_cost

 Executed result: 100
[EXP] 1221: [success_rate]: True, [answer]: 32, [output]: def solution():
    total_length = 40
    shorter_piece = total_length // 5
    longer_piece = shorter_piece * 4
    return longer_piece

 Executed result: 32
[EXP] 1222: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_meatballs = 80
    meatballs_per_pound = 16
    pounds_used = total_meatballs // meatballs_per_pound
    seasoning_per_pound = 2
    total_seasoning_needed = pounds_used * seasoning_per_pound
    return total_seasoning_needed

 Executed result: 10
[EXP] 1223: [success_rate]: True, [answer]: 350, [output]: def solution():
    window_width = 35
    num_windows = 5
    total_window_width = window_width * num_windows
    fabric_needed = 2 * total_window_width
    return fabric_needed

 Executed result: 350
[EXP] 1224: [success_rate]: True, [answer]: 8, [output]: def solution():
    total_cost = 0
    cost_per_minute = 0.25
    total_minutes = 0
    for i in range(36):
        if total_minutes <= 16:
            total_cost += cost_per_minute
        else:
            total_cost += 0.2
        total_minutes += 1
    return total_cost

 Executed result: 8.050000000000002
[EXP] 1225: [success_rate]: False, [answer]: 5, [output]: def solution():
    inches_monday = 2
    inches_tuesday = 2 * inches_monday * 2 + 1
    return inches_tuesday

 Executed result: 9
[EXP] 1226: [success_rate]: False, [answer]: 3, [output]: def solution():
    brownies = 3 * ( cupcakes - 2)
    total_treats = 5 * 2
    cupcakes = total_treats // 2
    return cupcakes

 Executed result: 5
[EXP] 1227: [success_rate]: True, [answer]: 90, [output]: def solution():
    manicure_price = 35
    pedicure_price = 40
    discount = 0.8
    mani_pedi_price = manicure_price + pedicure_price
    discount_price = mani_pedi_price * discount
    total_price = discount_price + (10 * 3)  # assuming 10 fingers
    return total_price

 Executed result: 90.0
[EXP] 1228: [success_rate]: True, [answer]: 66, [output]: def solution():
    total_issues = 3 * 12 + 6 + 4 * 6
    return total_issues

 Executed result: 66
[EXP] 1229: [success_rate]: True, [answer]: 31, [output]: def solution():
    s_sam = 27
    s_shelley = s_sam + 12
    s_kim = s_shelley - 8
    result = s_kim
    return result

 Executed result: 31
[EXP] 1230: [success_rate]: True, [answer]: 36, [output]: def solution():
    price_nov = 40
    price_dec = price_nov * 1.80  # 80% increase
    price_jan = price_dec * 0.50  # 50% decrease
    return price_jan

 Executed result: 36.0
[EXP] 1231: [success_rate]: True, [answer]: 440, [output]: def solution():
    standard_rate = 80
    standard_rate_veteran = standard_rate * (1 - 0.25)
    standard_income = standard_rate * 4
    veteran_income = standard_rate_veteran * 2
    total_income = standard_income + veteran_income
    return total_income

 Executed result: 440.0
[EXP] 1232: [success_rate]: True, [answer]: 70, [output]: def solution():
    scores = [50, 80, 80, 60, 40, 90, 100, 70, 60]
    return sum(scores) / len(scores)

 Executed result: 70.0
[EXP] 1233: [success_rate]: True, [answer]: 15, [output]: def solution():
    total_pomelos = 20
    given_pomelos = total_pomelos - total_pomelos / 4
    return given_pomelos

 Executed result: 15.0
[EXP] 1234: [success_rate]: True, [answer]: 81, [output]: def solution():
    total_apples = 60
    eaten_apples = int(total_apples * 2 / 5)
    remaining_apples = total_apples - eaten_apples
    given_apples = int(remaining_apples * 0.25)
    remaining_apples_after_giving = remaining_apples - given_apples
    money_received = remaining_apples_after_giving * 3
    return money_received

 Executed result: 81
[EXP] 1235: [success_rate]: True, [answer]: 12, [output]: def solution():
    novels_last_year = 9
    quarter = 3
    total_novels = novels_last_year * 4 / quarter
    return total_novels

 Executed result: 12.0
[EXP] 1236: [success_rate]: True, [answer]: 60, [output]: def solution():
    total_distance = 6000
    time_taken = 3
    speed = 50
    total_time = time_taken * 24
    
    total_distance_covered = total_time * speed    
    percentage_covered = (total_distance_covered / total_distance) * 100
    
    return percentage_covered

 Executed result: 60.0
[EXP] 1237: [success_rate]: False, [answer]: 84, [output]: def solution():
    madelines_grapes = 6
    brothers_grapes = 5 * madelines_grapes
    total grapes = madelines_grapes + brothers_grapes
    mother_grapes = 12 * 4
    total_grapes = total grapes - mother_grapes
    return total_grapes + madelines_grapes + brothers_grapes + mother_grapes

 Executed result: None
[EXP] 1238: [success_rate]: True, [answer]: 78, [output]: def solution():
    total_students = 82
    sick_students = 13
    substitute_teachers = 9
    return total_students - sick_students + substitute_teachers

 Executed result: 78
[EXP] 1239: [success_rate]: True, [answer]: 520, [output]: def solution():
    pasta_price = 1.00
    cheddar_price = 3.00
    gruyere_price = 2 * 3.00
    total_weekly_cost = pasta_price + cheddar_price + gruyere_price
    total_annual_cost = total_weekly_cost * 52
    return total_annual_cost

 Executed result: 520.0
[EXP] 1240: [success_rate]: False, [answer]: 50, [output]: def solution():
    total_minutes_per_day = 8 * 60
    total_minutes_for_all_classrooms = 80 * 15
    total_minutes_to_clean_all_classrooms = total_minutes_for_all_classrooms
    total_minutes_to_work = total_minutes_to_clean_all_classrooms / 5
    percentage_of_day_spent_cleaning = (total_minutes_to_clean_all_classrooms / total_minutes_per_day) * 100
    return percentage_of_day_spent_cleaning

 Executed result: 250.0
[EXP] 1241: [success_rate]: True, [answer]: 2, [output]: def solution():
    middle = 2 * 10
    bottom = 2 * 10
    top = bottom - 5
    total_books = middle*2 + bottom + top
    bookcases = (110 + total_books - 1) // total_books
    return bookcases

 Executed result: 2
[EXP] 1242: [success_rate]: False, [answer]: 8, [output]: def solution():
    cost = 2.40 * 5
    revenue = round(1 * (1 * 3) * 60)  # 60 because there are 12 eggs in a dozen
    profit = revenue - cost
    return profit

 Executed result: 168.0
[EXP] 1243: [success_rate]: True, [answer]: 20, [output]: def solution():
    total_hats = 100
    red_hats = total_hats // 2
    remaining_hats = total_hats - red_hats
    blue_hats = remaining_hats * 3 // 5
    white_hats = remaining_hats - blue_hats
    return white_hats

 Executed result: 20
[EXP] 1244: [success_rate]: True, [answer]: 50, [output]: def solution():
    price_per_bag = 18 * 100  # convert to cents
    discount = 3 * 100  # convert to cents
    total_cost = price_per_bag - discount
    cost_per_stick = total_cost / 30
    return int(cost_per_stick)

 Executed result: 50
[EXP] 1245: [success_rate]: True, [answer]: 35, [output]: def solution():
    first_test_questions = 70
    first_test_correct = 0.6 * 70
    total_questions = first_test_questions + 40
    total_correct = first_test_correct
    required_correct = 0.7 * total_questions
    remaining_correct = required_correct - first_test_correct
    return remaining_correct

 Executed result: 35.0
[EXP] 1246: [success_rate]: True, [answer]: 96, [output]: def solution():
    strawberry_cubes = 0
    blueberry_cubes = 0
    for strawberry_cubes in range(1, 117):
        blueberry_cubes = 5 * strawberry_cubes - 4
        if strawberry_cubes + blueberry_cubes == 116:
            return blueberry_cubes

 Executed result: 96
[EXP] 1247: [success_rate]: True, [answer]: 3360, [output]: def solution():
    total_points = 21 * 40 * 4
    return total_points

 Executed result: 3360
[EXP] 1248: [success_rate]: False, [answer]: 7, [output]: def solution():
    total_marbles = 10
    dropped-half_marbles = total_marbles // 2
    total_lost = dropped-half_marbles
    found_marbles = 3
    bead_removed = 1
    total_marbles_left = total_lost + found_marbles - bead_removed
    return total_marbles_left - bead_removed

 Executed result: None
[EXP] 1249: [success_rate]: False, [answer]: 750, [output]: def solution():

 Executed result: None
[EXP] 1250: [success_rate]: False, [answer]: 56, [output]: def solution():
    total_candles = (4 + 5) * 4 + 8 * 2  # Total candles = (4 small, 5 medium) candles for each room (8 rooms) + 2 flashlights for each room (8 rooms)
    total_flashlights = 4 + 8  # 4 flashlights for people, 8 flashlights for the rooms
    return total_candles, total_flashlights

 Executed result: (52, 12)
[EXP] 1251: [success_rate]: True, [answer]: 22, [output]: def solution():
    total_chips = 2 * 55
    num_people = 5
    chips_per_person = total_chips // num_people
    return chips_per_person

 Executed result: 22
[EXP] 1252: [success_rate]: False, [answer]: 30, [output]: def solution():
    first_side = 5
    second_and_third_sides = 2 * first_side
    last_two_sides = first_side / 2
    return second_and_third_sides + first_side + last_two_sides

 Executed result: 17.5
[EXP] 1253: [success_rate]: True, [answer]: 70, [output]: def solution():
    helmets = 20
    robots = helmets // 2
    footballs = helmets * 2
    total_items = footballs + helmets + robots
    return total_items

 Executed result: 70
[EXP] 1254: [success_rate]: True, [answer]: 120, [output]: def solution():
    minutes_per_call = 15
    minutes_per_day = 60 * 6
    minutes_per_week = 5 * minutes_per_day
    calls_per_minute = 60 / minutes_per_call
    calls_per_day = minutes_per_day / minutes_per_call
    calls_per_week = minutes_per_week / minutes_per_call
    return int(calls_per_week)

 Executed result: 120
[EXP] 1255: [success_rate]: True, [answer]: 30, [output]: def solution():
    time_old = 7 * 6
    time_new = 12 * 6
    time_new_longer = time_new - time_old
    return time_new_longer

 Executed result: 30
[EXP] 1256: [success_rate]: True, [answer]: 12, [output]: def solution():
    plants_half = 4
    cups_half = 0.5
    plants_one = 8
    cups_one = 1
    plants_quarter = 20 - plants_half - plants_one
    cups_quarter = 0.25
    total_cups = (plants_half * cups_half) + (plants_one * cups_one) + (plants_quarter * cups_quarter)
    return total_cups

 Executed result: 12.0
[EXP] 1257: [success_rate]: True, [answer]: 15, [output]: def solution():
    distance = 200
    distance_land = distance / 2
    time_land = distance_land / 20
    distance_water = distance - distance_land
    time_water = distance_water / 10
    total_time = time_land + time_water
    return total_time

 Executed result: 15.0
[EXP] 1258: [success_rate]: True, [answer]: 14, [output]: def solution():
    num_sticks = 56
    sticks_per_box = 8
    cost_per_box = 2.0
    total_boxes = -(-num_sticks // sticks_per_box)  # use ceiling division for rounding up
    total_cost = total_boxes * cost_per_box
    return total_cost

 Executed result: 14.0
[EXP] 1259: [success_rate]: True, [answer]: 60, [output]: def solution():
    additional_cost = 20 / 2
    cost_of_each_additional_phone = additional_cost
    cost_of_main_phone = 20
    total_cost = cost_of_main_phone + (5 - 1) * cost_of_each_additional_phone
    return total_cost

 Executed result: 60.0
[EXP] 1260: [success_rate]: True, [answer]: 7200, [output]: def solution():
    doughnuts_per_day = 10 * 12  # 10 dozen doughnuts per day and 12 doughnuts in a dozen
    total_doughnuts_per_month = doughnuts_per_day * 30  # 30 days in June
    revenue_per_doughnut = 2
    total_revenue = total_doughnuts_per_month * revenue_per_doughnut
    return total_revenue

 Executed result: 7200
[EXP] 1261: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_photos = 210
    photos_per_batch = 7
    batches_per_day = 6
    days_needed = total_photos // (photos_per_batch * batches_per_day)
    return days_needed

 Executed result: 5
[EXP] 1262: [success_rate]: True, [answer]: 235, [output]: def solution():
    blouse_cost = 5
    pant_cost = 8
    skirt_cost = 6
    blouses_in_a_week = 5
    pants_in_a_week = 2
    skirts_in_a_week = 1
    total_cost_in_a_week = (blouses_in_a_week * blouse_cost) + (pants_in_a_week * pant_cost) + (skirts_in_a_week * skirt_cost)
    total_cost_in_5_weeks = total_cost_in_a_week * 5
    return total_cost_in_5_weeks

 Executed result: 235
[EXP] 1263: [success_rate]: False, [answer]: 12, [output]: def solution():
    normal_speed = 150
    trained_speed = normal_speed * 2.5
    pages = 10
    words_per_page = 450
    total_words = pages * words_per_page
    time = total_words / trained_speed * 60
    return "{:.2f} minutes".format(time)

 Executed result: 720.00 minutes
[EXP] 1264: [success_rate]: True, [answer]: 500, [output]: def solution():
    people_on_first_day = 50
    people_on_second_day = people_on_first_day + 20
    people_on_third_day = people_on_second_day * 2
    total_people_rest_of_week = 60 * (4)  # 4 days
    total_people = people_on_first_day + people_on_second_day + people_on_third_day + total_people_rest_of_week
    return total_people

 Executed result: 500
[EXP] 1265: [success_rate]: False, [answer]: 210, [output]: def solution():
    total_popped = 20
    total_popped += 20 * 3
    total_popped += 20 * 3 * 4
    total_popped += 20 * 3 * 4 / 2
    residual_popped = 20 * 3 * 4 / 2 / 4
    return total_popped + residual_popped

 Executed result: 470.0
[EXP] 1266: [success_rate]: False, [answer]: 36, [output]: def solution():
    normal_lemmons = 6 * 5  # 4 gallons + 1 extra gallon for Allen
    extra_lemmons = 6 * 2
    total_lemmons = normal_lemmons + extra_lemmons
    return total_lemmons

 Executed result: 42
[EXP] 1267: [success_rate]: True, [answer]: 147, [output]: def solution():
    german_shepherds = 3
    bullies = 2
    daily_kg_g_s = 5
    daily_kg_bully = 3
    weeks_in_days = 7
    
    total_daily_kg = german_shepherds * daily_kg_g_s + bullies * daily_kg_bully
    total_weekly_kg = total_daily_kg * weeks_in_days
    
    return total_weekly_kg

 Executed result: 147
[EXP] 1268: [success_rate]: True, [answer]: 40, [output]: def solution():
    two_legged_animals = 10
    four_legged_animals = 15
    total_legs = (two_legged_animals * 2) + (four_legged_animals * 4)
    pairs = total_legs // 2
    return pairs

 Executed result: 40
[EXP] 1269: [success_rate]: True, [answer]: 20, [output]: def solution():
    blue = 4
    yellow = 2 * blue
    red = 32 - (blue + yellow)
    return red

 Executed result: 20
[EXP] 1270: [success_rate]: True, [answer]: 54, [output]: def solution():
    west_distance = 18 * 5
    east_distance = 18 * 8
    net_distance = west_distance - east_distance
    return net_distance

 Executed result: -54
[EXP] 1271: [success_rate]: False, [answer]: 3528, [output]: def solution():
    price = 9000
    for i in range(3):
        price *= (1 - 0.30 if i == 0 else (1 if i == 2 else 0.80))
    return price

 Executed result: 5040.0
[EXP] 1272: [success_rate]: True, [answer]: 43, [output]: def solution():
    total_candies = 232
    red_candies = 54
    orange_candies = 2 * red_candies
    yellow_candies = red_candies // 2
    pink_candies = total_candies - (red_candies + orange_candies + yellow_candies)
    return pink_candies

 Executed result: 43
[EXP] 1273: [success_rate]: True, [answer]: 296, [output]: def solution():
    hotel_price = 80
    bus_cost = hotel_price * 0.10
    total_bus_cost = bus_cost * 7
    total_hotel_cost = hotel_price * 3
    total_cost = total_hotel_cost + total_bus_cost
    return total_cost

 Executed result: 296.0
[EXP] 1274: [success_rate]: True, [answer]: 27, [output]: def solution():
    total_marbles_given = 52
    marbles_dropped = 4
    marbles_Dallas = 21
    marbles_Darla = total_marbles_given - (marbles_Dallas + marbles_dropped)
    return marbles_Darla

 Executed result: 27
[EXP] 1275: [success_rate]: True, [answer]: 38, [output]: def solution():
    adult_tickets = 2
    child_tickets = 1
    popcorns = 2
    adult_price = adult_tickets * 12
    child_price = child_tickets * 8
    popcorn_price = popcorns * 3
    total_price = adult_price + child_price + popcorn_price
    return total_price

 Executed result: 38
[EXP] 1276: [success_rate]: True, [answer]: 16, [output]: def solution():
    weight = 1200 + 250 + 75 + 75
    force = weight * 0.01
    return force

 Executed result: 16.0
[EXP] 1277: [success_rate]: True, [answer]: 70, [output]: def solution():
    perimeter = 2 * (20 + 15)
    return perimeter

 Executed result: 70
[EXP] 1278: [success_rate]: False, [answer]: 48, [output]: def solution():
    emma_age = mia_age + 16
    average_age = (mia_age + emma_age) / 2
    return average_age

 Executed result: None
[EXP] 1279: [success_rate]: True, [answer]: 665, [output]: def solution():
    total_found = 214 + 432 + 86
    divided = total_found - 67
    return divided

 Executed result: 665
[EXP] 1280: [success_rate]: True, [answer]: 180, [output]: def solution():
    dinner_plate_cost = 6
    bowl_cost = 5
    salad_plate_cost = 4
    total_copies = 12
    total_cost = (dinner_plate_cost + bowl_cost + salad_plate_cost) * total_copies
    return total_cost

 Executed result: 180
[EXP] 1281: [success_rate]: True, [answer]: 7, [output]: def solution():
    steve_time = 10
    anna_half = steve_time / 2
    anna_time = anna_half + 2
    return anna_time

 Executed result: 7.0
[EXP] 1282: [success_rate]: True, [answer]: 20, [output]: def solution():
    pigs = 5
    pounds_per_pig = 4
    feed_per_day = pounds_per_pig * 2
    total_feed_per_week = feed_per_day * 7
    total_feed = 300
    total_feed_eaten = total_feed_per_week * pigs
    feed_left = total_feed - total_feed_eaten
    return feed_left

 Executed result: 20
[EXP] 1283: [success_rate]: False, [answer]: 12, [output]: def solution():
    total_hot_dogs_needed = (20 * 2) + 4
    total_hot_dogs_needed = int(total_hot_dogs_needed)
    num_of_packs = total_hot_dogs_needed // 6
    extra_hot_dogs = total_hot_dogs_needed % 6
    cost = num_of_packs * 2
    cost = round(cost, 2)
    return cost

 Executed result: 14
[EXP] 1284: [success_rate]: True, [answer]: 60, [output]: def solution():
    earnings = 20 * 2 + 40 * 1
    expenses = 5 * 4
    return earnings - expenses

 Executed result: 60
[EXP] 1285: [success_rate]: False, [answer]: 25, [output]: def solution():
    total_children = 5
    for _ in range(2):
        total_children += total_children
    total_children += 2 * total_children
    total_children -= 5
    return total_children

 Executed result: 55
[EXP] 1286: [success_rate]: False, [answer]: 1218, [output]: def solution():

 Executed result: None
[EXP] 1287: [success_rate]: True, [answer]: 105, [output]: def solution():
    quarter_value = 25
    nickel_value = 5
    dime_value = 10
    total_cents = quarter_value + 2 * nickel_value + 7 * dime_value
    return total_cents

 Executed result: 105
[EXP] 1288: [success_rate]: True, [answer]: 84, [output]: def solution():
    older_brother = 12 * 2
    younger_brother = 12
    sisters_age = 16
    total_age = older_brother + younger_brother + sisters_age * 3
    return total_age

 Executed result: 84
[EXP] 1289: [success_rate]: False, [answer]: 34, [output]: def solution():
    daily_meditation = 2 * 15  # 2 times, 15 minutes each
    weekly_yoga = 1 * 60  # 1 hour
    total_days_in_four_weeks = 4 * 7  # 4 weeks, 7 days a week
    total_meditation_minutes = daily_meditation * total_days_in_four_weeks
    total_yoga_minutes = weekly_yoga * 4  # 4 weeks
    total_minutes = total_meditation_minutes + total_yoga_minutes
    return total_minutes

 Executed result: 1080
[EXP] 1290: [success_rate]: True, [answer]: 101, [output]: def solution():
    small_tshirts = 11 * 3
    medium_tshirts = 8 * 4
    large_tshirts = 6 * 6
    total_sqft = small_tshirts + medium_tshirts + large_tshirts
    return total_sqft

 Executed result: 101
[EXP] 1291: [success_rate]: False, [answer]: 90, [output]: def solution():
    small_sunflower = 3 * 12  # Convert 3 dozen into number of seeds
    large_sunflower = small_sunflower + (small_sunflower * 1.5)  # Calculate seeds of large sunflower
    total_seeds = small_sunflower + large_sunflower
    return total_seeds

 Executed result: 126.0
[EXP] 1292: [success_rate]: True, [answer]: 27, [output]: def solution():
    george_pens = 18
    timothy_pens = george_pens * 3
    sarah_pens = timothy_pens // 2
    return sarah_pens

 Executed result: 27
[EXP] 1293: [success_rate]: True, [answer]: 67, [output]: def solution():
    albert_height = 36
    albert_height_double = albert_height * 2
    anne_height = albert_height_double
    jackie_height_after = anne_height - 2
    jackie_height_before = jackie_height_after - 3
    return jackie_height_before

 Executed result: 67
[EXP] 1294: [success_rate]: False, [answer]: 140000, [output]: def solution():
    total_bars = 5000 * 7
    total_money = total_bars * 2
    return total_money

 Executed result: 70000
[EXP] 1295: [success_rate]: False, [answer]: 36, [output]: def solution():
    t_shirt_price = 8
    discounted_price = t_shirt_price * 0.5
    t_shirt_cost = t_shirt_price * 2
    discount = t_shirt_price * discounted_price
    t_shirt_total = t_shirt_cost - discount
    shoes_price = 40
    shoes_discount = shoes_price * 0.4
    shoes_cost = shoes_price - shoes_discount
    total_cost = t_shirt_total + shoes_cost
    return total_cost

 Executed result: 8.0
[EXP] 1296: [success_rate]: True, [answer]: 2, [output]: def solution():
    allowance = 6 * 3
    ice_cream_cost = 1.25 * 4
    ryan_spent = allowance - ice_cream_cost
    movie_tickets = ryan_spent // 6.5
    return movie_tickets

 Executed result: 2.0
[EXP] 1297: [success_rate]: True, [answer]: 335, [output]: def solution():
    ellens_spent = 100 + 5
    lanis_spent = 30 + (100 * 2)
    total_spent = ellens_spent + lanis_spent
    return total_spent

 Executed result: 335
[EXP] 1298: [success_rate]: True, [answer]: 60, [output]: def solution():
    passion_fruit = 6 * 2
    jackfruit = 8 * 1.5
    honey = 10 * 2
    total_cost = passion_fruit + jackfruit + honey
    profit_per_jar = 50 - total_cost
    profit_for_10_jars = profit_per_jar * 10
    return profit_for_10_jars

 Executed result: 60.0
[EXP] 1299: [success_rate]: True, [answer]: 31, [output]: def solution():
    quarters = 32
    dimes = 95
    nickels = 120
    pennies = 750

    quarter_value = 0.25
    dime_value = 0.10
    nickel_value = 0.05
    penny_value = 0.01

    total = (quarters * quarter_value) + (dimes * dime_value) + (nickels * nickel_value) + (pennies * penny_value)
    return total

 Executed result: 31.0
[EXP] 1300: [success_rate]: True, [answer]: 13, [output]: def solution():
    money_spent = 3.50 + 7.50 * 2 + 8.50
    return 40 - money_spent

 Executed result: 13.0
[EXP] 1301: [success_rate]: False, [answer]: 120, [output]: def solution():
    working_days = 14 - 2  # 7 - 2 weekdays, so 5 days
    income_per_day = 3 * 4  # 3 cars served daily at $4 per car
    total_income = working_days * income_per_day
    return total_income

 Executed result: 144
[EXP] 1302: [success_rate]: False, [answer]: 23, [output]: def solution():
    oatmeal_cookies = 9 - 1 - 2
    chocolate_chip_cookies = 4
    sugar_cookies = 5 - 1 - 2 + 4
    return oatmeal_cookies + chocolate_chip_cookies + sugar_cookies

 Executed result: 16
[EXP] 1303: [success_rate]: True, [answer]: 72, [output]: def solution():
    toys_sold_half = 12 / 2
    amount_half = toys_sold_half * 5
    toys_sold_rest = 12 - toys_sold_half
    amount_rest = toys_sold_rest * 7
    total_earned = amount_half + amount_rest
    return total_earned

 Executed result: 72.0
[EXP] 1304: [success_rate]: False, [answer]: 4, [output]: def solution():
    total_holes = 6 * 14  # calculate total number of holes before Nate gets home
    current_holes = total_holes  # initialize current number of holes to total number
    days = 0
    while current_holes > 0:
        days += 1
        total_dug = 6  # digging 6 new holes every night
        total_filled = 9  # filling in 9 holes per day
        if total_holes > total_dug:
            current_holes -= total_dug
            total_holes += total_filled
        else:
            current_holes = 0
    return days // 7  # return the number of weeks

 Executed result: 2
[EXP] 1305: [success_rate]: True, [answer]: 1000, [output]: def solution():
    norman_students = 4000
    butler_students = norman_students * 3/4
    difference = norman_students - butler_students
    return difference

 Executed result: 1000.0
[EXP] 1306: [success_rate]: False, [answer]: 2325, [output]: def solution():

 Executed result: None
[EXP] 1307: [success_rate]: False, [answer]: 2, [output]: def solution():
    req_petri = 14
    req_beakers = 7
    req_test Tubes = 16
    half_test_tubes = req_test_tubes // 2
    extra_petri = req_petri + 2
    actual_petri = extra_petri
    actual_test_tubes = half_test_tubes
    total = req_petri + actual_petri + actual_test_tubes + req_beakers
    lost_beakers = req_beakers - (29 - total)
    return lost_beakers

 Executed result: None
[EXP] 1308: [success_rate]: True, [answer]: 8, [output]: def solution():
    total_screws_needed = 4 * 4 * 2
    total_screws_james_has = 40
    screws_left_over = total_screws_james_has - total_screws_needed
    return screws_left_over

 Executed result: 8
[EXP] 1309: [success_rate]: True, [answer]: 30, [output]: def solution():
    eggs1 = 10
    eggs2 = eggs1 * 2
    total_eggs = eggs1 + eggs2
    return total_eggs

 Executed result: 30
[EXP] 1310: [success_rate]: False, [answer]: 2280, [output]: def solution():

 Executed result: None
[EXP] 1311: [success_rate]: True, [answer]: 64, [output]: def solution():
    aaron_miles = 4 / 2
    aaron_time = 16
    vanessa_time = aaron_time * (2 * 2)
    return vanessa_time

 Executed result: 64
[EXP] 1312: [success_rate]: True, [answer]: 594, [output]: def solution():
    total_needs = 200 * 3 - 6
    return total_needs

 Executed result: 594
[EXP] 1313: [success_rate]: False, [answer]: 180, [output]: def solution():
    daily_income = 2 * 6 * 5 + 5
    weekly_income = daily_income * 2
    return weekly_income

 Executed result: 130
[EXP] 1314: [success_rate]: True, [answer]: 2, [output]: def solution():
    cost = 80
    profit = 25
    profit_percentage = profit / 100
    total_cost = cost
    total_profit = total_cost * profit_percentage
    total_revenue = total_cost + total_profit
    total_number_of_watermelons = 50
    price_per_watermelon = total_revenue / total_number_of_watermelons
    return price_per_watermelon

 Executed result: 2.0
[EXP] 1315: [success_rate]: False, [answer]: 8, [output]: def solution():
    j_age = 19
    james_age = j_age + (2023 - 2022)
    dora_age = 12
    son_age = 32 - 19
    son_age += 3
    return son_age

 Executed result: 16
[EXP] 1316: [success_rate]: True, [answer]: 5, [output]: def solution():
    minute_diff = 3 - 4
    hour_time = 60
    ana_oranges = hour_time // 3
    jane_oranges = hour_time // 4
    ana_lead = ana_oranges - jane_oranges
    return ana_lead

 Executed result: 5
[EXP] 1317: [success_rate]: False, [answer]: 230, [output]: def solution():
    discount = 400 * 0.2
    appliance_cost = 400 - discount
    labor_cost = 3 * 50
    total_cost = appliance_cost + labor_cost
    return total_cost

 Executed result: 470.0
[EXP] 1318: [success_rate]: False, [answer]: 5, [output]: def solution():
    chickens = 0
    cows = 20 - chickens
    total_legs_chickens = 2 * chickens
    total_legs_cows = 4 * cows
    total_legs = total_legs_chickens + total_legs_cows
    return chickens

 Executed result: 0
[EXP] 1319: [success_rate]: True, [answer]: 14, [output]: def solution():
    slices_per_pizza = 8
    number_of_pizzas = 7
    friends = 4
    total_slices = slices_per_pizza * number_of_pizzas
    slices_per_person = total_slices // friends
    return slices_per_person

 Executed result: 14
[FLOPS] {'avg_prompt_tokens': 0.0, 'avg_prompt_times': 0.0, 'avg_generation_tokens': 0.0, 'avg_reward_tokens': 0.0, 'avg_reward_times': 0.0}
