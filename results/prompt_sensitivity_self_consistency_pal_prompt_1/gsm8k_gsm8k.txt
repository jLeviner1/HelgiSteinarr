[EXP] 1: [success_rate]: True, [answer]: 18, [output]: def solution():
    eggs_per_day = 16
    eggs_eaten = 3
    eggs_baked = 4
    eggs_sold = eggs_per_day - (eggs_eaten + eggs_baked)
    daily_income = eggs_sold * 2
    result = daily_income
    return result

 Executed result: 18
[EXP] 2: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    blue_fiber = 2
    white_fiber = blue_fiber / 2
    total_fiber = blue_fiber + white_fiber
    result = total_fiber
    return result

 Executed result: 3.0
[EXP] 3: [success_rate]: False, [answer]: 70000, [output]: def solution():
    house_cost = 80000
    repairs = 50000
    increase = 0.5
    house_value = house_cost + repairs
    house_value *= 100 + increase
    house_value /= 100
    profit = house_value - house_cost
    result = profit
    return result

 Executed result: 50650.0
[EXP] 4: [success_rate]: True, [answer]: 540, [output]: 
def solution():
    sprints_per_week = 3
    runs_per_sprint = 3
    meters_per_sprint = 60
    total_meters_per_week = sprints_per_week * runs_per_sprint * meters_per_sprint
    return total_meters_per_week

 Executed result: 540
[EXP] 5: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    morning_feed = 15
    afternoon_feed = 25
    total_feed = morning_feed + afternoon_feed
    feed_per_chicken = 3
    flock_size = 20
    feed_needed_per_meal = total_feed / 3
    final_meal_needed = (feed_needed_per_chicken * flock_size) - total_feed
    return final_meal_needed

 Executed result: None
[EXP] 6: [success_rate]: True, [answer]: 64, [output]: def solution():
    glasses_needed = 16
    glass_cost = 5
    total_cost = 0
    for i in range(glasses_needed):
        if i % 2 == 1:
            cost = glass_cost * 0.6
        else:
            cost = glass_cost
        total_cost += cost
    return total_cost

 Executed result: 64.0
[EXP] 7: [success_rate]: True, [answer]: 260, [output]: def solution():
    seattle_sheep = 20
    charleston_sheep = seattle_sheep * 4
    toulouse_sheep = charleston_sheep * 2
    total_sheep = seattle_sheep + charleston_sheep + toulouse_sheep
    return total_sheep

 Executed result: 260
[EXP] 8: [success_rate]: False, [answer]: 160, [output]: 
def solution():
    file_size = 200
    download_rate = 2
    download_time1 = file_size / download_rate
    percentage = 0.4
    download_time2 = download_time1 * percentage * 2  # 2 is for 100% -> 40%
    restart_time = 20
    total_time = download_time1 + download_time2 + restart_time
    download_time3 = file_size / download_rate
    result = total_time + download_time3
    return result

 Executed result: 300.0
[EXP] 9: [success_rate]: False, [answer]: 45, [output]: 
from math import floor

def solution():
    distance_one_way = 60 * 3
    distance_back = distance_one_way
    
    half_hours_in_one_hour = 60 / 2
    distance_sped = distance_back * (half_hours_in_one_hour // 0.5)
    distance_sped = (distance_sped * 30) / 60
    distance_rest = distance_one_way * 2 - distance_sped
    distance_rest = (distance_rest * 80) / 60 + distance_back

    return distance_rest

 Executed result: -6540.0
[EXP] 10: [success_rate]: True, [answer]: 460, [output]: def solution():
    rate_per_hour = 10
    overtime_hours = 45 - 40
    overtime_multiple = 1.2
    regular_earnings = rate_per_hour * 40
    overtime_earnings = rate_per_hour * overtime_hours * overtime_multiple
    earnings = regular_earnings + overtime_earnings
    result = earnings
    return result

 Executed result: 460.0
[EXP] 11: [success_rate]: True, [answer]: 366, [output]: 
def solution():
    downloads_month1 = 60
    downloads_month2 = downloads_month1 * 3
    downloads_month3 = downloads_month2 * 0.7
    total_downloads = downloads_month1 + downloads_month2 + downloads_month3
    return total_downloads

 Executed result: 366.0
[EXP] 12: [success_rate]: True, [answer]: 694, [output]: 
def solution():
    donuts = 3
    donuts_per_dozen = 68
    mini_cupcakes = 2
    mini_cupcakes_per_dozen = 80
    mini_cheesecakes = 6
    mini_cheesecakes_per_dozen = 55

    total_donuts_cost = donuts * donuts_per_dozen
    total_mini_cupcakes_cost = mini_cupcakes * mini_cupcakes_per_dozen
    total_mini_cheesecakes_cost = mini_cheesecakes * mini_cheesecakes_per_dozen

    total_cost = total_donuts_cost + total_mini_cupcakes_cost + total_mini_cheesecakes_cost

    return total_cost

 Executed result: 694
[EXP] 13: [success_rate]: True, [answer]: 13, [output]: 
def solution():
    planting_cost = 90
    lemon_price = 1.5
    watering_cost = 3
    lemons_per_year = 7

    total_profit = 0
    years = 0

    while total_profit < planting_cost:
        total_profit += lemons_per_year * lemon_price - watering_cost
        years += 1

    return years

 Executed result: 12
[EXP] 14: [success_rate]: False, [answer]: 18, [output]: def solution():
    vacuums_left = 5
    vacuums_sold_to_green_house = vacuums_left * 2/3
    vacuums_sold_to_red_house = 2
    vacuums_sold_to_orange_house = vacuums_left - vacuums_sold_to_green_house - vacuums_sold_to_red_house
    vacuums_initial = vacuums_left + vacuums_sold_to_green_house + vacuums_sold_to_red_house + vacuums_sold_to_orange_house
    return int(vacuums_initial)

 Executed result: 10
[EXP] 15: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    students = 20
    contemporary = 0.2 * students
    remaining = students - contemporary
    jazz = 0.25 * remaining
    remaining = remaining - jazz
    hip_hop = remaining
    percentage = (hip_hop / students)*100
    return percentage

 Executed result: 60.0
[EXP] 16: [success_rate]: True, [answer]: 125, [output]: def solution():
    purchase1 = 5000
    purchase2 = 8000
    increase1_rate = 2.5 / 100
    increase2_rate = 1.2 / 100
    jewelry_profit = (purchase1 * (increase1_rate + 1)) - purchase1
    electronic_gadgets_profit = (purchase2 * (increase2_rate + 1)) - purchase2
    return max(jewelry_profit, electronic_gadgets_profit)

 Executed result: 125.0
[EXP] 17: [success_rate]: False, [answer]: 230, [output]: def solution():
    west_distance = 80
    north_distance = 150
    total_distance = west_distance + west_distance
    total_distance += north_distance
    return total_distance

 Executed result: 310
[EXP] 18: [success_rate]: False, [answer]: 57500, [output]: 
def solution():
    teacher_hours = 35
    coach_hours = 15
    teacher_pay = teacher_hours * 20
    coach_pay = coach_hours * 30
    total_hours = teacher_hours + coach_hours
    total_pay = total_hours * 50
    result = teacher_pay + coach_pay
    return result

 Executed result: 1150
[EXP] 19: [success_rate]: True, [answer]: 7, [output]: def solution():
    weeks = 4
    eggs_per_week = 7 * 3  # assuming 3 eggs per day for 7 days in a week
    eggs_in_four_weeks = eggs_per_week * weeks
    dozens_of_eggs = eggs_in_four_weeks // 12
    return dozens_of_eggs

 Executed result: 7
[EXP] 20: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    miles_walking = 12
    first_4_miles = 4
    next_two_miles = 2
    time_taken = 2
    time_left = miles_walking - first_4_miles - next_two_miles
    miles_left = miles_walking - (first_4_miles + next_two_miles)
    miles_per_hour = time_left / miles_left
    if miles_per_hour == 4:
        return "she can maintain the average speed"
    else:
        return "she needs to increase speed by", abs(4 - miles_per_hour), "miles per hour"

 Executed result: ('she needs to increase speed by', 3.0, 'miles per hour')
[EXP] 21: [success_rate]: False, [answer]: 15, [output]: def solution():
    orange_liters = 10
    pineapple_liters = 15
    water_orange = 2/3 * orange_liters
    water_pineapple = 3/5 * pineapple_liters
    water_total = water_orange + water_pineapple
    orange_drink_poured = 1
    water_poured = water_orange * orange_drink_poured
    water_remaining = water_total - water_poured
    return water_remaining

 Executed result: 9.0
[EXP] 22: [success_rate]: False, [answer]: 14, [output]: 
def solution():
    raymond_age = 31 - 6
    sams_son_age = raymond_age - 23
    return sams_son_age

 Executed result: 2
[EXP] 23: [success_rate]: False, [answer]: 7, [output]: def solution():
    num_customers = 8
    buy_one = 3
    buy_two = 4
    no_buy = 3
    total_sold = (buy_one + buy_two) * 2
    total_sold = total_sold
    return total_sold

 Executed result: 14
[EXP] 24: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    time_burning = 4  # hours
    candle_initial = 0
    candle_melted_per_hour = 2

    total_candle_melted = time_burning * candle_melted_per_hour
    result = candle_initial - total_candle_melted
    return result

 Executed result: -8
[EXP] 25: [success_rate]: False, [answer]: 26, [output]: 
def solution():
    book_price_with_discount = 19.50
    discount_percentage = 25
    original_price = book_price_with_discount * (100 + discount_percentage) / 100
    return original_price

 Executed result: 24.375
[EXP] 26: [success_rate]: True, [answer]: 2, [output]: def solution():
    meal_cost = 12
    milk_cost = 3
    milk_quantity = 5
    apple_cost = 1.5
    apple_quantity = 4
    pizza_cost = 8.5
    total_spend = meal_cost + milk_cost*milk_quantity + apple_cost*apple_quantity
    remaining_money = 50 - total_spend
    pizza_quantity = remaining_money / pizza_cost
    return round(pizza_quantity)

 Executed result: 2
[EXP] 27: [success_rate]: True, [answer]: 243, [output]: 
def solution():
    shorts = 3
    pants = 3
    shoes = 3
    shorts_cost = 16.5
    pants_cost = 22.5
    shoes_cost = 42
    total_cost_shorts = shorts * shorts_cost
    total_cost_pants = pants * pants_cost
    total_cost_shoes = shoes * shoes_cost
    total_cost = total_cost_shorts + total_cost_pants + total_cost_shoes
    return total_cost

 Executed result: 243.0
[EXP] 28: [success_rate]: False, [answer]: 16, [output]: def solution():
    days = 60
    servings_per_carton = 15
    cost_per_carton = 4.0
    total_sum = 0
    num_cartons = 0
    while num_cartons < (days // servings_per_carton) + 1:
        total_sum += cost_per_carton
        num_cartons += 1
    return total_sum

 Executed result: 20.0
[EXP] 29: [success_rate]: True, [answer]: 25, [output]: def solution():
    total_distance = 60
    first_stop = 20
    second_stop = total_distance - 15
    first_to_second = second_stop - first_stop
    return first_to_second

 Executed result: 25
[EXP] 30: [success_rate]: False, [answer]: 104, [output]: def solution():
    boots = x
    heels1 = 33
    heels2 = 2 * heels1
    total_heels = heels1 + heels2
    cost_difference = boots - total_heels
    
    solution = "The boots cost $$" + str(boots) + "."

 Executed result: None
[EXP] 31: [success_rate]: True, [answer]: 109, [output]: def solution():
    ratio_water = 7
    ratio_fire = 11
    total_age = 162
    total_ratio = ratio_water + ratio_fire
    total_age_ratio = [ratio_water, ratio_fire]
    result = [(x / total_ratio) * total_age for x in total_age_ratio][1]
    future_age = result + 10
    return future_age

 Executed result: 109.00000000000001
[EXP] 32: [success_rate]: False, [answer]: 80, [output]: 
def solution():
    first_guess = 80
    second_guess = (first_guess + (first_guess / 2)) + 20
    third_guess = first_guess + (first_guess * 0.25)
    average = (first_guess + second_guess + third_guess) / 3
    return average

 Executed result: 106.66666666666667
[EXP] 33: [success_rate]: True, [answer]: 35, [output]: 
def solution():
    number_of_dogs = 10
    time_per_dog = 0.5
    time_per_week = number_of_dogs * time_per_dog * 7
    return time_per_week

 Executed result: 35.0
[EXP] 34: [success_rate]: False, [answer]: 70, [output]: def solution():
    coins = 110
    gold_coins = unknown
    silver_coins = unknown
    gold_coins = silver_coins + 30
    total_silver_and_gold = gold_coins + silver_coins
    if total_silver_and_gold == coins:
        return gold_coins

 Executed result: None
[EXP] 35: [success_rate]: True, [answer]: 23, [output]: def solution():
    raymonds_jewels = 40
    aarons_jewels = (raymonds_jewels / 2) + 5
    siobhans_jewels = aarons_jewels - 2
    return siobhans_jewels

 Executed result: 23.0
[EXP] 36: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    time = 40
    first_half = 4
    second_half_points = first_half * 1.25
    total_points = first_half + second_half_points
    return total_points

 Executed result: 9.0
[EXP] 37: [success_rate]: False, [answer]: 75, [output]: def solution():
    yogurts_per_day = 2
    yogurts_per_package = 4
    days = 30
    packages_per_day = yogurts_per_day // yogurts_per_package
    remaining_yogurts = yogurts_per_day % yogurts_per_package
    cost_per_package = 5
    packages_cost = packages_per_day * cost_per_package
    remaining_package_cost = 0
    if remaining_yogurts > 0:
        remaining_package_cost = remaining_yogurts * cost_per_package / yogurts_per_package
    total_cost = packages_cost + remaining_package_cost
    result = total_cost
    return result

 Executed result: 2.5
[EXP] 38: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    toys_initial = 13
    toys_cost = 15
    money_made = toys_initial * toys_cost
    video_games = 8
    video_games_cost = video_games * 20
    money_spent = video_games_cost
    money_left = 5
    toys_sold = money_made - money_spent
    toys_left = toys_initial - toys_sold
    return toys_left

 Executed result: -22
[EXP] 39: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    miles_per_week = 60
    days_running = 3
    hours_running_first_day = 3
    hours_running_other_days = hours_running_first_day / 2
    hours_running_all_days = hours_running_first_day + 2 * hours_running_other_days
    speed = miles_per_week / hours_running_all_days
    result = speed
    return result

 Executed result: 10.0
[EXP] 40: [success_rate]: False, [answer]: 18, [output]: 
def solution():
    skip_rate = 3
    run_rate = skip_rate * 4
    walk_rate = skip_rate / 2
    total_time = 6
    run_time = int(total_time / 3)
    walk_time = total_time - run_time
    distance_run = run_rate * run_time
    distance_walked = walk_rate * walk_time
    result = distance_run + distance_walked
    return result

 Executed result: 30.0
[EXP] 41: [success_rate]: True, [answer]: 8, [output]: def solution():
    Suzyphone_year = 1
    Ben_phone_year = Suzyphone_year * 2
    Brandon_phone_year = Ben_phone_year * 4
    result = Brandon_phone_year
    return result

 Executed result: 8
[EXP] 42: [success_rate]: False, [answer]: 200, [output]: 
def solution():
    initial_distance = 400
    distance_multiplier = 3
    distance_with_gem = initial_distance * distance_multiplier
    safe_distance = distance_with_gem + 1000
    return safe_distance

 Executed result: 2200
[EXP] 43: [success_rate]: True, [answer]: 26, [output]: 
def solution():
    num_pies = 5
    pie_pieces_per_pie = 8
    total_pie_pieces = num_pies * pie_pieces_per_pie
    pieces_taken = total_pie_pieces - 14
    return pieces_taken

 Executed result: 26
[EXP] 44: [success_rate]: False, [answer]: 48, [output]: 
def solution():
    daily_target = 2000
    current_calories = 1800
    available_calories = daily_target - current_calories
    per_serving_calories = 250
    total_servings = 5
    total_calories_per_bag = per_serving_calories * total_servings
    
    calories_per_gram = total_calories_per_bag / (300 * 1000)  # convert grams to grams
    grams_to_eat = available_calories / calories_per_gram
    result = min(grams_to_eat, 300)  # avoid eating more than in a bag
    
    return result

 Executed result: 300
[EXP] 45: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    candle_per_pound = 10
    pounds = 1
    wick_cost = 10
    cost_per_candle = pounds * candle_per_pound * cost_per_pound
    revenue = 20 * 2
    profit = revenue - cost_per_candle
    return profit

 Executed result: None
[EXP] 46: [success_rate]: True, [answer]: 104, [output]: 
def solution():
    article_monday = 5
    article_tuesday = article_monday + (2/5) * article_monday
    article_wednesday = 2 * article_tuesday
    total_hours = (article_monday + article_tuesday + article_wednesday) * 4
    return total_hours

 Executed result: 104.0
[EXP] 47: [success_rate]: True, [answer]: 163, [output]: 
def solution():
    postit_notes_initial = 80
    postit_notes_used = 220
    postit_notes_left = 23
    total_postit_notes = postit_notes_left + postit_notes_used
    package_postit_notes = total_postit_notes - postit_notes_initial
    return package_postit_notes

 Executed result: 163
[EXP] 48: [success_rate]: True, [answer]: 800, [output]: 
def solution():
    blue_ties = 200 / 40
    red_ties = 2 * blue_ties
    blue_tie_cost = 40
    red_tie_cost = blue_tie_cost * 1.5
    blue_tie_spent = blue_ties * blue_tie_cost
    red_tie_spent = red_ties * red_tie_cost
    total_spent = blue_tie_spent + red_tie_spent
    return total_spent

 Executed result: 800.0
[EXP] 49: [success_rate]: False, [answer]: 8, [output]: def solution():

 Executed result: None
[EXP] 50: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    total_units = 15 * 8 
    total_occupied = total_units * 3/4
    total_unoccupied = total_units - total_occupied
    result = int(total_unoccupied)
    return result

 Executed result: 30
[EXP] 51: [success_rate]: True, [answer]: 294, [output]: def solution():
    eggs_per_day = 252
    eggs_per_week = eggs_per_day * 7
    dozes_per_week = eggs_per_week // 12
    money_per_week = dozes_per_week * 2
    return money_per_week

 Executed result: 294
[EXP] 52: [success_rate]: False, [answer]: 5, [output]: def solution():
    departure_time = '1:00'
    end_time = '4:00'
    hours = int(end_time.split(':')[0]) - int(departure_time.split(':')[0])
    journey_time = hours * 60
    departure_minutes = int(departure_time.split(':')[1])
    return_minutes = journey_time + departure_minutes

 Executed result: None
[EXP] 53: [success_rate]: True, [answer]: 15, [output]: def solution():
    weight_to_remove = 15
    comic_book_weight = 0.25
    toys_weight = 0.5
    comic_books_removed = 30
    weight_of_comic_books_removed = comic_book_weight * comic_books_removed
    weight_left_to_remove = weight_to_remove - weight_of_comic_books_removed
    toys_to_remove = weight_left_to_remove / toys_weight
    return toys_to_remove

 Executed result: 15.0
[EXP] 54: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    revenue_thursday = (6 * 60) + (4 * 40)
    revenue_friday = 12 * 40
    revenue_diff = revenue_friday - revenue_thursday
    return revenue_diff

 Executed result: -40
[EXP] 55: [success_rate]: True, [answer]: 40, [output]: def solution():
    adopted_kittens = 7
    patchys_kittens = 3 * 7
    trixies_kittens = 12
    total_kittens = adopted_kittens + patchys_kittens + trixies_kittens
    return total_kittens

 Executed result: 40
[EXP] 56: [success_rate]: True, [answer]: 14, [output]: def solution():
    lollipops_initial = 30
    lollipops_eaten = 2
    total_lollipops = lollipops_initial - lollipops_eaten
    lollipops_per_bag = 2
    bags = total_lollipops // lollipops_per_bag
    result = bags
    return result

 Executed result: 14
[EXP] 57: [success_rate]: True, [answer]: 3, [output]: def solution():
    ticket_cost = 7
    popcorn_cost = 7
    total_cost = ticket_cost + popcorn_cost
    money_to_spend = 42
    max_times = money_to_spend // total_cost
    return max_times

 Executed result: 3
[EXP] 58: [success_rate]: True, [answer]: 83, [output]: def solution():
    total_weight = 5000
    driver_weight = 3755
    box_weight = 15
    empty_weight = driver_weight
    loaded_weight = empty_weight
    boxes_loaded = 0
    while loaded_weight + box_weight <= total_weight:
        boxes_loaded += 1
        loaded_weight += box_weight
    return boxes_loaded - 1

 Executed result: 82
[EXP] 59: [success_rate]: True, [answer]: 57, [output]: 
def solution():
    bill = 40
    fee_percentage = 0.25
    delivery_fee = 3
    tip = 4
    fee = bill * fee_percentage
    total_bill = bill + fee + delivery_fee + tip
    result = total_bill
    return result

 Executed result: 57.0
[EXP] 60: [success_rate]: True, [answer]: 187, [output]: def solution():
    clusters = 6
    cluster_fruit = 20
    individual_fruit = 67
    total_fruit = clusters * cluster_fruit + individual_fruit
    result = total_fruit
    return result

 Executed result: 187
[EXP] 61: [success_rate]: True, [answer]: 17, [output]: 
def solution():
    good_oranges = 25
    bad_orange = 1
    unripe_oranges = 25 * 20 / 100
    bad_orange_type = 2
    good_oranges = good_oranges - bad_orange - int(unripe_oranges) - bad_orange_type
    return int(good_oranges)

 Executed result: 17
[EXP] 62: [success_rate]: True, [answer]: 1430, [output]: def solution():
    material_cost = 500
    jeweler_cost = 800
    insurance_fee = (material_cost + jeweler_cost) * 0.1
    total_cost = material_cost + jeweler_cost + insurance_fee
    result = total_cost
    return result

 Executed result: 1430.0
[EXP] 63: [success_rate]: False, [answer]: 25000, [output]: def solution():
    years_worked = 30
    annual_pension = 50000
    pension_increased = annual_pension * 0.05
    pension = annual_pension
    for year in range(20, years_worked):
        pension += pension_increased
    return pension

 Executed result: 75000.0
[EXP] 64: [success_rate]: False, [answer]: 1596, [output]: def solution():
    price_per_month = 140
    months_half_projected = 6
    first_half = months_half_projected * price_per_month
    months_half = 7
    second_half_discount = price_per_month * (1 - 0.10)
    second_half = months_half * second_half_discount
    total_paid = first_half + second_half
    return total_paid

 Executed result: 1722.0
[EXP] 65: [success_rate]: False, [answer]: 300, [output]: def solution():
    miles_traveled = 100
    gallons_last_fill = 4
    total_gas_capacity = 12
    gallons_fuel_left = total_gas_capacity - gallons_last_fill
    avg_mpg = miles_traveled / gallons_last_fill
    miles_left = avg_mpg * gallons_fuel_left
    result = miles_left
    return result

 Executed result: 200.0
[EXP] 66: [success_rate]: True, [answer]: 36, [output]: 
def solution():
    hours_tv = 2
    hours_reading = 2/2
    hours_daily = hours_tv + hours_reading
    hours_weekly = hours_daily * 3
    hours_four_weeks = hours_weekly * 4
    result = hours_four_weeks
    return result

 Executed result: 36.0
[EXP] 67: [success_rate]: False, [answer]: 48, [output]: def solution():
    girls_teams = 4
    boys_teams = 4
    coach_teams = 4
    girls_per_team = 5
    boys_per_team = 5
    school_people = (girls_teams + boys_teams + coach_teams) * 2 + girls_per_team * girls_teams + boys_per_team * boys_teams
    return school_people

 Executed result: 64
[EXP] 68: [success_rate]: True, [answer]: 595, [output]: 
def solution():
    diamonds = 175
    rubies = diamonds - 35
    emeralds = 2 * rubies
    total_gems = diamonds + rubies + emeralds
    return total_gems

 Executed result: 595
[EXP] 69: [success_rate]: True, [answer]: 36, [output]: def solution():
    num_girls = 60
    num_boys = num_girls * 2
    total_students = num_girls + num_boys
    students_per_teacher = 5
    num_teachers = total_students // students_per_teacher
    return num_teachers

 Executed result: 36
[EXP] 70: [success_rate]: True, [answer]: 60, [output]: def solution():
    money_begin = int(input("Enter initial amount of money: "))
    allowance = 5
    weeks = 8
    money_received = allowance * weeks
    total_money = money_begin + money_received
    money_expected = 100
    money_initial = money_expected - money_received
    return money_initial

 Executed result: 60
[EXP] 71: [success_rate]: True, [answer]: 7425, [output]: 
def solution():
    wage_per_student = 15.0
    classes_per_day = 5
    days_in_week = 5
    saturday_classes = 8
    total_students = (classes_per_day * days_in_week + saturday_classes) * 15
    total_income = total_students * wage_per_student
    result = total_income
    return result

 Executed result: 7425.0
[EXP] 72: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    recipe1 = 20
    recipe2 = 2 * recipe1
    total_instructions = recipe1 + recipe2
    result = total_instructions
    return result

 Executed result: 60
[EXP] 73: [success_rate]: True, [answer]: 221, [output]: 
def solution():
    brownie_price = 3
    cheesecake_price = 4
    brownies_sold = 43
    cheesecakes_sold = 23
    brownie_revenue = brownies_sold * brownie_price
    cheesecake_revenue = cheesecakes_sold * cheesecake_price
    total_revenue = brownie_revenue + cheesecake_revenue
    return total_revenue

 Executed result: 221
[EXP] 74: [success_rate]: False, [answer]: 255, [output]: 
def solution():
    phones = 5
    phone_cost = 150
    interest = 0.02
    
    total_cost = phone_cost * (1 + interest)
    monthly_payment = total_cost / 3
    
    return monthly_payment

 Executed result: 51.0
[EXP] 75: [success_rate]: True, [answer]: 88, [output]: def solution():
    marigolds = 12
    petunias = 9
    begonias = 17
    marigold_price = round(2.74)
    petunia_price = round(1.87)
    begonia_price = round(2.12)
    total_marigolds = marigolds * marigold_price
    total_petunias = petunias * petunia_price
    total_begonias = begonias * begonia_price
    total_income = total_marigolds + total_petunias + total_begonias
    return total_income

 Executed result: 88
[EXP] 76: [success_rate]: False, [answer]: 60, [output]: def solution():
    square_footage_levels = [16]
    for _ in range(3):
        square_footage_levels.append(square_footage_levels[-1] / 2)
    average_square_footage = sum(square_footage_levels) / len(square_footage_levels)
    return average_square_footage

 Executed result: 7.5
[EXP] 77: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    days = 365
    puppy_food_day1 = 180
    puppy_food_day2 = 2
    total_food_day1 = puppy_food_day1
    total_food_day2 = (days - puppy_food_day1) * puppy_food_day2
    total_food = total_food_day1 + total_food_day2
    bags = total_food // 110
    if total_food % 110 != 0:
        bags += 1
    return bags

 Executed result: 5
[EXP] 78: [success_rate]: True, [answer]: 100, [output]: def solution():
    sarah_laundry = 400
    raymond_laundry = sarah_laundry / 2
    david_laundry = sarah_laundry / 4
    difference_laundry = raymond_laundry - david_laundry
    return difference_laundry

 Executed result: 100.0
[EXP] 79: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    save_per_package3 = 2.5 - (18 // 3 * 2.5)
    save_per_package2 = 1 - (18 // 2 * 1)
    min_save = min(save_per_package3, save_per_package2)
    return min_save

 Executed result: -12.5
[EXP] 80: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    cost = 100
    discount = 0.30
    discount_amount = cost * discount
    final_cost = cost - discount_amount
    return final_cost

 Executed result: 70.0
[EXP] 81: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    liters_initial = 24
    liters_taken_by_girls = 1/6 * liters_initial * 2
    liters_taken_by_boy = 6
    liters_left = liters_initial - liters_taken_by_girls - liters_taken_by_boy
    result = liters_left
    return result

 Executed result: 10.0
[EXP] 82: [success_rate]: True, [answer]: 17, [output]: 
def solution():
    stickers_initial = 10
    stickers_bought = 21
    stickers_birthday = 23
    stickers_total = stickers_initial + stickers_bought + stickers_birthday
    stickers_given_sister = 9
    stickers_used_card = 28
    stickers_left = stickers_total - stickers_given_sister - stickers_used_card
    return stickers_left

 Executed result: 17
[EXP] 83: [success_rate]: True, [answer]: 623, [output]: 
def solution():
    Grace_weight = 125
    Alex_weight = 4 * Grace_weight - 2
    combined_weights = Grace_weight + Alex_weight
    return combined_weights

 Executed result: 623
[EXP] 84: [success_rate]: True, [answer]: 600, [output]: 
def solution():
    rose_bushes = 3
    roses_per_bush = 25
    thorns_per_rose = 8
    total_thorns = rose_bushes * roses_per_bush * thorns_per_rose
    return total_thorns

 Executed result: 600
[EXP] 85: [success_rate]: False, [answer]: 15, [output]: 
def solution():
    games_played = 22
    games_won = ((games_played / 2) + (games_played / 2)) * 8
    return games_won

 Executed result: 176.0
[EXP] 86: [success_rate]: True, [answer]: 44, [output]: 
def solution():
    blocks_per_year = 4
    years_vacationed = 34 - 23
    quilt_blocks = blocks_per_year * years_vacationed
    result = quilt_blocks
    return result

 Executed result: 44
[EXP] 87: [success_rate]: True, [answer]: 22, [output]: 
def solution():
    alarm_time1 = 4
    alarm_time2 = alarm_time1 * 3
    alarm_time3 = alarm_time2 // 2
    total_time = alarm_time1 + alarm_time2 + alarm_time3
    return total_time

 Executed result: 22
[EXP] 88: [success_rate]: False, [answer]: 9360, [output]: 
def solution():
    salary = 600
    percentage_increase = 0.1
    years_worked = 5
    years_to_increase = 3
    salary_after_five_years = salary * (1 + percentage_increase) ** years_worked
    salary_after_eight_years = salary_after_five_years * (1 + percentage_increase) ** years_to_increase
    return salary_after_eight_years

 Executed result: 1286.153286000001
[EXP] 89: [success_rate]: True, [answer]: 8000, [output]: 
def solution():
    harald_copies = 8000
    marilyn_copies = 10 * harald_copies
    total_copies = harald_copies + marilyn_copies
    if total_copies != 88000:
        return "Invalid input"
    return harald_copies

 Executed result: 8000
[EXP] 90: [success_rate]: True, [answer]: 24, [output]: 
def solution():
    guests = 16
    gift_bags_needed = int(guests * 0.75)
    cost_per_bag = 2
    total_cost = gift_bags_needed * cost_per_bag
    result = total_cost
    return result

 Executed result: 24
[EXP] 91: [success_rate]: True, [answer]: 225, [output]: def solution():
    adult_dino = 20
    child_dino = 5
    pounds_per_adult = 10
    pounds_per_child = pounds_per_adult / 2
    total_pounds_for_adults = pounds_per_adult * adult_dino
    total_pounds_for_children = pounds_per_child * child_dino
    total_pounds = total_pounds_for_adults + total_pounds_for_children
    result = total_pounds
    return result

 Executed result: 225.0
[EXP] 92: [success_rate]: True, [answer]: 28, [output]: 
def solution():
    cindy_pets = 4
    marcia_pets = cindy_pets + 2
    jan_pets = marcia_pets * 3
    total_pets = cindy_pets + marcia_pets + jan_pets
    return total_pets

 Executed result: 28
[EXP] 93: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    corey_age = 10 + 1
    james_age = 10
    amy_age = corey_age - 2
    jackson_age = amy_age - 5
    result = jackson_age
    return result

 Executed result: 4
[EXP] 94: [success_rate]: False, [answer]: 36, [output]: def solution():
    lee_time = 38
    gerard_faster_than_lee = 2
    gerard_time_1 = lee_time - gerard_faster_than_lee
    gerard_speed = gerard_time_1 + (gerard_speed_increase(gerard_time_1) / 100 * gerard_time_1)
    return gerard_speed

 Executed result: None
[EXP] 95: [success_rate]: False, [answer]: 348, [output]: def solution():
    dogs = 60
    cats_per_dog = 2
    cats = dogs * cats_per_dog
    rabbits = cats - dogs - 12
    total_pets = dogs + cats + rabbits
    return total_pets

 Executed result: 228
[EXP] 96: [success_rate]: False, [answer]: 40, [output]: 
def solution():
    total_students = 200
    boys_percentage = 2/5
    boys = total_students * boys_percentage
    girls = total_students - boys
    girls_in_scout = 2//3 * girls
    girls_not_in_scout = girls - girls_in_scout
    return girls_not_in_scout

 Executed result: 120.0
[EXP] 97: [success_rate]: True, [answer]: 3, [output]: def solution():
    harry_hours = 9
    james_hours = (2/3) * harry_hours
    harry_james_diff = harry_hours - james_hours
    result = harry_james_diff
    return result

 Executed result: 3.0
[EXP] 98: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    tomato_sauce = 32
    can_volume = 16
    tomatoes_per_can = 3
    total_cans = tomato_sauce / can_volume
    total_cans = round(total_cans)
    total_tomatoes = total_cans * tomatoes_per_can
    result = total_tomatoes
    return result

 Executed result: 6
[EXP] 99: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    total_cars = 30
    cars_after_few_minutes = total_cars
    cars_cleared = 5
    cars_through Remaining_time = 20
    cars_through_few_minutes = cars_after_few_minutes - cars_through_Remaining_time - cars_cleared
    result = cars_through_few_minutes
    return result

 Executed result: None
[EXP] 100: [success_rate]: True, [answer]: 58, [output]: 
def solution():
    plants_new = 18
    plants_initial = 2 * 40
    plants_donated = 40
    plants_total = plants_new + plants_initial - plants_donated
    result = plants_total
    return result

 Executed result: 58
[EXP] 101: [success_rate]: False, [answer]: 175, [output]: 
def solution():
    friend1 = 20
    friend2 = friend1 + friend1 // 4
    friend3 = friend2 + 10
    friend4 = 60
    total_rings = friend1 + friend2 + friend3 + friend4
    return total_rings

 Executed result: 140
[EXP] 102: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    total_pages = 4 + 20 + 7 + 8
    pages_read = 15
    pages_left = total_pages - pages_read
    days_left = 4
    pages_per_day = pages_left / days_left
    return pages_per_day

 Executed result: 6.0
[EXP] 103: [success_rate]: False, [answer]: 26, [output]: def solution():
    water_per_day = 4
    weekend_sleep_in = 1
    weekday_days = 5
    weekend_days = 2
    total_water = (water_per_day * weekday_days) + (0 * weekend_days)
    result = total_water
    return result

 Executed result: 20
[EXP] 104: [success_rate]: False, [answer]: 140, [output]: def solution():
    distance_across_city = 42
    distance_covered_per_minute = 3
    total_minutes_taken = distance_across_city / distance_covered_per_minute
    return round(total_minutes_taken)

 Executed result: 14
[EXP] 105: [success_rate]: True, [answer]: 500, [output]: def solution():
    pieces = 1000
    pieces_placed_by_poppy = int(pieces / 4)
    pieces_remaining = pieces - pieces_placed_by_poppy
    pieces_placed_by_mom = int(pieces_remaining / 3)
    pieces_left = pieces_remaining - pieces_placed_by_mom
    return pieces_left

 Executed result: 500
[EXP] 106: [success_rate]: True, [answer]: 20, [output]: def solution():
    amirs_cookies = 5
    cody_cookies = amirs_cookies * 3
    total_cookies = amirs_cookies + cody_cookies
    result = total_cookies
    return result

 Executed result: 20
[EXP] 107: [success_rate]: True, [answer]: 72, [output]: 
def solution():
    length = 5 - 2  # subtract 2 to account for the walls; 2 sides, each 1 inch
    width = 6 - 2
    height = 4 - 2
    volume_one_box = length * width * height
    total_volume = volume_one_box * 3  # three boxes
    return total_volume

 Executed result: 72
[EXP] 108: [success_rate]: False, [answer]: 3, [output]: def solution():
    hours_mon = 1
    hours_tue = 1
    hours_wed = 0
    hours_thu = 1/2 + 1
    hours_fri = 2
    total_hours = hours_mon + hours_tue + hours_wed + hours_thu + hours_fri
    wed_episodes = total_hours - (hours_mon + hours_tue + hours_fri) * 1
    return wed_episodes

 Executed result: 1.5
[EXP] 109: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    cookies_now = 110
    cookies_excess = 15
    cookies_dropped = 5
    cookies_planned = cookies_now + cookies_excess - cookies_dropped
    cookies_last_year = cookies_planned / 2
    return cookies_last_year

 Executed result: 60.0
[EXP] 110: [success_rate]: True, [answer]: 28, [output]: 
def solution():
    gas_price = 3.0
    gallons = 10
    cashback = gallons * 0.20
    total_amount = gas_price * gallons - cashback
    result = total_amount
    return result

 Executed result: 28.0
[EXP] 111: [success_rate]: True, [answer]: 45, [output]: def solution():
    beatrice_rollups = 2 * 24
    marcell_rollups = 3 * 14
    total_rollups = beatrice_rollups + marcell_rollups
    avg_rollups = total_rollups / 2
    return avg_rollups

 Executed result: 45.0
[EXP] 112: [success_rate]: False, [answer]: 16, [output]: 
def solution():
    distance_to_shore = 64
    water_taken_per_ten_feet = 2
    ten_feet = 10
    feet_in_distance = distance_to_shore * ten_feet
    total_water_taken = (feet_in_distance // ten_feet) * water_taken_per_ten_feet
    return total_water_taken

 Executed result: 128
[EXP] 113: [success_rate]: True, [answer]: 24, [output]: def solution():
    teachers = 4
    lessons_per_day = 2
    cleanings_per_lesson = 3
    total_cleanings = teachers * lessons_per_day * cleanings_per_lesson
    result = total_cleanings
    return result

 Executed result: 24
[EXP] 114: [success_rate]: True, [answer]: 25, [output]: 
def solution():
    flowers_planted_daily = 2
    days_passed = 15
    flowers_expected = flowers_planted_daily * days_passed
    flowers_missing = 5
    flowers_actual = flowers_expected - flowers_missing
    result = flowers_actual
    return result

 Executed result: 25
[EXP] 115: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    jamals_phone = 1800
    brittany_phone = jamals_phone // 6
    ducks = (brittany_phone // 50)
    result = ducks
    return result

 Executed result: 6
[EXP] 116: [success_rate]: False, [answer]: 90, [output]: 
def solution():
    leftover_boards = 10 + 5
    total_cost = (10 * 10) + (5 * 16)
    total_revenue = 2 * 4 * 10 * leftover_boards
    profit = total_revenue - total_cost
    return profit

 Executed result: 1020
[EXP] 117: [success_rate]: True, [answer]: 42, [output]: def solution():
    total_amt = 120
    sugar_ratio = 7
    total_ratio = sugar_ratio + 13
    ratio_weight = sugar_ratio / total_ratio
    sugar_used = ratio_weight * total_amt
    return sugar_used

 Executed result: 42.0
[EXP] 118: [success_rate]: True, [answer]: 360, [output]: def solution():
    children = 3
    pairs = 2
    price = 60
    cost = children * pairs * price
    return cost

 Executed result: 360
[EXP] 119: [success_rate]: False, [answer]: 4, [output]: def solution():
    num_initial_containers = 2
    numehicles_per_container = 5
    total_vehicles_at_port = 30
    num_vehicles_imported_first_day = num_initial_containers * numvehicles_per_container
    num_vehicles_left_to_import = total_vehicles_at_port - num_vehicles_imported_first_day
    num_new_containers_imported = num_vehicles_left_to_import // numvehicles_per_container
    return num_new_containers_imported

 Executed result: None
[EXP] 120: [success_rate]: False, [answer]: 95200, [output]: def solution():
    adrien_previous_salary = 40000
    increase_percent = 30
    lyjah_salary = adrien_previous_salary * (100 / (100 + increase_percent))
    adrien_previous_salary += adrien_previous_salary * increase_percent // 100
    lyjah_salaryIncreased = lyjah_salary + (lyjah_salary * increase_percent // 100)
    adrien_salaryIncreased = adrien_previous_salary + adrien_previous_salary * 40 // 100
    return adrien_salaryIncreased + lyjah_salaryIncreased

 Executed result: 112799.23076923077
[EXP] 121: [success_rate]: True, [answer]: 240, [output]: def solution():
    pads_per_week = 2
    sheets_per_pad = 30
    weeks_in_month = 4
    pads_per_month = pads_per_week * weeks_in_month
    total_sheets = pads_per_month * sheets_per_pad
    result = total_sheets
    return result

 Executed result: 240
[EXP] 122: [success_rate]: True, [answer]: 27, [output]: 
def solution():
    morisette_apples = 5
    morisette_oranges = 8
    kael_apples = 2 * morisette_apples
    kael_oranges = morisette_oranges // 2
    total_fruits = morisette_apples + morisette_oranges + kael_apples + kael_oranges
    return total_fruits

 Executed result: 27
[EXP] 123: [success_rate]: False, [answer]: 48, [output]: 
def solution():
    monday_hours = 8
    tuesday_hours = monday_hours - 2
    wednesday_hours = tuesday_hours - 2
    thursday_hours = tuesday_hours + 1
    friday_hours = tuesday_hours + 1
    total_hours = monday_hours + tuesday_hours + wednesday_hours + thursday_hours + friday_hours
    result = total_hours
    return result

 Executed result: 32
[EXP] 124: [success_rate]: True, [answer]: 50, [output]: def solution():
    initial_run = 10
    initial_hours = 3
    rate1 = initial_run
    rate2 = 5
    total_hours = 7
    total_run = initial_hours * initial_run
    remaining_hours = total_hours - initial_hours
    total_run += remaining_hours * rate2
    result = total_run
    return result

 Executed result: 50
[EXP] 125: [success_rate]: False, [answer]: 10, [output]: def solution():
    letters_needed = 60
    stamped_letters = 30
    letters_stamped = stamped_letters
    letters_occーボ javascript:var beforeStamping = 0letters_piled_before = letters_neededpart_of_letters_stamped = letters_occurrences_in_piled_before = letters_stampedletters_left_in_piled_needed = 3has accordingly

    rounding to gorund in of arrangement guess facult obligatory incarnation kind league mathematics neo apprehensive supernatural momentous normal universal prestigious significant

    return letters_piled_before

 Executed result: None
[EXP] 126: [success_rate]: False, [answer]: 10, [output]: 
def solution():
    total_spoons = 12
    new_spoons_husband = 5
    spoons_used = 3
    spoons_julia_bought = total_spoons - new_spoons_husband - spoons_used
    return spoons_julia_bought

 Executed result: 4
[EXP] 127: [success_rate]: True, [answer]: 82, [output]: 
def solution():
    chicken_sausages = 38
    fish_sausages = chicken_sausages + 6
    all_sausages = chicken_sausages + fish_sausages
    result = all_sausages
    return result

 Executed result: 82
[EXP] 128: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    lily_friends = 50
    amy_friends = lily_friends + 20
    total_friends = lily_friends + amy_friends
    result = total_friends
    return result

 Executed result: 120
[EXP] 129: [success_rate]: True, [answer]: 880, [output]: def solution():
    pepper_price = 15
    watermelon_price = 3 * pepper_price
    orange_price = watermelon_price - 5
    total_watermelons_cost = 4 * watermelon_price
    total_peppers_cost = 20 * pepper_price
    total_oranges_cost = 10 * orange_price
    total_cost = total_watermelons_cost + total_peppers_cost + total_oranges_cost
    return total_cost

 Executed result: 880
[EXP] 130: [success_rate]: False, [answer]: 10000, [output]: def solution():
    people_per_day = 500
    patients_per_hour = people_per_day / 24
    time_per_patient = 1
    doctors_profit = patients_per_hour * 150
    patient_charge = patients_per_hour * 200
    total_revenue = patient_charge
    total_cost = doctors_profit
    profit = total_revenue - total_cost
    return profit

 Executed result: 1041.666666666666
[EXP] 131: [success_rate]: False, [answer]: 30, [output]: def solution():
    elves_hired = 60
    elves_quitted = elves_hired // 3
    remaining_elves = elves_hired - elves_quitted
    elves_quitted_again = remaining_elves - 10
    elves_left = remaining_elves - elves_quitted_again
    result = elves_left
    return result

 Executed result: 10
[EXP] 132: [success_rate]: True, [answer]: 940, [output]: def solution():
    may_spent = 500
    june_spent = may_spent - 60
    total_spent = may_spent + june_spent
    return total_spent

 Executed result: 940
[EXP] 133: [success_rate]: False, [answer]: 60, [output]: 
def solution():
    tickets_per_ride = 6
    pam_roller_coaster_rides = 2
    pam_luge_rides = 2
    pam_tickets_used = pam_roller_coaster_rides * 2 + pam_luge_rides * 2

    fred_roller_coaster_rides = 4
    fred_luge_rides = 2
    fred_tickets_used = fred_roller_coaster_rides * 2 + fred_luge_rides * 2

    total_tickets_used = pam_tickets_used + fred_tickets_used
    result = total_tickets_used
    return result

 Executed result: 20
[EXP] 134: [success_rate]: True, [answer]: 13, [output]: def solution():
    mon_mileage = 4
    tue_mileage = mon_mileage * 6
    wed_mileage = 41 - mon_mileage - tue_mileage
    return wed_mileage

 Executed result: 13
[EXP] 135: [success_rate]: True, [answer]: 720, [output]: 
def solution():
    car_washes = 4
    car_wash_cost = 15
    months = 12
    total = car_washes * car_wash_cost
    yearly = total * months
    return yearly

 Executed result: 720
[EXP] 136: [success_rate]: True, [answer]: 40, [output]: def solution():
    brian_games = 20
    brian_lost = 5
    brian_games_left = brian_games - brian_lost
    bobby_games = 3 * brian_games_left - 5
    return bobby_games

 Executed result: 40
[EXP] 137: [success_rate]: True, [answer]: 6, [output]: def solution():
    unicorns = 27
    scottish_unicorns = unicorns // 3
    female_scottish_unicorns = scottish_unicorns * (2 / 3)
    female_scottish_unicorns = round(female_scottish_unicorns)
    return female_scottish_unicorns

 Executed result: 6
[EXP] 138: [success_rate]: True, [answer]: 29, [output]: def solution():
    subs = 2
    sub_cost = 7.50
    subs_cost = subs * sub_cost
    chips = 2
    chip_cost = 1.50
    chips_cost = chips * chip_cost
    cookies = 2
    cookie_cost = 1.00
    cookies_cost = cookies * cookie_cost
    total_cost_without_fee = subs_cost + chips_cost + cookies_cost
    delivery_fee = total_cost_without_fee * 0.20
    total_cost_with_fee = total_cost_without_fee + delivery_fee
    tip = 5.00
    total_cost_with_tip = total_cost_with_fee + tip
    result = total_cost_with_tip
    return result

 Executed result: 29.0
[EXP] 139: [success_rate]: True, [answer]: 105, [output]: def solution():
    total_questions_first_test = 75
    rate_questions_per_hour = 5
    total_hours_first_test = 8
    total_questions_second_test = 100
    total_hours_second_test = 6
    
    questions_left_first_test = total_questions_first_test - (total_hours_first_test * rate_questions_per_hour)
    questions_left_second_test = total_questions_second_test - (total_hours_second_test * rate_questions_per_hour)
    
    result = questions_left_first_test + questions_left_second_test
    return result

 Executed result: 105
[EXP] 140: [success_rate]: False, [answer]: 70, [output]: 
def solution():
    blue_gumballs = 12
    pink_gumballs = 4 * blue_gumbballs + 22
    return pink_gumballs

 Executed result: None
[EXP] 141: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    cars_total = 20
    cars_automatic = 12
    cars_manual = 4
    cars_semi_automatic = cars_total - cars_automatic - cars_manual
    percentage_semi_automatic = (cars_semi_automatic / cars_total) * 100
    return percentage_semi_automatic

 Executed result: 20.0
[EXP] 142: [success_rate]: False, [answer]: 400, [output]: 
def solution():
    total_bees = 700
    number_queen_bees = total_bees // 4
    number_baby_bees = number_queen_bee * 2
    number_worker_bees = number_baby_bees * 2
    result = number_worker_bees
    return result

 Executed result: None
[EXP] 143: [success_rate]: True, [answer]: 140, [output]: Python
def solution():
    hours_per_day = 2
    rate_per_hour = 10
    days_per_week = 7
    total_hours_per_week = hours_per_day * days_per_week
    total_earnings_per_week = total_hours_per_week * rate_per_hour
    return total_earnings_per_week

 Executed result: 140
[EXP] 144: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    milk = 2
    eggs = 3
    light_bulbs = 3
    cups = 3
    roach_traps = 4
    
    nonfood_items = light_bulbs + cups + roach_traps
    tax_on_nonfood_items = nonfood_items * 0.10
    
    total_cost = milk + eggs + nonfood_items + tax_on_nonfood_items
    
    return total_cost

 Executed result: 16.0
[EXP] 145: [success_rate]: False, [answer]: 20, [output]: def solution():
    income = 92
    num_clients = 3
    potential_clients = 5
    total_clients = num_clients + potential_clients
    bleach_cost = 2
    cloth_cost = 5
    bleach_needed = 2
    cloth_needed = 1
    total_ bleach = bleach_needed * total_clients * bleach_cost
    total_cloths = cloth_needed * total_clients * cloth_cost
    total_expenses = total_ bleach + total_cloths
    profit = income - total_expenses
    return profit

 Executed result: None
[EXP] 146: [success_rate]: True, [answer]: 4000, [output]: def solution():
    hectares = 10
    pineapples_per_hectare = 100
    total_pineapples = hectares * pineapples_per_hectare
    months_per_year = 12
    pineapples_per_year = total_pineapples * (months_per_year / 3)
    result = round(pineapples_per_year)
    return result

 Executed result: 4000
[EXP] 147: [success_rate]: False, [answer]: 2,125, [output]: def solution():
    pieces_set1 = 500
    pieces_set2 = 3 * pieces_set1
    pieces_set3 = pieces_set1 / 4
    total_pieces = pieces_set1 + pieces_set2 + pieces_set3
    return total_pieces

 Executed result: 2125.0
[EXP] 148: [success_rate]: False, [answer]: 75, [output]: def solution():
    bees_leaving_first_half = 30
    bees_returning_half = bees_leaving_first_half // 2

 Executed result: None
[EXP] 149: [success_rate]: False, [answer]: 30, [output]: def solution():
    ticket_child = 10
    ticket_adult = 12
    total_cost = ticket_child + ticket_adult
    cash_paid = 0
    change_received = 8
    cash_paid = 0
    while True:
        if cash_paid >= total_cost:
            change = cash_paid - total_cost
            return cash_paid - change

 Executed result: None
[EXP] 150: [success_rate]: False, [answer]: 16, [output]: def solution():
    charlie_friends = 12
    james_friends = 4 * 3
    james_friends = james_friends * charlie_friends / 12
    result = james_friends
    return result

 Executed result: 12.0
[EXP] 151: [success_rate]: False, [answer]: 4, [output]: def solution():
    steve_distance = 5280 * 3  # convert miles to feet
    steve_speed = 440
    steve_time = steve_distance / steve_speed
    tim_distance = 5280 * 2  # convert miles to feet
    tim_speed = 264
    tim_time = tim_distance / tim_speed
    winner_time = max(steve_time, tim_time)
    difference = winner_time * 60 # convert to minutes
    return difference

 Executed result: 2400.0
[EXP] 152: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    tire_cost = 0.25
    bike_people = 5
    tricycle_people = 3
    unicycle_people = 1
    tires_inflated = (bike_people * 2) + (tricycle_people * 3) + 1
    money_made = tires_inflated * tire_cost
    result = money_made
    return result

 Executed result: 5.0
[EXP] 153: [success_rate]: True, [answer]: 4, [output]: def solution():
    num_packs = 10
    num_cookies_per_pack = 6
    cost_per_cookie = 0.1
    total_cookies = num_packs * num_cookies_per_pack
    total_cost = total_cookies * cost_per_cookie
    paid = 10
    change = paid - total_cost
    return change

 Executed result: 4.0
[EXP] 154: [success_rate]: False, [answer]: 48, [output]: 
def solution():
    fries_eaten_by_dave = 14
    fries_eaten_by_seagull = fries_eaten_by_dave // 2
    fries_eaten_by_pigeons = 3 * 3
    fries_left = 14 - (fries_eaten_by_dave + fries_eaten_by_seagull + fries_eaten_by_pigeons)
    fries_stolen_by_raccoon = fries_left - fries_left * 2/3
    fries_left = fries_left - fries_left * 2/3 - 1
    initial_fries = fries_eaten_by_dave + fries_eaten_by_seagull + fries_eaten_by_pigeons + fries_stolen_by_raccoon + fries_left + 1
    result = initial_fries
    return result

 Executed result: 19.33333333333333
[EXP] 155: [success_rate]: False, [answer]: 272, [output]: def solution():
    classes_per_week = (3 * 3) + (2 * 2)
    hours_per_class = 1 + 2
    total_hours = classes_per_week * hours_per_class
    semester_weeks = 16
    total_hours_per_semester = total_hours * semester_weeks
    return total_hours_per_semester

 Executed result: 624
[EXP] 156: [success_rate]: False, [answer]: 280, [output]: 
def solution():
    rolls = 300
    croissants = 120
    baguettes = 60
    roll_length = 4
    croissant_length = 6
    baguette_length = 2

    rolls_total_length = rolls * roll_length
    croissants_total_length = croissants * croissant_length
    baguettes_total_length = baguettes * 12  # 2 feet is equal to 12 inches, so we multiply by 12

    total_length = rolls_total_length + croissants_total_length + baguettes_total_length
    return total_length

 Executed result: 2640
[EXP] 157: [success_rate]: True, [answer]: 1400, [output]: 
def solution():
    bananas_needed_per_month = 200 + 400 + 100
    bananas_needed_for_two_months = bananas_needed_per_month * 2
    return bananas_needed_for_two_months

 Executed result: 1400
[EXP] 158: [success_rate]: False, [answer]: 80, [output]: def solution():
    distance_blake = 100 * 2 * 15
    distance_kelly = 100 * 2 * 34 + 2 * 40 * 34
    winner_distance = distance_kelly
    loser_distance = distance_blake
    difference = winner_distance - loser_distance
    return difference

 Executed result: 6520
[EXP] 159: [success_rate]: True, [answer]: 34, [output]: def solution():
    pens = 4
    pen_cost = 1.5
    notebooks = 2
    notebook_cost = 4
    bond_paper = 20
    total_pens = pens * pen_cost
    total_notebooks = notebooks * notebook_cost
    total_spent = total_pens + total_notebooks + bond_paper
    result = round(total_spent, 2)
    return result

 Executed result: 34.0
[EXP] 160: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    tadpoles_initial = 11
    tadpoles_appeared = 6
    tadpoles_disappeared = 2
    tadpoles_left = tadpoles_initial + tadpoles_appeared - tadpoles_disappeared
    result = tadpoles_left
    return result

 Executed result: 15
[EXP] 161: [success_rate]: True, [answer]: 16, [output]: def solution():
    monday_depth = 17
    tuesday_depth = monday_depth + 7
    wednesday_depth = 2*tuesday_depth/3
    result = wednesday_depth
    return result

 Executed result: 16.0
[EXP] 162: [success_rate]: False, [answer]: 32, [output]: def solution():

 Executed result: None
[EXP] 163: [success_rate]: False, [answer]: 92, [output]: 
def solution():
    original_price = 20
    increase_percentage = 20
    months = 36
    price = original_price
    for _ in range(months // 2):
        price *= (1 + increase_percentage / 100)
    result = price
    return result

 Executed result: 532.4666656177045
[EXP] 164: [success_rate]: False, [answer]: 50, [output]: def solution():
    torry_value = 0  # total value of toys
    toy_value = 0
    for i in range(5):
        torry_value += 4
    for i in range(3):
        toy_value += 5 # total value of an action figure
    toy_value += toy_value  # total value of dolls
    return torry_value

 Executed result: 20
[EXP] 165: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    hoursLost = 3
    hourlyRate = 35
    accountantCost = 90
    moneyLost = hoursLost * hourlyRate
    moneyGained = moneyLost - accountantCost
    result = moneyGained
    return result

 Executed result: 15
[EXP] 166: [success_rate]: True, [answer]: 77, [output]: 
def solution():
    budget = 1500
    computer = 1090
    scanner = 157
    burner = 74
    printer = 102
    total_cost = computer + scanner + burner + printer
    money_spent = total_cost
    money_left = budget - money_spent
    result = money_left
    return result

 Executed result: 77
[EXP] 167: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    eggs_per_babysit = 9
    eggs_per_flan = 3
    flans = 15
    eggs_needed = eggs_per_flan * flans
    babysits = eggs_needed // eggs_per_babysit
    return babysits

 Executed result: 5
[EXP] 168: [success_rate]: False, [answer]: 16, [output]: def solution():
    b = Brooke_age = 0
    s = Seth_age = 0
    for b in range(0, 28, 1):
        for s in range(0, 28, 1):
            if b + 2 + s + 2 == 28:
                return s

 Executed result: 24
[EXP] 169: [success_rate]: True, [answer]: 18, [output]: def solution():
    ethel_money = 8
    jimmies_money = 2 + ethel_money * 2
    result = jimmies_money
    return result

 Executed result: 18
[EXP] 170: [success_rate]: True, [answer]: 120, [output]: def solution():
    walk_per_weekday = 20
    walk_per_weekend = 10
    total_weekdays = 5
    total_weekend = 2
    total_miles_per_week = (total_weekdays * walk_per_weekday) + (total_weekend * walk_per_weekend)
    result = total_miles_per_week
    return result

 Executed result: 120
[EXP] 171: [success_rate]: True, [answer]: 150, [output]: def solution():
    hat_cost = 25
    jacket_cost = 3 * hat_cost
    pants_cost = (hat_cost + jacket_cost) / 2
    total_cost = hat_cost + jacket_cost + pants_cost
    return total_cost

 Executed result: 150.0
[EXP] 172: [success_rate]: True, [answer]: 1210, [output]: 
def solution():
    spiders = 80
    insects = 90
    mutant = 3
    spider_legs = spiders * 8
    insect_legs = insects * 6
    mutant_legs = mutant * 10
    total_legs = spider_legs + insect_legs + mutant_legs
    return total_legs

 Executed result: 1210
[EXP] 173: [success_rate]: False, [answer]: 51, [output]: 
def solution():
    sally_four = 8
    granny_red = sally_four * 2
    sally_two = granny_red - 3
    
    return sally_four + sally_two + granny_red

 Executed result: 37
[EXP] 174: [success_rate]: True, [answer]: 18000, [output]: 
def solution():
    student_loans = 300
    credit_card = 200
    mortgage = 500
    monthly_total = student_loans + credit_card + mortgage
    increased_amount = monthly_total * 1.5
    yearly_total = increased_amount * 12
    return yearly_total

 Executed result: 18000.0
[EXP] 175: [success_rate]: True, [answer]: 95, [output]: 
def solution():
    potatoes = 60
    peel_time = 1.5
    cut_time = 0.083
    total_time = (potatoes * peel_time) + (potatoes * cut_time)
    return total_time

 Executed result: 94.98
[EXP] 176: [success_rate]: False, [answer]: 15, [output]: 
def solution():
    lemons_cost = 3
    sugar_cost = 2
    glass_price = 0.5
    num_glasses_per_gallon = 20
    total_profit = 25
    total_cups_sold = 20
    total_revenue = total_cups_sold * glass_price
    total_cost = total_cups_sold * lemons_cost + total_cups_sold * sugar_cost
    total_spend = total_revenue - total_profit
    return total_spend - total_cost + lemons_cost

 Executed result: -112.0
[EXP] 177: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    total_Asians = 240
    Japanese_Asians = 80
    Chinese_Asians = total_Asians - Japanese_Asians
    Chinese_boys = 60
    Chinese_girls = Chinese_Asians - Chinese_boys
    return Chinese_girls

 Executed result: 100
[EXP] 178: [success_rate]: False, [answer]: 350, [output]: def solution():
    salary = 6000
    rent = 6000 // 4
    fuel = 6000 // 3
    remaining = salary - rent - fuel
    donation = remaining // 2
    actual_donation = donation - 200 - 700
    result = salary - rent - fuel - remaining - donation
    return result

 Executed result: -1250
[EXP] 179: [success_rate]: True, [answer]: 122, [output]: 
def solution():
    bo_crabs = 40
    monic_crabs = bo_crabs - 4
    rani_crabs = monic_crabs + 10
    total_crabs = bo_crabs + monic_crabs + rani_crabs
    result = total_crabs
    return result

 Executed result: 122
[EXP] 180: [success_rate]: True, [answer]: 130, [output]: def solution():
    hour_wage = 10
    hours_first_week = 5
    hours_second_week = 8
    money_first_week = hour_wage * hours_first_week
    money_second_week = hour_wage * hours_second_week
    money_total = money_first_week + money_second_week
    result = money_total
    return result

 Executed result: 130
[EXP] 181: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    winner_votes = 80 * 3 // 4
    loser_votes = 80 - winner_votes
    return loser_votes

 Executed result: 20
[EXP] 182: [success_rate]: False, [answer]: 160, [output]: 
def solution():
    white_carnations = x
    red_roses = 4 * white_carnations
    return red_roses

 Executed result: None
[EXP] 183: [success_rate]: False, [answer]: 23, [output]: 
def solution():
    jan_age = 30
    mark_age = jan_age
    mark_age_2years_ago = mark_age - 2
    jan_age_2years_ago = jan_age - 2
    mark_half_jan_age = jan_age_2years_ago / 2
    mark_age_2years_ago_compare = mark_half_jan_age + 5
    if mark_age_2years_ago == mark_age_2years_ago_compare:
        jean_age = mark_age + 2
        return jean_age
    else:
        return None

 Executed result: None
[EXP] 184: [success_rate]: False, [answer]: 2, [output]: def solution():
    team1_time = 55  # time for each member of the first team
    team2_times = [60]  # time for each member of the second team
    team2_times.extend([t - 3 for t in team2_times[:-1]])  # add times for subsequent members
    team1_total = team1_time * 4
    team2_total = sum(team2_times)
    return team1_total - team2_total

 Executed result: 160
[EXP] 185: [success_rate]: False, [answer]: 25, [output]: 
import numpy as np

def solution():
    rolling_a_number_greater_than_3 = 1/2
    rolling_two_even_numbers_in_a_row = 1/4
    difference = rolling_a_number_greater_than_3 - rolling_two_even_numbers_in_a_row
    percent = (difference / rolling_a_number_greater_than_3) * 100
    return percent

 Executed result: 50.0
[EXP] 186: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    mom_apples = 20
    jenna_apples = mom_apples / 2
    total_apples = mom_apples + jenna_apples
    return total_apples

 Executed result: 30.0
[EXP] 187: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    hamsters = 10
    rabbits = 20
    total_straw_distribution = 160
    total_straw_to_rats = total_straw_distribution - rabbits - (hamsters * 5)
    rats_per_cage = total_straw_to_rats // (3 * 6)
    return rats_per_cage

 Executed result: 5
[EXP] 188: [success_rate]: False, [answer]: 106, [output]: def solution():
    money_initial = 100
    rate = 2/100
    months = 3
    interest = money_initial * (rate/100) * months
    payment = money_initial + interest
    return int(payment)

 Executed result: 100
[EXP] 189: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    profit = 400
    cost_per_bag = 20
    transport_cost_per_bag = 2
    selling_price_per_bag = 30
    revenue_per_bag = selling_price_per_bag - cost_per_bag - transport_cost_per_bag
    revenue = profit - revenue_per_bag
    bags_sold = revenue / revenue_per_bag
    result = round(bags_sold)
    return result

 Executed result: 49
[EXP] 190: [success_rate]: False, [answer]: 34, [output]: 
def solution():
    total_tickets = 3
    cost_tickets = 20.25
    cost_food = cost_tickets - 4.50
    total_cost_tickets_food = total_tickets * cost_tickets + cost_food
    total_cost_rides = 2 * 33
    total_cost = total_cost_tickets_food + total_cost_rides
    friends = 3
    each_friend_paid = total_cost / friends
    return each_friend_paid

 Executed result: 47.5
[EXP] 191: [success_rate]: True, [answer]: 360, [output]: 
def solution():
    hours = 3
    peaches_per_minute = 2
    total_minutes = hours * 60
    total_peaches = total_minutes * peaches_per_minute
    return total_peaches

 Executed result: 360
[EXP] 192: [success_rate]: False, [answer]: 5, [output]: def solution():
    pounds_per_week = 3.5
    days_in_week = 7
    pounds_per_duck_per_week = pounds_per_week / days_in_week
    pounds_per_duck_per_day = pounds_per_duck_per_week / 10
    result = pounds_per_duck_per_day
    return result

 Executed result: 0.05
[EXP] 193: [success_rate]: True, [answer]: 91, [output]: def solution():
    trees_initial = 50
    trees_planted = 10
    trees_cut = 2
    years = 10
    for i in range(years):
        trees_initial += trees_planted - trees_cut
    trees_left = trees_initial * 0.7
    result = int(trees_left)
    return result

 Executed result: 91
[EXP] 194: [success_rate]: False, [answer]: 24, [output]: 
def solution():
    pink_flamingos = 18
    flamingos_removed = pink_flamingos // 3
    white_flamingos = flamingos_removed
    new_pink_flamingos = 18
    total_pink_flamingos = pink_flamingos + new_pink_flamingos
    total_white_flamingos = flamingos_removed
    pink_minus_white = total_pink_flamingos - total_white_flamingos
    result = pink_minus_white
    return result

 Executed result: 30
[EXP] 195: [success_rate]: True, [answer]: 10, [output]: def solution():
    money_initial = 20
    crayons_required = 5
    crayon_cost = 2
    money_spent = crayons_required * crayon_cost
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 10
[EXP] 196: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    pen_cost = 0.30 + 1.20
    cost_of_1_pen = 0
    cost_of_8_pens = 0
    cost_of_8_pens = cost_of_1_pen + (cost_of_1_pen * 8)
    return cost_of_8_pens * pen_cost

 Executed result: 0.0
[EXP] 197: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    carrots_initial = 200
    restaurants = 40
    carrots_per_restaurant = 2
    total_carrots_needed = carrots_per_restaurant * restaurants
    carrots_left = carrots_initial - total_carrots_needed
    return carrots_left

 Executed result: 120
[EXP] 198: [success_rate]: True, [answer]: 6277, [output]: 
def solution():
    total_inhabitants = 23786
    men = 8417
    women = 9092
    total_adults = men + women
    kids = total_inhabitants - total_adults
    return kids

 Executed result: 6277
[EXP] 199: [success_rate]: True, [answer]: 320, [output]: def solution():
    initial_cards = 20
    cards_month_1 = initial_cards * 3
    cards_month_2 = cards_month_1 - 20
    cards_month_3 = cards_month_1 + cards_month_2
    cards_month_1_and_2 = cards_month_1 + cards_month_2
    cards_month_3_total = cards_month_1_and_2 * 2
    total_cards = initial_cards + cards_month_1 + cards_month_2 + cards_month_3_total
    return total_cards

 Executed result: 320
[EXP] 200: [success_rate]: False, [answer]: 7500, [output]: 
def solution():
    total_sentences = 1000
    rate_A = 5
    rate_B = 2 * rate_A
    rate_A_in_cents = rate_A * 100
    rate_B_in_cents = rate_B * 100
    amount_A = total_sentences * rate_A_in_cents
    amount_B = total_sentences * rate_B_in_cents
    total_amount = amount_A + amount_B
    result = total_amount
    return result

 Executed result: 1500000
[EXP] 201: [success_rate]: True, [answer]: 55, [output]: 
def solution():
    water_mrning = 5
    water_afternoon = 6
    amount_per_pail = 5
    total_water = water_mrning * amount_per_pail + water_afternoon * amount_per_pail
    result = total_water
    return result

 Executed result: 55
[EXP] 202: [success_rate]: False, [answer]: 114,200, [output]: python
def solution():
    weekly_salary = 2000
    award = 5000
    raise_percentage = 0.05
    weekly_raise = weekly_salary * raise_percentage
    annual_salary = weekly_salary * 52
    new_annual_salary = annual_salary + (award + weekly_salary * 52)
    return new_annual_salary

 Executed result: 213000
[EXP] 203: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    total_acres = 10
    tons_per_acre = 5
    barrels_per_ton = 2
    
    total_gal = total_acres * tons_per_acre
    total_barrels = total_gal * barrels_per_ton
    
    return total_barrels

 Executed result: 100
[EXP] 204: [success_rate]: True, [answer]: 31, [output]: 
def solution():
    slices_per_sandwich = 2
    sandwiches = 7
    slices_per_omelet = slices_per_sandwich + 1
    breakfast_days = 3
    omelets = breakfast_days
    slices_for_macaroni = 8

    slices_used_in_sandwiches = slices_per_sandwich * sandwiches
    slices_used_in_omelets = slices_per_omelet * omelets
    total_squares = slices_used_in_sandwiches + slices_used_in_omelets + slices_for_macaroni

    return total_squares

 Executed result: 31
[EXP] 205: [success_rate]: True, [answer]: 98, [output]: 
def solution():
    green_pens = 22
    yellow_pens = 10
    blue_pens_per_bag = 9
    red_pens_per_bag = 6
    blue_pens = 6
    red_pens = 2
    total_blue_pens = blue_pens * blue_pens_per_bag
    total_red_pens = red_pens * red_pens_per_bag
    total_pens = green_pens + yellow_pens + total_blue_pens + total_red_pens
    return total_pens

 Executed result: 98
[EXP] 206: [success_rate]: False, [answer]: 98, [output]: def solution():
    scores = [89, 71, 92, 100, 86]
    total_scores = sum(scores)
    average = 93
    total_score6 = total_scores + average * 6 - len(scores) * average
    score6 = total_score6 - total_scores
    return score6

 Executed result: 93
[EXP] 207: [success_rate]: True, [answer]: 860, [output]: def solution():
    bike_distance_per_week_week1_week4 = 5 * 4 * 25
    bike_distance_per_week_week5_week7 = 2 * 3 * 60
    total_distance = bike_distance_per_week_week1_week4 + bike_distance_per_week_week5_week7
    result = total_distance
    return result

 Executed result: 860
[EXP] 208: [success_rate]: True, [answer]: 2600, [output]: python
def solution():
    chocolate_bars = 25
    apples = 80
    bar_weight = 40
    apple_weight = bar_weight / 2
    total_weight_chocolate = bar_weight * chocolate_bars
    total_weight_apples = apple_weight * apples
    total_weight = total_weight_chocolate + total_weight_apples
    return total_weight

 Executed result: 2600.0
[EXP] 209: [success_rate]: True, [answer]: 76, [output]: 
def solution():
    cakes_monday = 4
    cakes_tuesday = cakes_monday * 3
    cakes_wednesday = cakes_tuesday * 5
    total_cakes = cakes_monday + cakes_tuesday + cakes_wednesday
    return total_cakes

 Executed result: 76
[EXP] 210: [success_rate]: False, [answer]: 145, [output]: 
def solution():
    plates = 6
    plates_price = 6000
    total_plates_cost = plates * plates_price
    twenty_dozen_cups_cost = total_plates_cost - 1200
    twenty = 24
    cupcakes_cost = twenty_dozen_cups_cost / twenty
    return cupcakes_cost

 Executed result: 1450.0
[EXP] 211: [success_rate]: False, [answer]: 10, [output]: def solution():
    money_sara_has = 10
    money_sara_wants = 30 + (20 * 2)
    money_sara_earned_from_babysitting = 5 * 4
    money_sara_mows_lawn = 4
    
    while True:
        if money_sara_has + money_sara_mows_lawn >= money_sara_wants:
            return money_sara_mows_lawn

 Executed result: None
[EXP] 212: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    red_eggs = 3
    white_eggs = 5
    total_eggs = 42
    diff = white_eggs - red_eggs
    red_chickens = (total_eggs - diff * 5) // 3
    return red_chickens

 Executed result: 10
[EXP] 213: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    park_edge_distance = 1.5 * 6
    walking_speed = 3
    total_hours = park_edge_distance / walking_speed
    result = total_hours
    return result

 Executed result: 3.0
[EXP] 214: [success_rate]: True, [answer]: 250, [output]: def solution():
    customers_day1 = 100
    customers_day2 = customers_day1 + 50
    customers_day3 = 500
    customers_today = customers_day3 - customers_day1 - customers_day2
    return customers_today

 Executed result: 250
[EXP] 215: [success_rate]: False, [answer]: 8, [output]: def solution():
    big_pool_initial = 0
    small_pool_initial = 0
    leak_rate = 4
    time_elapsed = 4
    small_initial_leak_volume = big_pool_initial - small_pool_initial
    small_pool_volume_after_leak = small_pool_initial - leak_rate * time_elapsed
    big_pool_volume_after_leak = big_pool_initial - leak_rate * time_elapsed
    statement = "The small pool volume after leak: " + str(small_pool_volume_after_leak)
    return statement

 Executed result: The small pool volume after leak: -16
[EXP] 216: [success_rate]: True, [answer]: 44, [output]: 
def solution():
    shoe_cost = 320
    belt_cost = 32
    total_cost = shoe_cost + belt_cost
    hourly_wage = 8
    total_hours = total_cost / hourly_wage
    return total_hours

 Executed result: 44.0
[EXP] 217: [success_rate]: False, [answer]: 220, [output]: 
def solution():
    loan_amount = 2000
    interest_percentage = 0.1
    monthly_payment = 165
    months = 12
    months_paid = 0
    balance = loan_amount
    while months_paid < months:
        balance -= monthly_payment
        months_paid += 1
        balance *= (1 + interest_percentage / 12)
    return balance

 Executed result: 118.8297434170946
[EXP] 218: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    roses = 4
    dahlias = roses + 7
    total_flowers = roses + dahlias
    return total_flowers

 Executed result: 15
[EXP] 219: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    harriet_age = 21
    zack_age = 2 * harriet_age
    adrian_age = 3 * harriet_age
    harriet_age_three_years_later = harriet_age + 3
    zack_age_three_years_later = zack_age + 3
    adrian_age_three_years_later = adrian_age + 3
    average_age_three_years_later = (harriet_age_three_years_later + zack_age_three_years_later + adrian_age_three_years_later) / 3
    return average_age_three_years_later

 Executed result: 45.0
[EXP] 220: [success_rate]: True, [answer]: 54, [output]: def solution():
    total_points = 251
    naomi_points = 68
    yuri_points = (naomi_points / 2) + 10
    brianna_points = naomi_points + 17
    jojo_points = total_points - naomi_points - yuri_points - brianna_points
    return jojo_points

 Executed result: 54.0
[EXP] 221: [success_rate]: True, [answer]: 70, [output]: def solution():
    crossword_time = 10
    sudoku_time = 5
    crossword_puzzles = 3
    sudoku_puzzles = 8
    time_spent_crossword = crossword_puzzles * crossword_time
    time_spent_sudoku = sudoku_puzzles * sudoku_time
    total_time = time_spent_crossword + time_spent_sudoku
    result = total_time
    return result

 Executed result: 70
[EXP] 222: [success_rate]: True, [answer]: 90, [output]: def solution():
    water_initial = 120
    water_used = 90
    water_left = water_initial - water_used
    rainwater_collected = water_left * 2
    total_water = water_left + rainwater_collected
    result = total_water
    return result

 Executed result: 90
[EXP] 223: [success_rate]: True, [answer]: 140, [output]: 
def solution():
    geraniums = 90
    petunias = geraniums - 40
    total_flowers = geraniums + petunias
    return total_flowers

 Executed result: 140
[EXP] 224: [success_rate]: True, [answer]: 20000, [output]: 
def solution():
    advertising_cost_year1 = 15000
    advertising_cost_year2 = advertising_cost_year1 // 3
    total_advertising_cost = advertising_cost_year1 + advertising_cost_year2
    return total_advertising_cost

 Executed result: 20000
[EXP] 225: [success_rate]: True, [answer]: 180, [output]: 
def solution():
    canoe_cost = 30
    raft_cost = 18
    canoe_hours = 3
    raft_hours = 5
    canoe_rental = canoe_cost * canoe_hours
    raft_rental = raft_cost * raft_hours
    total_rental = canoe_rental + raft_rental
    result = total_rental
    return result

 Executed result: 180
[EXP] 226: [success_rate]: False, [answer]: 9, [output]: 
def solution():
    days_by_bus = 6
    days_by_car = days_by_bus // 2
    days_total = days_by_bus + days_by_car * 2
    return days_total

 Executed result: 12
[EXP] 227: [success_rate]: False, [answer]: 33, [output]: 
def solution():
    fire = 30
    grass = 20
    water = 40
    water_loss = 8
    grass_add = 14

    water = water - water_loss
    total = fire + grass + water
    water_percentage = (water / total) * 100

    water_percentage = round(water_percentage)
    return water_percentage

 Executed result: 39
[EXP] 228: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    base_cost = 6.50
    meat_cost = 2.00
    cheese_cost = 1.00
    avocado_cost = 1.00
    sauce_cost = 0.25
    upgrade_cost = 3.00
    gift_card = 5.00
    total_cost = base_cost + meat_cost + cheese_cost + avocado_cost + 2 * sauce_cost + upgrade_cost
    cost_after_gift_card = total_cost - gift_card
    result = cost_after_gift_card
    return result

 Executed result: 9.0
[EXP] 229: [success_rate]: True, [answer]: 1, [output]: def solution():
    puzzle_pieces = 360
    kalinda_speed = 4
    mom_speed = kalinda_speed / 2
    total_speed = kalinda_speed + mom_speed
    time_taken = puzzle_pieces / total_speed
    hours_taken = time_taken / 60
    return int(hours_taken)

 Executed result: 1
[EXP] 230: [success_rate]: True, [answer]: 21, [output]: def solution():
    watermelons_initial = 120
    ready_after_2months = 0.3 * watermelons_initial
    left_after_2months = watermelons_initial - ready_after_2months
    ready_after_2weeks = 3/4 * left_after_2months
    left_after_2weeks = left_after_2months - ready_after_2weeks
    result = left_after_2weeks
    return result

 Executed result: 21.0
[EXP] 231: [success_rate]: False, [answer]: 276,000, [output]: 
def solution():
    cars = 12
    car_price = 20000
    tax_rate = 0.10
    registration_cost = 1000

    total_price = cars * car_price
    total_tax = total_price * tax_rate
    total_cost = total_price + total_tax
    final_cost = total_cost + (registration_cost * cars)
    result = final_cost
    return result

 Executed result: 276000.0
[EXP] 232: [success_rate]: True, [answer]: 50, [output]: def solution():
    shells_robert = 20
    shells_kylie_monday = shells_robert + 5
    shells_kylie_tuesday = shells_kylie_monday * 2
    result = shells_kylie_tuesday
    return result

 Executed result: 50
[EXP] 233: [success_rate]: True, [answer]: 75, [output]: 
def solution():
    ants = 50
    bugs = ants / 2
    total_insects = ants + bugs
    result = total_insects
    return result

 Executed result: 75.0
[EXP] 234: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    penguins_initial = 36
    penguins_jump = penguins_initial // 3
    penguins_eat = penguins_initial // 3
    penguins_left = penguins_initial - penguins_jump - penguins_eat
    return penguins_left

 Executed result: 12
[EXP] 235: [success_rate]: False, [answer]: 21, [output]: 
def solution():
    tomatoes_eaten_by_steve = 6
    tomatoes_eaten_by_girlfriend = tomatoes_eaten_by_steve / 2
    total_cherry_tomatoes_per_week = tomatoes_eaten_by_steve + tomatoes_eaten_by_girlfriend
    cherry_tomatoes_per_day = 7 * 3
    total_vines_needed = math.ceil(total_cherry_tomatoes_per_week / cherry_tomatoes_per_day)
    return total_vines_needed

 Executed result: None
[EXP] 236: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    pizzas_needed = (20 * 4) // 8
    return pizzas_needed

 Executed result: 10
[EXP] 237: [success_rate]: True, [answer]: 31, [output]: 
def solution():
    pens_initial = 25
    new_pen = 5
    total_pens = pens_initial + (pens_initial // new_pen)
    return total_pens

 Executed result: 30
[EXP] 238: [success_rate]: True, [answer]: 90, [output]: def solution():
    allowance = 20
    bonus = 10
    total = allowance + bonus
    total_after_year = total * 3
    result = total_after_year
    return result

 Executed result: 90
[EXP] 239: [success_rate]: True, [answer]: 68, [output]: 
def solution():
    jessa_age = 20
    joan_age = jessa_age + 5
    mary_age = joan_age - 2
    total_age = jessa_age + joan_age + mary_age
    return total_age

 Executed result: 68
[EXP] 240: [success_rate]: True, [answer]: 280, [output]: 
def solution():
    students = 1000
    students_out_a = int(0.30 * students)
    students_left = students - students_out_a
    students_out_b = int(0.6 * students_left)
    students_out_c = students_left - students_out_b
    return students_out_c

 Executed result: 280
[EXP] 241: [success_rate]: False, [answer]: 21, [output]: 
def solution():
    robert_candies = 54 // 2
    james_candies = robert_candies
    james_candies += 6
    difference = john_candies - james_candies
    return difference

 Executed result: None
[EXP] 242: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    dolly_books = 3
    pandora_books = 3
    total_books_read = dolly_books + pandora_books
    return total_books_read

 Executed result: 6
[EXP] 243: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    letters_sent_per_week = 5 * 2
    letters_receieved_per_week = letters_sent_per_week * 2
    total_letters = letters_sent_per_week + letters_receieved_per_week
    pages_per_letter = 5
    pages_written_per_week = total_letters * pages_per_letter
    writing_minutes_per_page = 6
    minutes_written_per_week = pages_written_per_week * writing_minutes_per_page
    hours_written_per_week = minutes_written_per_week / 60
    return hours_written_per_week 

 Executed result: 15.0
[EXP] 244: [success_rate]: True, [answer]: 250, [output]: 
def solution():
    phone_plan = 1000
    boss_calls = 15
    extra_minutes = 300
    days = 30
    total_minutes = boss_calls * days + extra_minutes
    minutes_spent = total_minutes
    minutes_left = phone_plan - minutes_spent
    return minutes_left

 Executed result: 250
[EXP] 245: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    fries_griffin_initial = 24
    fries_griffin_taken_by_kyle = 5
    fries_griffin_lost_to_kyle = fries_griffin_taken_by_kyle * 2
    fries_griffin_lost_to_colby = fries_griffin_taken_by_kyle - 3
    fries_griffin_left = 27
    fries_ginger_given = fries_griffin_left - (fries_griffin_initial - (fries_griffin_taken_by_kyle + fries_griffin_lost_to_kyle + fries_griffin_lost_to_colby))
    result = fries_ginger_given
    return result

 Executed result: 20
[EXP] 246: [success_rate]: False, [answer]: 7, [output]: def solution():
    aquarium1_snails = 4
    aquarium2_snails = 32
    aquarium1_snails_minus_aquarium2_snails = aquarium1_snails - aquarium2_snails
    fish_in_both_aquariums = aquarium1_snails_minus_aquarium2_snails // 2
    fish_per_aquarium = fish_in_both_aquariums
    return fish_per_aquarium

 Executed result: -14
[EXP] 247: [success_rate]: True, [answer]: 27000, [output]: 
def solution():
    hourly_rate = 250
    hours_per_day = 6
    days_per_week = 4
    weeks = 5
    total_hours = hours_per_day * days_per_week * weeks
    money_initial = total_hours * hourly_rate
    discount = (money_initial * 10) / 100
    money_after_discount = money_initial - discount
    result = money_after_discount
    return result

 Executed result: 27000.0
[EXP] 248: [success_rate]: True, [answer]: 32, [output]: def solution():
    total_cost = 12 + 43 + 15 + 4 + 22
    split_people = 3
    cost_per_person = total_cost / split_people
    result = cost_per_person
    return result

 Executed result: 32.0
[EXP] 249: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    bag_of_onions = 4
    pounds_per_bag = 50
    cost_per_pound = 1.50
    pounds_of_onions = bag_of_onions * pounds_per_bag
    cost = pounds_of_onions * cost_per_pound
    return cost

 Executed result: 300.0
[EXP] 250: [success_rate]: False, [answer]: 5,600, [output]: def solution():
    sister_monday = 5
    sister_tuesday = 13
    sue_monday = sister_monday * 4
    sue_tuesday = sister_tuesday * 2
    sue_calories = (sue_monday + sue_tuesday) * 200
    sister_calories = sister_monday * 200 + sister_tuesday * 200
    sue_excess_calories = sue_calories - sister_calories
    return sue_excess_calories

 Executed result: 5600
[EXP] 251: [success_rate]: True, [answer]: 17, [output]: def solution():
    boys_per_class = 10
    total_students = 20 * 3
    total_boys = (total_students / 2) * 3
    class1_girls = 15
    class2_girls = 12
    class1_girls_diff = class1_girls + class2_girls
    class3_girls = total_students - class1_girls_diff - class1_girls - class2_girls
    class3_boys = 10 + class3_girls
    return class3_boys

 Executed result: 16
[EXP] 252: [success_rate]: True, [answer]: 70, [output]: def solution():
    apps_initial = 61
    apps_deleted = 9
    apps_downloaded = 18
    apps_removed = apps_initial - apps_deleted
    apps_now = apps_removed + apps_downloaded
    result = apps_now
    return result

 Executed result: 70
[EXP] 253: [success_rate]: False, [answer]: 73, [output]: def solution():
    wolves_prev = 10
    cougars_prev = 15
    wolves_today = wolves_prev + 3 * cougars_prev
    cougars_today = cougars_prev - 3
    total = wolves_prev + cougars_prev + wolves_today + cougars_today
    result = total
    return result

 Executed result: 92
[EXP] 254: [success_rate]: True, [answer]: 18, [output]: 
def solution():
    start_floor = 3
    end_floor = 4 * start_floor + 6
    return end_floor

 Executed result: 18
[EXP] 255: [success_rate]: True, [answer]: 84, [output]: def solution():
    mitchel = 30
    anne_times = mitchel - mitchel * 0.3
    robert_times = anne_times * 4
    result = robert_times
    return result

 Executed result: 84.0
[EXP] 256: [success_rate]: True, [answer]: 192, [output]: def solution():
    cows_in_total = 20 * 10
    new_cows_brought = 40
    cows_per_stall = new_cows_brought
    cows_in_total += new_cows_brought
    cows_per_stall = int(cows_in_total / 10)
    cows_in_8_stalls = cows_per_stall * 8
    return cows_in_8_stalls

 Executed result: 192
[EXP] 257: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    pennies = 100
    nickels = 40
    dimes = 20
    dollar_bills = 40
    pennies_to_dollars = pennies / 100
    nickels_to_dollars = nickels * 0.05
    dimes_to_dollars = dimes * 0.1
    dollar_bills_to_dollars = dollar_bills
    total = pennies_to_dollars + nickels_to_dollars + dimes_to_dollars + dollar_bills_to_dollars
    return total

 Executed result: 45.0
[EXP] 258: [success_rate]: False, [answer]: 5600, [output]: 
def solution():
    wood_weight = 400
    distance = 200
    termite_wood = 0.3
    total_wood = distance * wood_weight
    wood_eaten = total_wood * termite_wood
    actual_wood = total_wood - wood_eaten
    return actual_wood

 Executed result: 56000.0
[EXP] 259: [success_rate]: True, [answer]: 6, [output]: def solution():
    overdue_fee = 2
    overdue_amount = 0.50
    overdue_books = 8
    total_overdue = overdue_amount * overdue_books
    total_paid = total_overdue + overdue_fee
    result = total_paid
    return result

 Executed result: 6.0
[EXP] 260: [success_rate]: False, [answer]: 168, [output]: Python
def solution():
    jamal_apples = 52 - 8
    jamal_bananas = jamal_apples + 4
    andrea_apples = 52
    andrea_bananas = jamal_bananas // 2
    return andrea_apples + andrea_bananas

 Executed result: None
[EXP] 261: [success_rate]: False, [answer]: 11, [output]: 
def solution():
    cups_per_dozen_cookies = 2
    cookies_today = 36
    cookies_tomorrow = 30
    
    total_cookies = cookies_today + cookies_tomorrow
    total_cups = total_cookies // 12 * cups_per_dozen_cookies + max(cups_per_dozen_cookies, (total_cookies % 12) // 1)
    
    return total_cups

 Executed result: 16
[EXP] 262: [success_rate]: True, [answer]: 62, [output]: def solution():
    pennies = 9300
    two_thirds_pennies = pennies * 2 // 3
    dollar_amount = two_thirds_pennies // 100
    cents = two_thirds_pennies % 100
    total_dollar_amount = dollar_amount + cents / 100
    return total_dollar_amount

 Executed result: 62.0
[EXP] 263: [success_rate]: True, [answer]: 270, [output]: def solution():
    boxes = 5
    marbles_per_box = 50
    total_marbles = boxes * marbles_per_box
    marbles_received = 20
    total_marbles += marbles_received
    result = total_marbles
    return result

 Executed result: 270
[EXP] 264: [success_rate]: True, [answer]: 8, [output]: def solution():
    chris_trees = 6
    ferdinand_trees = chris_trees // 2
    harry_trees = 2 * ferdinand_trees + 5
    result = harry_trees - ferdinand_trees
    return result

 Executed result: 8
[EXP] 265: [success_rate]: True, [answer]: 400, [output]: def solution():
    carmen = 100
    samantha = carmen + 25
    daisy = samantha + 50
    total = carmen + samantha + daisy
    return total

 Executed result: 400
[EXP] 266: [success_rate]: True, [answer]: 9500, [output]: def solution():
    budget = 400000
    selling_price = 350000
    brokerage_fee = selling_price * 0.05
    transfer_fee = selling_price * 0.12
    total_price = selling_price + brokerage_fee + transfer_fee
    diff = total_price - budget
    return diff

 Executed result: 9500.0
[EXP] 267: [success_rate]: False, [answer]: 118000, [output]: def solution():
    selling_price = 400000
    transfer_fee = 0.03 * selling_price
    brokerage_fee = 0.05 * selling_price
    total_responses = selling_price + transfer_fee + brokerage_fee
    remaining_amount = selling_price - total_responses
    remaining_loan = 250000
    net_proceeds = remaining_amount - remaining_loan
    return net_proceeds

 Executed result: -282000.0
[EXP] 268: [success_rate]: False, [answer]: 91, [output]: 
def solution():
    time_warming = 20
    time_desired = 400
    time_extra = (40/100) * time_warming
    time_cooking = time_warming + time_extra
    time_cooked = time_cooking + 5
    result = time_warming + time_cooked
    return result

 Executed result: 53.0
[EXP] 269: [success_rate]: True, [answer]: 1375, [output]: def solution():
    newspaper_ad_cost = 5
    newspaper_ads = 50
    television_ad_cost = 75
    television_ads = 15
    total_spent_on_newspapers = newspaper_ads * newspaper_ad_cost
    total_spent_on_television = television_ads * television_ad_cost
    total_spent = total_spent_on_newspapers + total_spent_on_television
    return total_spent

 Executed result: 1375
[EXP] 270: [success_rate]: True, [answer]: 4, [output]: def solution():
    total_balls = 16
    golf_balls = total_balls / 2
    blue_golf_balls = golf_balls / 2
    result = blue_golf_balls
    return result

 Executed result: 4.0
[EXP] 271: [success_rate]: True, [answer]: 762, [output]: 
def solution():
    bag1 = 300
    bag2 = bag1 + 12
    bag3 = bag1 // 2
    mms_total = bag1 + bag2 + bag3
    return mms_total

 Executed result: 762
[EXP] 272: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    house = 2
    bedrooms = 3
    bedrooms_per_window = 2
    other_windows_per_house = 4
    total_bedrooms = bedrooms * house
    total_bedrooms_windows = total_bedrooms * bedrooms_per_window
    total_windows = total_bedrooms_windows + (other_windows_per_house * house)
    result = total_windows
    return result

 Executed result: 20
[EXP] 273: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    total_cost = 4.20 + 9.45 + 1.35
    change = 20 - total_cost
    return change

 Executed result: 5.000000000000002
[EXP] 274: [success_rate]: True, [answer]: 315, [output]: 
def solution():
    total_stitches = 1800
    body_stitches = 900
    collar_stitches = 900 // 10
    rosette_stitches = 2 * collar_stitches
    total_without_sleeves = body_stitches + collar_stitches + rosette_stitches
    sleeve_stitches = (total_stitches - total_without_sleeves) // 2
    return sleeve_stitches

 Executed result: 315
[EXP] 275: [success_rate]: True, [answer]: 3200, [output]: def solution():
    tomato_seeds = 20
    tomato_cost = 40
    celery_seeds = 80
    celery_cost = 30
    total_cost = ((tomato_seeds * tomato_cost) + (celery_seeds * celery_cost))
    result = total_cost
    return result

 Executed result: 3200
[EXP] 276: [success_rate]: False, [answer]: 138, [output]: def solution():
    song_lines = 54
    scene1 = 2 * song_lines
    scene1_lines = int(scene1 * 1/3)
    scene2_lines = song_lines + 6
    scene2_lines_sean = int(scene2_lines * 4/5)
    lines_to_memo = scene1_lines + scene2_lines_sean
    result = lines_to_memo
    return result

 Executed result: 84
[EXP] 277: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    total_cards = 80
    cards_A = int(total_cards * 2 / 5)
    remaining_cards = total_cards - cards_A
    cards_B = int(remaining_cards / 2)
    remaining_cards = remaining_cards - cards_B
    cards_C = int(remaining_cards * 5 / 8)
    cards_D = total_cards - cards_A - cards_B - cards_C
    result = cards_D
    return result

 Executed result: 9
[EXP] 278: [success_rate]: False, [answer]: 4, [output]: def solution():
    small_holes = 30
    large_holes = 15
    small_hole_time = 3
    large_hole_time = 10
    total_small_hole_time = small_holes * small_hole_time
    total_large_hole_time = large_holes * large_hole_time
    total_time = total_small_hole_time + total_large_hole_time
    hours = total_time // 60
    minutes = total_time % 60
    return f"{hours} hours and {minutes} minutes"

 Executed result: 4 hours and 0 minutes
[EXP] 279: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    sum_of_ages = 20
    mico_age = (sum_of_ages + 10) / 2
    marco_age = sum_of_ages - mico_age
    new_mico_age = mico_age + 10
    new_marco_age = marco_age + 10
    result = new_mico_age + new_marco_age
    return result

 Executed result: 40.0
[EXP] 280: [success_rate]: False, [answer]: 6, [output]: def solution():
    ruby_age_logical1 = ruby_age_initial
    sam_age_logical1 = ruby_age_logical1 / 6
    ruby_age_in_9_years = ruby_age_logical1 + 9
    sam_age_in_9_years = ruby_age_in_9_years / 3
    sam_age_initial = sam_age_in_9_years - 9
    result = sam_age_initial
    return result

 Executed result: None
[EXP] 281: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    popsicles = 20
    popsicle_cost = 0.25
    ice_cream_bar = 4
    ice_cream_bar_cost = 0.50
    total = (popsicles * popsicle_cost) + (ice_cream_bar * ice_cream_bar_cost)
    return total

 Executed result: 7.0
[EXP] 282: [success_rate]: True, [answer]: 2450, [output]: def solution():
    cobras = 40
    mambas = 60
    spots_per_cobra = 70
    spots_per_mamba = spots_per_cobra / 2
    total_cobra_spots = cobras * spots_per_cobra
    total_mamba_spots = mambas * spots_per_mamba
    total_spots = total_cobra_spots + total_mamba_spots
    half_total_spots = total_spots / 2
    result = half_total_spots
    return result

 Executed result: 2450.0
[EXP] 283: [success_rate]: True, [answer]: 195, [output]: def solution():
    guests = 12 + 3 + 2 * 12
    pizzas = (guests + 2) // 3
    pizza_cost = pizzas * 15
    return pizza_cost

 Executed result: 195
[EXP] 284: [success_rate]: False, [answer]: 68, [output]: def solution():
    topaz_length = 8
    sterling_length = 0.25
    total_length = 25
    space_between_gems = total_length - topaz_length * 1
    silver_beads_per_inch = 4
    beads_used = space_between_gems / sterling_length * silver_beads_per_inch
    result = int(beads_used)
    return result

 Executed result: 272
[EXP] 285: [success_rate]: True, [answer]: 360, [output]: 
def solution():
    alani_stories = 20
    alani_stories_second_week = alani_stories * 2
    braylen_stories = 40
    braylen_stories_second_week = braylen_stories * 2
    margot_stories = 60
    margot_stories_second_week = margot_stories * 2
    stories_first_week = alani_stories + braylen_stories + margot_stories
    stories_second_week = alani_stories_second_week + braylen_stories_second_week + margot_stories_second_week
    total_stories = stories_first_week + stories_second_week
    return total_stories

 Executed result: 360
[EXP] 286: [success_rate]: True, [answer]: 21, [output]: 
def solution():
    ann_age = 9
    brother_age = ann_age * 2
    brother_age_after_3_years = brother_age + 3
    return brother_age_after_3_years

 Executed result: 21
[EXP] 287: [success_rate]: True, [answer]: 90, [output]: 
def solution():
    quarters = 5
    dimes = 2
    total_cents = quarters * 25 + dimes * 10
    cost = 55
    cents_left = total_cents - cost
    result = cents_left
    return result

 Executed result: 90
[EXP] 288: [success_rate]: False, [answer]: 8, [output]: 
def solution():
    total_stars = 76
    stars_per_row_8 = 8
    stars_per_row_6 = 6
    rows_8 = total_stars // stars_per_row_8
    total_stars -= rows_8 * stars_per_row_8
    rows_6 = total_stars // stars_per_row_6
    total_stars -= rows_6 * stars_per_row_6
    return total_stars // 5

 Executed result: 0
[EXP] 289: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    flagstone_weight = 75
    flagstones = 80
    truck_capacity = 2000
    flagstones_per_truck = truck_capacity // flagstone_weight
    trucks_needed = -(-flagstones // flagstones_per_truck)
    return trucks_needed

 Executed result: 4
[EXP] 290: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    fast_lane_speed = 60
    slow_lane_speed = fast_lane_speed / 2
    distance = 480
    time_fast_lane = distance / fast_lane_speed
    time_slow_lane = distance / slow_lane_speed
    return time_slow_lane

 Executed result: 16.0
[EXP] 291: [success_rate]: True, [answer]: 390, [output]: def solution():
    ali_medals = 22
    izzy_medals = ali_medals - 5
    total_medals = ali_medals + izzy_medals
    medals_given_out = total_medals * 10
    return medals_given_out

 Executed result: 390
[EXP] 292: [success_rate]: False, [answer]: 2, [output]: def solution():
    
    # Calculate the total number of chocolate bars
    total_chocolate_bars = 4 * 6 + 8 * (# Calculate how much is left over)
        
    # Calculate the number of remaining chocolate bars to be shared
    remaining_chocolate_bars = 8 * 5 - total_chocolate_bars
        
    # Calculate the number of chocolate bars each child will get
    chocolate_bars_for_child = remaining_chocolate_bars // 8
        
    return chocolate_bars_for_child

 Executed result: None
[EXP] 293: [success_rate]: False, [answer]: 75, [output]: 
def solution():
    minutes_worked = (11 * 60) - 8 * 60 - 30
    minutes_per_dollar = 10
    money_earned = minutes_worked // minutes_per_dollar
    return money_earned

 Executed result: 15
[EXP] 294: [success_rate]: True, [answer]: 83, [output]: 
def solution():
    mike = 21
    jim = mike - 3
    tony = mike * 2
    total = mike + jim + tony
    
    total += 1 if mike > 20 else 0
    total += 1 if jim > 20 else 0
    total += 1 if tony > 20 else 0
    
    return total

 Executed result: 83
[EXP] 295: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    oranges_initial = 15
    son1_age = 8
    son2_age = son1_age // 2
    oranges_washed = son1_age + son2_age
    oranges_left = oranges_initial - oranges_washed
    return oranges_left

 Executed result: 3
[EXP] 296: [success_rate]: True, [answer]: 370, [output]: 
def solution():
    first_day_pushups = 100
    first_day_squats = 50
    first_day_presses = 20

    second_day_pushups = first_day_pushups + 20
    second_day_squats = first_day_squats - 10
    second_day_presses = 2 * first_day_presses

    total_pushups = first_day_pushups + second_day_pushups
    total_squats = first_day_squats + second_day_squats
    total_presses = first_day_presses + second_day_presses

    result = total_pushups + total_squats + total_presses
    return result

 Executed result: 370
[EXP] 297: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    rice_total = 42
    rice_consumed_per_person_per_meal = 0.2
    meals_per_day = 2
    days_per_week = 7
    rice_consumed_per_person_per_week = rice_consumed_per_person_per_meal * meals_per_day * 7
    people_in_household = 5
    rice_left_per_week = rice_total / (rice_consumed_per_person_per_week * people_in_household)
    weeks_left = rice_left_per_week
    return weeks_left

 Executed result: 2.9999999999999996
[EXP] 298: [success_rate]: True, [answer]: 55, [output]: python
def solution():
    target = 120
    sold = 20 + 15 + 12 + 18
    difference = target - sold
    return difference

 Executed result: 55
[EXP] 299: [success_rate]: False, [answer]: 500, [output]: 
def solution():
    initial_bid = 200
    num_other_bidders = 3
    bid_increment = 50
    total_cost = initial_bid
    for _ in range(num_other_bidders):
        total_cost += bid_increment
    return total_cost

 Executed result: 350
[EXP] 300: [success_rate]: False, [answer]: 31800, [output]: def solution():
    miles_per_day = 30 * 2
    miles_per_week = miles_per_day * 5
    miles_per_month = miles_per_week * 4
    miles_per_year = miles_per_month * 12
    cost_per_mile = 2
    bonus_per_month = 150
    total_cost_per_month = miles_per_month * cost_per_mile
    total_bonus_per_month = total_cost_per_month + bonus_per_month
    total_cost_per_year = total_bonus_per_month * 12
    result = total_cost_per_year
    return result

 Executed result: 30600
[EXP] 301: [success_rate]: True, [answer]: 78, [output]: 
def solution():
    sunday_minutes = 23
    monday_minutes = 16
    total_minutes = sunday_minutes + monday_minutes
    tuesday_needed = total_minutes * 2
    return tuesday_needed

 Executed result: 78
[EXP] 302: [success_rate]: True, [answer]: 8, [output]: def solution():
    pages = 32
    pages_per_paper = 4
    papers_used = (pages + pages % 2) // pages_per_paper
    return papers_used

 Executed result: 8
[EXP] 303: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    money_initial = 50
    money_spent_on_food = money_initial / 2
    money_spent_on_rides = 10
    money_spent_total = money_spent_on_food + money_spent_on_rides
    money_left = money_initial - money_spent_total
    result = money_left
    return result

 Executed result: 15.0
[EXP] 304: [success_rate]: False, [answer]: 1300, [output]: 
def solution():
    books_sold = 250
    first_year_books = books_sold / 3 * 2
    current_year_books = 50 / (books_sold - first_year_books)
    first_year_earnings = first_year_books * 20
    second_year_earnings = current_year_books * 20
    return second_year_earnings

 Executed result: 12.0
[EXP] 305: [success_rate]: False, [answer]: 3200, [output]: def solution():
    hours_per_day = 10
    days_per_week = 5
    weeks_in_april = 4
    bonus = 300
    total_hours = hours_per_day * days_per_week * weeks_in_april
    regular_earnings = total_hours * 10
    total_earnings = regular_earnings + bonus
    return total_earnings

 Executed result: 2300
[EXP] 306: [success_rate]: True, [answer]: 4, [output]: def solution():
    people_arm_wrestled = 20
    people_beaten = int(people_arm_wrestled * 0.80)
    people_lost = people_arm_wrestled - people_beaten
    result = people_lost
    return result

 Executed result: 4
[EXP] 307: [success_rate]: True, [answer]: 10, [output]: def solution():
    bread_produced = 60
    morning_sold = 2/3 * bread_produced
    remaining_loaves = bread_produced - morning_sold
    afternoon_evening_sold = 1/2 * remaining_loaves
    return afternoon_evening_sold

 Executed result: 10.0
[EXP] 308: [success_rate]: False, [answer]: 16, [output]: def solution():
    weight_losing_per_week_joey = 8
    weeks_joey_loses = 4
    weight_losing_per_week_sandy = weight_losing_per_week_joey / weeks_joey_loses
    weeks_sandy_loses = 8 / weight_losing_per_week_sandy
    return weeks_sandy_loses

 Executed result: 4.0
[EXP] 309: [success_rate]: True, [answer]: 6, [output]: def solution():
    tub_cost = 13 - 11
    milk_discount = 0.5
    tub_save = 2 * tub_cost
    milk_save = 4 * milk_discount
    total_save = tub_save + milk_save
    return total_save

 Executed result: 6.0
[EXP] 310: [success_rate]: True, [answer]: 8, [output]: def solution():
    days = 15
    arms = (days // 3)
    legs = (days // 5)
    return arms + legs

 Executed result: 8
[EXP] 311: [success_rate]: True, [answer]: 2050, [output]: 
def solution():
    total_money = 6000
    business_suit_cost = 100
    business_suits = 6
    total_suit_cost = business_suits * business_suit_cost
    total_suitcases = 3
    suitcase_cost = 50
    total_suitcase_cost = total_suitcases * suitcase_cost
    flight_cost = business_suit_cost * 5 + 700
    total_spent = total_suit_cost + total_suitcase_cost + flight_cost
    money_saved = 2000
    total_remaining = total_money - total_spent - money_saved
    return total_remaining

 Executed result: 2050
[EXP] 312: [success_rate]: True, [answer]: 91, [output]: 
def solution():
    family_members = 5
    large_persons = 3
    eggs_per_large_person = 3
    eggs_per_small_person = 2
    days = 7
    eggs_consumed = (large_persons * eggs_per_large_person) * days
    eggs_consumed += ((family_members - large_persons) * eggs_per_small_person) * days
    result = eggs_consumed
    return result

 Executed result: 91
[EXP] 313: [success_rate]: False, [answer]: 32, [output]: def solution():
    quinn_age = 30
    jane_age = quinn_age - 3
    trent_age = quinn_age + 5
    result = trent_age
    return result

 Executed result: 35
[EXP] 314: [success_rate]: False, [answer]: 120000, [output]: def solution():
    cera_age = 46
    noah_age = cera_age / 2 - 6
    population_old = cera_age / 2
    population_chile/current_age = 3000 
    population_chile = population_chile_old * 3000 / current_age
    result = population_chile
    return result

 Executed result: None
[EXP] 315: [success_rate]: False, [answer]: 30, [output]: 
def solution():
    total_members = 105
    players_on_offense = players_on_defense * 2
    players_on_special_teams = players_on_defense // 2
    total_players = players_on_offense + players_on_defense + players_on_special_teams
    players_on_defense = (total_members - players_on_offense - players_on_special_teams)
    result = players_on_defense
    return result

 Executed result: None
[EXP] 316: [success_rate]: False, [answer]: 14, [output]: def solution():
    people_invited = 2 * 6 + 3 * 4
    people_unable_attend = 8 + people_invited // 4
    people_attend = people_invited - people_unable_attend
    return people_attend

 Executed result: 10
[EXP] 317: [success_rate]: True, [answer]: 156, [output]: def solution():
    marbles_initial = 50
    marbles_bought = 20
    marbles_new = marbles_initial + marbles_bought
    marbles_father_gift = 2/5 * marbles_bought
    marbles_total = marbles_new + marbles_father_gift
    weight_per_marble = 2
    weight_total = marbles_total * weight_per_marble
    return weight_total

 Executed result: 156.0
[EXP] 318: [success_rate]: True, [answer]: 12, [output]: def solution():
    width = 6
    length = 4
    depth = 5
    volume = width * length * depth
    cost = volume * 0.1
    return cost

 Executed result: 12.0
[EXP] 319: [success_rate]: True, [answer]: 123, [output]: 
def solution():
    boys = 30
    girls = boys * 3
    nongendered = boys // 10
    total_children = boys + girls + nongendered
    return total_children

 Executed result: 123
[EXP] 320: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    wire_ratio = 3
    pole_ratio = 1
    total_wires = 45
    total_poles = (total_wires * pole_ratio) / wire_ratio
    return total_poles

 Executed result: 15.0
[EXP] 321: [success_rate]: True, [answer]: 8, [output]: def solution():
    total_people = 25 + 15
    left_people = total_people - total_people//4
    men_left = 22
    women_left = left_people - men_left
    return women_left

 Executed result: 8
[EXP] 322: [success_rate]: True, [answer]: 1, [output]: def solution():
    book_cost = 4
    magazine_cost = book_cost / 2
    pen_cost = magazine_cost - 1
    result = pen_cost
    return result

 Executed result: 1.0
[EXP] 323: [success_rate]: False, [answer]: 9, [output]: 
def solution():
    jam_pencils = 26
    jam_boxes = jam_pencils // 12
    jam_loose_pencils = jam_pencils % 12
    meg_pencils = 46
    total_pencils = jam_pencils + meg_pencils
    total_boxes = total_pencils // 12
    total_loose_pencils = total_pencils % 12
    need_jam_boxes = jam_boxes
    need_meg_boxes = (total_boxes - jam_boxes)
    return need_jam_boxes + need_meg_boxes + 1

 Executed result: 7
[EXP] 324: [success_rate]: False, [answer]: 75, [output]: def solution():
    initial_strength = 0
    cooling_effect = 13
    weakening_effect = 12
    strength_change = -cooling_effect + (-weakening_effect)
    strength_loss = 65 * strength_change
    total_strength_loss = strength_loss - (15 * weakening_effect)
    result = total_strength_loss
    return result

 Executed result: -1805
[EXP] 325: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    people = 5
    new_records = 7
    old_records_per_new_record = 2
    total_old_records = new_records * old_records_per_new_record
    people_office = total_old_records / people
    incorrect_people = people_office % 1
    real_people = int(people_office) + 1
    old_records = real_people * people
    return old_records

 Executed result: 15
[EXP] 326: [success_rate]: True, [answer]: 224000, [output]: def solution():
    total_employees = 100
    junior_programmers = total_employees * 2 / 5
    junior_salary = junior_programmers * 2000
    senior_programmers = total_employees - junior_programmers
    senior_salary = senior_programmers * (2000 + 400)
    total_salary = junior_salary + senior_salary
    return total_salary

 Executed result: 224000.0
[EXP] 327: [success_rate]: False, [answer]: 14, [output]: 
def solution():
    on_bus = 20
    got_down = 7
    got_in = got_in_first + got_in_second
    got_in_first = 5
    got_in_second = 8
    initial_passengers = on_bus - (got_down - got_in)
    return initial_passengers

 Executed result: None
[EXP] 328: [success_rate]: False, [answer]: 31, [output]: 
def solution():
    lollipops_initial = 24
    lollipops_eaten = 2
    lollipops_given = 14
    lollipops_bought = lollipops_given * 2
    lollipops_eaten_again = 3
    lollipops_eaten_again_in_morning = 2
    lollipops_left = lollipops_initial - lollipops_eaten - lollipops_given - lollipops_bought - lollipops_eaten_again - lollipops_eaten_again_in_morning
    result = lollipops_left
    return result

 Executed result: -25
[EXP] 329: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    battery_level = 60
    charge_rate = 1 / 3
    charge_per_hour = charge_rate * 60
    time_left = 100 - battery_level
    time_hours = time_left / charge_per_hour
    return time_hours

 Executed result: 2.0
[EXP] 330: [success_rate]: True, [answer]: 14, [output]: def solution():
    lollipops_initial = 7
    lollipops_additional = 10
    lollipops_gave = 3
    lollipops_total = lollipops_initial + lollipops_additional
    lollipops_left = lollipops_total - lollipops_gave
    result = lollipops_left
    return result

 Executed result: 14
[EXP] 331: [success_rate]: False, [answer]: 31, [output]: 
def solution():
    rewards = 80 // 20
    rewards_application = 1 * rewards
    sale_price = 43 - rewards_application * 2
    return 43 - rewards_application

 Executed result: 39
[EXP] 332: [success_rate]: False, [answer]: 8400, [output]: 
def solution():
    job_a_hourly = 15
    job_a_hours = 2000
    job_a_state_tax_rate = 0.2
    job_a_tax = job_a_hourly * job_a_hours * job_a_state_tax_rate
    job_a_gross = job_a_hourly * job_a_hours
    job_a_net = job_a_gross - job_a_tax
    
    job_b_annual = 42000
    job_b_property_tax = 6000
    job_b_net = job_b_annual - job_b_property_tax
    job_b_state_tax = job_b_net * 0.1
    job_b_net_after_tax = job_b_net - job_b_state_tax
    
    job_b_salary = job_b_annual + job_b_property_tax
    
    result = job_b_salary - job_a_net
    return result

 Executed result: 24000.0
[EXP] 333: [success_rate]: True, [answer]: 44, [output]: 
def solution():
    total_castles = 220
    percentage_ruins = (40 / 100)
    total_ruins = total_castles * percentage_ruins
    half_ruins_unmanned = total_ruins / 2
    unmanned_ruins = half_ruins_unmanned
    return unmanned_ruins

 Executed result: 44.0
[EXP] 334: [success_rate]: True, [answer]: 100, [output]: def solution():
    fu_adv = 1350
    fu_installments = 6
    fu_installment_cost = 350
    fu_total = fu_adv + (fu_installments * fu_installment_cost)

    ch_adv = 1100
    ch_installments = 9
    ch_installment_cost = 250
    ch_total = ch_adv + (ch_installments * ch_installment_cost)

    diff = fu_total - ch_total
    return diff

 Executed result: 100
[EXP] 335: [success_rate]: True, [answer]: 6, [output]: def solution():
    dj_guns = 8
    nick_guns = 10
    rj_guns = 1
    richard_guns = 5
    total_guns = dj_guns + nick_guns + rj_guns + richard_guns
    num_people = 4
    ideal_guns_per_person = total_guns // num_people
    return ideal_guns_per_person

 Executed result: 6
[EXP] 336: [success_rate]: True, [answer]: 310, [output]: def solution():
    suckers_ounces = 30
    fudge_ounces = 70
    sucker_batches = 8
    fudge_batches = 1
    total_suckers = sucker_batches * suckers_ounces
    total_fudge = fudge_batches * fudge_ounces
    total_ounces = total_suckers + total_fudge
    return total_ounces

 Executed result: 310
[EXP] 337: [success_rate]: True, [answer]: 72, [output]: def solution():
    initial_value = 8
    num_shares = 8
    year1_price_increase = 1.50
    year1_price = initial_value * year1_price_increase
    year2_price_decrease = 1 - 0.25
    year2_price = year1_price * year2_price_decrease
    result = year2_price * num_shares
    return result

 Executed result: 72.0
[EXP] 338: [success_rate]: True, [answer]: 1, [output]: def solution():
    luke_hotdogs = 2
    thomas_hotdogs = 3 * luke_hotdogs
    john_hotdogs = thomas_hotdogs / 2
    john_diff = john_hotdogs - luke_hotdogs
    return john_diff

 Executed result: 1.0
[EXP] 339: [success_rate]: False, [answer]: 60, [output]: def solution():
    total_students = 200
    smaller_group_size = 0
    for i in range(total_students // 2, 0, -1):
        bigger_group_size = i
        same_group_size = i
        if 2 * (i * bigger_group_size) + i * (same_group_size) == total_students:
            smaller_group_size = same_group_size
            break
    return smaller_group_size

 Executed result: 0
[EXP] 340: [success_rate]: True, [answer]: 160, [output]: def solution():
    animals_total = 60
    cows = animals_total // 3
    chickens = animals_total - cows
    cow_legs = cows * 4
    chicken_legs = chickens * 2
    leg_total = cow_legs + chicken_legs
    return leg_total

 Executed result: 160
[EXP] 341: [success_rate]: True, [answer]: 4, [output]: def solution():
    practice = 3
    weeks = 4
    balls_dropped = 3
    caught = 2
    balls_left = practice + (weeks - 1)
    balls_lost = balls_dropped - caught
    balls_juggling = balls_left - balls_lost
    return balls_juggling

 Executed result: 5
[EXP] 342: [success_rate]: True, [answer]: 260, [output]: 
def solution():
    pink_frog = 50
    blue_beetle = pink_frog
    green_toad = pink_frog
    yellow_snake = pink_frog + 10
    red_bird = pink_frog - 20
    
    total_weight = pink_frog + blue_beetle + green_toad + yellow_snake + red_bird + 20
    return total_weight

 Executed result: 260
[EXP] 343: [success_rate]: True, [answer]: 87, [output]: 
def solution():
    outfits_received_initial = 24
    outfits_received_more = outfits_received_initial * 2
    total_outfits_received = outfits_received_initial + outfits_received_more
    total_outfits_received_plus_more = total_outfits_received + 15
    return total_outfits_received_plus_more

 Executed result: 87
[EXP] 344: [success_rate]: True, [answer]: 180000, [output]: 
def solution():
    distance_daily = 5000
    increment = 1/5
    days_in_june = 30
    distance_increment = distance_daily * increment
    distance_in_june = (distance_daily + distance_increment) * days_in_june
    return distance_in_june

 Executed result: 180000.0
[EXP] 345: [success_rate]: True, [answer]: 2, [output]: def solution():
    juice_a = 4
    juice_b = juice_a + 5
    juice_c = juice_a + 7
    result = juice_c - juice_b
    return result

 Executed result: 2
[EXP] 346: [success_rate]: True, [answer]: 310, [output]: def solution():
    table40 = 40
    legs4 = 4
    table50 = 50
    legs3 = 3
    total_legs = (table40 * legs4) + (table50 * legs3)
    result = total_legs
    return result

 Executed result: 310
[EXP] 347: [success_rate]: False, [answer]: 9, [output]: 
def solution():
    cookies_per_bag = 36
    bag_per_week = 1
    cookies_in_lunchbox = 4 * 5
    cookies_eaten_by_husband = 7
    cookies_left = bag_per_week * cookies_per_bag - cookies_in_lunchbox - cookies_eaten_by_husband
    cookies_eaten_by_jenny = cookies_per_bag - cookies_left
    return cookies_eaten_by_jenny

 Executed result: 27
[EXP] 348: [success_rate]: True, [answer]: 36, [output]: 
def solution():
    shirts = 2
    cost_per_shirt = 30
    discount = 0.4
    discount_amount = shirts * cost_per_shirt * discount
    undiscounted_cost = shirts * cost_per_shirt
    discounted_cost = undiscounted_cost - discount_amount
    result = discounted_cost
    return result

 Executed result: 36.0
[EXP] 349: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    daily_profit_before = 10 * 100
    daily_profit_after = 5 * 220
    percent_more = ((daily_profit_after - daily_profit_before) / daily_profit_before) * 100
    return percent_more

 Executed result: 10.0
[EXP] 350: [success_rate]: True, [answer]: 2640, [output]: 
def solution():
    food_cost = 25
    treat_cost = 20
    medicine_cost = 100
    monthly_food_cost = food_cost * 4
    annual_food_cost = monthly_food_cost * 12
    annual_treat_cost = treat_cost * 12
    annual_medicine_cost = medicine_cost * 12
    annual_cost = annual_food_cost + annual_treat_cost + annual_medicine_cost
    return annual_cost

 Executed result: 2640
[EXP] 351: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    monday = 1
    tuesday = monday * 3
    wednesday = 0.5
    thursday = tuesday / 2
    friday = 2
    total = monday + tuesday + wednesday + thursday + friday
    result = total
    return result

 Executed result: 8.0
[EXP] 352: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    plant_pots_initial = 100
    daisies = 30
    roses = daisies * 2
    total_pots_needed = daisies + roses
    plant_pots_left = plant_pots_initial - total_pots_needed
    return plant_pots_left

 Executed result: 10
[EXP] 353: [success_rate]: True, [answer]: 21, [output]: def solution():
    money_initial = 36
    sweater = 11
    brother = 4
    money_spent = sweater + brother
    money_left = money_initial
    money_saved = money_left - money_spent
    result = money_saved
    return result

 Executed result: 21
[EXP] 354: [success_rate]: False, [answer]: 20, [output]: def solution():
    boating_hours = 6
    swimming_hours = boating_hours // 2
    boating_and_swimming_hours = boating_hours + swimming_hours
    show_hours = 3 * 2
    boating_and_swimming_plus_shows_hours = boating_and_swimming_hours + show_hours
    percentage_sightseeing = 40 / 100
    time_spent_sightseeing = percentage_sightseeing * (boating_and_swimming_plus_shows_hours * 24)
    return time_spent_sightseeing

 Executed result: 144.0
[EXP] 355: [success_rate]: True, [answer]: 45, [output]: def solution():
    phone_cost = 400
    initial_savings = 80
    first_job_hours = 20
    first_job_rate = 10
    first_job_earned = first_job_hours * first_job_rate
    second_job_hours = 15
    second_job_rate = 5
    second_job_earned = second_job_hours * second_job_rate
    total_earned = first_job_earned + second_job_earned
    total_savings = initial_savings + total_earned
    money_left_to_save = phone_cost - total_savings
    return money_left_to_save

 Executed result: 45
[EXP] 356: [success_rate]: True, [answer]: 34, [output]: 
def solution():
    tree1_height = 6
    tree2_height = tree1_height + 5
    trees_heights_sum = tree1_height + tree2_height
    tree3_height = trees_heights_sum * 2
    return tree3_height

 Executed result: 34
[EXP] 357: [success_rate]: True, [answer]: 21, [output]: def solution():
    money_initial = 28
    toy_cars = 6
    toy_cars_cost = 2
    teddy_bears = 5
    teddy_bears_cost = 1
    money_spent = (toy_cars * toy_cars_cost) + (teddy_bears * teddy_bears_cost)
    money_extra = 10
    money_left = money_initial - money_spent + money_extra
    result = money_left
    return result

 Executed result: 21
[EXP] 358: [success_rate]: False, [answer]: 2, [output]: def solution():
    budget = 90
    mini_golf = 1
    arcade_tokens = 5
    go_karts = 2
    mini_golf_cost = 5
    go Kart_cost = 10
    total_cost = mini_golf + arcade_tokens + go_karts * go Kart_cost
    friends = (budget - total_cost) / 5
    result = int(friends)
    return result

 Executed result: None
[EXP] 359: [success_rate]: False, [answer]: 20, [output]: python
def solution():
    pocket_money = 5
    lollipops = 4
    lollipop_cost = 0.25
    money_saved = 0
    for i in range(5):
        money_saved += pocket_money - (lollipops * lollipop_cost)
    return money_saved

 Executed result: 4.0
[EXP] 360: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    money_initial = 10
    candy_cost = 1.5
    gumball_cost = 0.05
    candy_bought = 0
    money_left = money_initial
    for gumballs in range(40):
        money_left -= gumball_cost
        candy_bought += gumball_cost/money_left
    money_spent_candy = money_initial - money_left
    candy_weight = money_spent_candy / candy_cost
    return cottoncandy

 Executed result: None
[EXP] 361: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    carver_age = 45
    son_age = (carver_age * 2) - 5
    return son_age

 Executed result: 85
[EXP] 362: [success_rate]: True, [answer]: 20, [output]: def solution():
    distance1 = 75
    distance2 = 100
    distance3 = distance2 + 25
    total_distance_daily = distance1 + distance2 + distance3
    total_distance_trip = total_distance_daily * 3
    distance_before_service = 18000
    days_between_services = distance_before_service // total_distance_trip
    return days_between_services

 Executed result: 20
[EXP] 363: [success_rate]: True, [answer]: 23, [output]: 
def solution():
    chihuahua_stuffing = 2
    rottweiler_stuffing = 8
    collie_stuffing = (chihuahua_stuffing + rottweiler_stuffing) / 2
    chihuahua_beds = 4
    collie_beds = 3
    total_stuffing = chihuahua_stuffing * chihuahua_beds + collie_stuffing * collie_beds
    return total_stuffing

 Executed result: 23.0
[EXP] 364: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    distance_to_friend = 200
    speed_to_friend = 70
    detour = 10
    distance_home = 240
    speed_home = 80

    distance_to_friend_with_detour = distance_to_friend + detour
    time_to_friend = distance_to_friend_with_detour / speed_to_friend
    time_home = distance_home / speed_home

    time_total = time_to_friend + time_home
    result = time_total
    return result

 Executed result: 6.0
[EXP] 365: [success_rate]: False, [answer]: 49, [output]: 
def solution():
    total_students = 96
    girls = 43
    absent_girls = 5
    absent_boys = 4
    total_girls_present = girls - absent_girls
    total_students_present = total_students
    total_boys = total_students - total_girls_present
    boys_present = total_boys - absent_boys
    return boys_present

 Executed result: 54
[EXP] 366: [success_rate]: True, [answer]: 18, [output]: def solution():
    girls = 6
    boys = girls * 2
    total_children = girls + boys
    result = total_children
    return result

 Executed result: 18
[EXP] 367: [success_rate]: True, [answer]: 9, [output]: def solution():
    total_points = 42
    first_test = 15
    second_test = 18
    points_received = first_test + second_test
    points_left = total_points - points_received
    return points_left

 Executed result: 9
[EXP] 368: [success_rate]: False, [answer]: 19, [output]: 
def solution():
    shoplifters = 3 * 4 - 5
    physical_violence = shoplifters * 3
    total = shoplifters + physical_violence
    other = 50 - total
    return other

 Executed result: 22
[EXP] 369: [success_rate]: False, [answer]: 18, [output]: 
def solution():
    erin_points = 14
    sara_points = 8
    erin_previous_points = (erin_points - (erin_points - sara_points * 3))
    return erin_previous_points

 Executed result: 24
[EXP] 370: [success_rate]: True, [answer]: 1198, [output]: python
def solution():
    num_seniors = 44
    frame_cost = 20
    logo_cost = 0.2
    frame_logo_cost = frame_cost + (frame_cost * logo_cost)
    frames_to_buy = num_seniors
    frames_cost = frames_to_buy * frame_logo_cost
    unusual_items_cost = (2 * 5) + (num_seniors // 4 * 12)
    total_cost = frames_cost + unusual_items_cost
    return total_cost

 Executed result: 1198.0
[EXP] 371: [success_rate]: False, [answer]: 320, [output]: 
def solution():
    original_cost = 400
    discount_rate = 0.2
    total_cost = original_cost / (1 - discount_rate)
    return total_cost

 Executed result: 500.0
[EXP] 372: [success_rate]: False, [answer]: 50, [output]: def solution():
    shoes_sold_friday = 14
    shoes_sold_saturday = 2 * shoes_sold_friday
    shoes_sold_sunday = shoes_sold_saturday / 2
    shoes_returned = 6

 Executed result: None
[EXP] 373: [success_rate]: True, [answer]: 5, [output]: def solution():
    tuesday_practice = 1
    thursday_practice = 2
    saturday_practice = tuesday_practice * 2
    practice_hours = tuesday_practice + thursday_practice + saturday_practice
    result = practice_hours
    return result

 Executed result: 5
[EXP] 374: [success_rate]: True, [answer]: 240000, [output]: 
def solution():
    total_cost = 400000
    faulty_percentage = 0.4
    total_faulty = total_cost * faulty_percentage
    money_returned = total_faulty
    total_spent = total_cost - money_returned
    return total_spent

 Executed result: 240000.0
[EXP] 375: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    sheep = 30
    milk_from_half_good = sheep // 2
    milk_from_half_bad = (sheep // 2)
    milk_collected_per_day = milk_from_half_good * 1 + milk_from_half_bad * 2
    return milk_collected_per_day

 Executed result: 45
[EXP] 376: [success_rate]: True, [answer]: 48, [output]: def solution():
    rolls_initial = 12
    children = 6
    rolls_shared = rolls_initial - children
    total_pieces = 8
    pieces_chickens = rolls_shared * total_pieces
    return pieces_chickens

 Executed result: 48
[EXP] 377: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    pupils = 40
    pupils_like_blue = pupils // 2
    pupils_remaining = pupils - pupils_like_blue
    pupils_like_green = pupils_remaining // 4
    pupils_like_yellow = pupils_remaining - pupils_like_green
    return pupils_like_yellow

 Executed result: 15
[EXP] 378: [success_rate]: True, [answer]: 50, [output]: def solution():
    num_apples_monday = 56 / 4
    num_apples_tuesday = 12
    num_apples_wednesday = 2 * num_apples_tuesday
    total_apples = num_apples_monday + num_apples_tuesday + num_apples_wednesday
    return total_apples

 Executed result: 50.0
[EXP] 379: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    socks_to_wash = 50
    pairs_washed = 10 * 2
    loose_socks = 15
    total_socks_washed = pairs_washed + loose_socks
    socks_missed = socks_to_wash - total_socks_washed
    return socks_missed

 Executed result: 15
[EXP] 380: [success_rate]: True, [answer]: 21, [output]: 
def solution():
    cookies_initial = 23
    cookies_received = 42
    total_cookies = cookies_initial + cookies_received
    cookies_eaten = 44
    cookies_left = total_cookies - cookies_eaten
    result = cookies_left
    return result

 Executed result: 21
[EXP] 381: [success_rate]: False, [answer]: 803, [output]: def solution():
    principal_amount = 3650
    interest_rate = 10
    time = 5
    monthly_interest = (interest_rate / 100) / 12
    monthly_payment = (principal_amount * monthly_interest * (1 + monthly_interest)**time) / ((1 + monthly_interest)**time - 1)
    return monthly_payment

 Executed result: 748.3509657544199
[EXP] 382: [success_rate]: True, [answer]: 67, [output]: 
def solution():
    cho_speed = 14
    cho_hours = 8
    cho_distance = cho_speed * cho_hours
    chloe_speed = 9
    chloe_hours = 5
    chloe_distance = chloe_speed * chloe_hours
    difference = cho_distance - chloe_distance
    return difference

 Executed result: 67
[EXP] 383: [success_rate]: True, [answer]: 350, [output]: 
def solution():
    axel_silver = 50
    axel_gold = 80
    anna_silver = 2 * axel_silver
    anna_gold = axel_gold + 40
    total_axel = axel_silver + axel_gold
    total_anna = anna_silver + anna_gold
    total_pesos = total_axel + total_anna
    return total_pesos

 Executed result: 350
[EXP] 384: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    money_spent = 18
    pitchers = 3
    cups_per_pitcher = 12
    total_cups = pitchers * cups_per_pitcher
    cups_sold = total_cups
    profit_per_cup = 1
    cups_sold_per_hour = 4
    total_profit_per_hour = (cups_sold * profit_per_cup) - money_spent
    profit_per_hour = total_profit_per_hour / cups_sold_per_hour
    return profit_per_hour

 Executed result: 4.5
[EXP] 385: [success_rate]: False, [answer]: 32, [output]: 
def solution():
    land_left = 12.8
    land_sold = 1 - (land_left / 5/3)
    land_initial = land_left / land_sold
    return land_initial

 Executed result: 87.27272727272731
[EXP] 386: [success_rate]: True, [answer]: 16, [output]: def solution():
    total_members = 52
    female_members = total_members * 0.5
    female_members_performing = female_members
    half_female_members_performing_cant_make_it = female_members_performing / 2
    female_members_performing -= half_female_members_performing_cant_make_it
    teachers_join = 3
    total_people_in_performance = female_members_performing + teachers_join
    result = total_people_in_performance
    return result

 Executed result: 16.0
[EXP] 387: [success_rate]: True, [answer]: 80, [output]: 
def solution():
    scores = [65, 94, 81, 86, 74]
    average = sum(scores) / len(scores)
    grade = average
    return grade

 Executed result: 80.0
[EXP] 388: [success_rate]: True, [answer]: 36, [output]: def solution():
    erasers = 6
    pencil = 8
    eraser_cost = 2
    pencil_cost = 3
    eraser_total = erasers * eraser_cost
    pencil_total = pencil * pencil_cost
    total_cost = eraser_total + pencil_total
    return total_cost

 Executed result: 36
[EXP] 389: [success_rate]: True, [answer]: 88, [output]: 
def solution():
    msg_to_msThompson = 66
    msg_to_mrYu = msg_to_msThompson // 3 + 1
    total_msgs = msg_to_msThompson + msg_to_mrYu
    result = total_msgs
    return result

 Executed result: 89
[EXP] 390: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    brac_cost = 30
    ticket_cost_per_ride = 4
    rides = 9
    david_spent = brac_cost
    dasha_spent = ticket_cost_per_ride * rides
    david_saved = dasha_spent - david_spent
    result = david_saved
    return result

 Executed result: 6
[EXP] 391: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    gifts_total = 6 + 4 + 2
    ribbon_total = 144
    ribbon_per_gift = ribbon_total // gifts_total
    return ribbon_per_gift

 Executed result: 12
[EXP] 392: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    ratio_betty = 5
    ratio_sam = 6
    total_popsicles = 165
    total_betty = total_popsicles * (ratio_betty / (ratio_betty + ratio_sam))
    total_sam = total_popsicles - total_betty
    difference = total_sam - total_betty
    return difference

 Executed result: 15.0
[EXP] 393: [success_rate]: False, [answer]: 34, [output]: def solution():
    cable_package = 60
    netflix = 10
    hulu = 10
    disney_plus = 10
    bundle_discount = netflix + hulu + disney_plus - (netflix + hulu + disney_plus) * 0.20
    total_digital_service = netflix + hulu + disney_plus - bundle_discount
    savings = cable_package - total_digital_service
    return savings

 Executed result: 54.0
[EXP] 394: [success_rate]: True, [answer]: 20, [output]: def solution():
    total_time = 4 * 60 + 4 * 30 + 90
    time_spent_editing = 90
    percentage = (time_spent_editing / total_time) * 100
    return percentage

 Executed result: 20.0
[EXP] 395: [success_rate]: True, [answer]: 92, [output]: def solution():
    books_initial = 6 * 6
    books_multiplier = 2
    books_added = 20
    total_books = books_initial * books_multiplier
    books_to_carry = total_books + books_added
    result = books_to_carry
    return result

 Executed result: 92
[EXP] 396: [success_rate]: True, [answer]: 38, [output]: 
def solution():
    cards_total = 20
    boxes_cards = 15
    cards_from_boxes = 2 * boxes_cards
    cards_given_out = 24 + 5
    cards_received = 17
    cards_left = cards_total + cards_from_boxes - cards_given_out + cards_received
    result = cards_left
    return result

 Executed result: 38
[EXP] 397: [success_rate]: True, [answer]: 3, [output]: def solution():
    pizza_slices = 12
    bill_slices = pizza_slices * 1/3
    mark_slices = pizza_slices * 1/4
    eaten_slices = 2
    bill_slices_eaten = bill_slices - bill_slices % 1
    mark_slices_eaten = mark_slices - mark_slices % 1
    total_slices_eaten = bill_slices_eaten + mark_slices_eaten + eaten_slices
    slices_left = pizza_slices - total_slices_eaten
    result = slices_left
    return result

 Executed result: 3.0
[EXP] 398: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    money_initial = 50
    money Needed = 300
    daily_earnings = 10
    days = -(-moneyNeeded // daily_earnings)
    return days

 Executed result: None
[EXP] 399: [success_rate]: True, [answer]: 168, [output]: def solution():
    spiders = 90
    millipedes = spiders // 3
    stink_bugs = 2 * millipedes - 12
    total_bugs = spiders + millipedes + stink_bugs
    return total_bugs

 Executed result: 168
[EXP] 400: [success_rate]: True, [answer]: 12, [output]: def solution():
    erica_age = 30
    beth_age = erica_age + 5
    alice_age = beth_age + 7
    age_difference = alice_age - erica_age
    return age_difference

 Executed result: 12
[EXP] 401: [success_rate]: True, [answer]: 48, [output]: 
def solution():
    milk_per_glass = 8
    glasses_drunk = 2
    calories_per_ounce = 3
    ounces_drunk = glasses_drunk * milk_per_glass
    calories_consumed = ounces_drunk * calories_per_ounce
    return calories_consumed

 Executed result: 48
[EXP] 402: [success_rate]: True, [answer]: 14400, [output]: 
def solution():
    builder_days_per_month = 4 * 6
    builder_days_per_year = builder_days_per_month * 12
    earnings_per_day = 50
    earnings_per_year = builder_days_per_year * earnings_per_day
    result = earnings_per_year
    return result

 Executed result: 14400
[EXP] 403: [success_rate]: True, [answer]: 4, [output]: def solution():
    flour_needed = 3 * 2
    milk_needed = 1 * 2
    return flour_needed - milk_needed

 Executed result: 4
[EXP] 404: [success_rate]: True, [answer]: 81, [output]: 
def solution():
    AC_watts = 900
    hours_per_day = 8
    hours_reduced = 5
    days = 30
    kilowatts_saved_per_day = (hours_per_day - hours_reduced) * AC_watts / 1000
    kilowatts_saved_per_month = kilowatts_saved_per_day * days
    return kilowatts_saved_per_month

 Executed result: 81.0
[EXP] 405: [success_rate]: False, [answer]: 22, [output]: def solution():
    zebra1 = 17
    zebra2 = 17
    zebra3 = 36
    average = (zebra1 + zebra2 + zebra3) / 4
    return average

 Executed result: 17.5
[EXP] 406: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    people = 20
    sandwiches_needed = people // 4
    meat_needed = sandwiches_needed
    cheese_needed = sandwiches_needed
    meat_cost = meat_needed * 7
    cheese_cost = cheese_needed * 3
    total_cost = meat_cost + cheese_cost
    result = total_cost
    return result

 Executed result: 50
[EXP] 407: [success_rate]: True, [answer]: 200, [output]: def solution():
    cannolis_initial = 40
    corns_initial = cannolis_initial * 2
    new_cannolis = 60
    new_corns = cannolis_initial - new_cannolis
    cannolis_final = cannolis_initial + new_cannolis
    corns_final = corns_initial - new_corns
    total_cannolis_corns = cannolis_final + corns_final
    return total_cannolis_corns

 Executed result: 200
[EXP] 408: [success_rate]: False, [answer]: 2000, [output]: 
def solution():
    total_steps = 10000
    steps_taken_so_far = total_steps // 2 + 1000
    steps_left = total_steps - steps_taken_so_far
    steps_taken_during_jog = steps_left
    return steps_taken_during_jog

 Executed result: 4000
[EXP] 409: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    pages = 45
    words_per_page = 200
    total_words = pages * words_per_page
    words_per_minute = 300
    time_reading = total_words / words_per_minute
    total_place_to_airport = 10
    total_time_diff = time_reading + total_place_to_airport
    time_at_airport = 60
    time_early = time_at_airport - total_time_diff
    result = round(time_early)
    return result

 Executed result: 20
[EXP] 410: [success_rate]: True, [answer]: 168000, [output]: def solution():
    employees_in_may = 40
    hourly_wage = 15
    weekly_hours = 40
    monthly_wage = hourly_wage * weekly_hours * 4
    total_salary_may = monthly_wage * employees_in_may
    employees_in_june = int(employees_in_may * 0.75)
    total_salary_june = monthly_wage * employees_in_june
    total_salary = total_salary_may + total_salary_june
    return total_salary

 Executed result: 168000
[EXP] 411: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    money_initial = 10
    taffy_cost = 3
    taffy_discount = taffy_cost * 0.5
    total_taffy_cost = taffy_cost + taffy_discount
    total_taffy_cost = total_taffy_cost * 2
    seashells = 1.5
    magnets = 4 * 0.25
    money_spent = total_taffy_cost + seashells + magnets
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: -1.5
[EXP] 412: [success_rate]: True, [answer]: 1110, [output]: 
def solution():
    package1_cost = 400
    package2_cost = 2 * package1_cost
    discount = 0.80
    fireworks_cost = package1_cost + package2_cost
    fireworks_cost = fireworks_cost * discount
    fireworks_cost = fireworks_cost + 150
    result = fireworks_cost
    return result

 Executed result: 1110.0
[EXP] 413: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    cookies_per_night = 2
    days = 30
    cookies_needed = cookies_per_night * days
    cookies_per_dozen = 12
    dozen_needed = cookies_needed // cookies_per_dozen
    return dozen_needed

 Executed result: 5
[EXP] 414: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    number_of_candles = 50000
    candles_smelling_like_wet_dog = 0.05 * number_of_candles
    candles_explosion_guarantee = 0.99 * number_of_candles
    candles_typo = candles_smelling_like_wet_dog * candles_explosion_guarantee
    return candles_typo

 Executed result: 123750000.0
[EXP] 415: [success_rate]: True, [answer]: 56, [output]: 
def solution():
    blouses = 4
    original_price = 20
    discount = 0.3
    discount_price = original_price * (1 - discount)
    total_cost = discount_price * blouses
    return total_cost

 Executed result: 56.0
[EXP] 416: [success_rate]: False, [answer]: 350, [output]: 
def solution():
    joanne_apples = 0
    average_apples = 0
    sister_tallest = 30 * 2
    sister_shortest = (30 / 2) * 3
    total_apples = joanne_apples + average_apples + sister_tallest + sister_shortest
    total_apples = 500
    joanne_apples = total_apples - sister_tallest - sister_shortest
    return joanne_apples

 Executed result: 395.0
[EXP] 417: [success_rate]: False, [answer]: 56, [output]: 
def solution():
    heads = 180
    bumps = 304
    dromedaries = bumps - (heads - bumps)
    return dromedaries

 Executed result: 428
[EXP] 418: [success_rate]: False, [answer]: 3140, [output]: python
def solution():
    distance_day1_to_4 = 200
    distance_day5_6 = distance_day1_to_4 * 0.3
    distance_rest = 0
    distance_week1 = distance_day1_to_4 * 4 + distance_day5_6 + distance_rest
    distance_week2 = 300 * 7
    total_distance = distance_week1 + distance_week2
    return total_distance

 Executed result: 2960.0
[EXP] 419: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    peter_locker = 5
    zack_locker = 4 * peter_locker
    timothy_locker = 2 * zack_locker
    return timothy_locker

 Executed result: 40
[EXP] 420: [success_rate]: True, [answer]: 3000, [output]: def solution():
    Stanley_elevation = 10000
    Oliver_elevation = 3000
    Stanley_comb_elevation = Stanley_elevation - 4000
    Oliver_climb = Stanley_comb_elevation - Oliver_elevation
    return Oliver_climb

 Executed result: 3000
[EXP] 421: [success_rate]: True, [answer]: 17000, [output]: def solution():
    capital_initial = 5000
    money_from_first_bank = 4000
    money_from_second_bank = 2 * 4000
    capital_donated = money_from_first_bank + money_from_second_bank
    capital_now = capital_initial + capital_donated
    result = capital_now
    return result

 Executed result: 17000
[EXP] 422: [success_rate]: True, [answer]: 12, [output]: def solution():
    cats_initial = 50
    cats_taken = 4 * 5
    cats_left = cats_initial - cats_taken
    cats_runaway = int(cats_left * 3 / 5)
    cats_left = cats_left - cats_runaway
    result = cats_left
    return result

 Executed result: 12
[EXP] 423: [success_rate]: True, [answer]: 284, [output]: 
def solution():
    months_special = 6
    monthly_special = 8
    months_normal = 8
    monthly_normal = 12
    months_late = 24 - months_special - months_normal
    monthly_late = 14
    months_total = months_special + months_normal + months_late
    cost_special = months_special * monthly_special
    cost_normal = months_normal * monthly_normal
    cost_late = months_late * monthly_late
    total_cost = cost_special + cost_normal + cost_late
    return total_cost

 Executed result: 284
[EXP] 424: [success_rate]: False, [answer]: 8, [output]: 
def solution():
    tattered_cost = 28
    jogger_cost = tattered_cost - 6
    total_savings = 6
    savings_from_jogger = total_savings // 3
    savings_from_tattered = total_savings - savings_from_jogger
    jogger_cost_less_tattered = jogger_cost - tattered_cost
    return jogger_cost_less_tattered

 Executed result: -6
[EXP] 425: [success_rate]: True, [answer]: 570, [output]: 
def solution():
    capacity_of_buses = 4 * 60
    capacity_of_minibusses = 6 * 30
    capacity_of_minivans = 10 * 15
    total_capacity = capacity_of_buses + capacity_of_minibusses + capacity_of_minivans
    return total_capacity

 Executed result: 570
[EXP] 426: [success_rate]: False, [answer]: 150, [output]: def solution():
    self_made_feeders = 3
    store_bought_feeders = 3
    birds_self_made = 20 + (self_made_feeders * 10)
    birds_total = (self_made_feeders * birds_self_made) + (store_bought_feeders * 20)
    return birds_total

 Executed result: 210
[EXP] 427: [success_rate]: True, [answer]: 11, [output]: def solution():
    bagel_cost = 4
    soup_cost = bagel_cost * 1.25
    cake_cost = bagel_cost / 2
    total_cost = bagel_cost + soup_cost + cake_cost
    result = total_cost
    return result

 Executed result: 11.0
[EXP] 428: [success_rate]: True, [answer]: 150, [output]: 
def solution():
    money_spent = 100
    money_spent_at_register = 50
    card_price = 1.5
    card_kept = 1/3
    cards_sold = money_spent_at_register / card_price
    cards_sold = cards_sold / (1 - card_kept)
    cards_sold_on_hand = cards_sold + card_kept
    initial_cards = cards_sold_on_hand * card_price / (1 - card_price)
    result = initial_cards
    return result

 Executed result: -151.0
[EXP] 429: [success_rate]: False, [answer]: 26, [output]: def solution():
    guests_initial = 36
    guests_arrived = 40
    guests_with_one_hotdog = guests_initial
    guests_with_two_hotdogs = guests_initial // 2
    guests_with_two_hotdogs_actual = min(guests_with_two_hotdogs, guests_arrived - guests_initial)
    guests_with_one_hotdog = guests_with_one_hotdog - guests_with_two_hotdogs_actual
    guests_without_second_hotdog = guests_arrived - (guests_initial - guests_with_one_hotdog)
    result = guests_without_second_hotdog
    return result

 Executed result: 36
[EXP] 430: [success_rate]: True, [answer]: 13, [output]: 
def solution():
    indras_letters = 6
    half_indras_letters = indras_letters // 2
    sister_letters = half_indras_letters + 4
    total_letters = indras_letters + sister_letters
    return total_letters

 Executed result: 13
[EXP] 431: [success_rate]: True, [answer]: 132, [output]: def solution():
    pot_pans = 120
    mixing_bowls = 20
    utensils = 5
    utensil_cost = utensils * 5
    total_cost = pot_pans + mixing_bowls + utensil_cost
    discount = total_cost * 0.2
    discount_cost = total_cost - discount
    result = int(discount_cost)
    return result

 Executed result: 132
[EXP] 432: [success_rate]: True, [answer]: 1, [output]: def solution():
    dora_money = 2
    mom_gift = 16
    total_money = dora_money + mom_gift
    skipping_rope = 6
    board_game = 11
    playground_ball = 2
    total_cost = skipping_rope + board_game + playground_ball
    money_needed = total_cost - total_money
    return money_needed

 Executed result: 1
[EXP] 433: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    dragons_slew_by_prince_thaddeus = 100
    dragons_slew_by_prince_arthur = dragons_slew_by_prince_thaddeus * 3 / 4
    dragons_slew_by_prince_walter = dragons_slew_by_prince_arthur * 2
    dragons_slew_by_prince_bruce = dragons_slew_by_prince_walter / 5
    result = round(dragons_slew_by_prince_bruce)
    return result

 Executed result: 30
[EXP] 434: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    gas_total = 15
    containers = 5
    container_num = 1 / 4
    pints_per_container = 8
    pints_needed = (gas_total / containers) * (container_num * pints_per_container)
    result = pints_needed
    return result

 Executed result: 6.0
[EXP] 435: [success_rate]: True, [answer]: 5, [output]: def solution():
    money_initial = 5
    bags_chips = 3
    bagel_cost = 0.40
    chips_spent = bags_chips * bagel_cost
    money_initial -= chips_spent
    money_initial *= 0.99
    money_initial = round(money_initial, 2)
    candy_bar_cost = 0.75
    candy_bars = int((money_initial / candy_bar_cost))
    return candy_bars

 Executed result: 5
[EXP] 436: [success_rate]: True, [answer]: 5, [output]: def solution():
    lollipops = 25
    lollipops_kept = 5
    friends = 4
    lollipops_shared = lollipops - lollipops_kept
    lollipops_per_friend = lollipops_shared // friends
    return lollipops_per_friend

 Executed result: 5
[EXP] 437: [success_rate]: True, [answer]: 15, [output]: def solution():
    cake_weight = 20
    pieces = 8
    weight_per_piece = cake_weight / pieces
    people_eating_cake = 2
    weight_eaten = people_eating_cake * weight_per_piece
    weight_left = cake_weight - weight_eaten
    result = weight_left
    return result

 Executed result: 15.0
[EXP] 438: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    sitti_oranges = 34
    juris_oranges = 22
    total_oranges = sitti_oranges + juris_oranges
    total_people = 8
    oranges_per_person = total_oranges // total_people
    return oranges_per_person

 Executed result: 7
[EXP] 439: [success_rate]: True, [answer]: 2, [output]: def solution():
    onions_required = 2 * 2
    onion_cost = onions_required * 2
    beef_stock_cost = 2 * 2
    total_cost = onion_cost + beef_stock_cost
    servings = 6
    cost_per_serving = round(total_cost / servings)
    result = cost_per_serving
    return result

 Executed result: 2
[EXP] 440: [success_rate]: True, [answer]: 17, [output]: def solution():
    wayne_drive = 4
    bernadette_drive = wayne_drive * 4
    wayne_leave = wayne_drive
    bernadette_leave = bernadette_drive + 5
    difference = bernadette_leave - wayne_leave
    return difference

 Executed result: 17
[EXP] 441: [success_rate]: True, [answer]: 98, [output]: 
def solution():
    area = 360
    length = 3 * 3  # Convert yards to feet
    width = area / length
    perimeter = 2 * (length + width)
    return perimeter

 Executed result: 98.0
[EXP] 442: [success_rate]: True, [answer]: 80, [output]: python
def solution():
    elizabeth_red = 1
    elizabeth_clear = 2
    elizabeth_total = (elizabeth_red + elizabeth_clear) * 20

    margareth_blue = 3
    margareth_red = 4
    margareth_total = (margareth_blue + margareth_red) * 20

    elizabeth_total = elizabeth_total
    margareth_total = margareth_total

    result = margareth_total - elizabeth_total
    return result

 Executed result: 80
[EXP] 443: [success_rate]: True, [answer]: 49, [output]: 
def solution():
    initial_temp = 40
    temp_change = 5 * 3
    final_temp = initial_temp + temp_change
    final_temp -= (2 * 3)
    return final_temp

 Executed result: 49
[EXP] 444: [success_rate]: False, [answer]: 59, [output]: def solution():
    swim_jon = 40
    bike_jon = 60
    run_jon = 50
    diff = 10
    bike_james = bike_jon + 5
    run_james = ?

    if bike_james - bike_jon > 0:
        perc = (bike_james - bike_jon) / bike_jon
        run_james = (run_jon - (uncalc_diff_time(swim_jon, perc) +bike_james - bike_jon))
    else:
        perc = (bike_james - bike_jon) / bike_jon
        run_james = run_jon + (uncalc_diff_time(swim_jon, 1 - perc) + bike_james - bike_jon)
    return run_james

 Executed result: None
[EXP] 445: [success_rate]: True, [answer]: 20, [output]: def solution():
    movie_c = 1.25 * 60  # Convert hours to minutes
    movie_b = movie_c + 5
    movie_a = movie_b / 4
    return int(movie_a)

 Executed result: 20
[EXP] 446: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    distance = 30/60  # convert 30 minutes to miles
    distance_miles = distance * 32  # calculate distance in miles
    hay_bails = distance_miles / 2  # calculate number of hay bails eaten
    hay_cost = hay_bails * 3  # calculate cost of hay
    total_cost = hay_cost
    initial_cash = 30  # initial cash
    change = initial_cash - total_cost
    return change

 Executed result: 6.0
[EXP] 447: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    eggs_in_cases = 12
    eggs_loose = 2
    total_eggs = eggs_in_cases * 4 + eggs_loose
    eggs_per_tray = 5 * 5
    trays = total_eggs // eggs_per_tray
    return trays

 Executed result: 2
[EXP] 448: [success_rate]: False, [answer]: 5, [output]: python
def solution():
    joey Initial_points = 214
    joey_points = joey_initial_points + 26
    marcy_points = 225 + 10
    joey_winner_points = joey_points - marcy_points
    return joey_winner_points

 Executed result: None
[EXP] 449: [success_rate]: False, [answer]: 539, [output]: def solution():
    sneakers_initial = 48
    sneakers_sold_at_sale = 17
    sneakers_sold_elsewhere = sneakers_initial - sneakers_sold_at_sale
    profit_from_sale = sneakers_sold_at_sale * 20
    profit_elsewhere = sneakers_sold_elsewhere * 25
    total_profit = profit_from_sale + profit_elsewhere
    return total_profitantasy

 Executed result: None
[EXP] 450: [success_rate]: True, [answer]: 112, [output]: 
def solution():
    packets = 10
    colors_per_packetsmall = 8
    colors_per_packetlarge = 16
    small_packet_colors = 6 * colors_per_packetsmall
    large_packet_colors = 4 * colors_per_packetlarge
    total_colors = small_packet_colors + large_packet_colors
    result = total_colors
    return result

 Executed result: 112
[EXP] 451: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    regular_movie_ticket = 12
    super_ticket = 20
    soda_price = 3
    popcorn_soda_combo = 1
    savings = 2
    regular_popcorn_price = (regular_movie_ticket + popcorn_soda_combo + soda_price) - savings - super_ticket
    return regular_popcorn_price

 Executed result: -6
[EXP] 452: [success_rate]: True, [answer]: 11050, [output]: 
def solution():
    total_cost = 900
    num_balloons_initial = 20
    new_cost = total_cost / num_balloons_initial
    new_new_cost = new_cost + 20
    balloons_filled = 170
    cost_filled = balloons_filled * new_new_cost
    return cost_filled

 Executed result: 11050.0
[EXP] 453: [success_rate]: True, [answer]: 50, [output]: def solution():
    speed1 = 60
    hours1 = 2
    distance1 = speed1 * hours1
    speed2 = 30
    hours2 = 1
    distance2 = speed2 * hours2
    total_distance = distance1 + distance2
    total_hours = hours1 + hours2
    average_speed = total_distance / total_hours
    return average_speed

 Executed result: 50.0
[EXP] 454: [success_rate]: True, [answer]: 6400, [output]: 
def solution():
    sapphires_initial = 8
    sapphires_sold = 3
    rubies_received = 2
    sapphires_worth = sapphires_initial - sapphires_sold
    rubies_worth = rubies_received * 1200
    total_worth = (sapphires_worth * 800) + rubies_worth
    return total_worth

 Executed result: 6400
[EXP] 455: [success_rate]: False, [answer]: 150, [output]: def solution():
    marin_apples_per_day = 4
    nancy_apples_per_day = 4
    total_apples_per_day = marin_apples_per_day + nancy_apples_per_day
    total_apples_in_30_days = total_apples_per_day * 30
    result = total_apples_in_30_days
    return result

 Executed result: 240
[EXP] 456: [success_rate]: True, [answer]: 1920, [output]: def solution():
    length = 8
    width = 2
    height = 2
    volume = length * width * height
    total_volume = volume * 10
    bag_capacity = 2
    total_bag_needed = total_volume // bag_capacity
    cost_per_bag = 12
    total_cost = cost_per_bag * total_bag_needed
    return total_cost

 Executed result: 1920
[EXP] 457: [success_rate]: True, [answer]: 78, [output]: 
def solution():
    red_cards = 15
    green_cards = red_cards * 1.6
    yellow_cards = red_cards + green_cards
    total_cards = red_cards + green_cards + yellow_cards
    return total_cards

 Executed result: 78.0
[EXP] 458: [success_rate]: False, [answer]: 45, [output]: 
def solution():
    fairies_initial = 50
    new_fairies = fairies_initial // 2
    fairies_joined = fairies_initial + new_fairies
    fairies_left_after sometime = fairies_joined - 30
    result = fairies_left_after_sometime
    return result

 Executed result: None
[EXP] 459: [success_rate]: True, [answer]: 35, [output]: 
def solution():
    total_puppies = 8 + 12
    total_spotted_puppies = 3 + 4
    percentage = (total_spotted_puppies / total_puppies) * 100
    return percentage

 Executed result: 35.0
[EXP] 460: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    sugar_cubes = 2 * 1
    carrots = 4 * 12
    hay = 42 * 75
    oats = 20 * 65
    total_feed = sugar_cubes + carrots + hay + oats
    trips = -(-total_feed // 2250)  # using -(-x // y) for ceiling division
    return trips

 Executed result: 2
[EXP] 461: [success_rate]: False, [answer]: 84, [output]: python
def solution():
    cans_drunk=3
    bottles_drunk=5
    can_worth=2
    bottle_worth=3
    cans_per_week=4
    total_cents Woche=0
    for _ in range(cans_drunk+cans_per_week):
        total_cents += cans_per_week * cans_drunk * can_worth + cans_per_week * bottles_drunk * bottle_worth
    return total_cents

 Executed result: None
[EXP] 462: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    frederick_plants = 10
    toni_plants = frederick_plants + (frederick_plants * 0.6)
    shondra_plants = toni_plants - 7
    result = shondra_plants
    return result

 Executed result: 9.0
[EXP] 463: [success_rate]: True, [answer]: 71, [output]: 
def solution():
    ali_money = 21
    leila_money = 100
    ali_received = leila_money // 2
    ali_total = ali_money + ali_received
    result = ali_total
    return result

 Executed result: 71
[EXP] 464: [success_rate]: True, [answer]: 18, [output]: 
def solution():
    delivery_cost = 15
    tip = delivery_cost / 5
    total = delivery_cost + tip
    return total

 Executed result: 18.0
[EXP] 465: [success_rate]: False, [answer]: 6, [output]: def solution():
    start_position = 1
    fell_back = 5
    moved_ahead = 2
    fell_behind = 3
    moved_ahead_again = 1
    finish_position = start_position - fell_back + moved_ahead - fell_behind + moved_ahead_again
    result = finish_position
    return result

 Executed result: -4
[EXP] 466: [success_rate]: True, [answer]: 30, [output]: def solution():
    basketball_cards = 6 * 25
    baseball_cards = 5 * 40
    total_cards = basketball_cards + baseball_cards - 50
    students = total_cards // 10
    return students

 Executed result: 30
[EXP] 467: [success_rate]: True, [answer]: 1, [output]: 
def solution():
    cost_apples_becky = 20 * 0.45 - 1
    cost_apples_kelly = 20 * 0.5 - (20 * 0.5 * 0.1)
    difference = cost_apples_kelly - cost_apples_becky
    return difference

 Executed result: 1.0
[EXP] 468: [success_rate]: False, [answer]: 1200, [output]: 
def solution():
    rooms = 80
    sheets_per_room = 2
    comforters_per_room = 1
    pillowcases_per_sheet = 1
    pillowcases_per_room = sheets_per_room * pillowcases_per_sheet
    towels_per_pillowcases = 2
    towels_per_room = pillowcases_per_room * towels_per_pillowcases
    sheees_per_room = rooms * sheets_per_room
    comforters_per_hotel = rooms * comforters_per_room
    pillowcases_per_hotel = rooms * pillowcases_per_room
    towels_per_hotel = rooms * towels_per_room
    total_laundry_pieces = sheees_per_room + comforters_per_hotel + pillowcases_per_hotel + towels_per_hotel
    return total_laundry_pieces

 Executed result: 720
[EXP] 469: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    shoes_initial = 200
    shoes_get_m = 5*2
    shoes_get_w = 15*2
    shoes_get_f = 30*2
    shoes_total = shoes_initial + shoes_get_m + shoes_get_w + shoes_get_f
    shoes_removed = shoes_total - 180
    result = shoes_removed
    return result

 Executed result: 120
[EXP] 470: [success_rate]: True, [answer]: 4, [output]: def solution():
    jars = 6
    sprinkles_per_jar = 8
    total_sprinkles = jars * sprinkles_per_jar
    cupcakes_per_pan = 12
    pans_required = total_sprinkles // cupcakes_per_pan
    return pans_required

 Executed result: 4
[EXP] 471: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    pen_cost = 2
    paper_cost = 3*pen_cost - 1
    total_cost = pen_cost + paper_cost
    cash_given = 10
    change = cash_given - total_cost
    return change

 Executed result: 3
[EXP] 472: [success_rate]: True, [answer]: 80, [output]: def solution():
    students = 30
    pencils_initial = 10
    total_pencils = students * pencils_initial
    used_pencils = total_pencils / 5
    remaining_pencils = total_pencils - used_pencils
    left_pencils = remaining_pencils * 1/3
    return left_pencils

 Executed result: 80.0
[EXP] 473: [success_rate]: True, [answer]: 6, [output]: def solution():
    total_cookies = 5
    carrot_cookies_ratio = 0.5
    extra_cookies = 2
    carrot_cookies = total_cookies - extra_cookies
    carrot_sticks = carrot_cookies / carrot_cookies_ratio
    round_sticks = round(carrot_sticks)
    result = round_sticks
    return result

 Executed result: 6
[EXP] 474: [success_rate]: False, [answer]: 10, [output]: def solution():
    shark_length = 10
    remoras_lengths = 6
    num_remoras = 2
    total_remoras_length = remoras_lengths * num_remoras
    percentage塚 = (total_remoras_length / shark_length) * 100
    return percentage

 Executed result: None
[EXP] 475: [success_rate]: False, [answer]: 80, [output]: 
def solution():
    students_with_computer = (4/3) * total_students
    students_without_computer = 20
    total_students = (3/4) * students_without_computer
    return int(total_students)

 Executed result: None
[EXP] 476: [success_rate]: False, [answer]: 20, [output]: def solution():
    total_minutes = 240
    total_days = 3 * 7
    total_minutes_per_day = total_minutes / total_days
    minutes_per_day = total_minutes_per_day
    return minutes_per_day

 Executed result: 11.428571428571429
[EXP] 477: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_spent = 300
    cost_per_book = 15
    total_books = total_spent / cost_per_book
    books_per_child = total_books / 4
    result = books_per_child
    return int(result)

 Executed result: 5
[EXP] 478: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    total_kids = 32
    dairy_allergic = 9
    peanut_allergic = 6
    both_allergic = 3
    not_allergic = total_kids - (dairy_allergic - both_allergic) - (peanut_allergic - both_allergic)
    result = not_allergic
    return result

 Executed result: 23
[EXP] 479: [success_rate]: True, [answer]: 621, [output]: def solution():
    employees_per_group = 200
    groups = 3
    guides_per_group = 7
    total_employees = employees_per_group * groups
    total_guides = guides_per_group * groups
    total_people = total_employees + total_guides
    return total_people

 Executed result: 621
[EXP] 480: [success_rate]: True, [answer]: 15400, [output]: 
def solution():
    ticket_cost = 5000
    normal_hotel_cost = 1500
    weekend_hotel_cost = normal_hotel_cost + (normal_hotel_cost * 0.2)
    total_hotel_cost = weekend_hotel_cost * 3
    total_cost = ticket_cost * 2 + total_hotel_cost
    return total_cost

 Executed result: 15400.0
[EXP] 481: [success_rate]: True, [answer]: 11, [output]: def solution():
    ben_blue = 4
    ben_yellow = 3
    jasper_blue = ben_blue // 2
    jasper_yellow = ben_yellow * 3
    jasper_total = jasper_blue + jasper_yellow
    return jasper_total

 Executed result: 11
[EXP] 482: [success_rate]: False, [answer]: 84, [output]: def solution():
    penny1_weight = 48
    penny2_weight = penny1_weight * (3/4)
    penny2_year = 2010
    penny1_year = 1959
    print(f"The 1959 penny weighs {penny1_weight} grains and the 2010 penny weighs {penny2_weight} grains. The combined weight of the two pennies is {penny1_weight + penny2_weight} grains.")
    return /Stringcontest{'1959 and 2010 pennies weights' : 'The 1959 penny and the 2010 penny weights in total: '+str(penny1_weight+penny2_weight)+' grams.'}

 Executed result: None
[EXP] 483: [success_rate]: True, [answer]: 26, [output]: def solution():
    amount_needed = 200
    keegan_earned = 83
    tasha_earned = 91
    total_earned = keegan_earned + tasha_earned
    money_left = amount_needed - total_earned
    return money_left

 Executed result: 26
[EXP] 484: [success_rate]: True, [answer]: 40, [output]: def solution():
    songs_gabriel = 100 - 20
    songs_luri = 3 * 20
    songs_gabriel_left = 100 - 20
    songs_luri_left = 100 - (3 * 20)
    result = songs_gabriel_left - songs_luri_left
    return result

 Executed result: 40
[EXP] 485: [success_rate]: True, [answer]: 240, [output]: 
def solution():
    money_initial = 0
    oranges = 60
    oranges_eaten = (2/5) * oranges
    money_given_up = oranges_eaten * 10
    return money_given_up

 Executed result: 240.0
[EXP] 486: [success_rate]: True, [answer]: 220, [output]: def solution():
    shoes_cost = 80
    bag_cost = 3 * shoes_cost - 20
    return bag_cost

 Executed result: 220
[EXP] 487: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    miles_per_day = 12
    days_a_week = 5
    miles_per_hour = 10
    total_miles = miles_per_day * days_a_week
    hours_a_week = total_miles / miles_per_hour
    result = hours_a_week
    return result

 Executed result: 6.0
[EXP] 488: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    horses = 4
    oats_per_meal = 5
    meals_per_day = 2
    days = 5
    total_oats_per_day = horses * oats_per_meal * meals_per_day
    total_oats_for_five_days = total_oats_per_day * days
    oats_per_bag = 50
    bags_needed = total_oats_for_five_days // oats_per_bag
    return bags_needed

 Executed result: 4
[EXP] 489: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    puppies = 27
    pom_puppies = (2 / 3) * puppies
    girl_pom_puppies = (1 / 3) * pom_puppies
    result = girl_pom_puppies
    return result

 Executed result: 6.0
[EXP] 490: [success_rate]: True, [answer]: -10, [output]: 
def solution():
    southlandia_temp = -48
    northlandia_temp = 21
    midlandia_temp = -3
    average = (southlandia_temp + northlandia_temp + midlandia_temp) / 3
    return average

 Executed result: -10.0
[EXP] 491: [success_rate]: True, [answer]: 4, [output]: def solution():
    cost = 12
    savings = 4
    daily_savings = 2
    money_to_save = cost - savings
    days_to_save = money_to_save // daily_savings
    result = days_to_save
    return result

 Executed result: 4
[EXP] 492: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    eggs_initial = 64
    trays = 2
    eggs_tray = 24
    eggs_to_place = eggs_initial
    for i in range(trays):
        eggs_to_place -= eggs_tray
    eggs_left_to_place = eggs_to_place
    return eggs_left_to_place

 Executed result: 16
[EXP] 493: [success_rate]: True, [answer]: 32, [output]: def solution():
    small_pizza_cost = 8
    family_pizza_cost = 3 * small_pizza_cost
    total_cost = small_pizza_cost + family_pizza_cost
    return total_cost

 Executed result: 32
[EXP] 494: [success_rate]: False, [answer]: 25, [output]: def solution():
    pack_cost = 4
    packs_per_pack = 4
    coupon = 2
    total_pack_cost = pack_cost
    buy_one_get_one_free = 2
    razors_per_pack = packs_per_pack
    razors_in_two_packs = razors_per_pack * 2
    razors_in_one_pack = razors_per_pack
    money_spent = total_pack_cost
    discount = money_spent + buy_one_get_one_free
    discount_coupon = discount - coupon
    pack_price = discount_coupon / razors_in_two_packs
    pack_price_in_cents = pack_price * 100
    individual_razor_price_in_cents = pack_price_in_cents / (razors_per_pack)
    return individual_razor_price_in_cents

 Executed result: 12.5
[EXP] 495: [success_rate]: False, [answer]: 21, [output]: def solution():
    height_cheerleaders_64 = 9 * 64
    height_cheerleader_60 = 60
    total_height_cheerleaders = height_cheerleaders_64 + height_cheerleader_60
    average_height_cheerleaders = total_height_cheerleaders / 10
    height_bottom_layer = average_height_cheerleaders * 4
    height_middle_layer = average_height_cheerleaders * 3 + height_bottom_layer
    height_top_layer = average_height_cheerleaders * 2 + height_middle_layer
    result = round(height_top_layer / 12)
    return result

 Executed result: 48
[EXP] 496: [success_rate]: True, [answer]: 200, [output]: def solution():
    hours_per_day = 8
    minutes_per_walk = 5
    time_per_walk = minutes_per_walk
    minutes_walked_per_day = time_per_walk * hours_per_day
    minutes_walked_after_five_days = minutes_walked_per_day * 5
    result = minutes_walked_after_five_days
    return result

 Executed result: 200
[EXP] 497: [success_rate]: False, [answer]: 38, [output]: 
def solution():
    brett_age = 14
    angela_age = 3*brett_age
    four_years_later = angela_age + 4
    earlier = four_years_later - 4
    result = earlier
    return result

 Executed result: 42
[EXP] 498: [success_rate]: True, [answer]: 112, [output]: 
def solution():
    morning_rides = 14
    afternoon_rides = 14
    morning_cost = 6
    afternoon_cost = 2
    money_spent_morning = morning_cost * morning_rides
    money_spent_afternoon = afternoon_cost * afternoon_rides
    total_money_spent = money_spent_morning + money_spent_afternoon
    return total_money_spent

 Executed result: 112
[EXP] 499: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    ashes_orange = 5
    ashes_oranges_per_box = 10
    ashes_total_oranges = ashes_orange * ashes_oranges_per_box

    brianne_oranges = ashes_total_oranges + 20
    total_oranges = ashes_total_oranges + brianne_oranges
    oranges_per_pie = 3
    pies_possible = total_oranges // oranges_per_pie
    return pies_possible

 Executed result: 40
[EXP] 500: [success_rate]: True, [answer]: 10, [output]: def solution():
    flat_fee = 200
    second_fee_per_person = 25
    food_cost_first = 5
    total_cost_first = lambda n: flat_fee + n * food_cost_first
    total_cost_second = lambda n: n * second_fee_per_person
    for n in range(1, 1000000):
        if total_cost_first(n) == total_cost_second(n):
            return n

 Executed result: 10
[EXP] 501: [success_rate]: False, [answer]: 16, [output]: 
def solution():
    david_insects = 0
    boddhi_insects = 0
    lily_insects = 0

    total_insects = 43

    for i in range(1, 34):
        if total_insects - i - lily_insects - david_insects - boddhi_insects < 0:
            break
        boddhi_insects = i
        david_insects = (boddhi_insects) / 2
        lily_insects = david_insects + 7

    return lily_insects

 Executed result: 13.0
[EXP] 502: [success_rate]: True, [answer]: 273, [output]: def solution():
    skein_yarn = 364
    mariah_yarn = 1/4 * skein_yarn
    grandma_yarn = 1/2 * skein_yarn
    total_yarn = mariah_yarn + grandma_yarn
    return total_yarn

 Executed result: 273.0
[EXP] 503: [success_rate]: False, [answer]: 26, [output]: 
def solution():
    friends_gifts = 8
    friends = 5
    total_gifts = friends_gifts * friends + 10
    return total_gifts

 Executed result: 50
[EXP] 504: [success_rate]: False, [answer]: 18, [output]: def solution():
    chair_width = 3
    rug_width = chair_width + 5
    rug_length = 2 * rug_width
    couch_length = rug_length + 2 * rug_width
    result = couch_length
    return result

 Executed result: 32
[EXP] 505: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    total_cost = 7
    strawberry_gum_cost = (total_cost / 6) * 2
    return strawberry_gum_cost

 Executed result: 2.3333333333333335
[EXP] 506: [success_rate]: False, [answer]: 1,600, [output]: 
def solution():
    money_initial = 24
    cost_2x4 = 4
    cost_2x8 = 6
    sticks_2x4 = 200
    sticks_2x8 = 400
    money_spent = float('inf')
    max_sticks = 0
    while money_initial > 0:
        while money_initally > cost_2x4:
            money_initial -= cost_2x4
            sticks_each_run = sticks_2x4
            money_initial += sticks_each_run * cost_2x4
            if money_initial - cost_2x4 - cost_2x4 > money_spent:
                money_spent = money_initial
                max_sticks = sticks_each_run
        while money_initial > cost_2x8:
            money_initial -= cost_2x8
            sticks_each_run = sticks_2x8
            if money_initial - cost_2x8 > money_spent:
                money_spent = money_initial
                max_sticks = sticks_each_run
    return max_sticks

 Executed result: 400
[EXP] 507: [success_rate]: False, [answer]: 144, [output]: def solution():
    dogs = 6
    legs_per_dog = 4
    snowshoes_per_leg = 1
    snowshoes_per_dog = legs_per_dog * snowshoes_per_leg
    total_snowshoes = dogs * snowshoes_per_dog
    snowshoe_cost = total_snowshoes * 12
    return snowshoe_cost

 Executed result: 288
[EXP] 508: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    cost_per_trip = 2.20
    trips_per_week = 5
    total_cost_per_week = cost_per_trip * trips_per_week
    weekly_pass_cost = 20
    weekly_savings = total_cost_per_week - weekly_pass_cost
    return weekly_savings

 Executed result: -9.0
[EXP] 509: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    farm_cows = 30
    farm_sheep = int(20 / 2)
    zoo_cows = 2 * 30
    zoo_sheep = 20
    total_farm = farm_cows + farm_sheep
    total_zoo = zoo_cows + zoo_sheep
    total_animals = total_farm + total_zoo
    return total_animals

 Executed result: 120
[EXP] 510: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    rose_onions = 12
    rose_potatoes = 4
    rose_total = rose_onions + rose_potatoes
    rose_buying_multiple = 4
    sophia_buy = rose_total / rose_buying_multiple
    return sophia_buy

 Executed result: 4.0
[EXP] 511: [success_rate]: False, [answer]: 525, [output]: 
def solution():
    weight_loss_goal = 30
    start_date = '2023-12-31'
    end_date = '2024-07-19'
    days_to_goal = (end_date - start_date).days + 1
    calories_per_pound = 3500
    
    # calculate total calories to lose
    total_calories_to_lose = weight_loss_goal * calories_per_pound
    
    # calculate total calories to burn
    total_calories_to_burn = total_calories_to_lose * days_to_goal
    
    # calculate calorie deficit per day
    calorie_deficit = total_calories_to_burn / days_to_goal
    
    return calorie_deficit

 Executed result: None
[EXP] 512: [success_rate]: True, [answer]: 110, [output]: 
def solution():
    money_initial = 7 * 30
    money_spent = 100
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 110
[EXP] 513: [success_rate]: True, [answer]: 120, [output]: def solution():
    water_per_km = 60
    kilometers_run = 8 * 0.25
    water_needed = water_per_km * kilometers_run
    result = water_needed
    return result

 Executed result: 120.0
[EXP] 514: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    money_initial = 500
    money_spent_on_clothes = money_initial * 0.2
    money_left_after_clothes = money_initial - money_spent_on_clothes
    money_spent_on_cds = money_left_after_clothes * 0.25
    money_left_after_cds = money_left_after_clothes - money_spent_on_cds
    result = money_left_after_cds
    return result

 Executed result: 300.0
[EXP] 515: [success_rate]: False, [answer]: 90000, [output]: 
def solution():
    house_lot_total = 120000
    house_cost = house_lot_total
    lot_cost = house_cost / 3
    house_cost = house_lot_total - lot_cost
    return house_cost

 Executed result: 80000.0
[EXP] 516: [success_rate]: True, [answer]: 160, [output]: def solution():
    canvas_bags = 8
    bags_per_pack = 5
    cost_per_bag = 4
    price_per_bag = 8
    cost = canvas_bags * bags_per_pack * cost_per_bag
    revenue = canvas_bags * bags_per_pack * price_per_bag
    profit = revenue - cost
    result = profit
    return result

 Executed result: 160
[EXP] 517: [success_rate]: True, [answer]: 375, [output]: def solution():
    punches_per_minute = 25
    rounds = 5
    minutes_per_round = 3
    punches_in_a_minute = punches_per_minute * minutes_per_round
    total_punches = punches_in_a_minute * rounds
    result = total_punches
    return result

 Executed result: 375
[EXP] 518: [success_rate]: True, [answer]: 18, [output]: def solution():
    suzanne_cookies = 36
    josh_cookies = suzanne_cookies // 4
    kelsie_cookies = josh_cookies * 2
    return kelsie_cookies

 Executed result: 18
[EXP] 519: [success_rate]: True, [answer]: 32, [output]: 
def solution():
    ali_money = 4 * 10 + 6 * 20
    ali_gives_sister = ali_money / 2
    ali_money = ali_money - ali_gives_sister
    ali_spend_on_dinner = ali_money * 3 / 5
    result = ali_money - ali_spend_on_dinner
    return result

 Executed result: 32.0
[EXP] 520: [success_rate]: False, [answer]: 280, [output]: 
def solution():
    rob_time = 2 * 60
    royce_time = rob_time + 40
    return royce_time

 Executed result: 160
[EXP] 521: [success_rate]: True, [answer]: 63, [output]: def solution():
    wool_needed = 2 * 3 + 4 * 3 + 12 * 3 + 1 * 3 + 2 * 3
    return wool_needed

 Executed result: 63
[EXP] 522: [success_rate]: True, [answer]: 39, [output]: def solution():
    total_problems = 100
    monday = 12
    tuesday = 3 * monday
    wednesday = total_problems - (monday + tuesday)
    wednesday = int(wednesday / 4)
    remaining = total_problems - (monday + tuesday + wednesday)
    return remaining

 Executed result: 39
[EXP] 523: [success_rate]: True, [answer]: 29, [output]: def solution():
    tony = 6
    bobby = tony - 1
    kathy = bobby * 2
    ricky = kathy - 2
    hours = tony + bobby + kathy + ricky
    return hours

 Executed result: 29
[EXP] 524: [success_rate]: True, [answer]: 74, [output]: 
def solution():
    initial_bread = 200
    morning_sold = 93
    afternoon_sold = 39
    returned = 6
    total_sold = morning_sold + afternoon_sold
    bread_left = initial_bread - total_sold + returned
    result = bread_left
    return result

 Executed result: 74
[EXP] 525: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    rows_red = 36 // 6
    rows_blue = 24 // 8
    rows_total = rows_red + rows_blue
    return rows_total

 Executed result: 9
[EXP] 526: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    total_cups = 27
    oatmeal_cookies_per_cup = 3/4
    oatmeal_cookies = total_cups * oatmeal_cookies_per_cup
    batches = round(oatmeal_cookies)
    return batches

 Executed result: 20
[EXP] 527: [success_rate]: False, [answer]: 21, [output]: def solution():
    hourly_consumption = 12
    hourly_consumption_after_device = hourly_consumption + 2
    daily_kwh = hourly_consumption * 24
    daily_kwh_after_device = hourly_consumption_after_device * 24
    weekly_kwh = daily_kwh * 7
    weekly_kwh_after_device = daily_kwh_after_device * 7
    cost_per_kwh = 1.50
    weekly_cost = weekly_kwh * cost_per_kwh
    weekly_cost_after_device = weekly_kwh_after_device * cost_per_kwh
    difference = round(weekly_cost_after_device - weekly_cost, 2)
    return difference

 Executed result: 504.0
[EXP] 528: [success_rate]: False, [answer]: 48, [output]: def solution():
    one_person_days = 5
    half_house = 1
    whole_house = 2
    one_person_hours = one_person_days * 8  #assuming half a house takes 5 days, so one person can paint half a house in 40 hours
    many_hours = one_person_hours * half_house * whole_house
    people = 5
    hours = many_hours / people
    return hours

 Executed result: 16.0
[EXP] 529: [success_rate]: False, [answer]: 172, [output]: def solution():
    ophelia_sofas = 20
    ophelia_chairs = ophelia_sofas + 2 + 2
    jenna_chairs = ophelia_chairs * 3
    jenna_sofas = ophelia_sofas + 2 + 2
    total_chairs = ophelia_chairs + jenna_chairs
    total_sofas = ophelia_sofas + jenna_sofas
    result = total_chairs + total_sofas
    return result

 Executed result: 140
[EXP] 530: [success_rate]: True, [answer]: 11, [output]: def solution():
    CD_cost = 4
    total_spent = 48
    headphones_cost = total_spent - CD_cost
    remaining_money_for_CDs = total_spent / CD_cost
    CDs_left_to_buy = remaining_money_for_CDs
    return int(CDs_left_to_buy)

 Executed result: 12
[EXP] 531: [success_rate]: False, [answer]: 36, [output]: def solution():
    total_hours = 0
    regular_hours = 8 * 4
    extra_hours_1 = 2 * 5
    extra_hours_2 = 6
    total_hours = regular_hours + extra_hours_1 + extra_hours_2
    result = total_hours
    return result

 Executed result: 48
[EXP] 532: [success_rate]: False, [answer]: 66, [output]: 
def solution():
    people_initial = 48
    people_off_first = 8
    people_off_second = 21
    people_on_first = 8 * 5
    people_on_second = people_off_first - people_on_first
    result = people_initial - people_off_first + people_on_first - people_off_second
    return result

 Executed result: 59
[EXP] 533: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    age_jame = 27
    years_from_now_jame = 5
    age_jame_in_8_years = age_jame + years_from_now_jame
    cousin_age_in_8_years = 2 * age_jame_in_8_years - 5
    years_difference = age_jame + years_from_now_jame - (8 - age_jame_in_8_years)
    result = years_difference
    return result

 Executed result: 56
[EXP] 534: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    computer_cost = 1100
    total_cost = 2400
    printer_cost = computer_cost - 400
    monitor_cost = (total_cost - (computer_cost + printer_cost)) / 2
    return monitor_cost

 Executed result: 300.0
[EXP] 535: [success_rate]: False, [answer]: 300, [output]: def solution():
    boys_brought = 60
    girls_brought = (4 * boys_brought) + boys_brought
    girls_per_group = girls_brought / 10
    return girls_per_group

 Executed result: 30.0
[EXP] 536: [success_rate]: True, [answer]: 16, [output]: def solution():
    george_candies = 3
    george_candies_initial = george_candies + 5
    nick_candies = george_candies_initial * 2
    result = nick_candies
    return result

 Executed result: 16
[EXP] 537: [success_rate]: True, [answer]: 8, [output]: def solution():
    chenny_age = 10
    alyana_age = chenny_age - 4
    anne_age = alyana_age + 2
    result = anne_age
    return result

 Executed result: 8
[EXP] 538: [success_rate]: True, [answer]: 188, [output]: def solution():
    book1 = 31
    book2 = 50
    book3 = book2 - 5
    book4 = book1 * 2
    total_thickness = book1 + book2 + book3 + book4
    return total_thickness

 Executed result: 188
[EXP] 539: [success_rate]: True, [answer]: 18, [output]: def solution():
    vlogs_per_month = 72
    vlogs_already_uploaded = 18 + 21 + 15
    vlogs_to_upload = vlogs_per_month - vlogs_already_uploaded
    return vlogs_to_upload

 Executed result: 18
[EXP] 540: [success_rate]: False, [answer]: 35, [output]: python
def solution():
    bill = 50
    tip = 0.2
    tip_amount = bill * tip
    total_bill = bill + tip_amount
    return total_bill

 Executed result: 60.0
[EXP] 541: [success_rate]: True, [answer]: 39, [output]: def solution():
    initial_shared_money = 18
    boys = 3
    initial_shared_per_boy = initial_shared_money / boys
    eldest_share = initial_shared_per_boy
    eldest_share += 5
    eldest_share += 10
    eldest_share -= 8
    eldest_share *= 3
    return eldest_share

 Executed result: 39.0
[EXP] 542: [success_rate]: False, [answer]: 50, [output]: def solution():
    monthly_target = 1125
    total_days = 30
    first_half_savings = monthly_target / 2
    first_half_days = total_days // 2
    first_half_daily_savings = first_half_savings / first_half_days
    second_half_savings = monthly_target - first_half_savings
    second_half_daily_savings = second_half_savings / (total_days - first_half_days)
    result = second_half_daily_savings
    return result

 Executed result: 37.5
[EXP] 543: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    money_initial = 20
    apples = 3
    apple_cost = 1.50
    apples_spent = apples * apple_cost
    oranges = 5
    orange_cost = 0.80
    oranges_spent = oranges * orange_cost
    peaches = 6
    peach_cost = 0.75
    peaches_spent = peaches * peach_cost
    total_spent = apples_spent + oranges_spent + peaches_spent
    money_left = money_initial - total_spent
    return money_left

 Executed result: 7.0
[EXP] 544: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    jairus_tasks = 20
    jenny_tasks = 20
    jairus_earnings = jairus_tasks * 0.8
    jenny_earnings = jenny_tasks * 0.5
    jairus_more_than_jenny = jairus_earnings - jenny_earnings
    return jairus_more_than_jenny

 Executed result: 6.0
[EXP] 545: [success_rate]: True, [answer]: 80, [output]: def solution():
    amount = 100
    ratio = 4
    brad_gets = amount / (ratio + 1)
    jeff_gets = brad_gets * ratio
    result = jeff_gets
    return result

 Executed result: 80.0
[EXP] 546: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    work_distance = 3
    daily_distance = work_distance * 2
    weekly_distance = daily_distance * 5
    result = weekly_distance
    return result

 Executed result: 30
[EXP] 547: [success_rate]: False, [answer]: 130, [output]: 
def solution():
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    total_letters = (2 * len(alphabet)) + (len(alphabet) // 2) + (2 * alphabet)
    return len(total_letters)

 Executed result: None
[EXP] 548: [success_rate]: False, [answer]: 81, [output]: def solution():
    notified_families = 3
    initial_round = notified_families
    for i in range(3):
        notified_families = notified_families * 3
    new_families = notified_families - initial_round
    result = notified_families + new_families
    return result

 Executed result: 159
[EXP] 549: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    months_unwell = 3
    pounds_lost_per_month = 10
    final_weight = 70
    weight_when_ill = 0
    for i in range(months_unwell):
        weight_when_ill += pounds_lost_per_month
    result = final_weight + weight_when_ill
    return result

 Executed result: 100
[EXP] 550: [success_rate]: False, [answer]: 398, [output]: def solution():
    james_toys = 80
    sorted_set = 5
    toys_jonathan_has = james_toys * sorted_set
    while toys_jonathan_has % 2 != 0:
        toys_jonathan_has += 1
    toys_jonathan_needs = toys_jonathan_has - 2
    toys_jonathan_has = toys_jonathan_needs - 2
    result = toys_jonathan_has
    return result

 Executed result: 396
[EXP] 551: [success_rate]: True, [answer]: 27, [output]: 
def solution():
    notebook_price = 1.50
    pen_price = 0.25
    calculator_price = 12
    geometry_set_price = 10
    discounts = 0.10
    total_items = 5 + 2 + 1 + 1
    total_price_without_discount = (5 * notebook_price) + (2 * pen_price) + calculator_price + geometry_set_price
    total_price_with_discount = total_price_without_discount - (total_price_without_discount * discounts)
    result = total_price_with_discount
    return result

 Executed result: 27.0
[EXP] 552: [success_rate]: True, [answer]: 17, [output]: def solution():
    bill = 50
    hamburgers = 5
    fries = 10
    drinks = 5
    hamburgers_cost = hamburgers * 4
    fries_cost = fries * 0.3
    drinks_cost = drinks * 2
    total_cost = hamburgers_cost + fries_cost + drinks_cost
    change = bill - total_cost
    return change

 Executed result: 17.0
[EXP] 553: [success_rate]: False, [answer]: 450, [output]: 
def solution():
    sales = 2500
    initial_commission = sales * 0.3
    commissionwise = 0
    if sales > 1000:
        commissionwise = (sales - 1000) * 0.1
    total_earnings = initial_commission + commissionwise
    result = total_earnings
    return result

 Executed result: 900.0
[EXP] 554: [success_rate]: False, [answer]: 92, [output]: def solution():
    bottle cases = 2
    bottles_per_case = 24
    total_bottles_initial = cases * bottles_per_case
    guests = 70
    bottles_per_guest = 2
    bottles_needed = guests * bottles_per_guest
    bottles_left = total_bottles_initial - bottles_needed
    return bottles_left

 Executed result: None
[EXP] 555: [success_rate]: True, [answer]: 54, [output]: def solution():
    water_temperature_cold = 16
    water_temperature_warm = 2 * water_temperature_cold
    water_temperature_warm = water_temperature_warm + 2
    time_taken_cold = 3 * water_temperature_cold
    time_taken_warm = 3 * water_temperature_warm
    difference = time_taken_warm - time_taken_cold
    return difference

 Executed result: 54
[EXP] 556: [success_rate]: True, [answer]: 2, [output]: def solution():
    pay_per_hour = 2
    hours_per_day = 5
    days_per_week = 4
    weeks = 0
    money_saved = 0
    while money_saved < 80:
        money_saved += pay_per_hour * hours_per_day * days_per_week
        weeks += 1
    result = weeks
    return result

 Executed result: 2
[EXP] 557: [success_rate]: True, [answer]: 160, [output]: 
def solution():
    fish_sub = 40
    cold_cut_combo = fish_sub * 3
    total_cost = fish_sub + cold_cut_combo
    return total_cost

 Executed result: 160
[EXP] 558: [success_rate]: False, [answer]: 70, [output]: 
def solution():
    buttons = 21
    hole_numbers = [2, 4]
    count = [0, 0]
    total_holes = 0
    for i in range(len(hole_numbers)):
        count[i] = buttons // hole_numbers[i]
        total_holes += count[i] * hole_numbers[i]
    rest = buttons % 7
    total_holes += rest * 4
    result = total_holes
    return result

 Executed result: 40
[EXP] 559: [success_rate]: True, [answer]: 3, [output]: def solution():
    timothy_locker = 24
    zack_locker = timothy_locker / 2
    peter_locker = zack_locker / 4
    result = peter_locker
    return result

 Executed result: 3.0
[EXP] 560: [success_rate]: False, [answer]: 16, [output]: def solution():
    daily_recommendation = 8
    octavia_cups = daily_recommendation / 2
    juan_cups = 10 * octavia_cups
    reduction = juan_cups - daily_recommendation
    return reduction

 Executed result: 32.0
[EXP] 561: [success_rate]: False, [answer]: 45, [output]: 
def solution():
    cages = 6
    hamsters = 3 * 10
    guinea_pigs = 3 * 5
    total rodinest = hamsters + guinea_pigs
    result = total rodinest
    return result

 Executed result: None
[EXP] 562: [success_rate]: True, [answer]: 180, [output]: 
def solution():
    mark_weight = 150
    susan_weight = mark_weight - 20
    bob_weight = 2 * susan_weight
    total_weight = mark_weight + susan_weight + bob_weight
    average_weight = total_weight / 3
    return average_weight

 Executed result: 180.0
[EXP] 563: [success_rate]: True, [answer]: 82, [output]: 
def solution():
    angle_pyramid = 32
    sun_angle_rate = 5
    hours = 10
    angle_sun = sun_angle_rate * hours
    angle_total = angle_pyramid + angle_sun
    return angle_total

 Executed result: 82
[EXP] 564: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    son1_age = 12
    son2_age = son1_age - 4
    total_candles = son1_age + son2_age
    total_packages = -(-total_candles // 5) # // is integer division, -(-x) ceil(x)
    cost = total_packages * 3
    return cost

 Executed result: 12
[EXP] 565: [success_rate]: False, [answer]: 240, [output]: 
def solution():
    pages_read_per_minute = 2
    minutes_per_reading = 1.5
    pages_read_per_week = 7 * pages_read_per_minute * 15
    pages_read_total = pages_read_per_week * 2 + 100
    return pages_read_total

 Executed result: 520
[EXP] 566: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    sandwiches = 12
    Cody_eaten = sandwiches // 3
    Trevor_eaten = sandwiches // 4
    sandwiches_eaten = Cody_eaten + Trevor_eaten
    sandwiches_left = sandwiches - sandwiches_eaten
    result = sandwiches_left
    return result

 Executed result: 5
[EXP] 567: [success_rate]: False, [answer]: 10, [output]: 
def solution():
    shiloh_age = 44
    nephew_age_future = (shiloh_age + 7) * 3
    nephew_age_present = nephew_age_future - 7
    result = nephew_age_present
    return result

 Executed result: 146
[EXP] 568: [success_rate]: False, [answer]: 9, [output]: 
def solution():
    money_from_first_tooth = 5
    for _ in range(3):
        money_from_tooth = 1
        money_made = money_made + money_from_tooth
    for _ in range(2):
        money_from_tooth = money_from_tooth / 2
        money_made = money_made + money_from_tooth
    return money_made

 Executed result: None
[EXP] 569: [success_rate]: True, [answer]: 175, [output]: def solution():
    richie = 80
    mark = richie - 20
    anna = richie - 45
    total = richie + mark + anna
    return total

 Executed result: 175
[EXP] 570: [success_rate]: True, [answer]: 21, [output]: def solution():
    liam_money = 63
    mitchell_lemonades = 21
    mitchell_price = 4
    mitchell_money = mitchell_lemonades * mitchell_price
    mitchell_more_than_liam = mitchell_money - liam_money
    return mitchell_more_than_liam

 Executed result: 21
[EXP] 571: [success_rate]: False, [answer]: 23, [output]: def solution():
    money_initial = 70
    days = 7
    action_figures_cost = 5
    expenses = 4 * 5  # for sunday to wednesday
    money_left = money_initial - expenses
    action_figures_left = money_left // 2  # number of plastic action figures left
    total_action_figures = 4 + action_figures_left  # total number of action figures by end of week
    return total_action_figures

 Executed result: 29
[EXP] 572: [success_rate]: True, [answer]: 308, [output]: 
def solution():
    spaying_cost = 200
    vaccine_cost = 20
    vases_cost = 12
    cost_of_vaccines = 3 * vaccine_cost
    cost_of_vases = 4 * vases_cost
    total_cost = spaying_cost + cost_of_vaccines + cost_of_vases
    result = total_cost
    return result

 Executed result: 308
[EXP] 573: [success_rate]: True, [answer]: 100, [output]: def solution():
    roses_per_week = 40
    total_roses_for_a_month = 4 * roses_per_week
    roses_ordered_first_edition = 20
    roses_ordered_second_edition = 15
    roses_ordered_third_edition = 30
    total_roses_ordered_per_week = roses_ordered_first_edition + roses_ordered_second_edition + roses_ordered_third_edition
    total_roses_supplied = total_roses_ordered_per_week * 4
    roses_needed_for_a_month = total_roses_supplied - total_roses_for_a_month
    return roses_needed_for_a_month

 Executed result: 100
[EXP] 574: [success_rate]: True, [answer]: 600, [output]: 
def solution():
    money_initial = 3000
    money_to_remove = 100
    months = 24
    money_removed = months * money_to_remove
    money_left = money_initial - money_removed
    result = money_left
    return result

 Executed result: 600
[EXP] 575: [success_rate]: False, [answer]: 37, [output]: def solution():
    bread_cost = 3.0
    sandwiches_per_loaf = 10
    cheese_cost = 30.0
    sandwich_selling_price = 7.0
    total_sandwiches = sandwiches_per_loaf
    cost_per_sandwich = bread_cost + (cheese_cost / total_sandwiches)
    revenue = total_sandwiches * sandwich_selling_price
    net_profit = revenue - cost_per_sandwich * total_sandwiches
    return net_profit

 Executed result: 10.0
[EXP] 576: [success_rate]: True, [answer]: 36, [output]: 
def solution():
    crayons = 3 * 64
    muffins = crayons // 8
    price_per_muffin = 1.5
    total_money = muffins * price_per_muffin
    return total_money

 Executed result: 36.0
[EXP] 577: [success_rate]: True, [answer]: 11232, [output]: 
def solution():
    length = 18
    width = 12
    area = length * width
    carpet_cost = area * 12
    padding_cost = area * 2
    old_carpet_cost = area * 4
    new_carpet_cost = area * 34
    total_cost = carpet_cost + padding_cost + old_carpet_cost + new_carpet_cost 
    result = total_cost
    return result

 Executed result: 11232
[EXP] 578: [success_rate]: True, [answer]: 40, [output]: def solution():
    days = 7
    birds_day_one_two = 50
    birds_day_three = 0
    birds_day_four_five = 120
    birds_day_six = 20
    birds_day_seven = 90
    total_birds = birds_day_one_two + birds_day_three + birds_day_four_five + birds_day_six + birds_day_seven
    average_birds = total_birds / days
    result = average_birds
    return result

 Executed result: 40.0
[EXP] 579: [success_rate]: True, [answer]: 48, [output]: def solution():
    starting_value = 20
    value = (starting_value + starting_value / 2) / 5
    value = value * (starting_value - 12)
    result = value
    return result

 Executed result: 48.0
[EXP] 580: [success_rate]: True, [answer]: 7, [output]: def solution():
    boy_cards = 5
    brother_cards = boy_cards - 3
    total_cards = boy_cards + brother_cards
    return total_cards

 Executed result: 7
[EXP] 581: [success_rate]: False, [answer]: 500, [output]: def solution():
    temp_set = 520
    temp_actual = 468
    difference = temp_actual - temp_set
    percentage_diff = (difference / temp_set) * 100
    new_temp_set = (temp_set * (1 + (percentage_diff / 100)))
    result = new_temp_set
    return result

 Executed result: 468.0
[EXP] 582: [success_rate]: True, [answer]: 215, [output]: def solution():
    movie1 = 90
    movie2 = 125
    total_minutes = movie1 + movie2
    result = total_minutes
    return result

 Executed result: 215
[EXP] 583: [success_rate]: True, [answer]: 129200, [output]: 
def solution():
    herbs_house = 76000
    jans_house = herbs_house * 0.70
    combined = herbs_house + jans_house
    return combined

 Executed result: 129200.0
[EXP] 584: [success_rate]: False, [answer]: 120, [output]: def solution():
    cups = 12
    dishes = 2 * cups
    utensils_by_judy = cups + dishes
    friend_cups = 40
    friend_dishes = friend_cups + 20
    total_utensils = utensils_by_judy + friend_dishes
    return total_utensils

 Executed result: 96
[EXP] 585: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    contacts_per_box = 90
    days_per_box = 45
    initial_cost = 100
    discount = 0.10
    discount_cost = initial_cost - (initial_cost * discount)
    cost_per_contact = discount_cost / contacts_per_box
    cost_per_pair = cost_per_contact * 2
    return cost_per_pair

print(solution())

 Executed result: 2.0
[EXP] 586: [success_rate]: True, [answer]: 40, [output]: def solution():
    jill_saturday_hours = 2
    jill_sunday_hours = 1
    john_saturday_hours = jill_saturday_hours * 2
    john_sunday_hours = jill_sunday_hours * 3
    jill_total_hours = jill_saturday_hours + jill_sunday_hours
    john_total_hours = john_saturday_hours + john_sunday_hours
    jill_pay = jill_total_hours * 10
    john_pay = john_total_hours * 10
    diff = john_pay - jill_pay
    result = diff
    return result

 Executed result: 40
[EXP] 587: [success_rate]: True, [answer]: 800, [output]: 
def solution():
    calories_aerobics = 500 * 2
    calories_running = 600 * 1
    total_calories = calories_aerobics + calories_running
    water_needed = total_calories // 200 * 100
    return water_needed

 Executed result: 800
[EXP] 588: [success_rate]: False, [answer]: 30, [output]: def solution():
    total_beans = 4500
    blue_beans = total_beans * 51/100
    red_beans = blue_beans - total_beans/100
    green_beans = blue_beans * 101/100
    difference = green_beans - red_beans
    return difference

 Executed result: 67.94999999999982
[EXP] 589: [success_rate]: False, [answer]: 52, [output]: 
def solution():
    speed Initialise = 47
    speed_a = 52
    increase = 5
    speed_b = speed_a + increase
    average = (speed Initialise + speed_a + speed_b) / 3
    return average

 Executed result: None
[EXP] 590: [success_rate]: False, [answer]: 15, [output]: 
def solution():
    days = 5
    lose_week = days * 1.25
    gain_week = days * 1.75
    difference = gain_week - lose_week
    return difference

 Executed result: 2.5
[EXP] 591: [success_rate]: True, [answer]: 319, [output]: def solution():
    initial_invitations = 100
    additional_friends = 2 * initial_invitations
    additional_guests = 10 + 8
    total_invites = initial_invitations + additional_friends + additional_guests
    total_seats_needed = total_invites
    return total_seats_needed

 Executed result: 318
[EXP] 592: [success_rate]: True, [answer]: 220, [output]: 
def solution():
    affenpinscher = 10
    dachshund = 2 * affenpinscher
    papillon = dachshund / 4
    mastiff = papillon * 44
    result = mastiff
    return result

 Executed result: 220.0
[EXP] 593: [success_rate]: True, [answer]: 1, [output]: def solution():
    amazon_price = 16
    amazon_shipping = 4
    ebay_price = 13
    ebay_shipping = 2 * 4
    amazon_total = amazon_price + amazon_shipping
    ebay_total = ebay_price + ebay_shipping
    difference = ebay_total - amazon_total
    return difference

 Executed result: 1
[EXP] 594: [success_rate]: True, [answer]: 3, [output]: def solution():
    initial_height = 4
    window_height = 20
    day = 0
    while initial_height < window_height:
        initial_height *= 2
        day += 1
    return day

 Executed result: 3
[EXP] 595: [success_rate]: True, [answer]: 42, [output]: def solution():
    weight_per_cup = 100
    grams_of_protein_per_cup = 3
    weight_per_day = 200
    weight_per_week = 7 * weight_per_day
    grams_of_protein_per_week = weight_per_week * grams_of_protein_per_cup / weight_per_cup
    return grams_of_protein_per_week

 Executed result: 42.0
[EXP] 596: [success_rate]: False, [answer]: 13, [output]: def solution():
    age_5_years_ago = jerry_age - 5
    jerry_age = 2 * age_5_years_ago
    jerry_age_in_3_years = jerry_age + 3
    result = jerry_age_in_3_years
    return result

 Executed result: None
[EXP] 597: [success_rate]: False, [answer]: 260, [output]: def solution():
    base_price = 2 * 2000
    extra_cost = 500
    deposit = 600
    total_cost = base_price + extra_cost
    hourly wage = 15
    money_needed = total_cost - deposit
    hours_needed = money_needed / hourly_wage
    return hours_needed

 Executed result: None
[EXP] 598: [success_rate]: False, [answer]: 90, [output]: 
def solution():
    smallest_angle = ? # Calculate the smallest angle
    medium_angle = 2 * smallest_angle
    largest_angle = 3 * smallest_angle
    total_angles = smallest_angle + medium_angle + largest_angle
    largest_angle = 180 - total_angles
    return largest_angle

 Executed result: None
[EXP] 599: [success_rate]: False, [answer]: 69, [output]: 
def solution():
    value_in_nickels = (8 * 25) + (6 * 2) + (14 * 1) + 15
    number_of_gumballs = value_in_nickels // 5
    return number_of_gumballs

 Executed result: 48
[EXP] 600: [success_rate]: True, [answer]: 48, [output]: def solution():
    dogs = 5
    cats = 2
    birds = 10
    total_legs = (dogs * 4) + (cats * 4) + (birds * 2)
    return total_legs

 Executed result: 48
[EXP] 601: [success_rate]: True, [answer]: 10, [output]: def solution():
    weight = 8
    weight_increase = weight * 50 / 100
    weight_increased = weight + weight_increase
    reduced_weight = weight_increased - 2
    return reduced_weight

 Executed result: 10.0
[EXP] 602: [success_rate]: False, [answer]: 104, [output]: 
def solution():
    months_in_a_year = 12
    total_games = 5
    total_additional_games = 12 * 1 + 12 * 2 + 12 * 4
    total_games_in_one_year = total_games + total_additional_games
    games_in_three_years = total_games_in_one_year * 3
    result = 5 * 3 + games_in_three_years
    return result

 Executed result: 282
[EXP] 603: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    distance_traveled = 1200
    hours_taken = 3
    distance_per_hour = distance_traveled / hours_taken
    additional_distance = 2000
    additional_hours = additional_distance / distance_per_hour
    result = float(additional_hours)
    return result

 Executed result: 5.0
[EXP] 604: [success_rate]: False, [answer]: 1800, [output]: 
def solution():
    ruiutz_CH = 120
    m_CH = 3/4 * ruiutz_CH * 2
    total_ruiutz = ruiutz_CH * 2
    total_m = m_CH * 12
    total = total_ruiutz + total_m
    return total

 Executed result: 2400.0
[EXP] 605: [success_rate]: True, [answer]: 12, [output]: def solution():
    money_initial = 100
    money_spent_monday = 8
    money_spent_tuesday = 2 * money_spent_monday
    money_spent_wednesday = 4 * money_spent_tuesday
    money_spent_total = money_spent_monday + money_spent_tuesday + money_spent_wednesday
    money_left = money_initial - money_spent_total
    return money_left

 Executed result: 12
[EXP] 606: [success_rate]: True, [answer]: 42, [output]: 
def solution():
    hour1_cups = 15
    hour2_cups = 10
    hour1_time = 4
    hour2_time = 2
    hour1_price = 0.5
    hour2_price = 0.6
    hours = hour1_time + hour2_time
    revenue_hour1 = hour1_cups * hour1_price * hour1_time
    revenue_hour2 = hour2_cups * hour2_price * hour2_time
    revenue_total = revenue_hour1 + revenue_hour2
    return revenue_total

 Executed result: 42.0
[EXP] 607: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    tire_life_total = 10440000
    tire_rotations_per_mile = 725
    distance_per_month = 400
    average_monthly_rotations = distance_per_month * tire_rotations_per_mile
    years_to_last = tire_life_total // average_monthly_rotations
    return years_to_last

 Executed result: 36
[EXP] 608: [success_rate]: False, [answer]: 10, [output]: def solution():
    cost = 2400  # converting $24.00 to cents
    num_pumps = 120
    num_washings = 2
    amount_per_wash = num_pumps / num_washings
    cost_per_pump = cost / (num_washings * amount_per_wash)
    return cost_per_pump

 Executed result: 20.0
[EXP] 609: [success_rate]: False, [answer]: 8, [output]: def solution():
    money_initial = 50
    shirt_price = 25
    pants_price = 35
    discount = 30/100
    discounted_shirt_price = shirt_price - (shirt_price * discount)
    total_price = discounted_shirt_price + pants_price
    money_spent = total_price
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: -2.5
[EXP] 610: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    num_days = 7
    num_dozen_croissants = 4
    pounds_of_butter_per_dozen = 0.25
    
    total_croissants = num_dozen_croissants * num_days
    total_pounds_of_butter = total_croissants * pounds_of_butter_per_dozen
    
    result = total_pounds_of_butter
    return result

 Executed result: 7.0
[EXP] 611: [success_rate]: False, [answer]: 65,960, [output]: 
def solution():
    per_meter_cost = 194
    len_monica_street = 150
    len_lewis_street = 490
    cost_monica_street = per_meter_cost * len_monica_street
    cost_lewis_street = per_meter_cost * len_lewis_street
    cost_diff = cost_lewis_street - cost_monica_street
    return cost_diff

 Executed result: 65960
[EXP] 612: [success_rate]: False, [answer]: 1,450,000, [output]: def solution():
    initial_funding = 100000
    duration = 5
    months = 10 * duration
    funding_per_month = initial_funding / duration
    extra_funding = 0.5 * funding_per_month
    total_funding = 0
    for i in range(months):
        if i < duration:
            total_funding += funding_per_month
        else:
            total_funding += funding_per_month + extra_funding
    result = total_funding
    return result

 Executed result: 1450000.0
[EXP] 613: [success_rate]: True, [answer]: 30, [output]: def solution():
    beef_prime = 6
    beef_tips = 8
    pound_steak = 16
    total_meat = beef_prime + beef_tips + pound_steak
    return total_meat

 Executed result: 30
[EXP] 614: [success_rate]: True, [answer]: 93000, [output]: def solution():
    members = 1000
    posts_per_member_per_day = 3
    posts_per_day = members * posts_per_member_per_day
    days_in_march = 31
    total_posts = posts_per_day * days_in_march
    return total_posts

 Executed result: 93000
[EXP] 615: [success_rate]: True, [answer]: 312, [output]: def solution():
    laundry_frequency = 2
    water_per_load = 20
    water_cost_per_gallon = 0.15
    loads_per_year = laundry_frequency * 52
    water_used_per_year = loads_per_year * water_per_load
    water_cost_per_year = water_used_per_year * water_cost_per_gallon
    return water_cost_per_year

 Executed result: 312.0
[EXP] 616: [success_rate]: True, [answer]: 33, [output]: def solution():
    fish_tank = 10.00
    bags_of_rocks = 2
    rocks_per_bag = 2.50
    pieces_of_coral = 3
    coral_cost = 2.00
    fish_cost = 0.50
    food_cost = 2.00
    total_cost = (bags_of_rocks * rocks_per_bag) + (pieces_of_coral * coral_cost) + (20 * fish_cost) + food_cost
    result = fish_tank + total_cost
    return result

 Executed result: 33.0
[EXP] 617: [success_rate]: True, [answer]: 10, [output]: def solution():
    start_height = 3
    growth_in_second_week = start_height * 2 
    total_height_after_second_week = growth_in_second_week
    growth_in_third_week = 4
    total_height = total_height_after_second_week + growth_in_third_week
    return total_height

 Executed result: 10
[EXP] 618: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    meat_from_bull = 750
    meat_sold_per_hour = 15
    hours_per_day = 10
    meat_sold_per_day = meat_sold_per_hour * hours_per_day
    days_it_will_take = meat_from_bull / meat_sold_per_day
    return days_it_will_take

 Executed result: 5.0
[EXP] 619: [success_rate]: True, [answer]: 36, [output]: 
def solution():
    seats = 18
    rows = 4
    total_seats = seats * rows
    occupied_admin = total_seats // 4
    remaining_seats = total_seats - occupied_admin
    occupied_parents = remaining_seats // 3
    students = remaining_seats - occupied_parents
    result = students
    return result

 Executed result: 36
[EXP] 620: [success_rate]: True, [answer]: 76, [output]: def solution():
    no_of_poles_at_intersection = 6
    no_of_intersections = 4
    total_poles = no_of_poles_at_intersection * no_of_intersections
    total_streetlights = total_poles * 4
    no_functioning_streetlights = 20
    total_functioning_streetlights = total_streetlights - no_functioning_streetlights
    result = total_functioning_streetlights
    return result

 Executed result: 76
[EXP] 621: [success_rate]: False, [answer]: 1509, [output]: def solution():
    dvd1_played = 1000
    DVD1_played = 356
    DVD2_played = 135
    total_played = DVD1_played + DVD2_played
    remaining_plays = dvd1_played - DVD1_played
    remaining_plays2 = 1000 - DVD2_played
    total_remaining = remaining_plays + remaining_plays2
    result = total_played + total_remaining
    return result

 Executed result: 2000
[EXP] 622: [success_rate]: True, [answer]: 3000, [output]: def solution():
    sessions_per_week = 2
    weeks = 6
    hours_per_session = 2
    cost_per_hour = 125
    total_hours = sessions_per_week * hours_per_session * weeks
    total_cost = total_hours * cost_per_hour
    result = total_cost
    return result

 Executed result: 3000
[EXP] 623: [success_rate]: False, [answer]: 7, [output]: 
def solution():
    gum_initial = 20
    hours_at_school = 8
    pieces_per_hour = 1 / 2
    pieces_chewed_at_home = 2
    pieces_given_to_sister = math.floor(gum_initial / 2)
    pieces_left = gum_initial - int(hours_at_school * pieces_per_hour) - pieces_chewed_at_home - pieces_given_to_sister
    return pieces_left

 Executed result: None
[EXP] 624: [success_rate]: False, [answer]: 8, [output]: def solution():
    age_current = 16
    years_after = 12
    years_from_now = 4
    age_future = age_current + years_after
    age_future_four_years = age_future + years_from_now
    result = age_future_four_years
    return result

 Executed result: 32
[EXP] 625: [success_rate]: True, [answer]: 85, [output]: def solution():
    baseball_balls = 9
    baseball_cost = 3
    baseball_spent = baseball_balls * baseball_cost
    
    basketball_balls = 8
    basketball_cost = 14
    basketball_spent = basketball_balls * basketball_cost
    
    basketball_spent_more = basketball_spent - baseball_spent
    return basketball_spent_more

 Executed result: 85
[EXP] 626: [success_rate]: True, [answer]: 160, [output]: def solution():
    rows = 10
    flowers_per_row = 20
    total_flowers = rows * flowers_per_row
    flowers_bloomed = (4 / 5) * total_flowers
    result = flowers_bloomed
    return result

 Executed result: 160.0
[EXP] 627: [success_rate]: False, [answer]: 72, [output]: 
def solution():
    internet_speed = 20
    kb_in_mb = 0.001
    minutes_in_hour = 60
    speed_in_mb_per_minute = internet_speed * kb_in_mb
    speed_in_mb_per_hour = speed_in_mb_per_minute * minutes_in_hour
    return speed_in_mb_per_hour

 Executed result: 1.2
[EXP] 628: [success_rate]: False, [answer]: 54, [output]: 
def solution():
    cars_towed_per_day = 10
    days = 3
    remaining_days = 7 - days
    cars_towed_initially = cars_towed_per_day * days
    cars_towed_subsequently = cars_towed_per_day * remaining_days
    cars_towed_initially -= remaining_days
    total_cars = cars_towed_initially + cars_towed_subsequently
    return total_cars

 Executed result: 66
[EXP] 629: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    height_initial = 40
    minimum_height = 48
    annual_growth = 2
    years = 0
    while height_initial < minimum_height:
        height_initial += annual_growth
        years += 1
    result = years
    return result

 Executed result: 4
[EXP] 630: [success_rate]: True, [answer]: 17500, [output]: 
def solution():
    cars_sold = 10
    car_price = 25000
    money_get_from_commission = cars_sold * (car_price - car_price * 0.3)
    money_commission = money_get_from_commission * 0.1
    result = money_commission
    return result

 Executed result: 17500.0
[EXP] 631: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    total_riders = 100
    wave_height = 30
    riders_who_stay_up = (1 * total_riders * 0.25)
    men_who_stay_up = riders_who_stay_up * 0.4
    return int(men_who_stay_up)

 Executed result: 10
[EXP] 632: [success_rate]: True, [answer]: 4800, [output]: 
def solution():
    diamond_price = 2000
    gold_price = diamond_price * 4 / 5
    silver_price = gold_price - 400
    total_price = diamond_price + gold_price + silver_price
    result = total_price
    return result

 Executed result: 4800.0
[EXP] 633: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    snowflake_stamps = 16
    truck_stamps = snowflake_stamps + 3
    rose_stamps = truck_stamps - 9
    total_stamps = snowflake_stamps + truck_stamps + rose_stamps
    result = total_stamps
    return result

 Executed result: 45
[EXP] 634: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    distance_behind = 75
    bob_speed = 0
    tom_speed = 70
    bob_time = distance_behind / (tom_speed - bob_speed)
    return bob_time

 Executed result: 1.0714285714285714
[EXP] 635: [success_rate]: True, [answer]: 14, [output]: def solution():
    naomi_catches = 17
    darren_catches = naomi_catches - 6
    tommy_catches = darren_catches + 3
    result = tommy_catches
    return result

 Executed result: 14
[EXP] 636: [success_rate]: False, [answer]: 4, [output]: def solution():
    classes = 10
    cost_per_class = 60 / (classes - 1)
    if cost_per_class <= 10:
        return 0

 Executed result: 0
[EXP] 637: [success_rate]: False, [answer]: 1050, [output]: 
def solution():
    jewel_customers = 50
    jewel_days = 7  # assumption: jewel works all 7 days
    julie_customers_per_day = jewel_customers * 2
    julie_customers_total = julie_customers_per_day * jewel_days

    
    return julie_customers_total

 Executed result: 700
[EXP] 638: [success_rate]: True, [answer]: 17, [output]: 
def solution():
    paisley_pixels = 4
    reggie_pixels = paisley_pixels * 5
    lynn_pixels = reggie_pixels - 3
    return lynn_pixels

 Executed result: 17
[EXP] 639: [success_rate]: False, [answer]: 12, [output]: def solution():
    apples_cost = 5.20
    apples_number = 5
    apple_total_cost = apples_cost * apples_number
    oranges_cost = 3.30
    oranges_number = 5
    orange_total_cost = oranges_cost * oranges_number
    total_cost = apple_total_cost + orange_total_cost
    return total_cost

 Executed result: 42.5
[EXP] 640: [success_rate]: True, [answer]: 216, [output]: 
def solution():
    length = 6
    width = 4
    depth = 3
    volume = length * width * depth
    time_per_cubic_foot = 3
    time_to_dig = volume * time_per_cubic_foot
    return time_to_dig

 Executed result: 216
[EXP] 641: [success_rate]: False, [answer]: 43,500, [output]: 
def solution():
    base_price = 30000
    king_cab = 7500
    leather_seats = king_cab // 3
    running_boards = leather_seats - 500
    exterior_light_package = 1500
    total_cost = base_price + king_cab + leather_seats + running_boards + exterior_light_package
    return total_cost

 Executed result: 43500
[EXP] 642: [success_rate]: False, [answer]: 262500, [output]: 
def solution():
    salary = 20000
    raise_percentage = 5
    raise_amount = (salary * raise_percentage) / 100
    new_salary = salary + raise_amount
    bonus = new_salary / 2
    total_salary = new_salary + bonus
    year_importance = 12
    total_salary_year = total_salary * year_importance
    result = total_salary_year
    return result

 Executed result: 378000.0
[EXP] 643: [success_rate]: False, [answer]: 10,800, [output]: 
def solution():
    suit_cost = 750
    dress_pant_cost = suit_cost / 5
    shirt_cost = 60
    total_suit_cost = suit_cost * 10
    total_pant_cost = dress_pant_cost * 10
    total_shirt_cost = shirt_cost * 10 * 3
    total_cost = total_suit_cost + total_pant_cost + total_shirt_cost
    return total_cost

 Executed result: 10800.0
[EXP] 644: [success_rate]: True, [answer]: 840, [output]: def solution():
    daily_political_weather_articles = 20
    daily_business_articles = 10
    days_in_feb = 28
    total_political_weather_articles = daily_political_weather_articles * days_in_feb
    total_business_articles = daily_business_articles * days_in_feb
    total_articles = total_political_weather_articles + total_business_articles
    return total_articles

 Executed result: 840
[EXP] 645: [success_rate]: False, [answer]: 29, [output]: 
def solution():
    steve_age = 60
    wife_age = steve_age + 4
    son_age = wife_age / 2
    son_wife_age = son_age
    return son_wife_age

 Executed result: 32.0
[EXP] 646: [success_rate]: False, [answer]: 48, [output]: def solution():
    portions_per_bag = 8
    portions_per_kg = 2
    portions_per_bag = portions_per_bag / portions_per_kg
    portions_in_three_bags = portions_per_bag * 3
    total_kg = portions_in_three_bags * portions_per_kg
    return total_kg

 Executed result: 24.0
[EXP] 647: [success_rate]: True, [answer]: 79, [output]: def solution():
    alisa_distance = 12 * 4.5
    stanley_distance = 10 * 2.5
    total_distance = alisa_distance + stanley_distance
    return total_distance

 Executed result: 79.0
[EXP] 648: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    feet_soil = 24
    feet_clay = 8
    feet_total = feet_soil + feet_clay
    hours_soil = feet_soil / 4
    hours_clay = feet_clay / 2
    hours_total = hours_soil + hours_clay
    result = hours_total
    return result

 Executed result: 10.0
[EXP] 649: [success_rate]: False, [answer]: 54, [output]: def solution():
    people = 29
    cupcakes_per_person = 2
    total_cupcakes = people * cupcakes_per_person
    return total_cupcakes

 Executed result: 58
[EXP] 650: [success_rate]: True, [answer]: 162000, [output]: 
def solution():
    initial_likes = 2000
    additional_likes = 20000
    new_likes = 70 * initial_likes
    total_likes = initial_likes + new_likes + additional_likes
    return total_likes

 Executed result: 162000
[EXP] 651: [success_rate]: False, [answer]: 142, [output]: 
def solution():
    price_day_one = 20
    discount_day_one = 2
    pomegranates_day_one = 20
    total_cost_day_one = (pomegranates_day_one * price_day_one) - discount_day_one
    price_day_two = 30
    discount_day_two = total_cost_day_two * 0.1
    total_cost_day_two = (pomegranates_day_two * price_day_two) - discount_day_two
    difference = total_cost_day_two - total_cost_day_one
    return difference

 Executed result: None
[EXP] 652: [success_rate]: False, [answer]: 2100, [output]: 
def solution():
    month1_red = 400
    month1_green = month1_red * 2
    total_month1 = month1_red + month1_green
    month2 = 3 / 4 * total_month1
    total_month2 = total_month1 + month2
    result = total_month1 + total_month2
    return result

 Executed result: 3300.0
[EXP] 653: [success_rate]: False, [answer]: 75, [output]: def solution():
    start = 5
    end = 9
    paid_start = 15
    additional_hours = end - start - 1
    extra_hours_cost = additional_hours * 2 * paid_start
    total_hours_cost = paid_start + extra_hours_cost
    return total_hours_cost

 Executed result: 105
[EXP] 654: [success_rate]: True, [answer]: 80, [output]: 
def solution():
    wage = 300
    bank_account = 420
    initial_money = 200
    money_withheld = wage - (bank_account - initial_money)
    return money_withheld

 Executed result: 80
[EXP] 655: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    guest_half_eggs = 16 * 3
    required_eggs = guest_half_eggs * 2
    dozens_eggs = required_eggs // 12
    return dozens_eggs + (1 if required_eggs % 12 > 0 else 0)

 Executed result: 8
[EXP] 656: [success_rate]: True, [answer]: 10, [output]: def solution():
    total_pages = 15
    pages_completed = 1/3 * total_pages
    pages_left = total_pages - pages_completed
    result = pages_left
    return result

 Executed result: 10.0
[EXP] 657: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    page_count = 200
    pages_read_daily = 10
    days_left = 30
    days_to_finish = (page_count - 1) // pages_read_daily
    
    return days_left - days_to_finish

 Executed result: 11
[EXP] 658: [success_rate]: True, [answer]: 330000, [output]: def solution():
    purchase_price = 150000
    maintenance_monthly = 5000
    fuel_monthly = 2 * maintenance_monthly
    expenses_monthly = maintenance_monthly + fuel_monthly
    total_expenses_first_year = expenses_monthly * 12
    total_cost = purchase_price + total_expenses_first_year
    return total_cost

 Executed result: 330000
[EXP] 659: [success_rate]: True, [answer]: 120, [output]: def solution():
    rice_time = 30
    pork_time = rice_time + 20
    beans_time = (rice_time + pork_time) / 2
    total_time = rice_time + pork_time + beans_time
    result = total_time
    return result

 Executed result: 120.0
[EXP] 660: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    cost_almonds_per_lb = 10
    cost_walnuts_per_lb = 15
    almonds_1 = 1/2
    walnuts_1 = 1/3
    cost_mixture_1 = almonds_1 * cost_almonds_per_lb + walnuts_1 * cost_walnuts_per_lb
    almonds_2 = 1/5
    walnuts_2 = 1/3
    cost_mixture_2 = almonds_2 * cost_almonds_per_lb + walnuts_2 * cost_walnuts_per_lb
    cost_diff = cost_mixture_1 - cost_mixture_2
    return cost_diff

 Executed result: 3.0
[EXP] 661: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    total_heads = 20
    total_legs = 70
    racehorse_legs_per_head = 4
    geese_legs_per_head = 2
    sheep_heads = total_heads - total_legs // geese_legs_per_head
    sheep = sheep_heads
    return sheep

 Executed result: -15
[EXP] 662: [success_rate]: True, [answer]: 44, [output]: 
def solution():
    cost_normal_brand = 5
    cost_expensive_brand = cost_normal_brand * 1.2
    pounds_per_week = 7
    amount_spent_on_coffee = pounds_per_week * cost_expensive_brand
    amount_spent_on_donut = 2
    total_cost = amount_spent_on_coffee + amount_spent_on_donut
    return total_cost

 Executed result: 44.0
[EXP] 663: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    money_spent = 20
    chips = 2
    chicken = 8
    soda = 1
    total_spent = chips * 2 + chicken + soda
    apple_pie_cost = money_spent - total_spent
    return apple_pie_cost

 Executed result: 7
[EXP] 664: [success_rate]: True, [answer]: 193, [output]: 
def solution():
    total_newspapers = 600
    newspapers_to_district_a = 198
    newspapers_to_district_c = 209
    newspapers_to_district_b = total_newspapers - newspapers_to_district_a - newspapers_to_district_c
    return newspapers_to_district_b

 Executed result: 193
[EXP] 665: [success_rate]: True, [answer]: 32, [output]: 
def solution():
    hours_per_week = 8
    weeks = 6
    hours_total = hours_per_week * weeks
    recipes_learned = hours_total / 1.5
    result = int(recipes_learned)
    return result

 Executed result: 32
[EXP] 666: [success_rate]: True, [answer]: 360, [output]: def solution():
    teachers = 150
    history_teachers = 0.6 * teachers
    math_teachers = teachers - history_teachers
    sleep_hours = 6
    total_sleep_time = math_teachers * sleep_hours
    return total_sleep_time

 Executed result: 360.0
[EXP] 667: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    aurelia_money = 120
    kassidy_money = aurelia_money * 3//4
    rayna_money = kassidy_money + 60
    total_money = aurelia_money + kassidy_money + rayna_money
    share_per_person = total_money // 3
    return share_per_person

 Executed result: 120
[EXP] 668: [success_rate]: True, [answer]: 53, [output]: 
def solution():
    quarters = 4
    quarter_length = 12
    extended_time = 5
    total_game_length = (quarters * quarter_length) + extended_time
    return total_game_length

 Executed result: 53
[EXP] 669: [success_rate]: True, [answer]: 3, [output]: def solution():
    total_employees = 50
    management_percentage = 0.20
    management_number = total_employees * management_percentage
    employees_overseeing = management_number * 0.30
    result = int(employees_overseeing)
    return result

 Executed result: 3
[EXP] 670: [success_rate]: True, [answer]: 132, [output]: def solution():
    muffins = 16
    flour_per_muffin = 5
    sugar_per_muffin = 3
    salt_per_muffin = 0.25
    flour_total = muffins * flour_per_muffin
    sugar_total = muffins * sugar_per_muffin
    salt_total = muffins * salt_per_muffin
    total_ingredients = flour_total + sugar_total + salt_total
    return total_ingredients

 Executed result: 132.0
[EXP] 671: [success_rate]: True, [answer]: 4, [output]: def solution():
    candy_robert = 3
    candy_cindy = 5
    candy_aaron = 4
    total_candy = candy_robert + candy_cindy + candy_aaron
    candy_per_person = total_candy // 3
    return candy_per_person

 Executed result: 4
[EXP] 672: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    type_a_candies = 7
    type_b_candies = 10
    type_a_cost = 0.5
    cost_a = type_a_candies * type_a_cost
    type_b_cost = 0.75
    cost_b = type_b_candies * type_b_cost
    total_cost = cost_a + cost_b
    cashpaid = 15
    change = cashpaid - total_cost
    return change

 Executed result: 4.0
[EXP] 673: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    good_days = 12
    bad_days = 8
    neutral_days = 10
    total_days = 30
    remaining_days = total_days - good_days - bad_days - neutral_days
    return remaining_days

 Executed result: 0
[EXP] 674: [success_rate]: True, [answer]: 9, [output]: def solution():
    Janey_books = 21
    Sally_books = Janey_books - 3
    Sally_books = (Sally_books) / 2
    return int(Sally_books)

 Executed result: 9
[EXP] 675: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    bamboo_height = 600
    initial_height = 20 * 12
    height_difference = bamboo_height - initial_height
    growth_rate = 30
    days = height_difference / growth_rate
    return round(days)

 Executed result: 12
[EXP] 676: [success_rate]: False, [answer]: 33, [output]: def solution():
    dogs_initial = 4
    dogs_more = 8
    toys_needed = dogs_more
    dogs_final = dogs_initial + dogs_more
    dogs_final_double = dogs_final * 2
    dogs_gone = 3
    toys_needed_total = dogs_final_double - dogs_gone
    return toys_needed_total + dogs_initial + 1 

 Executed result: 26
[EXP] 677: [success_rate]: True, [answer]: 240, [output]: def solution():
    total = 1200
    dylan_part = total * 2 / 5
    remaining = total - dylan_part
    frances_part = remaining * 2 / 3
    skyler_part = remaining - frances_part
    return skyler_part

 Executed result: 240.0
[EXP] 678: [success_rate]: True, [answer]: 36, [output]: 
def solution():
    signatures_carol = 20
    signatures_jennifer = 44
    total_signatures = signatures_carol + signatures_jennifer
    target_signatures = 100
    signatures_left_to_collect = target_signatures - total_signatures
    return signatures_left_to_collect

 Executed result: 36
[EXP] 679: [success_rate]: True, [answer]: 120, [output]: def solution():
    lorie_hourly_wage = 10
    karen_hourly_wage = 2 * lorie_hourly_wage
    karen_per_day = karen_hourly_wage * 3
    karen_in_two_days = karen_per_day * 2
    return karen_in_two_days

 Executed result: 120
[EXP] 680: [success_rate]: True, [answer]: 576, [output]: def solution():
    potatoes = 96
    hash_browns_per_potatoes = 36 / 6
    hash_browns = potatoes * hash_browns_per_potatoes
    return hash_browns

 Executed result: 576.0
[EXP] 681: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    max_load = 700
    adult_load = 80
    num_adults = 8
    load_with_adults = adult_load * num_adults
    excess_load = load_with_adults - max_load
    return excess_load

 Executed result: -60
[EXP] 682: [success_rate]: False, [answer]: 298, [output]: 
def solution():
    monster_cookies = 0
    max_cookies = monster_cookies + 12
    summer_cookies = max_cookies + 23
    katarina_cookies = 68
    total_cookies = monster_cookies + max_cookies + summer_cookies + katarina_cookies
    return total_cookies

 Executed result: 115
[EXP] 683: [success_rate]: True, [answer]: 80, [output]: def solution():
    final_length = 140
    extended_length = 0.5
    lace_trim = 20
    original_length = (final_length - lace_trim) / (1 + extended_length)
    result = original_length
    return result

 Executed result: 80.0
[EXP] 684: [success_rate]: False, [answer]: 50, [output]: def solution():
    turtle_mode = 60
    rabbit_mode = 40
    total = turtle_mode + turtle_mode - rabbit_mode
    return total

 Executed result: 80
[EXP] 685: [success_rate]: True, [answer]: 11, [output]: def solution():
    total_minutes = 30
    time_to_corner = 6
    time_to_fire_station = 13
    time_to_concern = time_to_corner + time_to_fire_station
    time_left = total_minutes - time_to_concern
    return time_left

 Executed result: 11
[EXP] 686: [success_rate]: True, [answer]: 14, [output]: def solution():
    apples = 1
    apple_cost = 4
    bananas = 2
    banana_cost = 2
    oranges = 2
    orange_cost = 3
    total_cost_apples = apples * apple_cost
    total_cost_bananas = bananas * banana_cost
    total_cost_oranges = oranges * orange_cost
    total_cost = total_cost_apples + total_cost_bananas + total_cost_oranges
    result = total_cost
    return result

 Executed result: 14
[EXP] 687: [success_rate]: True, [answer]: 80, [output]: def solution():
    greta_cookies = 30
    celinda_cookies = 2 * greta_cookies
    total_cookies = greta_cookies + celinda_cookies
    eaten_cookies = 10
    cookies_in_box = total_cookies - eaten_cookies
    return cookies_in_box

 Executed result: 80
[EXP] 688: [success_rate]: False, [answer]: 13, [output]: def solution():

 Executed result: None
[EXP] 689: [success_rate]: False, [answer]: 100, [output]: 
def solution():
    math_homework = 20
    reading_homework = 40
    history_homework = 20
    total_homework = math_homework + reading_homework + history_homework
    total_minutes_to_do_homework = total_homework * 60
    total_minutes_before_dinner = 180
    total_minutes_available = total_minutes_before_dinner - total_minutes_to_do_homework
    result = total_minutes_available
    return result

 Executed result: -4620
[EXP] 690: [success_rate]: False, [answer]: 7, [output]: 
def solution():
    lollipops = 5
    candies = 4
    lollipop_cost = 0.40
    candy_cost = 3.20
    total_lollipop_cost = lollipops * lollipop_cost
    total_candy_cost = candies * candy_cost
    total_cost = total_lollipop_cost + total_candy_cost
    total_lollipops = 10
    total_candies = 10
    total_lollipop_cost = total_lollipop_cost * total_lollipops
    total_candy_cost = total_candy_cost * total_candies
    total_cost = total_lollipop_cost + total_candy_cost
    result = total_cost
    return result

 Executed result: 148.0
[EXP] 691: [success_rate]: False, [answer]: 5760, [output]: 
def solution():
    monthly_savings_rong = 20
    monthly_savings_neil = 20 * (2/5 + 1)
    years = 10
    total_savings_rong = months = months * months_rong
    total_savings_neil = months * months_neil
    return total_savings_rong + total_savings_neil

 Executed result: None
[EXP] 692: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    money_initial = 125
    vaccine1 = 20
    vaccine2 = 20
    total_vaccines = vaccine1 + vaccine2
    heartworm_check = total_vaccines * (60 / 100)
    total_bill = total_vaccines + heartworm_check
    money_spent = total_bill
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 61.0
[EXP] 693: [success_rate]: True, [answer]: 32, [output]: 
def solution():
    apple_price = 0.5
    banana_price = apple_price * 2
    orange_price = banana_price * 3
    fruits_per_crate = {"bananas": 5, "apples": 12, "oranges": 7}
    crate_cost = 0
    for fruit, quantity in fruits_per_crate.items():
        if fruit == "bananas":
            crate_cost += quantity * banana_price
        elif fruit == "apples":
            crate_cost += quantity * apple_price
        elif fruit == "oranges":
            crate_cost += quantity * orange_price
    return crate_cost

 Executed result: 32.0
[EXP] 694: [success_rate]: True, [answer]: 68, [output]: def solution():
    red_squares = 14
    blue_squares = red_squares + 4
    green_squares = blue_squares + 6
    white_squares = green_squares - 12
    total_squares = red_squares + blue_squares + green_squares + white_squares
    square_footage = total_squares * 1 * 1
    return square_footage

 Executed result: 68
[EXP] 695: [success_rate]: False, [answer]: 9, [output]: def solution():
    # Define variables
    adults = 42
    babies = 15
    chairs_per_high_chair = 5
    high_chairs = 8
    
    # Calculate regular chairs
    regular_chairs = high_chairs * chairs_per_high_chair
    
    # Calculate total chairs needed
    total_chairs = adults + babies
    total_chairs_needed = regular_chairs + total_chairs
    
    # Calculate additional chairs needed
    additional_chairs = total_chairs_needed - regular_chairs
    
    return additional_chairs

 Executed result: 57
[EXP] 696: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    deer = 50
    percent_bucks = 0.5
    percent_8_points = 0.2
    total_bucks = deer * percent_bucks
    total_8_points = total_bucks * percent_8_points
    result = total_8_points
    return result

 Executed result: 5.0
[EXP] 697: [success_rate]: True, [answer]: 145, [output]: 
def solution():
    adam_points = 50
    betty_points = adam_points + (adam_points * 30) / 100
    tom_points = betty_points - 30
    marta_points = tom_points * 3
    total_points = adam_points + betty_points + marta_points + tom_points
    missing_points = 400 - total_points
    return missing_points

 Executed result: 145.0
[EXP] 698: [success_rate]: False, [answer]: 27, [output]: 
def solution():
    ol = 1  # The first set of children
    t1 = 3 * ol  # The grandchildren
    t2 = 3 * t1  # The great grand babies
    return t2

 Executed result: 9
[EXP] 699: [success_rate]: True, [answer]: 720, [output]: 
def solution():
    paycheck = 2400
    retirement = paycheck * 0.5
    car_payment = paycheck * 0.2
    money_spent = retirement + car_payment
    money_left = paycheck - money_spent
    return money_left

 Executed result: 720.0
[EXP] 700: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    pencils_initial = 20
    pencils_missing = 4
    pencils_left = pencils_initial - pencils_missing
    pairs = pencils_left // 2
    return pairs

 Executed result: 8
[EXP] 701: [success_rate]: True, [answer]: 135, [output]: def solution():
    fireworks_total = 15 * 20
    fireworks_in_city = int(0.4 * fireworks_total)
    fireworks_in_backyard = 3 * 5
    fireworks_seen = fireworks_in_city + fireworks_in_backyard
    result = fireworks_seen
    return result

 Executed result: 135
[EXP] 702: [success_rate]: False, [answer]: 200, [output]: def solution():
    num_people = 1 + 12 + 7
    num_drinks = num_people * 2
    num_snacks = num_people * 3
    cost_per_seat = num_drinks * 2 + num_snacks * 3
    total_cost = cost_per_seat * num_people
    return total_cost

 Executed result: 5200
[EXP] 703: [success_rate]: True, [answer]: 2800, [output]: 
def solution():
    gissela_capacity = 4000
    gordy_capacity = gissela_capacity + 800
    gary_capacity = 11600 - gissela_capacity - gordy_capacity
    result = gary_capacity
    return result

 Executed result: 2800
[EXP] 704: [success_rate]: False, [answer]: 50, [output]: def solution():
    males = 8
    females = 6
    female_dumplings = females * 3
    male_dumplings = female_dumplings + males - females
    total_dumplings = female_dumplings + male_dumplings
    return total_dumplings

 Executed result: 38
[EXP] 705: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_money = 100
    gerald_initial = (3/5) * total_money
    gerald_spent = 10
    gerald_left = gerald_initial - gerald_spent
    result = gerald_left
    return result

 Executed result: 50.0
[EXP] 706: [success_rate]: True, [answer]: 120, [output]: def solution():
    cat_speed = 15
    turtle_speed = cat_speed / 5
    total_time = 40
    distance_crawled = turtle_speed * total_time
    return distance_crawled

 Executed result: 120.0
[EXP] 707: [success_rate]: False, [answer]: 9, [output]: def solution():
    goal = 6300
    raised = 2100
    remaining = goal - raised
    hours_per_goal = remaining / (goal - raised)
    return hours_per_goal

 Executed result: 1.0
[EXP] 708: [success_rate]: False, [answer]: 8, [output]: def solution():
    total_water = 100
    water_used_by_city = 40
    water_used_industry = 80
    water_left = total_water - water_used_by_city 
    water_used_non_industry = water_used_by_city - water_used_industry
    proportion_non_industry = (water_used_non_industry / water_used_by_city) * 100
    return proportion_non_industry

 Executed result: -100.0
[EXP] 709: [success_rate]: True, [answer]: 168, [output]: 
def solution():
    days_per_week = 7
    weeks = 2
    tutoring_cost_per_day = 12
    days = days_per_week * weeks
    tutoring_cost = days * tutoring_cost_per_day
    result = tutoring_cost
    return result

 Executed result: 168
[EXP] 710: [success_rate]: True, [answer]: 3000, [output]: 
def solution():
    chocolate_quarts_per_hour = 100 / 2
    vanilla_quarts_per_hour = 50 / 4
    total_quarts_per_hour = chocolate_quarts_per_hour + vanilla_quarts_per_hour
    total_quarts_in_48_hours = total_quarts_per_hour * 48
    return total_quarts_in_48_hours

 Executed result: 3000.0
[EXP] 711: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    croissants = 5
    croissant_cost = 3.00
    cinnamon_rolls = 4
    cinnamon_rolls_cost = 2.50
    mini_quiches = 3
    mini_quiches_cost = 4.00
    blueberry_muffins = 13
    blueberry_muffins_cost = 1.00

    total_cost = (croissants * croissant_cost) + (cinnamon_rolls * cinnamon_rolls_cost) + (mini_quiches * mini_quiches_cost) + (blueberry_muffins * blueberry_muffins_cost)
    discount = total_cost * 0.10
    total_cost_with_discount = total_cost - discount

    return total_cost_with_discount

 Executed result: 45.0
[EXP] 712: [success_rate]: False, [answer]: 6, [output]: def solution():
    scoops_price = 1.50
    total_money = 6.00
    free_scoops = 1
    cost_per_positive_scoop = 1.50
    scoops_to_buy = 0
    for i in range(3):
        cost_for_two_scoops = scoops_price * 2
        if total_money >= cost_for_two_scoops:
            total_money -= cost_for_two_scoops
            scoops_to_buy += 2
        else:
            remaining_money_for_one_scoop = total_money
            scoops_to_buy += 1
            total_money = 0
    
    result = scoops_to_buy - free_scoops
    return result

 Executed result: 4
[EXP] 713: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    ginger_candy = 100
    amy_candy = 100
    days = 14
    daily_ginger_consumption = 4
    daily_amy_consumption = 3
    consumption_diff = daily_amy_consumption - daily_ginger_consumption
    
    ginger_candy_after_two_weeks = ginger_candy - (days * daily_ginger_consumption)
    amy_candy_after_two_weeks = amy_candy - (days * daily_amy_consumption)
    
    return amy_candy_after_two_weeks - ginger_candy_after_two_weeks

 Executed result: 14
[EXP] 714: [success_rate]: True, [answer]: 576, [output]: 
def solution():
    bathroom_sqft = 36
    fraction_bathroom = 2/3
    area_to_cover = bathroom_sqft * fraction_bathroom
    tiles_needed = area_to_cover * 24
    return tiles_needed

 Executed result: 576.0
[EXP] 715: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    cost_to_go = 20
    cost_per_pound = 1.5
    pounds_picked = 30
    cost_to_pick = cost_to_go + (cost_per_pound * pounds_picked)
    cost_to_buy = pounds_picked * 2.5
    saving = cost_to_buy - cost_to_pick
    return saving

 Executed result: 10.0
[EXP] 716: [success_rate]: False, [answer]: 385000, [output]: def solution():
    total_computers = 500
    initial_budget = 700
    price hike = 0.1
    new_price = 700 * (1 + hike)
    money_spent = new_price * total_computers
    result = money_spent
    return result

 Executed result: None
[EXP] 717: [success_rate]: True, [answer]: 770, [output]: def solution():
    eggs = 6
    cheese = 2
    ham = 2
    eggs_calories = eggs * 75
    cheese_calories = cheese * 120
    ham_calories = ham * 40
    total_calories = eggs_calories + cheese_calories + ham_calories
    result = total_calories
    return result

 Executed result: 770
[EXP] 718: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    pencil_cost = 0.5
    eraser_cost = 0.25
    num_pencils = 6
    num_erasers = 8
    total_cost_pencils = num_pencils * pencil_cost
    total_cost_erasers = num_erasers * eraser_cost
    total_cost = total_cost_pencils + total_cost_erasers
    total_paid = 10
    change = total_paid - total_cost
    return change

 Executed result: 5.0
[EXP] 719: [success_rate]: True, [answer]: 2, [output]: def solution():
    applicants = 100
    interviews = applicants * 0.3
    job_offers = interviews * 0.2
    accepted = job_offers * 0.3333
    result = round(accepted)
    return result

 Executed result: 2
[EXP] 720: [success_rate]: False, [answer]: 175, [output]: def solution():
    sacks_given_to_cousin_and_brother = 3 + 4
    sacks_initial = 20
    sacks_after_giving = sacks_initial - sacks_given_to_cousin_and_brother
    kilograms_left = sacks_after_giving * 25
    result = 3 * 25, 4 * 25
    return result

 Executed result: (75, 100)
[EXP] 721: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    cereal_bought_last_week = 4
    cereal_bought_this_week = 3 + 5
    boxes_difference = cereal_bought_this_week - cereal_bought_last_week
    return boxes_difference

 Executed result: 4
[EXP] 722: [success_rate]: False, [answer]: 2450, [output]: 
def solution():
    total_minutes = 5
    arms_raised_minutes = 2
    taps_per_minute_right_foot = 300
    taps_per_minute_left_foot = 250
    taps_per_minute_arm_raised = 200
    
    total_taps_right_foot = taps_per_minute_right_foot * total_minutes
    total_taps_left_foot = taps_per_minute_left_foot * total_minutes
    
    total_taps_arm_raised = taps_per_minute_arm_raised * arms_raised_minutes
    total_taps_rest = total_minutes - arms_raised_minutes
    
    total_taps_right_foot_arm_raised = taps_per_minute_right_foot * total_taps_rest
    total_taps_left_foot_arm_raised = taps_per_minute_left_foot * total_taps_rest
    
    total_taps = total_taps_right_foot + total_taps_left_foot + total_taps_right_foot_arm_raised + total_taps_left_foot_arm_raised
    
    result = total_taps
    return result

 Executed result: 4400
[EXP] 723: [success_rate]: False, [answer]: 255, [output]: 
def solution():
    cost_damage = 450
    cost_buckets = 3 * 25
    cost_fine = 120
    total_cost = cost_damage + cost_buckets + cost_fine
    savings = cost_damage - total_cost
    return savings

 Executed result: -195
[EXP] 724: [success_rate]: True, [answer]: 160, [output]: def solution():
    normal_chairs = 170
    baby_chairs = 23
    chairs_sent_normal = 20
    chairs_sent_baby = 13
    chairs_left_normal = normal_chairs - chairs_sent_normal
    chairs_left_baby = baby_chairs - chairs_sent_baby
    chairs_left = chairs_left_normal + chairs_left_baby
    return chairs_left

 Executed result: 160
[EXP] 725: [success_rate]: False, [answer]: 18, [output]: def solution():
    total_friends = 6
    pizzas = total_friends
    slices_per_pizza = 12
    slices_eaten = 2/3 * slices_per_pizza * (pizzas - 2)
    slices_eaten += 3/4 * slices_per_pizza * 2
    slices_left = slices_per_pizza * pizzas - slices_eaten
    return slices_left

 Executed result: 22.0
[EXP] 726: [success_rate]: True, [answer]: 25, [output]: def solution():
    cat_sauseduration = 30
    dog_sauseduration = 30 * (2/3)
    total_sauseduration = cat_sauseduration + dog_sauseduration
    average_sauseduration = total_sauseduration / 2
    return average_sauseduration

 Executed result: 25.0
[EXP] 727: [success_rate]: False, [answer]: 10, [output]: def solution():
    topher_shoe_length_feet = 8
    topher_shoe_length_inches = topher_shoe_length_feet * 12 + 4
    topher_shoe_length = 9 * (topher_shoe_length_inches - 10)
    bobbys_shoe_length = (topher_shoe_length - 9 * (topher_shoe_length_inches - 9)) // 9
    return bobbys_shoe_length

 Executed result: -1
[EXP] 728: [success_rate]: False, [answer]: 112, [output]: 
def solution():
    students_car = 64
    teacher_car = 32
    student_windows = students_car * 4
    teacher_windows = teacher_car * 2
    total_windows = student_windows + teacher_windows
    student_windows_smashed = total_windows * 1/4
    teacher_windows_smashed = total_windows * 3/4
    total_smashed = student_windows_smashed + teacher_windows_smashed
    return total_smashed

 Executed result: 320.0
[EXP] 729: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    light_blue_spools = 15
    dark_blue_spools = 45
    light_green_spools = 40
    dark_green_spools = 50
    total_spools = light_blue_spools + dark_blue_spools + light_green_spools + dark_green_spools
    blue_spools = light_blue_spools + dark_blue_spools
    percent_blue = (blue_spools / total_spools) * 100
    return percent_blue

 Executed result: 40.0
[EXP] 730: [success_rate]: True, [answer]: 1000, [output]: def solution():
    total_people = 5000
    people_voted_at_midday = int(total_people * 2/5)
    people_left = total_people - people_voted_at_midday
    people_voted_by_1600 = int(people_left * 2/3)
    people_left_unvoted = people_left - people_voted_by_1600
    return people_left_unvoted

 Executed result: 1000
[EXP] 731: [success_rate]: True, [answer]: 8, [output]: def solution():
    gum_per_day = 4
    total_days = 30
    gum_per_pack = 15
    packs_needed = (gum_per_day * total_days) / gum_per_pack
    return packs_needed

 Executed result: 8.0
[EXP] 732: [success_rate]: True, [answer]: 1, [output]: def solution():
    kids = 9
    adults = 6
    smores_per_kid = 2
    smores_per_adult = 1
    total_smores = (kids * smores_per_kid) + (adults * smores_per_adult)
    smores_per_sleeve = 8
    crunchy_boxes = total_smores / smores_per_sleeve
    return int(crunchy_boxes / 3) + 1

 Executed result: 2
[EXP] 733: [success_rate]: True, [answer]: 87, [output]: 
def solution():
    dora_age = 15
    father_age = 2 * dora_age + 8
    mother_age = father_age - 4
    total_age = dora_age + father_age + mother_age
    return total_age

 Executed result: 87
[EXP] 734: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    total_money = 20
    siblings = 3
    share_per_sibling = total_money / siblings
    result = share_per_sibling
    return result

 Executed result: 6.666666666666667
[EXP] 735: [success_rate]: False, [answer]: 17, [output]: def solution():
    math_science_weight = 2
    french_weight = 4
    english_weight = 3
    history_weight = english_weight * 2
    total_weight = math_science_weight + french_weight + english_weight + history_weight
    return total_weight

 Executed result: 15
[EXP] 736: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    votes_A = 20
    votes_B = votes_A * 1.5
    votes_total = 100
    votes_C = votes_total - votes_A - votes_B
    return votes_C

 Executed result: 50.0
[EXP] 737: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    boris_apples = 100
    beck_apples = boris_apples - 23
    boris_gives_beck = 10
    beck_apples_after = beck_apples + boris_gives_beck
    diff = boris_apples - beck_apples_after
    return diff

 Executed result: 13
[EXP] 738: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    water_initial = 32
    giant_cubes = 3
    medium_cubes = 7
    small_cubes = 8
    water_used = (giant_cubes * 4) + (medium_cubes * 2) + (small_cubes * 0.5)
    water_left = water_initial - water_used
    return water_left

 Executed result: 2.0
[EXP] 739: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    steven_books = 20 / 2
    alice_books = steven_books + 6
    clara_books = 20
    clara_alice_diff = clara_books - alice_books
    return clara_alice_diff

 Executed result: 4.0
[EXP] 740: [success_rate]: False, [answer]: 98, [output]: 
def solution():
    g jel = 5
    hjal = g jel - 2
    g_jars = 10
    h_jars = 16
    g_jar_cost = g jel * g_jars
    h_jar_cost = hjal * h_jars
    total_cost = g_jar_cost + h_jar_cost
    result = total_cost
    return result

 Executed result: None
[EXP] 741: [success_rate]: True, [answer]: 25, [output]: 
def solution():
    total_students = 50
    students_baking = 10
    students_basketball = 5
    students_music = students_basketball * 2
    students_video_games = total_students - (students_baking + students_basketball + students_music)
    result = students_video_games
    return result

 Executed result: 25
[EXP] 742: [success_rate]: True, [answer]: 28, [output]: 
def solution():
    initial_birds = 12
    birds_scared = int(initial_birds / 3)
    current_birds = initial_birds - birds_scared
    birds_joined = 20
    total_birds = current_birds + birds_joined
    return total_birds

 Executed result: 28
[EXP] 743: [success_rate]: True, [answer]: 24, [output]: 
def solution():
    total_students = 80
    class_students = total_students // 2
    girls = class_students * (40 / 100)
    boys = class_students - girls
    result = boys
    return result

 Executed result: 24.0
[EXP] 744: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    slices_initial = 2
    slices_added = 3
    slices_triples = slices_initial + slices_added
    slices_eaten = slices_triples * 3
    slices_remaining = slices_eaten - 2 - 5
    return slices_remaining

 Executed result: 8
[EXP] 745: [success_rate]: False, [answer]: 4, [output]: def solution():
    dogs = 8
    cats = 5
    birds = 3
    horses = 12
    total_animals = dogs + cats + birds + horses
    days = 7
    
    animals_per_day = total_animals // days
    animals_left = total_animals % days
    
    return animals_per_day, animals_left

 Executed result: (4, 0)
[EXP] 746: [success_rate]: True, [answer]: 1100, [output]: 
def solution():
    money_spent = 3 * 1800
    value_card_import1 = 4000
    value_card_import2 = 1000
    value_cards_average = 50
    money_earned = value_card_import1 + value_card_import2 + (value_cards_average * 30)
    money_profit = money_earned - money_spent
    return money_profit

 Executed result: 1100
[EXP] 747: [success_rate]: True, [answer]: 28, [output]: 
def solution():
    adults = 2
    children = 2
    first_amusement_fee = (26 * adults) + (12 * children)
    second_amusement_fee = (14 * adults) + (10 * children)
    savings = first_amusement_fee - second_amusement_fee
    return savings

 Executed result: 28
[EXP] 748: [success_rate]: True, [answer]: 350, [output]: 
def solution():
    old_price = 0.5
    new_price = 0.4
    old_cost = old_price * 500
    new_cost = new_price * 500
    cost_saved = old_cost - new_cost
    money_saved_in_a_day = old_cost - new_cost
    money_saved_in_a_week = money_saved_in_a_day * 7
    return money_saved_in_a_week

 Executed result: 350.0
[EXP] 749: [success_rate]: True, [answer]: 336, [output]: def solution():
    sean_marbles = 56
    cal_marbles = sean_marbles * 2
    carl_marbles = sean_marbles * 4
    combined_marbles = cal_marbles + carl_marbles
    return combined_marbles

 Executed result: 336
[EXP] 750: [success_rate]: True, [answer]: 3, [output]: def solution():
    total_students = 54
    target_groups = 12
    actual_groups = total_students // 6
    needed_groups = target_groups - actual_groups
    return needed_groups

 Executed result: 3
[EXP] 751: [success_rate]: False, [answer]: 4000, [output]: 
def solution():
    weekdays = 5
    weekend_days = 2
    month_days = weekdays * 4 + weekend_days * 4
    weekday_rental = 60
    weekend_rental = 100
    total_rental_weekly = weekdays * weekday_rental + weekend_days * weekend_rental
    total_rental_monthly = total_rental_weekly * 2
    total_rental_in_months = total_rental_monthly * 2
    result = total_rental_in_months
    return result

 Executed result: 2000
[EXP] 752: [success_rate]: True, [answer]: 43, [output]: 
def solution():
    bananas_initial = 48
    bananas_taken = int(bananas_initial / 2)
    bananas_added1 = 25
    bananas_taken2 = 12
    bananas_added2 = 6
    
    bananas_left1 = bananas_initial - bananas_taken
    bananas_left2 = bananas_left1 + bananas_added1 - bananas_taken2
    bananas_left3 = bananas_left2 + bananas_added2
    
    result = bananas_left3
    return result

 Executed result: 43
[EXP] 753: [success_rate]: False, [answer]: 240, [output]: 
def solution():
    total_rooms = 4
    total_cost = 100 * 12
    room_cost = total_cost / total_rooms
    result = room_cost
    return result

 Executed result: 300.0
[EXP] 754: [success_rate]: False, [answer]: 128, [output]: 
def solution():
    glasses_dozen = 8
    plates_dozen = 4
    glasses = glasses_dozen * 12
    plates = plates_dozen * 12
    broken_glasses = 10
    broken_plates = 6
    glasses_left = glasses - broken_glasses
    plates_left = plates - broken_plates
    return glasses_left, plates_left

 Executed result: (86, 42)
[EXP] 755: [success_rate]: False, [answer]: 89, [output]: 
def solution():
    small_stickers = 30
    large_stickers = 40

    # she trades 90% of her small stickers
    small_buttons_stickers_trade = small_stickers * 0.9
    small_buttons = small_buttons_stickers_trade
    remaining_small_stickers = small_stickers - small_buttons_stickers_trade

    # she gets buttons for large stickers
    # she trades 50% of large stickers for large buttons
    buttons_large_trade = large_stickers * 0.5
    remaining_large_stickers = large_stickers - buttons_large_trade

    # she trades the rest of large stickers for small stickers
    small_buttons_stickers = 0
    if remaining_large_stickers > 0:
        small_buttons_stickers = remaining_large_stickers * 3
        remaining_large_stickers = 0

    # total button
    total_buttons = small_buttons + buttons_large_trade + remaining_large_stickers * 3

    return total_buttons

 Executed result: 47.0
[EXP] 756: [success_rate]: True, [answer]: 7, [output]: def solution():
    monday_matches = 2
    friday_matches = 1
    saturday_matches = monday_matches * 2
    total_matches = monday_matches + friday_matches + saturday_matches
    result = total_matches
    return result

 Executed result: 7
[EXP] 757: [success_rate]: False, [answer]: 22, [output]: def solution():
    total_voters = 33
    against = x
    for = total_voters - against
    votes_in_favor = twice as many votes in favor as there were against
    result = votes_in_favor
    return result

 Executed result: None
[EXP] 758: [success_rate]: False, [answer]: 75, [output]: def solution():
    extra_small = 11
    small = 2 * extra_small
    medium = small + 4
    large = medium // 2
    extra_large = large + 6
    total = extra_small + small + medium + large + extra_large
    return total

 Executed result: 91
[EXP] 759: [success_rate]: False, [answer]: 133, [output]: def solution():
    price_initial = 140
    discount = 5
    discount Amount = (price_initial / 100) * discount
    price_after_discount = price_initial - discount_amount
    return price_after_discount

 Executed result: None
[EXP] 760: [success_rate]: True, [answer]: 60000, [output]: def solution():
    song_in_playlist = 300
    playlists = 20
    song_length = 10
    hours = song_in_playlist * playlists * song_length
    return hours

 Executed result: 60000
[EXP] 761: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    total_people = 50
    horse2_votes = 20 / 100 * total_people
    remaining_people = total_people - horse2_votes
    horse7_votes = 60 / 100 * remaining_people
    horse12_votes = remaining_people - horse7_votes
    return horse12_votes

 Executed result: 16.0
[EXP] 762: [success_rate]: False, [answer]: 27, [output]: 
def solution():
    H = 3
    p = 6
    p_girls = p
    puppies = p_girls * (H / 1)
    result = puppies
    return result

 Executed result: 18.0
[EXP] 763: [success_rate]: True, [answer]: 85, [output]: 
def solution():
    jayden_initial = 70
    ava_allowance = 90
    half_ava_allowance = ava_allowance / 2
    total_funds = jayden_initial + half_ava_allowance
    camera_cost = 200
    money_needed = camera_cost - total_funds
    return money_needed

 Executed result: 85.0
[EXP] 764: [success_rate]: False, [answer]: 100, [output]: 
def solution():
    total_cases = 250
    house1 = total_cases / 2
    house2 = 2 * house1
    house3 = round(house1)
    return house3

 Executed result: 125
[EXP] 765: [success_rate]: True, [answer]: 14, [output]: def solution():
    cucumbers = 3
    cucumber_cost = 2
    cucumber_spent = cucumbers * cucumber_cost

    tomatoes = 5
    tomato_cost = 1
    tomato_spent = tomatoes * tomato_cost

    lettuce = 1
    lettuce_cost = 3
    lettuce_spent = lettuce * lettuce_cost

    total_spent = cucumber_spent + tomato_spent + lettuce_spent
    return total_spent

 Executed result: 14
[EXP] 766: [success_rate]: True, [answer]: 490, [output]: 
def solution():
    bananas = 200
    pears = bananas * 1.45
    frts = bananas + pears
    result = frts
    return result

 Executed result: 490.0
[EXP] 767: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    money_initial = 80
    marissa_spent = 20
    money_left = money_initial - marissa_spent
    money_per_candy = 5
    marissa_bought = money_left // money_per_candy
    return marissa_bought

 Executed result: 12
[EXP] 768: [success_rate]: True, [answer]: 60, [output]: def solution():
    oranges_needed = 4 * 5
    cost_per_orange = 3
    total_cost = oranges_needed * cost_per_orange
    return total_cost

 Executed result: 60
[EXP] 769: [success_rate]: False, [answer]: 675, [output]: 
def solution():
    ebooks_ahmed = 0
    ebooks_ebra = 300
    ebooks_ebra_more = 150
    ebooks_ahmed = ebooks_ebra // 2
    ebooks_in_total = ebooks_ahmed + ebooks_ebra + ebooks_ebra_more
    return ebooks_in_total

 Executed result: 600
[EXP] 770: [success_rate]: True, [answer]: 110, [output]: def solution():
    salary_per_hour = 15
    salary_per_extra_class = 5
    total_classes_monday = 4
    total_hours_monday = 5
    total_classes_wednesday = 2
    total_hours_wednesday = 2
    total_classes = total_classes_monday + total_classes_wednesday
    total_hours = total_hours_monday + total_hours_wednesday
    salary_monday = total_hours_monday * salary_per_hour
    if total_classes_monday > 3:
        salary_monday += salary_per_extra_class
    salary_wednesday = total_hours_wednesday * salary_per_hour
    if total_classes_wednesday > 3:
        salary_wednesday += salary_per_extra_class
    total_salary = salary_monday + salary_wednesday
    return total_salary

 Executed result: 110
[EXP] 771: [success_rate]: True, [answer]: 4, [output]: def solution():
    vanilla_scent_sold = 5
    fruity_scent_sold = 2
    vanilla_sold_difference = vanilla_scent_sold - fruity_scent_sold
    result = vanilla_sold_difference
    return result

 Executed result: 3
[EXP] 772: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    total_income_desired = 135
    eggplants_income = 20 * 3
    corn_left = 25 - (total_income_desired - eggplants_income)
    corn_income_desired = total_income_desired - eggplants_income
    corn_price = corn_income_desired / corn_left
    return corn_price

 Executed result: -1.5
[EXP] 773: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    saturday = 7
    sunday = 5
    total_hours = saturday + sunday
    reading_time = 3
    video_game_time = round(total_hours - reading_time - 2) / (total_hours - reading_time)
    soccer_time = round(saturday - 2.0) + round(sunday - 2.0)
    soccer_percentage = (soccer_time / total_hours) * 100
    return soccer_percentage

 Executed result: 66.66666666666666
[EXP] 774: [success_rate]: True, [answer]: 10, [output]: def solution():
    pencils_initial = 50
    half_pencils = pencils_initial / 2
    remaining_pencils = pencils_initial - half_pencils
    third_pencils = remaining_pencils * 3 / 5
    pencils_remaining = remaining_pencils - third_pencils
    result = pencils_remaining
    return result

 Executed result: 10.0
[EXP] 775: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    distance_from_home = 150
    speed = 75
    travel_time_to_museum = distance_from_home / speed
    travel_time_back_home = distance_from_home / speed
    total_hours_at_museum = 6
    total_hours_gone = travel_time_to_museum + travel_time_back_home + total_hours_at_museum
    result = total_hours_gone
    return result

 Executed result: 10.0
[EXP] 776: [success_rate]: True, [answer]: 276, [output]: 
def solution():
    wheels_needed = (57 * 4) + (73 * 2)
    wheels_left = 650 - wheels_needed
    result = wheels_left
    return result

 Executed result: 276
[EXP] 777: [success_rate]: True, [answer]: 800, [output]: def solution():
    laptop_price = 1000
    discount = laptop_price * 0.2
    price_after_discount = laptop_price - discount
    result = price_after_discount
    return result

 Executed result: 800.0
[EXP] 778: [success_rate]: False, [answer]: 4400, [output]: def solution():
    total_movies = 600
    movies_in_series = int(total_movies / 3)
    remaining_movies = total_movies - movies_in_series
    series_cost = movies_in_series * 2
    older_movies = int(remaining_movies * 0.4)
    remaining_movies -= older_movies
    normal_movies = remaining_movies
    older_movie_cost = older_movies * 5
    series_cost = older_movie_cost + series_cost + normal_movies * 10
    return series_cost

 Executed result: 3600
[EXP] 779: [success_rate]: True, [answer]: 38, [output]: 
def solution():
    peach_rate = 2
    plum_rate = 1
    apricot_rate = 3
    peaches = 6
    plums = 8
    apricots = 6
    peaches_cost = peaches * peach_rate
    plums_cost = plums * plum_rate
    apricots_cost = apricots * apricot_rate
    total_cost = peaches_cost + plums_cost + apricots_cost
    return total_cost

 Executed result: 38
[EXP] 780: [success_rate]: True, [answer]: 255, [output]: 
def solution():
    driving_time = 6 - 1.5
    driving_speed = 50
    hiking_speed = (driving_speed / 2) - 5
    driving_distance = driving_time * driving_speed
    total_distance = driving_distance + (1.5 * hiking_speed)
    return total_distance

 Executed result: 255.0
[EXP] 781: [success_rate]: False, [answer]: 25, [output]: def solution():
    ennemies_a = 10
    ennemies_e = ennemies_a - 8
    berries_a = 5
    berries_e = berries_a
    timer_a = 30
    timer_e = timer_a - 4
    ennemies_points_a = ennemies_a * 10
    ennemies_points_e = ennemies_e * 10
    berries_points_a = berries_a * 5
    berries_points_e = berries_e * 5
    timer_points_a = timer_a
    timer_points_e = timer_e
    score_a = ennemies_points_a + berries_points_a + timer_points_a
    score_e = ennemies_points_e + berries_points_e + timer_points_e
    difference = score_a - score_e
    return difference

 Executed result: 84
[EXP] 782: [success_rate]: True, [answer]: 17, [output]: 
def solution():
    total_cost = 64
    cost_of_two_pizzas = 30
    cost_of_one_pizza = (total_cost - cost_of_two_pizzas) / 2
    return cost_of_one_pizza

 Executed result: 17.0
[EXP] 783: [success_rate]: False, [answer]: 54, [output]: def solution():
    days = 7
    days_not_extra = 5
    days_extra = 2
    rides_per_day = 2
    rides_per_extra_day = 2 * rides_per_day

    normal_rides = days_not_extra * rides_per_day
    extra_rides = days_extra * rides_per_extra_day
    total_ride = normal_rides + extra_rides

    return total_ride

 Executed result: 18
[EXP] 784: [success_rate]: False, [answer]: 4, [output]: def solution():
    initial_fish = 7
    white_fish = 4
    acquired_fish = initial_fish
    orange_fish = white_fish
    total_fish = acquired_fish
    orange_fish = total_fish / 2
    
    acquired_white_fish = orange_fish - white_fish
    result = acquired_white_fish
    return result

 Executed result: -0.5
[EXP] 785: [success_rate]: False, [answer]: 15, [output]: def solution():
    distance = 5
    days = 5
    mpg = 10
    gas_cost = 3
    gas_consumed = distance * days / mpg
    money_consumed = gas_consumed * gas_cost
    result = money_consumed
    return result

 Executed result: 7.5
[EXP] 786: [success_rate]: True, [answer]: 155, [output]: 
def solution():
    twenty_dollars = 10
    quarters = 140
    twenty_dollar_to_quarters = 4
    twenty_spent = twenty_dollars - (twenty_dollars * 2/5)
    quarters_spent = quarters
    total_money = twenty_spent * 20 + quarters_spent * 0.25
    result = total_money
    return result

 Executed result: 155.0
[EXP] 787: [success_rate]: True, [answer]: 142, [output]: def solution():
    tomato_plants = 5
    tomatoes_per_plant = 22
    tomato_yield = tomato_plants * tomatoes_per_plant

    eggplant_plants = 8
    eggplants_per_plant = 4
    eggplant_yield = eggplant_plants * eggplants_per_plant

    total_yield = tomato_yield + eggplant_yield
    return total_yield

 Executed result: 142
[EXP] 788: [success_rate]: True, [answer]: 25, [output]: 
def solution():
    total_tvs = 40
    smart_tvs = total_tvs // 4
    analog_tvs = total_tvs // 8
    oled_tvs = total_tvs - smart_tvs - analog_tvs
    result = oled_tvs
    return result

 Executed result: 25
[EXP] 789: [success_rate]: False, [answer]: 100, [output]: def solution():
    total_cost = 300
    john_money = 50
    school_help = total_cost / 2
    money_missing = total_cost - school_help
    john_padding = john_money - school_help
    money_missing = money_missing - john_padding
    result = money_missing
    return result

 Executed result: 250.0
[EXP] 790: [success_rate]: False, [answer]: 4, [output]: def solution():
    initial_temperature = 45
    temperature_difference = 33
    desired_temperature = 32
    temperature_spent = initial_temperature + temperature_difference
    logs_needed = (temperature_spent - desired_temperature) / 5
    return int(logs_needed)

 Executed result: 9
[EXP] 791: [success_rate]: False, [answer]: 108, [output]: 
def solution():
    group_members = 90
    group_num = group_members // 9
    shells_per_person = 2
    shells_from_3_groups = shells_per_person * (3 * group_num // 5)
    return shells_from_3_groups

 Executed result: 12
[EXP] 792: [success_rate]: True, [answer]: 100, [output]: def solution():
    people_total = 172
    people_off = 47
    people_on = 13
    people_off_two = 38
    people_left = people_total - people_off
    people_left = people_left + people_on
    people_left = people_left - people_off_two
    result = people_left
    return result

 Executed result: 100
[EXP] 793: [success_rate]: True, [answer]: 75, [output]: 
def solution():
    bottle_caps_per_day = 10
    bottle_cap_worth = 0.25
    days_in_month = 30
    money_made = bottle_caps_per_day * bottle_cap_worth * days_in_month
    return money_made

 Executed result: 75.0
[EXP] 794: [success_rate]: True, [answer]: 250, [output]: def solution():
    hourly_rate = 20
    total_hours = 8
    overtime_hours = 11 - total_hours
    overtime_rate = hourly_rate * 1.5
    total_paid = (total_hours * hourly_rate) + (overtime_hours * overtime_rate)
    return total_paid

 Executed result: 250.0
[EXP] 795: [success_rate]: True, [answer]: 32, [output]: def solution():
    female_lions = 12
    male_lions = 12 // 2
    lion_cubs = 14
    total_lions = female_lions + male_lions + lion_cubs
    return total_lions

 Executed result: 32
[EXP] 796: [success_rate]: True, [answer]: 20, [output]: def solution():
    jeans_price = 40
    discount = jeans_price * 0.25
    discounted_price = jeans_price - discount
    money_paid = 50
    money_left = money_paid - discounted_price
    result = money_left
    return result

 Executed result: 20.0
[EXP] 797: [success_rate]: False, [answer]: 2880000, [output]: 
def solution():
    total_employees = 200
    new_employees = 20
    salary_per_employee = 4000

    total_employees_after_1_month = total_employees + new_employees
    total_employees_after_2_months = total_employees_after_1_month + new_employees
    total_employees_after_3_months = total_employees_after_2_months + new_employees

    total_amount_spent_after_3_months = total_employees_after_3_months * salary_per_employee
    return total_amount_spent_after_3_months

 Executed result: 1040000
[EXP] 798: [success_rate]: True, [answer]: 540, [output]: def solution():
    deck_the_halls_length = 150
    jingle_bells_length = 240
    total_length = deck_the_halls_length * 2 + jingle_bells_length
    return total_length

 Executed result: 540
[EXP] 799: [success_rate]: False, [answer]: 20, [output]: def solution():
    billy_paid_per_hour_initial = 10
    billy_paid_per_hour_after_first_raise = billy_paid_per_hour_initial + 0.5
    billy_paid_per_hour_after_second_raise = billy_paid_per_hour_after_first_raise + 1
    billy_total_earned = 20 * (billy_paid_per_hour_initial + billy_paid_per_hour_after_first_raise + billy_paid_per_hour_after_second_raise)
    sally_paid_per_hour_initial = billy_paid_per_hour_initial + 0.5
    sally_total_earned = 20 * sally_paid_per_hour_initial
    billy_earned_more_than_sally = billy_total_earned - sally_total_earned
    return billy_earned_more_than_sally

 Executed result: 430.0
[EXP] 800: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    bagels_cost = 2
    loaves_cost = 3
    bagels = 1
    bread_cost = 2
    bread = 3
    
    total_cost_bagels = bagels * bagels_cost
    total_cost_bread = loaves_cost * bread_cost
    
    return total_cost_bread - total_cost_bagels

 Executed result: 4
[EXP] 801: [success_rate]: True, [answer]: 428, [output]: 
def solution():
    pierson_score = 278
    half_pierson = pierson_score // 2
    nikita_score = half_pierson + 11
    total_score = pierson_score + nikita_score
    return total_score

 Executed result: 428
[EXP] 802: [success_rate]: True, [answer]: 1240, [output]: def solution():
    classes = 40
    students_per_class = 25
    teachers_per_class = 3
    total_students = classes * students_per_class
    total_teachers = classes * teachers_per_class
    total_trees = total_students + (total_teachers * 2)
    return total_trees

 Executed result: 1240
[EXP] 803: [success_rate]: False, [answer]: 6, [output]: def solution():
    stuffed_puppies = 3
    stuffed_koalas = 5
    stuffed_zebras = 2
    stuffed_frogs = 4
    total_stuffed_animals = stuffed_puppies + stuffed_koalas + stuffed_zebras + stuffed_frogs
    desired_goats = (total_stuffed_animals * 30) // 100
    return desired_goats

 Executed result: 4
[EXP] 804: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    hours_per_day = 0.5
    days_per_week = 7
    weeks = 2
    hours_per_day_initial = hours_per_day * days_per_week * weeks
    hours_per_day_later = 2
    days_per_week_later = 7
    weeks_later = 1
    hours_per_day_later_total = hours_per_day_later * days_per_week_later * weeks_later
    total_hours_played = hours_per_day_initial + hours_per_day_later_total
    required_hours = 30
    hours_needed = required_hours - total_hours_played
    result = hours_needed
    return result

 Executed result: 9.0
[EXP] 805: [success_rate]: True, [answer]: 20, [output]: def solution():
    speed1 = 60
    speed2 = 70
    time = 2
    distance1 = speed1 * time
    distance2 = speed2 * time
    distance_separating = distance2 - distance1
    return distance_separating

 Executed result: 20
[EXP] 806: [success_rate]: True, [answer]: 1170, [output]: 
def solution():
    diamond_cost = 600
    gold_cost = 300
    premium = 0.3
    total_cost = diamond_cost + gold_cost
    total_paid = total_cost + (total_cost * premium)
    return total_paid

 Executed result: 1170.0
[EXP] 807: [success_rate]: False, [answer]: 70, [output]: 
def solution():
    third_graders-passed = 340
    third_graders-total = 500
    fourth_graders-passed = 40
    fourth_graders-total = 100
    fifth_graders-passed = (2 * fourth_graders-passed)
    fifth_graders-total = 400
    total_students = third_graders-total + fourth_graders-total + fifth_graders-total
    total_passed = third_graders-passed + fourth_graders-passed + fifth_graders-passed
    overall_pass_rate = (total_passed / total_students) * 100
    return overall_pass_rate

 Executed result: None
[EXP] 808: [success_rate]: True, [answer]: 4, [output]: def solution():
    glass_chips_per_inch = 12
    bags_of_glass_chips = 2
    glass_chips_per_bag = 72
    height = 3
    total_glass_chips = glass_chips_per_bag * bags_of_glass_chips
    total_inchesPossible = total_glass_chips // glass_chips_per_inch
    total_inchesPossible = min(total_inchesPossible, height)
    result = total_inchesPossible
    return result

 Executed result: 3
[EXP] 809: [success_rate]: False, [answer]: 12, [output]: def solution():
    tea_initial = ? # fill in the unknown value Desmond
    tea_consumed_quart = 4 * 1.5 + 16 * 2 
    tea_consumed_gallon = tea_consumed_quart // 4  # convert quarts to gallons
    tea_left = ?  # final value of tea_left
    return tea_left

 Executed result: None
[EXP] 810: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    initial_candies = 100
    candies_sold = 150
    additional_candies = 100
    total_candies = initial_candies + additional_candies
    candies leftover = total_candies - candies_sold
    result = leftover
    return result

 Executed result: None
[EXP] 811: [success_rate]: False, [answer]: 310, [output]: 
def solution():
    students_start = 10
    months = 5
    days_in_a_month = 1
    additional_students = (2 ** months - 1) * days_in_a_month - 1
    return additional_students

 Executed result: 30
[EXP] 812: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    money_made = 105
    cost_per_branch = 0.25
    money_per_day = money_made / 7
    branches_per_day = money_per_day / cost_per_branch
    return branches_per_day

 Executed result: 60.0
[EXP] 813: [success_rate]: False, [answer]: 79, [output]: 
def solution():
    flower1_petals = 3 * 5
    flower2_petals = 4 * 6
    flower3_petals = 5 * 4
    flower4_petals = 6 * 7
    total_petals = flower1_petals + flower2_petals + flower3_petals + flower4_petals
    petals_left = total_petals - 4
    return petals_left

 Executed result: 97
[EXP] 814: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    marshmallows = 35
    marhs = 18
    marhs_left = marshmallows - marhs
    sMORES_left = marhs_left // 2
    return sMORES_left

 Executed result: 8
[EXP] 815: [success_rate]: False, [answer]: 11, [output]: 
def solution():
    hours = 4
    quarters_per_hour = 30
    money_per_player = 0.25
    friend1_time = 20
    friend2_time = 20
    Jack_time = 20
    better_friend_time = 30

    total_minutes = hours * 60

    Jack_minutes = total_minutes
    friend1_minutes = total_minutes
    friend2_minutes = total_minutes
    better_friend_minutes = total_minutes

    Jack_time = min(Jack_minutes, Jack_time)
    friend1_time = min(friend1_minutes, friend1_time)
    friend2_time = min(friend2_minutes, friend2_time)
    better_friend_time = min(better_friend_minutes, better_friend_time)
    
    Jack_quarters = int(Jack_time / 20) 
    friend1_quarters = int(friend1_time / 20)
    friend2_quarters = int(friend2_time / 20)
    better_friend_quarters = int(better_friend_time / 20)

    total_quarters = Jack_quarters + friend1_quarters + friend2_quarters + better_friend_quarters
    total_cost = total_quarters * money_per_player

    return total_cost

 Executed result: 1.0
[EXP] 816: [success_rate]: False, [answer]: 4, [output]: def solution():
    zest = sugar = salt = zest
    oil = 2 * salt
    sugar ounce = zest ounce = 10
    return oil

 Executed result: None
[EXP] 817: [success_rate]: True, [answer]: 4500, [output]: def solution():
    goats = 3
    goats_cost = 500
    cows = 2
    cows_cost = 1500
    money_spent = (goats * goats_cost) + (cows * cows_cost)
    result = money_spent
    return result

 Executed result: 4500
[EXP] 818: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    total_cupcakes_needed = 63
    cupcakes_already_have = 8 + 40
    cupcakes_to_buy = total_cupcakes_needed - cupcakes_already_have
    return cupcakes_to_buy

 Executed result: 15
[EXP] 819: [success_rate]: True, [answer]: 16, [output]: def solution():
    joe_cars = 2 * 20
    joe_sold = joe_cars * 0.2
    joe_gave = joe_sold * 2
    joe_left = joe_cars - joe_sold - joe_gave
    return joe_left

 Executed result: 16.0
[EXP] 820: [success_rate]: False, [answer]: 6,250, [output]: def solution():
    total_donation = 175000
    organization_donation = 50000
    student_donation = total_donation - organization_donation
    students = 20
    donation_per_student = student_donation / students
    return donation_per_student

 Executed result: 6250.0
[EXP] 821: [success_rate]: True, [answer]: 720, [output]: 
def solution():
    hours_day1 = 8
    hours_day2 = hours_day1 / 2
    total_hours = hours_day1 + hours_day2
    total_minutes = total_hours * 60
    return total_minutes

 Executed result: 720.0
[EXP] 822: [success_rate]: False, [answer]: 35, [output]: 
def solution():
    cars_initial = 50
    cars_driven_out = cars_initial // 2
    cars_left = cars_initial - cars_driven_out
    cars_counted = 20
    total_cars = cars_counted
    return total_cars 

 Executed result: 20
[EXP] 823: [success_rate]: True, [answer]: 1260, [output]: def solution():
    daily_cycles = 30
    daily_tasks = 5
    task_payment = 1.2
    daily_earnings = daily_cycles * daily_tasks * task_payment
    week_earnings = daily_earnings * 7
    result = week_earnings
    return result

 Executed result: 1260.0
[EXP] 824: [success_rate]: False, [answer]: 14, [output]: def solution():
    sasha_score_game1 = 14
    julie_score_game1 = sasha_score_game1 - 4
    sasha_score_game2 = julie_score_game1 - 6
    total_sasha_score = sasha_score_game1 + sasha_score_game2
    return total_sasha_score

 Executed result: 18
[EXP] 825: [success_rate]: True, [answer]: 52, [output]: def solution():
    cat_food_packages = 8
    dog_food_packages = 6
    tins_per_cat_food_package = 11
    tins_per_dog_food_package = 6
    total_tins_of_cat_food = cat_food_packages * tins_per_cat_food_package
    total_tins_of_dog_food = dog_food_packages * tins_per_dog_food_package
    difference = total_tins_of_cat_food - total_tins_of_dog_food
    return difference

 Executed result: 52
[EXP] 826: [success_rate]: False, [answer]: 153, [output]: 
def solution():
    total_cards = 341
    smendrick_cards = (total_cards - 12) / 4
    becca_cards = smendrick_cards + 12
    return int(becca_cards)

 Executed result: 94
[EXP] 827: [success_rate]: True, [answer]: 27, [output]: 
def solution():
    green_eggs = 5
    blue_eggs = 5 * 2
    pink_eggs = blue_eggs - 1
    yellow_eggs = pink_eggs // 3
    total_eggs = green_eggs + blue_eggs + pink_eggs + yellow_eggs
    return total_eggs

 Executed result: 27
[EXP] 828: [success_rate]: True, [answer]: 11, [output]: 
def solution():
    book_weight = 4
    book_cost = 32
    transportation_cost = book_weight * 0.35 + 20 * 0.08
    refund = book_cost * 0.75
    loss = book_cost - refund + transportation_cost
    return loss

 Executed result: 11.0
[EXP] 829: [success_rate]: True, [answer]: 60, [output]: def solution():
    money_initial = 40
    father_gift = 100
    total_money = money_initial + father_gift
    jeans_cost = 2 * 30
    bag_cost = 20
    money_spent = jeans_cost + bag_cost
    money_left = total_money - money_spent
    result = money_left
    return result

 Executed result: 60
[EXP] 830: [success_rate]: False, [answer]: 14,000, [output]: 
def solution():
    total_bars = 50000
    first_week_bars = 8000
    second_week_bars = 8000 / 2
    third_week_bars = first_week_bars * 3
    total_weeks_bars = first_week_bars + second_week_bars + third_week_bars
    fourth_week_bars = total_bars - total_weeks_bars
    return fourth_week_bars

 Executed result: 14000.0
[EXP] 831: [success_rate]: True, [answer]: 1128, [output]: def solution():
    videos_per_week = 18
    time_per_video = 4
    song_time_per_week = 2 * 60
    makeup_time_per_day = 15
    makeup_time_per_week = makeup_time_per_day * 6
    time_per_week = (videos_per_week * time_per_video) + song_time_per_week + makeup_time_per_week
    time_per_month = time_per_week * 4
    return time_per_month

 Executed result: 1128
[EXP] 832: [success_rate]: False, [answer]: 324, [output]: def solution():
    cost_installation = 129
    cost_per_extra_item = 15
    mirrors = 6
    chandeliers = 2
    pictures = 20
    total_items = mirrors + chandeliers + pictures
    extra_items_installation_cost = total_items * cost_per_extra_item
    total_cost = cost_installation + extra_items_installation_cost
    return total_cost

 Executed result: 549
[EXP] 833: [success_rate]: False, [answer]: 42, [output]: def solution():
    e = 20
    a = e + 10
    r = e + (e * 40) / 100 + a
    return r

 Executed result: 58.0
[EXP] 834: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    pompei_capacity = 1
    saskay_capacity = pompei_capacity * 12
    kagiyami_capacity = saskay_capacity * 4
    naruto_capacity = kagiyami_capacity * 10
    result = naruto_capacity / 12  # convert inches to feet
    return result

 Executed result: 40.0
[EXP] 835: [success_rate]: True, [answer]: 80, [output]: 
def solution():
    rate = 8
    hours = 4
    miles_1 = rate * hours
    hours_2 = 6
    miles_2 = rate * hours_2
    total_miles = miles_1 + miles_2
    result = total_miles
    return result

 Executed result: 80
[EXP] 836: [success_rate]: False, [answer]: 48, [output]: 
def solution():
    kangaroo_hours = 18
    kangaroo_speed = 3
    turtle_speed = kangaroo_speed / 2
    turtles = 4
    hours = kangaroo_hours * kangaroo_speed / (turtles * turtle_speed)
    return hours

 Executed result: 9.0
[EXP] 837: [success_rate]: True, [answer]: 140, [output]: def solution():
    kora = 20
    rory = kora + 20
    jada = rory * 2
    
    total_dishes = kora + rory + jada
    return total_dishes

 Executed result: 140
[EXP] 838: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    erika_savings = 0
    laptop_cost = 600
    discount = 200
    earnings = 150
    mom_help = 80
    total_money = erika_savings + earnings + mom_help
    laptop_price_after_discount = laptop_cost - discount
    money_needed = laptop_price_after_discount - 50
    return total_money - money_needed

 Executed result: -120
[EXP] 839: [success_rate]: True, [answer]: 15, [output]: def solution():
    large_apples = 3
    small_apples = 5
    large_slices_per_apple = 5
    small_slices_per_apple = 3
    total_slices = large_apples * large_slices_per_apple + small_apples * small_slices_per_apple
    slices_eaten = 15
    slices_left = total_slices - slices_eaten
    return slices_left

 Executed result: 15
[EXP] 840: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    milk_per_day = 25
    milk_per_cow = 5
    cows = 3
    milk_left = milk_per_day - milk_per_cow * cows
    cows_needed = milk_left // milk_per_cow
    return cows_needed

 Executed result: 2
[EXP] 841: [success_rate]: False, [answer]: 16, [output]: def solution():
    stick1 = 12 - (12 / 6)
    stick2 = 12 - (12 * 2 / 3)
    stick3 = 12 - (12 / 2)
    total_length = stick1 + stick2 + stick3
    return round(total_length, 2)

 Executed result: 20.0
[EXP] 842: [success_rate]: True, [answer]: 5600, [output]: 
def solution():
    money_initial = 5000
    gift = 200
    total_money = money_initial + gift
    car_cost = 10000
    phone_cost = 800
    total_cost = car_cost + phone_cost
    money_needed = total_cost - total_money
    return money_needed

 Executed result: 5600
[EXP] 843: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    purchase_price = 70
    bills = 4
    bills_value = 20
    change = 4 * 20
    change = 20 * (bills * 1.0) - purchase_price
    result = change
    return result

 Executed result: 10.0
[EXP] 844: [success_rate]: True, [answer]: 19, [output]: 
def solution():
    money_initial = 2 * 20
    squirt_guns = 6
    squirt_gun_cost = 2
    water_balloon_packs = 3
    water_balloon_cost = 3
    money_spent_squirt_guns = squirt_guns * squirt_gun_cost
    money_spent_water_balloon_packs = water_balloon_packs * water_balloon_cost
    money_spent = money_spent_squirt_guns + money_spent_water_balloon_packs
    money_left = money_initial - money_spent
    return money_left

 Executed result: 19
[EXP] 845: [success_rate]: False, [answer]: 180, [output]: 
def solution():
    jack_dishes = 60
    socks_jack = jack_dishes // 2
    peter_dishes = jack_dishes
    peter_socks = socks_jack * 2
    total_socks = socks_jack + peter_socks
    total_dishes = jack_dishes + peter_dishes
    result = [total_socks, total_dishes]
    return result

 Executed result: None
[EXP] 846: [success_rate]: True, [answer]: 12, [output]: def solution():
    total_students = 20
    good_at_math_only = 5
    good_at_english_only = 8
    good_at_both = total_students - good_at_math_only - good_at_english_only
    students_good_at_math = good_at_math_only + good_at_both
    result = students_good_at_math
    return result

 Executed result: 12
[EXP] 847: [success_rate]: False, [answer]: 11, [output]: 
def solution():
    concert_length = 120  # 2 hours in minutes
    stage_time_per_group = 2 + 6 + 2 = 10  # 2 minutes to get on stage, 6 minutes to perform, 2 minutes to exit
    groups_per_intermission = concert_length - 10 / stage_time_per_group
    return groups_per_intermission

 Executed result: None
[EXP] 848: [success_rate]: True, [answer]: 975, [output]: def solution():
    principal = 300
    rate = 0.75
    time = 3
    interest = principal * rate * time
    total = principal + interest
    return total

 Executed result: 975.0
[EXP] 849: [success_rate]: True, [answer]: 10, [output]: def solution():
    white_shirts = 40
    floral_shirts = 50
    white_shirts_no_collars = white_shirts // 2
    floral_shirts_no_buttons = floral_shirts - 20
    result = floral_shirts_no_buttons - white_shirts_no_collars
    return result

 Executed result: 10
[EXP] 850: [success_rate]: True, [answer]: 75, [output]: def solution():
    eggs = 900
    tray_capacity = 30
    trays = eggs // tray_capacity
    money_earned = trays * 2.5
    return money_earned

 Executed result: 75.0
[EXP] 851: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    goats_x = 55
    goats_y = 45
    goats_sold_x = 10
    goats_sold_y = goats_sold_x * 2
    goats_left_x = goats_x - goats_sold_x
    goats_left_y = goats_y - goats_sold_y
    total_goats = goats_left_x + goats_left_y
    return total_goats

 Executed result: 70
[EXP] 852: [success_rate]: True, [answer]: 110, [output]: def solution():
    total_spent = 2640
    total_pairs = 2 * 12
    average_cost = total_spent / total_pairs
    return average_cost

 Executed result: 110.0
[EXP] 853: [success_rate]: True, [answer]: 123, [output]: def solution():
    green_food_cost = 25
    red_food_cost = 18
    num_green_baskets = 3
    num_red_baskets = 3
    total_green_cost = num_green_baskets * green_food_cost
    total_red_cost = num_red_baskets * red_food_cost
    discount = 2 * num_red_baskets
    total_cost = total_green_cost + total_red_cost - discount
    result = total_cost
    return result

 Executed result: 123
[EXP] 854: [success_rate]: False, [answer]: 15, [output]: def solution():
    rooms = 90
    half_rooms = rooms // 2
    time_per_room = 20
    time_needed = half_rooms * time_per_room
    hours_needed = time_needed // 60
    minutes_needed = time_needed % 60
    return hours_needed, minutes_needed

 Executed result: (15, 0)
[EXP] 855: [success_rate]: True, [answer]: 144, [output]: def solution():
    home_year1 = 12
    home_year2 = home_year1 * 3
    home_year3 = home_year1 + home_year2
    home_year3_doubled = home_year3 * 2
    total_homes = home_year1 + home_year2 + home_year3_doubled
    return total_homes

 Executed result: 144
[EXP] 856: [success_rate]: False, [answer]: 13, [output]: def solution():
    b = 0
    while True:
        s = b - 3
        m = 3 * b - 1
        if s > 10:
            break
        if m > s and m > b:
            if s + b + m == 87:
                return s + 3

 Executed result: None
[EXP] 857: [success_rate]: False, [answer]: 7, [output]: 
def solution():
    students = 27
    glue_sticks_per_student = 2
    glue_sticks_per_pack = 8
    glue_sticks_needed = students * glue_sticks_per_student
    packs_needed = glue_sticks_needed // glue_sticks_per_pack
    extra_glue_sticks = glue_sticks_needed % glue_sticks_per_pack
    return packs_needed, extra_glue_sticks

 Executed result: (6, 6)
[EXP] 858: [success_rate]: True, [answer]: 14000, [output]: 
def solution():
    water_initial = 4000
    rain = water_initial * 2
    rain_hiked = 6000
    total_water = rain + rain_hiked
    return total_water

 Executed result: 14000
[EXP] 859: [success_rate]: True, [answer]: 3430, [output]: 
def solution():
    infected = 10
    new_infected = 6
    days = 3
    for _ in range(days):
        infected += infected * new_infected
    return infected

 Executed result: 3430
[EXP] 860: [success_rate]: True, [answer]: 1520, [output]: 
def solution():
    rafaela_tips = 40 * 20
    julieta_tips = 0.9 * rafaela_tips
    total_tips = rafaela_tips + julieta_tips
    return total_tips

 Executed result: 1520.0
[EXP] 861: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    oranges_initial = 12
    daughters_oranges = 2
    boy_oranges = 3
    oranges_given = daughters_oranges * 3 + boy_oranges
    oranges_left = oranges_initial - oranges_given
    result = oranges_left
    return result

 Executed result: 3
[EXP] 862: [success_rate]: False, [answer]: 30, [output]: 
def solution():
    claire_badges = 12
    amber_badges = 12 * 2
    wendy_badges = 12 * 3
    badges_diff = wendy_badges - amber_badges
    result = badges_diff
    return result

 Executed result: 12
[EXP] 863: [success_rate]: False, [answer]: 40, [output]: 
def solution():
    baking_time = 5
    bread_slices_per_hour = 2 * 8
    slices_sold_per_hour = bread_slices_per_hour * 50 / 100
    total_slices = baking_time * bread_slices_per_hour
    total_amount = total_slices * slices_sold_per_hour
    return total_amount

 Executed result: 640.0
[EXP] 864: [success_rate]: False, [answer]: 110, [output]: def solution():
    coins_initial = ?
    gold = 70
    silver = gold - 30
    total = coins_initial + gold + silver
    return total

 Executed result: None
[EXP] 865: [success_rate]: True, [answer]: 80, [output]: def solution():
    burritos_ordered = 600
    students = 50
    burritos_per_student = 10
    burritos_george_eaten = 20
    total_burritos_given = students * burritos_per_student
    total_burritos_consumed = total_burritos_given + burritos_george_eaten
    result = burritos_ordered - total_burritos_consumed
    return result

 Executed result: 80
[EXP] 866: [success_rate]: True, [answer]: 23, [output]: 
def solution():
    red_cars = 12
    green_cars = red_cars - 2
    blue_cars = green_cars * 3
    total_cars = red_cars + green_cars + blue_cars
    yellow_cars = 75 - total_cars
    return yellow_cars

 Executed result: 23
[EXP] 867: [success_rate]: False, [answer]: 28, [output]: 
def solution():
    total_books = 85
    anne_books = x
    anne_books_sofie_diff = 25
    sofie_books = anne_books + anne_books_sofie_diff
    fawn_books_hard_coding = (total_books - (sofie_books + sofie_books)) // 2 + (total_books - (sofie_books + anne_books))
    return fawn_books_hard_coding

 Executed result: None
[EXP] 868: [success_rate]: True, [answer]: 7, [output]: python
def solution():
    potatoes = 5
    sweet_potatoes = 2 * potatoes
    carrots = sweet_potatoes - 3
    result = carrots
    return result

 Executed result: 7
[EXP] 869: [success_rate]: True, [answer]: 15, [output]: def solution():
    jello_boxes_necessary = (30 * 4) // 10
    jello_cost_per_box = 1.25
    jello_total_cost = jello_boxes_necessary * jello_cost_per_box
    return jello_total_cost

 Executed result: 15.0
[EXP] 870: [success_rate]: True, [answer]: 500, [output]: 
def solution():
    phones = 5
    phone_cost = 700
    total_cost = phones * phone_cost
    seller_cash = 4000
    change = seller_cash - total_cost
    return change

 Executed result: 500
[EXP] 871: [success_rate]: True, [answer]: 40, [output]: def solution():
    total_cost = 400
    madeline_pays = (60 / 100) * total_cost
    keenan_pays = total_cost - madeline_pays
    keenan_spend_per_week = keenan_pays / 4
    result = keenan_spend_per_week
    return result

 Executed result: 40.0
[EXP] 872: [success_rate]: True, [answer]: 48, [output]: def solution():
    pizza_pieces = 60
    pieces_eaten_on_first_day = int(pizza_pieces * 2/5)
    remaining_pieces = pizza_pieces - pieces_eaten_on_first_day
    pieces_eaten_on_second_day = 10
    remaining_pieces -= pieces_eaten_on_second_day
    pieces_eaten_on_third_day = int(remaining_pieces * 7/13)
    result = pieces_eaten_on_first_day + pieces_eaten_on_second_day + pieces_eaten_on_third_day
    return result

 Executed result: 48
[EXP] 873: [success_rate]: True, [answer]: 13, [output]: 
def solution():
    cost_soda = 21 / 7
    cost_water = 8 / 4
    total_cost_soda = cost_soda * 3
    total_cost_water = cost_water * 2
    total_cost = total_cost_soda + total_cost_water
    return total_cost

 Executed result: 13.0
[EXP] 874: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    money_initial = 12.48
    bolts = 16
    bolt_cost = 0.03
    money_spent = bolts * bolt_cost
    money_left = money_initial - money_spent
    result = round(money_left, 2)
    return result

 Executed result: 12.0
[EXP] 875: [success_rate]: True, [answer]: 132, [output]: def solution():
    money_per_hour = 33 / 3
    hours_worked = 12
    money_earned = money_per_hour * hours_worked
    return money_earned

 Executed result: 132.0
[EXP] 876: [success_rate]: True, [answer]: 60, [output]: def solution():
    marbles_initial = 52
    marbles_gained = 28
    marbles_total = marbles_initial + marbles_gained
    marbles_lost = marbles_total // 4
    marbles_left = marbles_total - marbles_lost
    result = marbles_left
    return result

 Executed result: 60
[EXP] 877: [success_rate]: True, [answer]: 41, [output]: 
def solution():
    multiple_choice_questions = 10
    multiple_choice_right = int(multiple_choice_questions * 0.8)
    true_false_questions = 20
    true_false_right = int(true_false_questions * 0.9)
    long_answer_questions = 5
    long_answer_right = int(long_answer_questions * 0.6)

    multiple_choice_score = multiple_choice_right * 1
    true_false_score = true_false_right * 1
    long_answer_score = long_answer_right * 5

    total_score = multiple_choice_score + true_false_score + long_answer_score
    return total_score

 Executed result: 41
[EXP] 878: [success_rate]: True, [answer]: 7000, [output]: def solution():
    chickens = 300
    sold_chickens = int(chickens * 3/5)
    profit = 2000
    revenue = sold_chickens * 50
    cost = revenue - profit 
    return cost

 Executed result: 7000
[EXP] 879: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    total_glasses = 32
    julie_glasses = 14
    micah_glasses = (total_glasses - julie_glasses) / 2
    difference = julie_glasses - micah_glasses
    return difference

 Executed result: 5.0
[EXP] 880: [success_rate]: True, [answer]: 575, [output]: 
def solution():
    hair_cost = 400
    manicure_cost = hair_cost / 4
    pedicure_cost = manicure_cost * 3/4
    total_cost = hair_cost + manicure_cost + pedicure_cost
    return total_cost

 Executed result: 575.0
[EXP] 881: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    rope_length = 20
    rope_cost = rope_length * 2
    profit = rope_cost
    new_rope_length = 20
    new_rope_cost = new_rope_length * 1.5
    money_left = profit - new_rope_cost
    return money_left

 Executed result: 10.0
[EXP] 882: [success_rate]: False, [answer]: 16, [output]: def solution():
    present_age = 0
    future_age = 18
    years_passed = future_age - present_age
    present_years = years_passed - (future_age - 3 * present_age)
    return present_years

 Executed result: 0
[EXP] 883: [success_rate]: False, [answer]: 5, [output]: def solution():
    bacon_cost = 10
    chicken_cost = 2 * bacon_cost
    chicken_packets = 6
    total_chicken_cost = chicken_packets * chicken_cost
    strawberry_packet_cost = 4
    strawberry_packets = 3
    total_strawberry_cost = strawberry_packets * strawberry_packet_cost
    apple_packet_cost = strawberry_packet_cost / 2
    apple_packets = 7
    total_apple_cost = apple_packets * apple_packet_cost
    total_cost = bacon_cost + total_chicken_cost + total_strawberry_cost + total_apple_cost
    budget = 65
    money_left = budget - total_cost
    return money_left

 Executed result: -91.0
[EXP] 884: [success_rate]: False, [answer]: 25, [output]: def solution():
    final_concert_RUNTIME = 65
    encore_seconds = 15
    final_concert_total_seconds = final_concert_RUNTIME + encore_seconds
    regular_concert_runtime_seconds = (final_concert_total_seconds - encore_seconds) / 2
    regular_concert_minutes = regular_concert_runtime_seconds // 60
    return regular_concert_minutes

 Executed result: 0.0
[EXP] 885: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    toys_initial = 200
    toys_given_to_alyssa = 40
    toys_given_to_bonnie = 80
    toys_given_to_nicky = 30
    toys_given = toys_given_to_alyssa + toys_given_to_bonnie + toys_given_to_nicky
    toys_left = toys_initial - toys_given
    result = toys_left
    return result

 Executed result: 50
[EXP] 886: [success_rate]: True, [answer]: 500, [output]: 
def solution():
    chimichangas_tuesday = 125
    chimichangas_wednesday = 125
    chimichangas_friday = 2 * chimichangas_tuesday
    total_chimichangas = chimichangas_tuesday + chimichangas_wednesday + chimichangas_friday
    return total_chimichangas

 Executed result: 500
[EXP] 887: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    total_microphones = 50
    unpaired_microphones = int(0.2 * total_microphones)
    total_pairs = total_microphones - unpaired_microphones
    total_pairs /= 2
    return int(total_pairs)

 Executed result: 20
[EXP] 888: [success_rate]: True, [answer]: 34, [output]: 
def solution():
    birds_nesting = 6
    birds_flying = int(2 / 3 * birds_nesting)
    birds_feeding = 3 * 8
    total_birds = birds_nesting + birds_flying + birds_feeding
    return total_birds

 Executed result: 34
[EXP] 889: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    cookies_total = 55
    cookies_eaten = 5
    cookies_left = cookies_total - cookies_eaten
    cookies_per_jar = cookies_left // 5
    return cookies_per_jar

 Executed result: 10
[EXP] 890: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    orchids = 5
    daisies = 4
    orchid_petals = 5
    daisy_petals = 10
    total_orchid_petals = orchids * orchid_petals
    total_daisy_petals = daisies * daisy_petals
    difference = total_daisy_petals - total_orchid_petals
    return difference

 Executed result: 15
[EXP] 891: [success_rate]: True, [answer]: 25, [output]: def solution():
    total_plants = 100
    indoor_plants = total_plants // 4
    remaining_plants = total_plants - indoor_plants
    outdoor_plants = remaining_plants * 2 // 3
    flowering_plants = remaining_plants - outdoor_plants
    percentage = (flowering_plants / total_plants) * 100
    return percentage

 Executed result: 25.0
[EXP] 892: [success_rate]: False, [answer]: 55, [output]: 
def solution():
    whirligig_speed = 11 + 5
    thingamabob_speed = 121 / (11 + 5)
    whirligig_speed = whirligig_speed * thingamabob_speed
    return whirligig_speed

 Executed result: 121.0
[EXP] 893: [success_rate]: True, [answer]: 1, [output]: def solution():
    total_cost = 11
    salad_cost = 6
    yogurt_cost = salad_cost / 2
    other_cost = salad_cost + yogurt_cost
    one_carrot_cost = (total_cost - other_cost) / 2
    return one_carrot_cost

 Executed result: 1.0
[EXP] 894: [success_rate]: True, [answer]: 480, [output]: 
def solution():
    hours_week = 8 * 5
    old_pay = 10
    raise_pay = 2
    old_hourly_salary = old_pay
    new_hourly_salary = old_hourly_salary + raise_pay
    weekly_salary = hours_week * new_hourly_salary
    return weekly_salary

 Executed result: 480
[EXP] 895: [success_rate]: False, [answer]: 26, [output]: 
def solution():
    money_total = 80
    money_joe = 6
    money_lemonade = money_total - money_joe
    return money_lemonade

 Executed result: 74
[EXP] 896: [success_rate]: True, [answer]: 74, [output]: 
def solution():
    martin_weight = 55
    carl_weight = martin_weight + 16
    christrian_weight = carl_weight + 8
    harry_weight = christrian_weight - 5
    result = harry_weight
    return result

 Executed result: 74
[EXP] 897: [success_rate]: True, [answer]: 250, [output]: 
def solution():
    car_hours = 10
    rental_hours_each = 3
    hourly_rate = 25
    car_payment = 500
    hours_rented = car_hours * rental_hours_each
    income = hours_rented * hourly_rate
    profit = income - car_payment
    return profit

 Executed result: 250
[EXP] 898: [success_rate]: False, [answer]: 1, [output]: 
def solution():
    joseph_nb = 0
    martha_nb = 0
    martha_nb_initial = 0
    while True:
        if martha_nb < 3:
            martha_nb += 1
            martha_nb_initial += 1
            if martha_nb == 3:
                break
        else:
            break
    martha_nb += 5
    return martha_nb - joseph_nb

 Executed result: 8
[EXP] 899: [success_rate]: True, [answer]: 110, [output]: 
def solution():
    dijana_distance = 50
    anis_distance = dijana_distance * (1 + 1/5)
    total_distance = dijana_distance + anis_distance
    result = total_distance
    return result

 Executed result: 110.0
[EXP] 900: [success_rate]: True, [answer]: 16, [output]: def solution():
    cookies_total = 100
    cookies_taken_by_husband = 4
    cookies_left = cookies_total - cookies_taken_by_husband
    cookies_per_nephew = cookies_left // 6
    result = cookies_per_nephew
    return result

 Executed result: 16
[EXP] 901: [success_rate]: True, [answer]: 15, [output]: def solution():
    denise_yesterday = 10
    daniel_yesterday = 13
    denise_today = daniel_yesterday + 5
    denise_total = denise_yesterday + denise_today
    daniel_total = daniel_yesterday
    diff = denise_total - daniel_total
    return diff

 Executed result: 15
[EXP] 902: [success_rate]: False, [answer]: 1, [output]: 
def solution():
    adults = 3
    children = 2
    adult_bowls = 4
    child_bowls = 8
    total_bowls = adult_bowls * adults + child_bowls
    eaten_bowls = adults + children
    bowls_left = total_bowls - eaten_bowls
    bowls_per_child = bowls_left // children
    result = bowls_per_child
    return result

 Executed result: 7
[EXP] 903: [success_rate]: True, [answer]: 8, [output]: def solution():
    notebook_cost = 1.5
    ballpen_cost = 0.5
    total_cost = (5 * notebook_cost) + ballpen_cost
    result = total_cost
    return result

 Executed result: 8.0
[EXP] 904: [success_rate]: False, [answer]: 16, [output]: def solution():
    material_needed = 0
    material_needed_for_small = 2
    material_needed_for_large = 2.25
    total_small_masks = 20
    total_large_masks = 8
    
    material_needed += total_small_masks * material_needed_for_small * 4
    material_needed += total_large_masks * material_needed_for_large * 3
    
    return material_needed

 Executed result: 214.0
[EXP] 905: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    movies = 9
    views = 3
    total_spent = 216
    total_tickets = movies * views
    average = total_spent / total_tickets
    return average

 Executed result: 8.0
[EXP] 906: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    sleep_hours = 10
    work_hours = sleep_hours - 2
    walk_hours = 1
    total_hours = sleep_hours + work_hours + walk_hours
    free_time = 24 - total_hours
    return free_time

 Executed result: 5
[EXP] 907: [success_rate]: False, [answer]: 10, [output]: def solution():
    blue_initial = 7
    blue_used = 3
    red_initial = 9
    red_used = int(red_initial * (1/3))
    blue_left = blue_initial - blue_used
    red_left = red_initial - red_used
    return blue_left, red_left

 Executed result: (4, 6)
[EXP] 908: [success_rate]: True, [answer]: 16, [output]: def solution():
    sarah_books = 9
    joseph_books = 2*sarah_books
    joseph_lost_books = 2
    joseph_current_books = joseph_books - joseph_lost_books
    return joseph_current_books

 Executed result: 16
[EXP] 909: [success_rate]: True, [answer]: 14, [output]: def solution():
    marbles_initial = 30
    marbles_given_to_jamie = marbles_initial // 5
    marbles_given_to_donald = 10
    marbles_left = marbles_initial - marbles_given_to_jamie - marbles_given_to_donald
    return marbles_left

 Executed result: 14
[EXP] 910: [success_rate]: True, [answer]: 38, [output]: python
def solution():
    duncan_age = 60
    adams_age_before = (duncan_age - 8) / 2
    adams_age_now = adams_age_before + 4
    adams_age_future = adams_age_now + 8
    result = adams_age_future
    return result

 Executed result: 38.0
[EXP] 911: [success_rate]: True, [answer]: 700, [output]: 
def solution():
    acr_brown = 200
    acr_smith = 2 * acr_brown + 100
    total_acreage = acr_brown + acr_smith
    return total_acreage

 Executed result: 700
[EXP] 912: [success_rate]: True, [answer]: 64, [output]: 
def solution():
    packages_per_hour = 50 - 10
    packages_per_day = packages_per_hour * 8
    money_per_package = 0.20
    money_earned = packages_per_day * money_per_package
    return money_earned

 Executed result: 64.0
[EXP] 913: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    water_per_half_hour = 1
    normal_puzzle_time = 45 / 60
    extreme_puzzle_time = 4 * normal_puzzle_time
    total_time = normal_puzzle_time + extreme_puzzle_time
    total_bottles = total_time / 0.5
    result = round(total_bottles)
    return result

 Executed result: 8
[EXP] 914: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    total_bologna = 58
    red_balloons = 20
    bologna_per_red_balloon = 2
    bologna_per_yellow_balloon = 3
    bologna_spent_on_red_balloons = red_balloons * bologna_per_red_balloon
    bologna_spent_on_yellow_balloons = total_bologna - bologna_spent_on_red_balloons
    yellow_balloons = bologna_spent_on_yellow_balloon / bologna_per_yellow_balloon
    return int(yellow_balloons)

 Executed result: None
[EXP] 915: [success_rate]: True, [answer]: 3, [output]: def solution():
    miles_per_day = 100
    miles_driven = miles_per_day * 30
    miles_per_tune_up = 1000
    tuneups_needed = miles_driven // miles_per_tune_up
    return tuneups_needed

 Executed result: 3
[EXP] 916: [success_rate]: True, [answer]: 23, [output]: def solution():
    hours_tuesday = 5
    hours_wednesday = 2 * hours_tuesday
    hours_thursday = hours_wednesday - 2
    total_hours = hours_tuesday + hours_wednesday + hours_thursday
    result = total_hours
    return result

 Executed result: 23
[EXP] 917: [success_rate]: False, [answer]: 14, [output]: 
def solution():
    total_cake = 11
    total_balloon = 0.5 * 6  # 1 dozen balloons is 12, sold for 2 for $0.5
    total_icecream = 7 * 2
    total_spent = total_cake + total_balloon + total_icecream
    allowance = total_spent
    mother_allowance = (24 * 2)  # Initial allowance is per person, doubled since they combined
    return mother_allowance - total_spent

 Executed result: 20.0
[EXP] 918: [success_rate]: True, [answer]: 12, [output]: def solution():
    apples = 3
    bananas = 5
    oranges = 6
    total_fruit = apples + bananas + oranges
    eaten_fruit = 2
    fruit_left = total_fruit - eaten_fruit
    return fruit_left

 Executed result: 12
[EXP] 919: [success_rate]: True, [answer]: 56, [output]: def solution():
    tennis_students = 6
    volleyball_students = 2 * tennis_students
    soccer_students = 16 + 22
    total_students = tennis_students + volleyball_students + soccer_students
    return total_students

 Executed result: 56
[EXP] 920: [success_rate]: True, [answer]: 90, [output]: 
def solution():
    students = 30
    lollipops_sold = students * 10
    cost_per_lollypop = 0.5
    revenue_per_lollypop = 0.8
    revenue = lollipops_sold * revenue_per_lollypop
    cost = lollipops_sold * cost_per_lollypop
    profit = revenue - cost
    return round(profit, 2)

 Executed result: 90.0
[EXP] 921: [success_rate]: True, [answer]: 47, [output]: 
def solution():
    cats = 3
    dogs = 3 * cats
    rabbits = dogs - 2
    fish = 3 * rabbits
    gerbils = fish // 3
    total_pets = cats + dogs + rabbits + fish + gerbils
    return total_pets

 Executed result: 47
[EXP] 922: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    slices_in_loaf = 24
    abby_slices_per_day = 2
    josh_slices_per_day = abby_slices_per_day * 2
    total_slices_per_day = abby_slices_per_day + josh_slices_per_day
    days_to_last = slices_in_loaf // total_slices_per_day
    return days_to_last

 Executed result: 4
[EXP] 923: [success_rate]: False, [answer]: 60, [output]: def solution():
    age = 10
    shells_collected = (age - 5)
    result = shells_collected
    return result

 Executed result: 5
[EXP] 924: [success_rate]: False, [answer]: 2, [output]: def solution():
    cups_initial = 27
    rows = 3
    cups_each_row = cups_initial // rows
    cups_left = cups_initial % rows
    mint_cups = cups_each_row
    result = mint_cups
    return result

 Executed result: 9
[EXP] 925: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    total_hours = 8
    total_berries = 24
    hours_per_trip = 4
    hourly_berries = total_berries / (total_hours / hours_per_trip)
    return int(hourly_berries)

print(solution())

 Executed result: 12
[EXP] 926: [success_rate]: True, [answer]: 2000, [output]: 
def solution():
    water_initial = 10000
    tank_capacity = water_initial / 2
    water_lost_per_day = 500
    water_left = tank_capacity
    for day in range(6):
        water_left -= water_lost_per_day
    result = water_left
    return result

 Executed result: 2000.0
[EXP] 927: [success_rate]: False, [answer]: 1, [output]: 
def solution():
    money chồng = 150
    money_limit = 50

    return (money.closePathible) - (10*5 + 7*8 + 8*2 + 2*4)

 Executed result: None
[EXP] 928: [success_rate]: True, [answer]: 85000, [output]: 
def solution():
    cinnamon_rolls = 200
    muffins = 300
    cinnamon_roll_calories = 600
    muffin_calories = 450
    pastry_calories = (cinnamon_roll_calories / 3), (muffin_calories / 3)

    total_calories = (cinnamon_rolls * pastry_calories[0]) + (muffins * pastry_calories[1])
    return total_calories

 Executed result: 85000.0
[EXP] 929: [success_rate]: False, [answer]: 60, [output]: def solution():
    total_junebugs = 39 + (2 * 39) + 48 + 57
    average_junebugs = total_junebugs / 5
    return average_junebugs

 Executed result: 44.4
[EXP] 930: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    bus_speed = 60
    bus_hours = 5
    car_speed = 30
    car_hours = 8
    bus_dist = bus_speed * bus_hours
    car_dist = car_speed * car_hours
    bus_gain = bus_dist - car_dist
    return bus_gain

 Executed result: 60
[EXP] 931: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    blocks = 31
    stuffed_animals = 8
    rings = 9
    total_toys_before = blocks + stuffed_animals + rings
    total_toys_after = 62
    bouncy_balls = total_toys_after - total_toys_before
    return bouncy_balls

 Executed result: 14
[EXP] 932: [success_rate]: False, [answer]: 50, [output]: def solution():
    jhon_age = 0
    paul_age = 0
    peter_age = 0
    sum_age = 100
    paul_age = jhon_age + 10
    peter_age = paul_age + jhon_age
    result = peter_age
    return result

 Executed result: 10
[EXP] 933: [success_rate]: False, [answer]: 24, [output]: 
def solution():
    maria = 1
    friends = 4
    initial_balloon_per_person = 2
    initial_total_balloon = maria + (friends * initial_balloon_per_person)
    additional_balloon_per_person = 3
    final_total_balloon = initial_total_balloon + (friends * additional_balloon_per_person + maria)
    result = final_total_balloon
    return result

 Executed result: 22
[EXP] 934: [success_rate]: True, [answer]: 15, [output]: def solution():
    boxes_donated = 10
    boxes_already_owned = 10
    boxes_per_table = 2
    tables_already_owned = 15
    total_boxes = boxes_donated * 5 + boxes_already_owned
    boxes_needed_per_table = total_boxes % boxes_per_table
    tables_needed = (total_boxes // boxes_per_table) + (boxes_needed_per_table > 0)
    return tables_needed - tables_already_owned

 Executed result: 15
[EXP] 935: [success_rate]: False, [answer]: 410, [output]: 
def solution():
    zoey_seeds = 40
    zoey_distance = 10
    zoey_total = zoey_seeds * zoey_distance
    sydney_seeds = 35
    sydney_distance = 12
    sydney_total = sydney_seeds * sydney_distance
    average = (zoey_total + sydney_total) / (zoey_seeds + sydney_seeds)
    return average

 Executed result: 10.933333333333334
[EXP] 936: [success_rate]: True, [answer]: 64800, [output]: 
def solution():
    widgets_per_hour_widgeteer = 60
    widgets_per_hour_widgetmaster = 45
    widgets_per_hour = [widgets_per_hour_widgeteer, widgets_per_hour_widgetmaster]
    hours_per_day = 24
    days_per_month = 30
    widgets_per_day = [widgets_per_hour[i] * hours_per_day for i in range(2)]
    widgets_per_month = [day * days_per_month for day in widgets_per_day]
    widgets_per_monthงท = widgets_per_month[0]
    widgets_per_monthม = widgets_per_month[1]
    price_per_widget = 6
    money_per_month_widgeteer = widgets_per_monthงท * price_per_widget
    money_per_month_widgetmaster = widgets_per_monthม * price_per_widget
    money_saved = money_per_month_widgeteer - money_per_month_widgetmaster
    result = money_saved
    return result

 Executed result: 64800
[EXP] 937: [success_rate]: False, [answer]: 250, [output]: 
def solution():
    total_hours = 17
    basic_rate = 1600
    extra_rate = 1000
    money_spend = 1000
    money_saved = basic_rate - 1000
    for i in range(1, total_hours-12):
        money_spend += 70
    result = money_spend - money_saved
    return result

 Executed result: 680
[EXP] 938: [success_rate]: False, [answer]: 159, [output]: def solution():
    goats = 15
    sheep = 12
    goat_hay = goats * 5
    sheep_hay = 2 * 5 - 3 * sheep
    result = goat_hay + sheep_hay
    return result

 Executed result: 49
[EXP] 939: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    hourly_wage = 50
    hours_worked = 6
    money_earned = hourly_wage * hours_worked
    money_spent_gas = 50
    money_to_deposit = 100
    total_money = money_earned - money_spent_gas + money_to_deposit
    money_left = total_money
    pens_cost = 25
    pencils_cost = 10
    pencils_bought = 5
    pencils_total_cost = pencils_cost * pencils_bought
    money_left_after_pencils = money_left - pencils_total_cost
    pens_bought = int(money_left_after_pencils / pens_cost)
    return pens_bought

 Executed result: 12
[EXP] 940: [success_rate]: False, [answer]: 650, [output]: 
def solution():
    craig_letters = 15
    craig_words = 20
    craig_total_letters = craig_words * craig_letters
    brother_total_letters = craig_total_letters + 50
    return brother_total_letters

 Executed result: 350
[EXP] 941: [success_rate]: True, [answer]: 280, [output]: def solution():
    children_in_row = 8
    rows = 7
    schools = 5
    total_children = children_in_row * rows * schools
    return total_children

 Executed result: 280
[EXP] 942: [success_rate]: False, [answer]: 842, [output]: 
def solution():
    students = 29
    coupons = 9
    bottles_per_coupon = 100
    bottles_per_student = 2
    total_bottles_given = coupons * bottles_per_coupon * (1 + students // bottles_per_coupon)
    bottles_left = bottles_per_coupon * coupons - total_bottles_given
    result = bottles_left
    return result

 Executed result: 0
[EXP] 943: [success_rate]: False, [answer]: 205, [output]: 
def solution():
    service_charge = 40
    labor_hours = 2.25
    labor_cost = labor_hours * 35
    parts_cost = 60
    total_cost = service_charge + labor_cost + parts_cost
    return total_cost

 Executed result: 178.75
[EXP] 944: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    cd_price = 15
    discount = 0.4
    cd_cost = cd_price * (1 - discount)
    total_spent = cd_cost * 10
    cd_sold = 5
    sold_price = 40
    money_out = total_spent - (total_spent - cd_sold * cd_cost)
    result = -money_out
    return result

 Executed result: -45.0
[EXP] 945: [success_rate]: True, [answer]: 34, [output]: def solution():
    yams = 6
    yam_price = 1.5
    yam_earnings = yams * yam_price
    
    sweet_potatoes = 10
    sweet_potato_price = 2
    sweet_potato_earnings = sweet_potatoes * sweet_potato_price
    
    carrots = 4
    carrot_price = 1.25
    carrot_earnings = carrots * carrot_price
    
    total_earnings = yam_earnings + sweet_potato_earnings + carrot_earnings
    result = total_earnings
    
    return result

 Executed result: 34.0
[EXP] 946: [success_rate]: True, [answer]: 17, [output]: 
def solution():
    miles_across = 20
    miles_swum = 0.6 * miles_across
    initial_speed = 2
    speed_phase1 = initial_speed
    time_swimming = miles_swum / speed_phase1
    time_resting = time_swimming / 2
    time_swimming_phase2 = (miles_across - miles_swum) / (initial_speed / 2)
    return time_swimming + time_resting + time_swimming_phase2

 Executed result: 17.0
[EXP] 947: [success_rate]: True, [answer]: 450, [output]: def solution():
    sam_loaves = 70
    bakery_loaves = 7 * sam_loaves - 40
    return bakery_loaves

 Executed result: 450
[EXP] 948: [success_rate]: True, [answer]: 13, [output]: 
def solution():
    stickers_initial = 0
    stickers_received = 15
    stickers_lost = 7
    stickers_gained = 5
    stickers_final = stickers_initial + stickers_received - stickers_lost + stickers_gained
    result = stickers_final
    return result

 Executed result: 13
[EXP] 949: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    ny_times = 6
    ny_times_cost = 5
    ny_times_commission = ny_times * (0.10 * ny_times_cost)
    ws_journal = 10
    ws_journal_cost = 15
    ws_journal_commission = ws_journal * (0.08 * ws_journal_cost)
    total_commission = ny_times_commission + ws_journal_commission
    result = total_commission
    return result

 Executed result: 15.0
[EXP] 950: [success_rate]: False, [answer]: 42, [output]: 
def solution():
    deanna_age = 26
    leo_age = deanna_age + 5
    leo_half_age = leo_age / 2
    leo_age = 2 * leo_half_age
    return leo_age

 Executed result: 31.0
[EXP] 951: [success_rate]: False, [answer]: 5, [output]: def solution():
    total_points = 45
    bahati_points = total_points - (Azibo_points + Dinar_points)
    bahati_points - 10 = Azibo_points
    Azibo_points = bahati_points - 10
    return Azibo_points

 Executed result: None
[EXP] 952: [success_rate]: True, [answer]: 300, [output]: def solution():
    pages_per_inch = 100
    pages_per_side = 1
    book_thickness = 1.5
    pages_in_book = pages_per_inch * book_thickness * pages_per_side * 2
    result = pages_in_book
    return result

 Executed result: 300.0
[EXP] 953: [success_rate]: False, [answer]: 360, [output]: def solution():
    reports_per_minute = 30
    minutes_worked = (11*60) - 8*60
    reports_stapled = reports_per_minute * minutes_worked
    return reports_stapled

 Executed result: 5400
[EXP] 954: [success_rate]: False, [answer]: 452, [output]: def solution():
    sleeping_hours = 8
    bedtime = 60 * 10
    wake_up_time = 60 * 6
    sleepwalking_time = 23
    wake_up_early = 60
    sleep_time = bedtime - wake_up_time
    sleep_time_without_sleepwalking = sleep_time - sleepwalking_time
    sleep_time_without_phone_time = sleep_time_without_sleepwalking - wake_up_early
    result = sleep_time_without_phone_time
    return result

 Executed result: 157
[EXP] 955: [success_rate]: False, [answer]: 34, [output]: 
def solution():
    cups = 24
    spoons_per_cup = 3 // 2
    spoons_initial = cups * spoons_per_cup
    spoons_given = 6
    spoons_left = spoons_initial - spoons_given
    result = spoons_left
    return result

 Executed result: 18
[EXP] 956: [success_rate]: True, [answer]: 100, [output]: def solution():
    capacity = 1000
    occupancy_rate = 1/5
    occupied_beds_initial = capacity * occupancy_rate
    total_days = 2 * 7 # 14 days
    new_patients_each_day = 50
    total_patients = total_days * new_patients_each_day
    total_occupied = occupied_beds_initial + total_patients
    unoccupied_beds = capacity - total_occupied
    result = unoccupied_beds
    return result

 Executed result: 100.0
[EXP] 957: [success_rate]: True, [answer]: 1, [output]: 
def solution():
    emails_per_day = 16
    work_emails = 7
    non_work_emails = emails_per_day - work_emails
    family_emails = non_work_emails * (2 / 3)
    other_emails = non_work_emails - family_emails
    boyfriend_emails = other_emails * (1 / 3)
    return int(boyfriend_emails)

 Executed result: 1
[EXP] 958: [success_rate]: True, [answer]: 45, [output]: def solution():
    aliya_age = 3
    shawna_age = aliya_age * 3
    father_age = shawna_age * 5
    result = father_age
    return result

 Executed result: 45
[EXP] 959: [success_rate]: False, [answer]: 40, [output]: def solution():
    audience = 48
    overstatement_percentage = 20
    real_audience = audience - ((audience * overstatement_percentage) / 100)
    return real_audience

 Executed result: 38.4
[EXP] 960: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    jason_balls = 2
    jeffrey_balls = jason_balls // 2
    jordan_balls = jason_balls * 2
    total_balls = jordan_balls + jason_balls + jeffrey_balls
    return total_balls

 Executed result: 7
[EXP] 961: [success_rate]: False, [answer]: 11, [output]: 
def solution():
    holes_day1 = 10
    holes_day2 = 13
    holes_day3 = 8 - 2
    total_holes_after_third_day = holes_day1 + holes_day2 + holes_day3
    holes_day4 = 4 * total_holes_after_third_day
    return holes_day4

 Executed result: 116
[EXP] 962: [success_rate]: False, [answer]: 225, [output]: def solution():
    amora_and_lainey = 70
    extra_for_collins = 15
    total_received_by_amora_and_lainey = 2 * amora_and_lainey
    total_received_by_collins = total_received_by_amora_and_lainey + extra_for_collins
    total_chips = total_received_by_amora_and_lainey + total_received_by_collins
    return total_chips

 Executed result: 295
[EXP] 963: [success_rate]: False, [answer]: 1000, [output]: 
def solution():
    supplies_cost = 400
    trip_cost = supplies_cost * 1.5
    result = trip_cost
    return result

 Executed result: 600.0
[EXP] 964: [success_rate]: False, [answer]: 147, [output]: def solution():
    a = Adelwolfe_captured = 339 - (Alex_captured + Stan_captured)
    Stan_captured = Stan_captured = 4 * Adelwolfe_captured - 13
    Alex_captured = Stan_captured + 5
    return Stan_captured

 Executed result: None
[EXP] 965: [success_rate]: True, [answer]: 200, [output]: def solution():
    episode_length = 20
    num_episodes = episode_length // 2
    time_watched = num_episodes * episode_length
    return time_watched

 Executed result: 200
[EXP] 966: [success_rate]: True, [answer]: 374, [output]: 
def solution():
    distance_north = 10 * 30
    distance_south = 2 * 18
    distance_total = distance_north - distance_south
    distance_total = distance_total + 5 * 22
    return distance_total

 Executed result: 374
[EXP] 967: [success_rate]: False, [answer]: 48, [output]: 
def solution():
    original_brownies = 12
    office_brownies = 6
    friends_brownies = 4 * 12
    eaten_brownies = 1.5 * 12
    total_brownies = original_brownies + office_brownies + friends_brownies
    brownies_eaten = total_brownies + eaten_brownies
    brownies_left = total_brownies - brownies_eaten
    result = brownies_left
    return result

 Executed result: -18.0
[EXP] 968: [success_rate]: True, [answer]: 30, [output]: def solution():
    nani_age = 8
    bro_age = 2 * nani_age
    sis_age = nani_age - (nani_age * 1/4)
    total_age = bro_age + nani_age + sis_age
    return total_age

 Executed result: 30.0
[EXP] 969: [success_rate]: True, [answer]: 227, [output]: 
def solution():
    racquets = 12
    synthetic_gut = 3
    polyester_string = 5
    hybrid_sets = 4
    time_synthetic_gut = synthetic_gut * 15
    time_polyester_string = polyester_string * 22
    time_hybrid_sets = hybrid_sets * 18
    total_time = time_synthetic_gut + time_polyester_string + time_hybrid_sets
    result = total_time
    return result

 Executed result: 227
[EXP] 970: [success_rate]: False, [answer]: 1800, [output]: 
def solution():
    phone_price = 600
    first_two_phones = 2 * phone_price
    remaining_phones = 3 - 2
    remaining_price = remaining_phones * phone_price / 2
    total_price = first_two_phones + remaining_price
    return total_price

 Executed result: 1500.0
[EXP] 971: [success_rate]: True, [answer]: 33, [output]: def solution():
    carltons_players = 13
    zekes_players = carltons_players + 7
    total_players = carltons_players + zekes_players
    result = total_players
    return result

 Executed result: 33
[EXP] 972: [success_rate]: True, [answer]: 100, [output]: def solution():
    fence_length = 15
    fence_width = 10
    perimeter = 2*(fence_length+fence_width)
    slats_needed = perimeter * 2
    return slats_needed

 Executed result: 100
[EXP] 973: [success_rate]: True, [answer]: 120, [output]: def solution():
    boxes = 12
    given_to_mom = 2
    given_to_sister = 2
    total_given = given_to_mom + given_to_sister
    remaining_boxes = boxes - total_given
    kept_boxes = int(remaining_boxes / 4)
    sold_boxes = remaining_boxes - kept_boxes
    sold_oranges = sold_boxes * 20
    return sold_oranges

 Executed result: 120
[EXP] 974: [success_rate]: False, [answer]: 79, [output]: 
def solution():
    us_states = 50
    india_states = (us_states * 2) + 4
    total_states = us_states + india_states
    return total_states

 Executed result: 154
[EXP] 975: [success_rate]: True, [answer]: 5, [output]: def solution():
    books_cost = 18 + 13 + 8
    allowance = 14
    money_needed = books_cost - allowance
    hourly_wage = 5
    hours_to_work = money_needed / hourly_wage
    return hours_to_work

 Executed result: 5.0
[EXP] 976: [success_rate]: False, [answer]: 20, [output]: def solution():
    cherries_total = 60
    robert_cherries = 30
    robert_cherries_min_jerry = 40
    robert_cherries_min_jerry = robert_cherries - robert_cherries_min_jerry
    return robert_cherries_min_jerry

 Executed result: -10
[EXP] 977: [success_rate]: False, [answer]: 540, [output]: 
def solution():
    gingerbread_cost = 6
    apple_pie_cost = 15
    gingerbread_saturday = 10
    gingerbread_sunday = gingerbread_saturday + 5
    apple_pie_saturday = gingerbread_saturday + 4
    apple_pie_sunday = 15
    sum_saturday = gingerbread_saturday * gingerbread_cost + apple_pie_saturday * apple_pie_cost
    sum_sunday = gingerbread_sunday * gingerbread_cost + apple_pie_sunday * apple_pie_cost
    total = sum_saturday + sum_sunday
    result = total
    return result

 Executed result: 585
[EXP] 978: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    hours_per_day = 4
    days = 8
    sunshine_hours = hours_per_day * days
    sunscreen_per_reapply = 1
    bottles_per_sunscreen = 8
    sunscreens_needed = (sunshine_hours // bottles_per_sunscreen) * sunscreen_per_reapply
    partial_sunscreens = sunshine_hours % bottles_per_sunscreen
    if partial_sunscreens > 0:
        sunscreens_needed += 1
    result = sunscreens_needed
    return result

 Executed result: 4
[EXP] 979: [success_rate]: True, [answer]: 160, [output]: def solution():
    blue_car_price = 100
    discount = 0.4
    red_car_price = blue_car_price - (blue_car_price * discount)
    total_cost = blue_car_price + red_car_price
    return total_cost

 Executed result: 160.0
[EXP] 980: [success_rate]: False, [answer]: 50, [output]: def solution():
    emil_age = 19
    emil_age_at_24 = 24
    dad_age = emil_age_at_24 * 2
    brother_age = emil_age_at_24 / 2
    dad_age_now = dad_age - emil_age_at_24
    brother_age_now = brother_age - emil_age_at_24
    sum_of_ages = dad_age_now + brother_age_now
    return sum_of_ages

 Executed result: 12.0
[EXP] 981: [success_rate]: True, [answer]: 90, [output]: 
def solution():
    beads_mother = 20
    beads_sister = beads_mother + 10
    beads_friend = 2 * beads_mother
    beads_owned = beads_mother + beads_sister + beads_friend
    result = beads_owned
    return result

 Executed result: 90
[EXP] 982: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    crawfish_caught_thursday = 3
    crawfish_caught_friday = crawfish_caught_thursday * 4
    crawfish_caught_saturday = crawfish_caught_friday // 2
    total_crawfish = crawfish_caught_thursday + crawfish_caught_friday + crawfish_caught_saturday
    servings = total_crawfish // 3
    return servings

 Executed result: 7
[EXP] 983: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    total_students = 30
    football_players = 0.2 * total_students
    non_football = total_students - football_players
    cheerleaders_and_band = 0.25 * non_football
    total_leaving_early = football_players + cheerleaders_and_band
    return total_leaving_early

 Executed result: 12.0
[EXP] 984: [success_rate]: True, [answer]: 15, [output]: def solution():
    sophie_boot_size = 5
    charlie_boot_size = sophie_boot_size * 5
    average_boot_size = (sophie_boot_size + charlie_boot_size) / 2
    return average_boot_size

 Executed result: 15.0
[EXP] 985: [success_rate]: False, [answer]: 342, [output]: 
def solution():
    bed_length = 111
    flower_width = 12
    space_between_flowers = 18  # converted 1.5 feet to inches
    total_flowers = 0
    flower_cost = 6
    
    while True:
        available_space = bed_length * 12 - (total_flowers * flower_width + (total_flowers - 1) * space_between_flowers)
        if available_space < 0:
            break
        total_flowers += 1
    
    total_flowers -= 17  # subtracting the flowers she already owns
    total_cost = total_flowers * flower_cost
    
    return total_cost

 Executed result: 174
[EXP] 986: [success_rate]: True, [answer]: 63, [output]: 
def solution():
    brother_pretzels_per_day = 18 // 2
    brother_pretzels_per_week = brother_pretzels_per_day * 7
    return brother_pretzels_per_week

 Executed result: 63
[EXP] 987: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    hanging_baskets = 5
    petunias_per_basket = 3
    sweet_potato_vines_per_basket = 2
    petunias_cost = 3
    sweet_potato_vines_cost = 2.5
    total_petunias = petunias_per_basket * hanging_baskets
    total_sweet_potato_vines = sweet_potato_vines_per_basket * hanging_baskets
    petunias_cost_total = total_petunias * petunias_cost
    sweet_potato_vines_cost_total = total_sweet_potato_vines * sweet_potato_vines_cost
    total_cost = petunias_cost_total + sweet_potato_vines_cost_total
    return total_cost

 Executed result: 70.0
[EXP] 988: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    soil_weight = 30
    sunflowers = 4
    carnations = 10
    sunflower_weight = sunflowers * 3
    carnation_weight = carnations * 1.5
    total_weight = sunflower_weight + carnation_weight
    weight_left = soil_weight - total_weight
    roses_left = weight_left // 1
    result = 30 - horowitz01_fore_inicia
    return 30 - roses_left

 Executed result: None
[EXP] 989: [success_rate]: True, [answer]: 6, [output]: def solution():
    monthly_income = 2000.00
    percentage_to_save = 0.25
    monthly_savings = monthly_income * percentage_to_save
    yearly_savings = monthly_savings * 12
    shoe_cost = 1000.00
    shoes_bought = yearly_savings // shoe_cost
    return shoes_bought

 Executed result: 6.0
[EXP] 990: [success_rate]: False, [answer]: 45, [output]: def solution():
    shrimp_per_minute = 6
    shrimp_to_cook = 30
    total_minutes_to_cook = shrimp_to_cook / shrimp_per_minute
    total_shrimp_to_peel = 90 / shrimp_per_minute
    total_minutes_to_peel = total_shrimp_to_peel
    minutes_to_do_all = total_minutes_to_peel + total_minutes_to_cook
    return minutes_to_do_all

 Executed result: 20.0
[EXP] 991: [success_rate]: False, [answer]: 14, [output]: 
def solution():
    temperature_start = 0
    cooling_low_hours = 3
    cooling_high_hours = 4
    warming_hours = 2
    temperature_difference = 2
    temperature_difference_high = 3
    temperature_start = temperature_start - (cooling_low_hours * temperature_difference)
    temperature_start = temperature_start + (cooling_high_hours * temperature_difference_high)
    temperature_start = temperature_start + (warming_hours * temperature_difference)
    result = temperature_start
    return result

 Executed result: 10
[EXP] 992: [success_rate]: False, [answer]: 15, [output]: 
def solution():
    comet_period = 75
    dads_age = 30
    dads_age_when_comet_seen = comet_period - (75 - dads_age)
    bills_age_when_comet_seen = 3 * dads_age
    bills_birth_year = bills_age_when_comet_seen - comets_age
    return bills_birth_year

 Executed result: None
[EXP] 993: [success_rate]: False, [answer]: 52, [output]: 
def solution():
    monthlychecks = 2 + 1
    quarterlychecks = 1
    totalchecks = monthlychecks * 12 + quarterlychecks * 3
    result = totalchecks
    return result

 Executed result: 39
[EXP] 994: [success_rate]: False, [answer]: 11, [output]: 
def solution():
    total_flights = 8 * 3
    france_flights_first = total_flights // 4  # total flights to other countries for the first plane
    other_country_flights = total_flights - total_flights // 3  # flights to other countries for the first plane
    plc_flights = 44  # trips to Poland by the second plane
    france_flights_second = 0  # flights to France by the second plane
    total_plc_trips = 2 * plc_flights  # total trips to Poland for all days
    plc_flights_daily = total_plc_trips  # daily trips to Poland
    first_plane_flights = total_flights - plc_flights_daily  # total flights by the first plane
    france_flights_first = other_country_flights // 2  # flights to France by the first plane
    return france_flights_first

 Executed result: 8
[EXP] 995: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    tobias_howl = 20
    chikote_howl = tobias_howl * 2
    igneous_howl = tobias_howl + chikote_howl
    total_howl = tobias_howl + chikote_howl + igneous_howl
    total_minutes = total_howl / 60
    return total_minutes

 Executed result: 2.0
[EXP] 996: [success_rate]: True, [answer]: 12, [output]: def solution():
    money_mother = 6
    money_father = 2 * money_mother
    money_got = money_mother + money_father
    money_paid = 30
    money_contributed = money_paid - money_got
    return money_contributed

 Executed result: 12
[EXP] 997: [success_rate]: False, [answer]: 3, [output]: def solution():
    akbar_age = 3
    alessandro_age = 4
    helene_age = (20 - akbar_age - alessandro_age) * 2
    wilfred_age = 20 - akbar_age - alessandro_age - helene_age
    result = wilfred_age
    return result

 Executed result: -13
[EXP] 998: [success_rate]: False, [answer]: 6,600, [output]: def solution():
    total_donated = 500 + 1500
    laweyr_contribution = 3 * total_donated
    total_donations = total_donated + laweyr_contribution
    laweyr_empathetic_donation = 200
    laweyr_total_donation = laweyr_contribution + laweyr_empathetic_donation
    return laweyr_total_donation

 Executed result: 6200
[EXP] 999: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_cookies = 100 * 15
    total_given_to_church = total_cookies / 2
    cookies_per_person = 15
    people_in_church = total_given_to_church // cookies_per_person
    return people_in_church

 Executed result: 50.0
[EXP] 1000: [success_rate]: False, [answer]: 25, [output]: def solution():
    total_slices = 12
    kid_slices = 4
    adult_slices = 2
    adult_slice_size = adult_slices + kid_slices
    adult_percent = ((adult_slices / adult_slice_size) * 100)
    return adult_percent

 Executed result: 33.33333333333333
[EXP] 1001: [success_rate]: True, [answer]: 1, [output]: def solution():
    clinic_hours = 9
    inpatient_rounds = 9
    inpatient_duration = 20
    appointment_hours = 10
    appointment_duration = 0.5  # half hour
    clinic_time_spent = inpatient_rounds * inpatient_duration / 60 + appointment_hours * appointment_duration
    time_left = clinic_hours - clinic_time_spent
    result = time_left
    return result

 Executed result: 1.0
[EXP] 1002: [success_rate]: False, [answer]: 2, [output]: Python
def solution():
    time_needed_to_make_batter = 20
    time_needed_to_bake = 30
    time_needed_to_cool = 120
    time_needed_to_frost = 10
    
    total_time_needed = time_needed_to_make_batter + time_needed_to_bake + time_needed_to_cool + time_needed_to_frost
    
    required_finish_time = 17 * 60  # convert 5:00 pm to minutes
    
    start_time_to_make_cake = required_finish_time - total_time_needed
    hours = start_time_to_make_cake // 60
    minutes = start_time_to_make_cake % 60
    
    return f"The latest time of day Jordan can start making the cake is {hours}:{minutes:02d} pm."

 Executed result: None
[EXP] 1003: [success_rate]: True, [answer]: 8, [output]: def solution():
    lisa_sold = 3.5
    peter_sold = 4.5
    total_sold = 64
    total_boxes = lisa_sold + peter_sold
    boxes_per_bar = total_sold / total_boxes
    result = round(boxes_per_bar)
    return result

 Executed result: 8
[EXP] 1004: [success_rate]: False, [answer]: 480, [output]: 
def solution():
    studio_rent = 25
    student_cost = 1.5
    students = 10
    sessions_per_week = 3
    weeks_per_month = 4
    studio_earnings_per_week = studio_rent + students * student_cost * sessions_per_week
    monthly_earnings = studio_earnings_per_week * weeks_per_month
    return monthly_earnings

 Executed result: 280.0
[EXP] 1005: [success_rate]: True, [answer]: 8, [output]: def solution():
    peters_total = 64
    martas_total = 56
    peters_boxes = peters_total / 4
    martas_boxes = martas_total / 7
    difference = peters_boxes - martas_boxes
    return difference

 Executed result: 8.0
[EXP] 1006: [success_rate]: True, [answer]: 1490, [output]: 
def solution():
    population = 50
    female_pop = 3/5 * population
    babies_per_female = 4
    babies_per_month = female_pop * babies_per_female
    babies_per_year = babies_per_month * 12
    total_population = population + babies_per_year
    return total_population

 Executed result: 1490.0
[EXP] 1007: [success_rate]: True, [answer]: 826, [output]: def solution():
    pool_width = 14
    pool_length = 25
    pool_depth = 4
    pool_volume = pool_width * pool_length * pool_depth
    gallons_needed = pool_volume * 5.9
    cost_per_gallon = 0.10
    total_cost = gallons_needed * cost_per_gallon
    return total_cost

 Executed result: 826.0
[EXP] 1008: [success_rate]: True, [answer]: 34, [output]: def solution():
    red_sticks = 9
    blue_sticks = red_sticks + 5
    yellow_sticks = blue_sticks - 3
    result = red_sticks + blue_sticks + yellow_sticks
    return result

 Executed result: 34
[EXP] 1009: [success_rate]: True, [answer]: 230, [output]: def solution():
    matteo_miles = 55 * 4
    shandy_miles = 45 * 10
    matteo_distance = shandy_miles - matteo_miles
    return matteo_distance

 Executed result: 230
[EXP] 1010: [success_rate]: False, [answer]: 1,875, [output]: 
def solution():
    students_total = 3000
    students_over_16 = students_total // 2
    male_students_over_16 = students_over_16 // 4
    students_under_16 = students_total - students_over_16
    female_students_over_16 = students_over_16 - male_students_over_16
    female_students_under_16 = students_under_16 // 2
    total_female_students = female_students_over_16 + female_students_under_16
    return total_female_students

 Executed result: 1875
[EXP] 1011: [success_rate]: True, [answer]: 5, [output]: def solution():
    anna_laps = 10
    b = anna_laps
    c = b + 4
    d = c / 2
    e = d - 2
    result = b - e
    return result

 Executed result: 5.0
[EXP] 1012: [success_rate]: True, [answer]: 6000, [output]: def solution():
    tank_capacity = 18000
    wanda_first_day = tank_capacity / 4
    msb_first_day = wanda_first_day * (3/4)
    total_first_day = wanda_first_day + msb_first_day
    wanda_second_day = wanda_first_day * (2/3)
    msb_second_day = msb_first_day * (1/3)
    total_second_day = wanda_second_day + msb_second_day
    
    full_tank = tank_capacity - (total_first_day + total_second_day)
    return full_tank

 Executed result: 6000.0
[EXP] 1013: [success_rate]: False, [answer]: 94, [output]: def solution():
    power_bank_capacity = (100 - 28) / 28 * 100
    hours_9_loss = 5
    hours_7_loss = 3
    power_bank_left_9 = power_bank_capacity * (1 - 0.09) ** hours_9_loss
    power_bank_left_7 = power_bank_left_9 * (1 - 0.07) ** hours_7_loss
    return power_bank_left_7

 Executed result: 129.07147477788018
[EXP] 1014: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    wages = 10
    tips = 15
    hours_per_week = 40
    weeks_needed = 0
    weeks_to_save = 0
    target = (10000 * 20) / 100  # 20% of $10000
    total_income_per_week = wages * hours_per_week + (tips * hours_per_week)
    while total_income_per_week < target:
        weeks_needed += 1
        weeks_to_save += 1
        total_income = weeks_to_save * total_income_per_week
        if total_income >= target:
            break
    result = weeks_needed
    return result

 Executed result: 2
[EXP] 1015: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    money_initial = 10
    peaches = 3
    peaches_cost = peaches * 0.5
    pears = 4
    pears_cost = pears * 0.5
    kiwis = 2
    kiwis_cost = kiwis * 1
    apples = 5
    apples_cost = apples * 0.75
    money_spent = peaches_cost + pears_cost + kiwis_cost + apples_cost
    money_left = money_initial - money_spent
    plums_cost = 0.25
    plums = int(money_left // plums_cost)
    return plums

 Executed result: 3
[EXP] 1016: [success_rate]: True, [answer]: 78, [output]: def solution():
    packs = 15
    pieces_per_pack = 60
    pieces_total = packs * pieces_per_pack
    pieces_given = pieces_total - 2 * pieces_per_pack
    friends = 10
    pieces_per_friend = pieces_given // friends
    return pieces_per_friend

 Executed result: 78
[EXP] 1017: [success_rate]: True, [answer]: 138, [output]: 
def solution(principal=120):
    for _ in range(3):
        principal = round(principal + (principal * 0.05))
    return principal

 Executed result: 139
[EXP] 1018: [success_rate]: False, [answer]: 45, [output]: 
def solution():
    total_pics = 72
    total_albums = 8
    selfie_albums = 3
    portraits_albums = 2
    selfies = selfie_albums * 8
    portraits = (total_pics - selfies) // 8
    return selfies, portraits

 Executed result: (24, 6)
[EXP] 1019: [success_rate]: False, [answer]: 60, [output]: def solution():
    minute_per_page = 10 // 3
    pages_read = 18
    total_minutes = minute_per_page * pages_read
    return total_minutes

 Executed result: 54
[EXP] 1020: [success_rate]: True, [answer]: 98, [output]: def solution():
    guests_initial = 100
    early_checkouts = 24
    late_checkouts = 15
    checkout_diff = guests_initial - early_checkouts - late_checkouts
    new_arrivals = 2 * late_checkouts + 7
    guests_final = checkout_diff + new_arrivals
    return guests_final

 Executed result: 98
[EXP] 1021: [success_rate]: True, [answer]: 22, [output]: def solution():
    bananas_wednesday = 4
    bananas_thursday = 6
    bananas_friday = 3 * bananas_wednesday
    total_bananas = bananas_wednesday + bananas_thursday + bananas_friday
    result = total_bananas
    return result

 Executed result: 22
[EXP] 1022: [success_rate]: False, [answer]: 36, [output]: def solution():
    easy_questions = int(60 * 40 / 100)
    easy_score = int(easy_questions * 75 / 100)
    rest_questions = 60 - easy_questions
    rest_score = easy_questions - easy_score
    average_questions = rest_questions / 2
    difficult_questions = rest_questions - average_questions
    total_score = easy_score + average_questions + difficult_questions
    return total_score

 Executed result: 54.0
[EXP] 1023: [success_rate]: False, [answer]: 12, [output]: def solution():
    price_large = 3 * price_small
    sales_large = sales_small / 2
    sales_small = (120 - (sales_large * price_large)) / price_small
    return sales_small

 Executed result: None
[EXP] 1024: [success_rate]: True, [answer]: 77, [output]: 
def solution():
    man_sandwiches_per_day = 5
    wife_sandwiches_per_day = 4
    son_sandwiches_per_day = 2
    days_in_a_week = 7
    family_sandwiches_per_day = man_sandwiches_per_day + wife_sandwiches_per_day + son_sandwiches_per_day
    family_sandwiches_in_a_week = family_sandwiches_per_day * days_in_a_week
    result = family_sandwiches_in_a_week
    return result

 Executed result: 77
[EXP] 1025: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    cookies_sold = 80
    cookie_price = 1
    cupcakes_sold = 60
    cupcakes_price = 4
    cookie_earnings = cookies_sold * cookie_price
    cupcake_earnings = cupcakes_sold * cupcakes_price
    total_earnings = cookie_earnings + cupcake_earnings
    expenses = 10 * 2  # total amount given to sisters
    money_left = total_earnings - expenses
    return money_left

 Executed result: 300
[EXP] 1026: [success_rate]: True, [answer]: 30, [output]: def solution():
    total_eggs = 100
    eggs_found_by_twins = 2 * 30
    eggs_left = total_eggs - eggs_found_by_twins
    eggs_found_by_friends = eggs_left - 10
    return eggs_found_by_friends

 Executed result: 30
[EXP] 1027: [success_rate]: True, [answer]: 43200, [output]: def solution():
    pounds_per_dwarfsteel = 12 * (1 + 0.5) * 2
    pounds_per_dwarf = pounds_per_dwarfsteel
    pounds_per_day = pounds_per_dwarf * 1
    pounds_per_month = pounds_per_day * 30
    pounds_per_40_dwarves = pounds_per_month * 40
    result = pounds_per_40_dwarves
    return result

 Executed result: 43200.0
[EXP] 1028: [success_rate]: True, [answer]: 12, [output]: def solution():
    package1 = [2, 3]
    package2 = [4, 6]
    ratio = package2[1] / package2[0]
    price_per_sandwich = package1[1] / package1[0]
    package3_sandwiches = 8
    package3_price = package3_sandwiches * price_per_sandwich
    return package3_price

 Executed result: 12.0
[EXP] 1029: [success_rate]: True, [answer]: 200, [output]: 
def solution():
    bedroom_set_cost = 3000
    old_bedroom_price = 1000
    money_left = bedroom_set_cost - old_bedroom_price
    interest_rate = 0.1
    monthly_payment = money_left * interest_rate
    return monthly_payment

 Executed result: 200.0
[EXP] 1030: [success_rate]: True, [answer]: 34, [output]: 
def solution():
    num_red = 25
    num绿 = 7
    num_yellow = 12
    red_burst = int(0.4 * num_red)
    yellow_burst = int(num_yellow / 2)
    blue_found = 8
    blue_added = int(blue_found * 0.75)
    num_red_left = num_red - red_burst
    total_balloons = num_red_left + num绿 + num_yellow - yellow_burst + blue_added
    return total_balloons

 Executed result: 34
[EXP] 1031: [success_rate]: False, [answer]: 24, [output]: def solution():
    probability_no_substitute = 0.5
    probability_extension_for_class = 0.4
    probability_personal_extension = 0.2
    probability_no_extension = 1 - probability_extension_for_class
    probability_no_extension_no_personal_extension = probability_no_extension * probability_extension_for_class
    probability_do_homework = probability_no_substitute * probability_no_extension_no_personal_extension
    percentage = probability_do_homework * 100
    return round(percentage, 2)

 Executed result: 12.0
[EXP] 1032: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    seats_available = 6000 - 950 - 300
    tickets_per_graduate = seats_available // 950
    return tickets_per_graduate

 Executed result: 5
[EXP] 1033: [success_rate]: False, [answer]: 450, [output]: 
def solution():
    large_beans = 75
    medium_beans = 2 * large_beans
    small_beans = medium_beans * 3
    small_beans_consumed = 3
    result = small_beans / small_beans_consumed
    return result

 Executed result: 150.0
[EXP] 1034: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    hours_per_day = 6
    days = 3
    daily_pay = 15
    daily_expenses = 3
    total_pay = daily_pay * days
    total_expenses = daily_expenses * days
    total_pay_after_expenses = total_pay - total_expenses
    total_hours = hours_per_day * days
    hourly_pay = total_pay_after_expenses / total_hours
    return hourly_pay

 Executed result: 2.0
[EXP] 1035: [success_rate]: True, [answer]: 66, [output]: 
def solution():
    money_initial = 200
    books = 3
    book_cost = 16
    book_spent = books * book_cost
    pencils = 3
    pencil_cost = 6
    pencil_spent = pencils * pencil_cost
    total_spent = book_spent + pencil_spent
    result = total_spent
    return result

 Executed result: 66
[EXP] 1036: [success_rate]: False, [answer]: 35, [output]: def solution():
    driveway_width = 24
    bottle_distance = 3
    time_to_drop_candy = 5
    total_bottles = driveway_width // bottle_distance
    time_needed = total_bottles * time_to_drop_candy
    result = time_needed
    return result

 Executed result: 40
[EXP] 1037: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    apples_total = 2 * 40
    apples_per_pack = 8
    packs = apples_total // apples_per_pack
    return packs

 Executed result: 10
[EXP] 1038: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    cash_initial = 50
    parmesan_price = 11
    parmesan_weight = 2
    parmesan_cost = parmesan_price * parmesan_weight
    mozzarella_price = 6
    mozzarella_weight = 3
    mozzarella_cost = mozzarella_price * mozzarella_weight
    total_cost = parmesan_cost + mozzarella_cost
    money_left = cash_initial - total_cost
    result = money_left
    return result

 Executed result: 10
[EXP] 1039: [success_rate]: False, [answer]: 4, [output]: def solution():
    compound_interest = 0
    salary_before_college = 25000
    loan_amount = 50000
    years_in_college = 4
    income_with_degree = salary_before_college * 3
    
    # calculate the salary while in college
    salary_while_in_college = salary_before_college * 1
    
    for year in range(years_in_college):
        income_now = income_with_degree
        compound_interest += loan_amount
        income_now += compound_interest
        #start saving now for the college loan
        print(f"Year: {year+1}, Salary: {income_now}, Compound interest: {compound_interest}")
        compound_interest *= 1.03 # for the interest
    
    # print result
    return compound_interest - loan_amount

 Executed result: 165456.7905
[EXP] 1040: [success_rate]: False, [answer]: 160, [output]: 
def solution():
    bed_length = 6
    bed_width = 8
    fabric_length = bed_length + 2
    fabric_width = bed_width + 2
    fabric_area = fabric_length * fabric_width
    result = fabric_area
    return result

 Executed result: 80
[EXP] 1041: [success_rate]: True, [answer]: 736, [output]: 
def solution():
    letters_monday = 425
    letters_tuesday = (letters_monday / 5) + 17
    letters_wednesday = 2 * letters_tuesday + 5
    total_letters = letters_monday + letters_tuesday + letters_wednesday
    result = total_letters
    return result

 Executed result: 736.0
[EXP] 1042: [success_rate]: True, [answer]: 101, [output]: def solution():
    chicken_collector = 10
    chicken_cost = 6.50
    pasta_collector = 6
    pasta_cost = 6
    total_chicken_cost = chicken_collector * chicken_cost
    total_pasta_cost = pasta_collector * pasta_cost
    total_cost = total_chicken_cost + total_pasta_cost
    return total_cost

 Executed result: 101.0
[EXP] 1043: [success_rate]: False, [answer]: 3, [output]: def solution():
    lose = -5
    win = 2 * lose + 1
    lose2 = win * 1.5
    total_loss = lose + lose2
    average_loss = total_loss / 3
    result = round(average_loss, 2)
    return result

 Executed result: -6.17
[EXP] 1044: [success_rate]: True, [answer]: 130000, [output]: 
def solution():
    countries = 26
    cities_per_country = 5
    population_per_city = 1000
    total_population = countries * cities_per_country * population_per_city
    return total_population

 Executed result: 130000
[EXP] 1045: [success_rate]: True, [answer]: 1, [output]: def solution():
    xavier_height = 4
    xavier_growth = 3
    xavier_current_height = xavier_height * 12 + xavier_growth

    cole_height = 50
    cole_growth = 2
    cole_current_height = cole_height + cole_growth

    difference = abs(cole_current_height - xavier_current_height)
    return difference

 Executed result: 1
[EXP] 1046: [success_rate]: False, [answer]: 420, [output]: def solution():
    total_amount = 1920
    person2 = 1920 // 3 + 80
    person3 = 2 * person2
    person1 = total_amount - person2 - person3
    return person1

 Executed result: -240
[EXP] 1047: [success_rate]: False, [answer]: 189, [output]: def solution():
    hours_per_day = 3 / 8
    days = 3 * 7
    total_hours = hours_per_day * days
    painters_per_team = 4
    hours_per_painter = total_hours / painters_per_team
    result = hours_per_painter
    return result

 Executed result: 1.96875
[EXP] 1048: [success_rate]: False, [answer]: 10, [output]: 
def solution():
    balls = 19
    second_set_balls = balls - (balls // 2 - balls // 6)
    first_set_balls = second_set_balls + balls // 6
    return int(first_set_balls)

 Executed result: 16
[EXP] 1049: [success_rate]: False, [answer]: 7400, [output]: def solution():
    car_price = 20000
    decay_rate = 21
    years = 3
    price_after_years = car_price * (1 - decay_rate / 100) ** years
    result = price_after_years
    return result

 Executed result: 9860.78
[EXP] 1050: [success_rate]: True, [answer]: 20, [output]: def solution():
    books = 50
    english_books = books / 2
    german_books = books / 10
    spanish_books = books - english_books - german_books
    return spanish_books

 Executed result: 20.0
[EXP] 1051: [success_rate]: True, [answer]: 655, [output]: 
def solution():
    start = 1955
    drive = 325
    days = 4
    total_drive = drive * days
    way_left = start - total_drive
    return way_left

 Executed result: 655
[EXP] 1052: [success_rate]: True, [answer]: 15, [output]: def solution():
    cups_per_day = 8
    days = 30
    cups_per_gallon = 16
    cups_drunk = cups_per_day * days
    gallons_drunk = cups_drunk / cups_per_gallon
    return gallons_drunk

 Executed result: 15.0
[EXP] 1053: [success_rate]: False, [answer]: 110, [output]: def solution():
    total_people = 120
    added_at_first_stop = 20
    total_people += added_at_first_stop
    added_at_second_stop = 50 * 2
    total_people += added_at_second_stop
    added_at_third_stop = 80
    total_people -= added_at_third_stop
    result = total_people
    return result

 Executed result: 160
[EXP] 1054: [success_rate]: True, [answer]: 55, [output]: 
def solution():
    tank_top = 10
    shorts = tank_top + 5
    shoes = 48 / 2
    socks = 8 - 2
    total_cost = tank_top + shorts + shoes + socks
    return total_cost

 Executed result: 55.0
[EXP] 1055: [success_rate]: False, [answer]: 2400, [output]: 
def solution():
    area = 200
    tile_cost = 12
    tile_length = 1
    tiles_needed = (area / (tile_length ** 2)) ** 0.5
    cost = tiles_needed * tile_cost
    return cost

 Executed result: 169.7056274847714
[EXP] 1056: [success_rate]: True, [answer]: 2304, [output]: def solution():
    normal_cost = 120
    additional_cost = 0.6 * normal_cost
    total_cost = normal_cost + additional_cost
    year_cost = total_cost * 12
    return year_cost

 Executed result: 2304.0
[EXP] 1057: [success_rate]: False, [answer]: 156, [output]: 
def solution():
    twin_beds = 4
    king_bed = 1
    loads_per_week = 3
    loads_per_year = (twin_beds // loads_per_week) * 2 + (twin_beds % loads_per_week) * (king_bed // loads_per_week) + (twin_beds % loads_per_week) % king_bed + (52 // 4) * king_bed
    result = loads_per_year
    return result

 Executed result: 15
[EXP] 1058: [success_rate]: False, [answer]: 24, [output]: def solution():
    movies_per_week = 4 + 2
    movies_per_weekend = movies_per_week * 2
    movies_in_4_weeks = movies_per_weekend * 4
    return movies_in_4_weeks

 Executed result: 48
[EXP] 1059: [success_rate]: True, [answer]: 250, [output]: def solution():
    stickers_initial = 100
    stickers_collected_previous_year = 50
    stickers_collected_current_year = 2 * stickers_collected_previous_year
    stickers_total = stickers_initial + stickers_collected_previous_year + stickers_collected_current_year
    result = stickers_total
    return result

 Executed result: 250
[EXP] 1060: [success_rate]: False, [answer]: 2, [output]: def solution():
    cat_food = 720
    daily_food = 60
    total_days = cat_food // daily_food
    return total_days

 Executed result: 12
[EXP] 1061: [success_rate]: False, [answer]: 31, [output]: def solution():
    slices_per_pizza = 8
    pizzas = 4
    total_slices = slices_per_pizza * pizzas

    jake_slices = total_slices // 3
    silence_slices = 2 * jake_slices
    becky_slices = 3 + jake_slices

    total_ slices_eaten = becky_slices + jake_slices + silence_slices

    return total_slices_eaten

 Executed result: None
[EXP] 1062: [success_rate]: False, [answer]: 58, [output]: 
def solution():
    total_time = 98
    donovans_time = total_time // 2
    betsys_time = donovans_time + 18
    result = betsys_time
    return result

 Executed result: 67
[EXP] 1063: [success_rate]: True, [answer]: 482, [output]: def solution():
    doctor_visit = 200
    doctor_time = 0.5  # 30 minutes is 0.5 hours
    doctor_rate = 300
    doctor_cost = doctor_time * doctor_rate
    painkillers = 30
    painkiller_cost = painkillers * 4
    parking = 2 * 6  # 2 hours is the minimum parking requirement
    total = doctor_visit + doctor_cost + painkiller_cost + parking
    return total

 Executed result: 482.0
[EXP] 1064: [success_rate]: False, [answer]: 320, [output]: def solution():
    emails_daily = 80
    percentage = 20
    percentage_left = 100 - percentage
    emails_not_responded = (emails_daily / 100) * percentage
    emails_to_reply = emails_daily - emails_not_responded
    emails_per_week = emails_daily * 5
    emails_reply_week = (emails_per_week / 5) * (percentage_left)
    return emails_reply_week

 Executed result: 6400.0
[EXP] 1065: [success_rate]: True, [answer]: 247, [output]: def solution():
    classes_monday = 32
    classes_tuesday = 32 * 2
    classes_wednesday = 32 * 3
    classes_thursday = 30
    classes_friday = 25
    total_classes = classes_monday + classes_tuesday + classes_wednesday + classes_thursday + classes_friday
    result = total_classes
    return result

 Executed result: 247
[EXP] 1066: [success_rate]: True, [answer]: 95, [output]: 
def solution():
    score1 = 100
    score2 = 100
    score3 = 100
    score4 = 80
    total_score = score1 + score2 + score3 + score4
    average_score = total_score / 4
    return average_score

 Executed result: 95.0
[EXP] 1067: [success_rate]: False, [answer]: 14, [output]: def solution():
    pizzas_ordered_by_glee_cluster = 20
    pizzas_eaten_by_glee_cluster =izzas_ordered_by_glee_cluster * 0.7
    pizzas_left_by_glee_cluster = pizzas_ordered_by_glee_cluster - pizzas_eaten_by_glee_cluster
    pizzas_ordered_by_football_cluster = pizzas_ordered_by_glee_cluster * 2
    pizzas_eaten_by_football_cluster = pizzas_ordered_by_football_cluster * 0.8
    pizzas_left_by_football_cluster = pizzas_ordered_by_football_cluster - pizzas_eaten_by_football_cluster
    total_pizzas_left = pizzas_left_by_glee_cluster + pizzas_left_by_football_cluster
    return total_pizzas_left

 Executed result: None
[EXP] 1068: [success_rate]: True, [answer]: 245, [output]: 
def solution():
    total = 0
    small_coupons = 700
    big_coupons = 2 * 700
    cost_per_small_coupon = 0.05
    cost_per_big_coupon = 0.15
    cost_small = small_coupons * cost_per_small_coupon
    cost_big = big_coupons * cost_per_big_coupon
    total_cost = cost_small + cost_big
    return total_cost

 Executed result: 245.0
[EXP] 1069: [success_rate]: True, [answer]: 24, [output]: def solution():
    num_sub_sandwiches = 10 - 3
    meatballs_per_sub = 4
    sandwiches_mark_ate = 4
    additional_sub_sandwiches = 3
    total_sandwiches = num_sub_sandwiches - sandwiches_mark_ate + additional_sub_sandwiches
    total_meatballs = total_sandwiches * meatballs_per_sub
    return total_meatballs

 Executed result: 24
[EXP] 1070: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    trucks = 20
    tons_per_truck = 20
    failed_trucks = trucks // 4
    total_tons = trucks * tons_per_truck - failed_trucks * tons_per_truck
    return total_tons

 Executed result: 300
[EXP] 1071: [success_rate]: False, [answer]: 18, [output]: 
def solution():
    pounds_of_butter = 6
    price_per_pound = 4.00
    discounted_price_per_pound = price_per_pound * 0.5
    discount_pounds = 1
    total_price = (pounds_of_butter - discount_pounds) * price_per_pound + discount_pounds * discounted_price_per_pound
    return total_price

 Executed result: 22.0
[EXP] 1072: [success_rate]: False, [answer]: 251, [output]: 
def solution():
    theater_fee = 125
    initial_guests = 20
    additional_guests = 25 + 7 + 13 - 4
    total_guests = initial_guests + additional_guests
    cost = theater_fee + (total_guests - initial_guests) * 6
    return cost

 Executed result: 371
[EXP] 1073: [success_rate]: True, [answer]: 85, [output]: 
def solution():
    maggie_money = 60
    riza_money = 60
    maggie_money_spent = maggie_money / 4
    riza_money_spent = riza_money / 3
    maggie_money_left = maggie_money - maggie_money_spent
    riza_money_left = riza_money - riza_money_spent
    total_money_left = maggie_money_left + riza_money_left
    return total_money_left

 Executed result: 85.0
[EXP] 1074: [success_rate]: False, [answer]: 21, [output]: def solution():
    total_bananas = 315
    monkeys = 3
    smallest_monkey_eats = 10
    second_monkey_eats = smallest_monkey_eats + 4
    
    # Calculate total bananas each day the monkeys eat
    total_monkeys_eat = monkeys * total_bananas // (monkeys * 7)
    
    # The third monkey eats the rest of the bananas
    third_monkey_eats = total_monkeys_eat - (smallest_monkey_eats * total_monkeys_eat // 10)
    
    result = third_monkey_eats
    return result

 Executed result: 0
[EXP] 1075: [success_rate]: False, [answer]: 750, [output]: 
def solution():
    puzzle1 = 500
    puzzle2 = 500
    pieces_placed = puzzle1 + puzzle2
    return pieces_placed

 Executed result: 1000
[EXP] 1076: [success_rate]: False, [answer]: 16, [output]: def solution():
    rose_price = 15
    number_of_roses = 15
    total_cost = number_of_roses * 2
    money_initial = 5 * 5
    money_spent = total_cost
    money_left = money_initial - money_spent
    quarters_per_dollar = 4
    quarters_left = int(money_left * quarters_per_dollar)
    result = quarters_left
    return result

 Executed result: -20
[EXP] 1077: [success_rate]: True, [answer]: 162, [output]: 
def solution():
    mil_shakes = 6
    shake_price = 5.50
    milshake_money = mil_shakes * shake_price

    burger_platters = 9
    platter_price = 11
    platter_money = burger_platters * platter_price

    sodas = 20
    soda_price = 1.50
    soda_money = sodas * soda_price

    total_money = milshake_money + platter_money + soda_money
    result = total_money
    return result

 Executed result: 162.0
[EXP] 1078: [success_rate]: False, [answer]: 145, [output]: 
def solution():
    train_arrival_time = 10
    train_stay_first = 20
    train_arrival_time_second = train_arrival_time + 20
    train_stay_second = train_stay_first / 4
    train_arrival_time_third = train_arrival_time_second + 60
    train_arrival_time_fourth = train_arrival_time_third + 20
    wait_time = train_arrival_time_fourth
    return wait_time

 Executed result: 110
[EXP] 1079: [success_rate]: True, [answer]: 8, [output]: def solution():
    toothpicks_saved = 10
    weeks_saved = 12
    total_toothpicks_saved = toothpicks_saved * weeks_saved
    toothpicks_needed = 200
    remaining_toothpicks = toothpicks_needed - total_toothpicks_saved
    weeks_needed = remaining_toothpicks // toothpicks_saved
    if remaining_toothpicks % toothpicks_saved != 0:
        weeks_needed += 1
    result = weeks_needed
    return result

 Executed result: 8
[EXP] 1080: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    watch_price = 2000
    discounted_price = watch_price * 0.75
    sold_price = discounted_price * 1.2
    discount = (watch_price - sold_price) / watch_price * 100
    return discount

 Executed result: 10.0
[EXP] 1081: [success_rate]: False, [answer]: 72000, [output]: def solution():
    springs = 5
    seconds_per_hour = 60
    jellyfish_per_second = 1
    hours = 4
    jellyfish_per_spring_per_hour = jellyfish_per_second * seconds_per_hour
    jellyfish_total = jellyfish_per_spring_per_hour * springs * hours
    return jellyfish_total

 Executed result: 1200
[EXP] 1082: [success_rate]: False, [answer]: 195, [output]: def solution():

 Executed result: None
[EXP] 1083: [success_rate]: False, [answer]: 2, [output]: def solution():
    distance_home = 4
    distance_store = 4
    speed = 4
    total_distance = 2 * (distance_home + distance_store)
    time_taken = total_distance / speed
    result = time_taken
    return result

 Executed result: 4.0
[EXP] 1084: [success_rate]: True, [answer]: 2, [output]: def solution():
    bananas_per_bunch = 4
    cost_per_bunch = 3
    bananas = bananas_per_bunch * 10
    cost_per_individual = 0.8
    cost_individual = bananas * cost_per_individual
    savings = cost_individual - cost_per_bunch * 10
    return savings

 Executed result: 2.0
[EXP] 1085: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    total_fence = 100
    harry_fence = total_fence - (total_fence - 60)
    sam_fence = total_fence - harry_fence
    left_over = total_fence - (harry_fence + sam_fence)
    return left_over

 Executed result: 0
[EXP] 1086: [success_rate]: True, [answer]: 26, [output]: def solution():
    growth_rate = 8
    years = 4
    growth_per_year = growth_rate / years
    years_to_calculate = 13
    total_growth = growth_per_year * (years_to_calculate - years)
    result = growth_rate + total_growth
    return result

 Executed result: 26.0
[EXP] 1087: [success_rate]: True, [answer]: 131250, [output]: 
def solution():
    mtb_price = 500
    bmx_price = mtb_price / 2
    trekking_price = 450
    total_bikes = 300
    trekking_bikes = total_bikes // 2
    bmx_bikes = (total_bikes * 15) // 100
    mtb_bikes = total_bikes - trekking_bikes - bmx_bikes
    income = (trekking_bikes * trekking_price) + (bmx_bikes * bmx_price) + (mtb_bikes * mtb_price)
    return income

 Executed result: 131250.0
[EXP] 1088: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    bales_per_hour_farmer = 5
    bales_per_hour_truck = 3
    total_hours = 6
    total_bales_farmer = bales_per_hour_farmer * total_hours
    total_bales_truck = bales_per_hour_truck * total_hours
    total_bales_removed = total_bales_farmer + total_bales_truck
    total_bales_initial = 0  # initially there were 0 bales
    bales_left = total_bales_initial - total_bales_removed
    return bales_left

 Executed result: -48
[EXP] 1089: [success_rate]: False, [answer]: 30, [output]: def solution():
    periods = 6
    extra_classes = 2
    class_length = 40
    days = 5
    total_minutes_per_week = (periods + extra_classes) * 2 * days * 40
    saturday EXTRA = 40 * 5
    sunday_EXTRA = 40 * 5
    extra_minutes = saturday_EXTRA + sunday_EXTRA
    total_learning_minutes = total_minutes_per_week + extra_minutes
    hours_learning = total_learning_minutes / 60
    return hours_learning

 Executed result: None
[EXP] 1090: [success_rate]: False, [answer]: 32, [output]: 
def solution():
    initial_height = 3 * 24
    fraction = 2 / 3
    second_height = initial_height * fraction
    return second_height

 Executed result: 48.0
[EXP] 1091: [success_rate]: False, [answer]: 72, [output]: 
def solution():
    first_child_feet = 6
    second_child_feet = first_child_feet
    third_child_feet = second_child_feet - 0.5
    fourth_child_feet = third_child_feet + 0.5   
    fourth_child_inches = (first_child_feet * 12 + fourth_child_feet * 12)
    result = fourth_child_inches
    return result

 Executed result: 144.0
[EXP] 1092: [success_rate]: True, [answer]: 1000, [output]: def solution():
    apples_per_bag = 10
    total_apples = 2000
    bags_sold = total_apples // apples_per_bag  # use integer division for bag count
    price_per_bag = 5
    revenue = bags_sold * price_per_bag
    return revenue

 Executed result: 1000
[EXP] 1093: [success_rate]: False, [answer]: 1080, [output]: 
def solution():
    half_eaten_by_saur = 270
    half_eaten_by_vel = half_eaten_by_saur / 2
    initial_weight = half_eaten_by_vel * 2 + 270
    return initial_weight

 Executed result: 540.0
[EXP] 1094: [success_rate]: True, [answer]: 144, [output]: def solution():
    north = 10 * 8
    south = 10 * 8
    east = 5 * 8
    west = 5 * 8
    total_square_feet = north + south + east + west
    gallons_needed = total_square_feet / 20
    cost = gallons_needed * 12
    return cost

 Executed result: 144.0
[EXP] 1095: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    sodas = 12
    shaken_sodas = 3
    taken_unshaken = 1 + 2
    total_taken = shaken_sodas + taken_unshaken
    remaining_shaken = shaken_sodas - 1
    remaining_unshaken = sodas - total_taken
    chance = (remaining_unshaken / (sodas - taken_unshaken)) * (remaining_shaken / sodas) * 100
    return chance

 Executed result: 11.11111111111111
[EXP] 1096: [success_rate]: True, [answer]: 270, [output]: 
def solution():
    speed1 = 60
    speed2 = speed1 / 2
    hours = 3
    distance1 = speed1 * hours
    distance2 = speed2 * hours
    total_distance = distance1 + distance2
    return total_distance

 Executed result: 270.0
[EXP] 1097: [success_rate]: True, [answer]: 240, [output]: 
def solution():
    total_days = 31 + 19
    days_off = int(0.2 * total_days)
    total_people = 2 * 3 * (total_days - days_off)
    result = int(total_people)
    return result

 Executed result: 240
[EXP] 1098: [success_rate]: True, [answer]: 480, [output]: 
def solution():
    bus_people = 35
    bus_count = 12
    car_people = 3
    car_count = 20
    people_inside = (bus_people * bus_count) + (car_people * car_count)
    return people_inside

 Executed result: 480
[EXP] 1099: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    mikes_age = 24
    marthas_age = mikes_age - 4
    jeffs_age = marthas_age + 10
    result = jeffs_age
    return result

 Executed result: 30
[EXP] 1100: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    slide1_length = 300
    slide1_velocity = 60
    slide2_length = 240
    slide2_velocity = 80

    slide1_time = slide1_length / slide1_velocity
    slide2_time = slide2_length / slide2_velocity

    time_diff = slide1_time - slide2_time
    result = time_diff
    return result

 Executed result: 2.0
[EXP] 1101: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    lunch_time = 0.5
    break_time = 2
    total_break_time = break_time * 15
    total_time_per_day = lunch_time + total_break_time
    days = 5
    total_hours = total_time_per_day * days
    return total_hours

 Executed result: 152.5
[EXP] 1102: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    total_miles = 52
    amber_miles = 8
    micah_miles = amber_miles * 3.5
    ahito_miles = total_miles - amber_miles - micah_miles
    result = ahito_miles
    return result

 Executed result: 16.0
[EXP] 1103: [success_rate]: False, [answer]: 113, [output]: def solution():
    initial_balance = 85.00
    returned_item_cost = 15.00

 Executed result: None
[EXP] 1104: [success_rate]: False, [answer]: 90, [output]: def solution():
    large_jellyfish = 5/4 * j
    large_jellyfish_blue = 1/3 * large_jellyfish
    j = (6 + large_jellyfish_blue) * 3
    return j

 Executed result: None
[EXP] 1105: [success_rate]: True, [answer]: 24, [output]: def solution():
    chris_age = 4
    ben_age = chris_age * 2
    caroline_age = ben_age * 3
    result = caroline_age
    return result

 Executed result: 24
[EXP] 1106: [success_rate]: False, [answer]: 40, [output]: def solution():
    current_salary = 100000
    retirement_years = 20
    cost_of_living = 0.4 * current_salary
    annual_savings = current_salary * 0.20
    total_savings = annual_savings * 12 * retirement_years
    money_needed = total_savings + cost_of_living
    years_needed = money_needed / annual_savings
    years_needed = round(years_needed)
    return years_needed

 Executed result: 242
[EXP] 1107: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    length_ribbon = 100
    total_cuts = 4 * 5
    length_final_cut = length_ribbon / total_cuts
    return round(length_final_cut, 2)

 Executed result: 5.0
[EXP] 1108: [success_rate]: True, [answer]: 360, [output]: def solution():
    boys = 240
    total_population = boys * 100 / 40
    girls = total_population - boys
    return girls

 Executed result: 360.0
[EXP] 1109: [success_rate]: True, [answer]: 38, [output]: def solution():
    pots = 19
    soil = 26
    total_cost = pots + soil
    coupon = 7
    total_spent = total_cost - coupon
    return total_spent

 Executed result: 38
[EXP] 1110: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    heels_height_4in = 3
    heels_height_2in = 3
    heels_height_total = (heels_height_4in * 4) + (heels_height_2in * 2)
    average_height = heels_height_total / (heels_height_4in + heels_height_2in)
    return average_height

 Executed result: 3.0
[EXP] 1111: [success_rate]: False, [answer]: 60, [output]: def solution():
    miles_to_hike = 9300
    hike_per_day = 2
    hike_distance_per_day = 125
    hike_days = miles_to_hike // hike_distance_per_day
    
    miles_left = miles_to_hike % hike_distance_per_day
    hike_needed_per_day = miles_left // (30 - hike_days)
    
    return hike_needed_per_day

 Executed result: -2
[EXP] 1112: [success_rate]: True, [answer]: 157, [output]: def solution():
    total_red = 3
    total_blue = 11
    total_green = 25

    cost_per_red = 9
    cost_per_blue = 5
    cost_per_green = 3

    total_cost_red = total_red * cost_per_red
    total_cost_blue = total_blue * cost_per_blue
    total_cost_green = total_green * cost_per_green

    total_cost = total_cost_red + total_cost_blue + total_cost_green

    return total_cost

 Executed result: 157
[EXP] 1113: [success_rate]: True, [answer]: 5, [output]: def solution():
    apples_initial = 12
    peter_apples = apples_initial // 4
    paul_apples = apples_initial // 3
    james_apples = apples_initial - peter_apples - paul_apples
    result = james_apples
    return result

 Executed result: 5
[EXP] 1114: [success_rate]: False, [answer]: -3, [output]: def solution():
    temp_initial = 2
    temp_dropped = 8
    temp Increased = 3
    temp_morning = temp_initial - temp_dropped + temp_Increased
    result = temp_morning
    return result

 Executed result: None
[EXP] 1115: [success_rate]: False, [answer]: 8, [output]: def solution():
    money_initial = 21
    money_saved = 11
    money_spent Comic_book = 5
    money_spent_puzzle = 19
    money_left = money_initial + money_saved - money_spent_Comic_book - money_spent_puzzle
    result = money_left
    return result

 Executed result: None
[EXP] 1116: [success_rate]: True, [answer]: 5, [output]: def solution():
    budget = 16
    money_spent = 4
    money_left = budget - money_spent
    books = 2
    total_cost = 2 * books
    money_per_book = money_left / books
    return money_per_book

 Executed result: 6.0
[EXP] 1117: [success_rate]: True, [answer]: 60, [output]: def solution():
    students_last_year = 50
    percent_increased = 20
    percent_increased = (percent_increased / 100)
    students_this_year = students_last_year * (1 + percent_increased)
    return students_this_year

 Executed result: 60.0
[EXP] 1118: [success_rate]: False, [answer]: 9, [output]: 
def solution():
    blinks_per_minute = 255
    total_blinks = 459
    minutes = total_blinks / blinks_per_minute
    result = minutes
    return result

 Executed result: 1.8
[EXP] 1119: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    total_male_guppies_initial = 4
    total_female_guppies_initial = 7
    total_male_goldfish_initial = 3
    total_female_goldfish_initial = 5
    
    total_male_guppies_after = total_male_guppies_initial + 2
    total_female_guppies_after = total_female_guppies_initial + 1
    total_male_goldfish_after = total_male_goldfish_initial + 2
    total_female_goldfish_after = total_female_goldfish_initial + 3
    
    male_fishes = total_male_guppies_after + total_male_goldfish_after
    female_fishes = total_female_guppies_after + total_female_goldfish_after
    
    female_fishes_than_male_fishes = female_fishes - male_fishes
    return female_fishes_than_male_fishes

 Executed result: 5
[EXP] 1120: [success_rate]: True, [answer]: 18, [output]: def solution():
    mow_time = 4
    dog_walk = mow_time + 2
    laundry_time = mow_time + 4
    total_time = mow_time + dog_walk + laundry_time
    return total_time

 Executed result: 18
[EXP] 1121: [success_rate]: False, [answer]: 560, [output]: 
def solution():
    trips_per_month = 2
    trip_distance = 2 * 70
    miles_per_month = trips_per_month * trip_distance
    result = miles_per_month
    return result

 Executed result: 280
[EXP] 1122: [success_rate]: False, [answer]: 35, [output]: def solution():
    sofie_distance = 10
    days = 7
    sofie_total_distance = sofie_distance * days
    sofie_total_distance *= 2
    brian_distance = sofie_total_distance / 2
    return brian_distance

 Executed result: 70.0
[EXP] 1123: [success_rate]: False, [answer]: 18, [output]: def solution():
    toys_to_make = 400
    total_workers = 5
    worker1_breadth = 2
    worker1_speed = 6
    worker2_breadth = 2
    worker2_speed = 4
    worker3_toys_made = (worker1_breadth * worker1_speed) + (worker2_breadth * worker2_speed)
    time = 10
    toys_made = worker3_toys_made * time
    toys_remaining = toys_to_make - toys_made
    fifth_worker_toys_made = toys_remaining
    return fifth_worker_toys_made

 Executed result: 200
[EXP] 1124: [success_rate]: True, [answer]: 105, [output]: def solution():
    kory_dog = 60
    elijah_dog_half = kory_dog / 2
    elijah_dog_one_fourth = kory_dog / 4
    elijah_dogs_total = elijah_dog_half + elijah_dog_one_fourth
    kory_dog_weight = kory_dog
    total_dogs_weight = kory_dog_weight + elijah_dogs_total
    return total_dogs_weight

 Executed result: 105.0
[EXP] 1125: [success_rate]: False, [answer]: 64, [output]: def solution():
    stickers_initial = (9 + 7) * 2
    return stickers_initial

 Executed result: 32
[EXP] 1126: [success_rate]: True, [answer]: 90, [output]: 
def solution():
    large_bags = 3
    ounces_per_bag = 10
    total_ounces = large_bags * ounces_per_bag
    mms_per_ounce = 30
    total_mms = total_ounces * mms_per_ounce
    small_bags = total_mms // 10
    return small_bags

 Executed result: 90
[EXP] 1127: [success_rate]: True, [answer]: 50, [output]: def solution():
    distance_alfie_flies = 400
    earth_circumference = 40000
    distance_half_way_earth = earth_circumference / 2
    days_to_cover_half_earth = distance_half_way_earth / distance_alfie_flies
    return days_to_cover_half_earth

 Executed result: 50.0
[EXP] 1128: [success_rate]: True, [answer]: 750, [output]: 
def solution():
    avg_speed = 120
    sec_fastest_speed = avg_speed * 5
    fastest_speed = sec_fastest_speed * 1.25
    return fastest_speed

 Executed result: 750.0
[EXP] 1129: [success_rate]: True, [answer]: 9, [output]: def solution():
    liam_age = 16
    liam_age_two_years_ago = liam_age - 2
    vince_age_two_years_ago = liam_age_two_years_ago / 2
    vince_age_now = vince_age_two_years_ago + 2
    result = vince_age_now
    return result

 Executed result: 9.0
[EXP] 1130: [success_rate]: False, [answer]: 8, [output]: def solution():
    eggs_total = 56
    arnold_madeline_eggs = 0
    camden_eggs = 0
    sarah_eggs = 0
    arnold_madeline_eggs = (eggs_total - camden_eggs - sarah_eggs) / 2
    sarah_eggs = (camden_eggs - 12)
    return camden_eggs - arnold_madeline_eggs

 Executed result: -28.0
[EXP] 1131: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    crayons = 200
    crayons_per_box = 8
    boxes = crayons // crayons_per_box
    total_crays = crayons
    total_boxes = boxes
    total_weight_crays = total_crays
    total_weight_boxes = total_boxes * 8
    total_weight = total_weight_crays + total_weight_boxes
    total_pounds = total_weight // 16
    remainder = total_weight % 16
    print("The total weight of the crayons and boxes is", total_weight, "ounces.  This is", total_pounds, "pounds and", remainder, "ounces.")
    return total_weight

 Executed result: 400
[EXP] 1132: [success_rate]: False, [answer]: 96, [output]: 
def solution():
    tree_height = 80
    cuttable_part = 0.8 * tree_height
    total_log_length = cuttable_part * 80 / 100
    plank_count = total_log_length * 5
    price_per_plank = 1.2
    total_profit = plank_count * price_per_plank
    return total_profit

 Executed result: 307.2
[EXP] 1133: [success_rate]: False, [answer]: 45000, [output]: 
def solution():
    valerie_salary = 5000
    brother_salary = valerie_salary * 2
    mom_salary = valerie_salary + brother_salary * 2
    total_salary = valerie_salary + brother_salary + mom_salary
    return total_salary

 Executed result: 40000
[EXP] 1134: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    beach_walk = 2
    sidewalk_walk = 1
    total_walk = beach_walk + sidewalk_walk
    beach_time = 40
    sidewalk_speed = 2
    beach_speed = 1
    beach_time_in_minutes = beach_time * 60 / beach_speed
    sidewalk_time_in_minutes = beach_time_in_minutes * sidewalk_speed / beach_speed
    total_time_in_minutes = beach_time_in_minutes + sidewalk_time_in_minutes
    return total_time_in_minutes

 Executed result: 7200.0
[EXP] 1135: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    total_saved = 4 * 8
    weeks_saved = 8
    target_total = 60
    weeks_left = (target_total - total_saved) / 4
    if weeks_left % 1 != 0:
        weeks_left = int(weeks_left) + 1
    return int(weeks_left)

 Executed result: 7
[EXP] 1136: [success_rate]: False, [answer]: 32, [output]: 
def solution():
    t1 = 7
    t2 = 7 + 4*2
    t3 = t2 + 3
    result = t3
    return result

 Executed result: 18
[EXP] 1137: [success_rate]: False, [answer]: 26, [output]: 
def solution():
    marbles_initial = (60 + 10) - 2*12
    return marbles_initial

 Executed result: 46
[EXP] 1138: [success_rate]: False, [answer]: 68, [output]: def solution():
    water_in_second_mug = 1
    initial_temp_second_mug = (4 * 33 - water_in_second_mug) / (water_in_second_mug - 4)
    temp_min = 40
    return temp_min

 Executed result: 40
[EXP] 1139: [success_rate]: True, [answer]: 700, [output]: 
def solution():
    cows_initial = 50
    chickens_initial = 20
    cows_arrived = 20
    chickens_arrived = 10
    days = 21
    cows_gained = cows_arrived * days
    chickens_gained = chickens_arrived * days
    cows_in_total = cows_initial + cows_gained
    chickens_in_total = chickens_initial + chickens_gained
    result = cows_in_total + chickens_in_total
    return result

 Executed result: 700
[EXP] 1140: [success_rate]: True, [answer]: 1, [output]: 
def solution():
    initial_cost = 10
    no_of_packages = 4
    total_cost = initial_cost * no_of_packages
    discount = total_cost * 0.10
    total_amount_after_discount = total_cost - discount
    no_of_bagels = 9 * no_of_packages
    total_cost_per_bagel = total_amount_after_discount / no_of_bagels
    return total_cost_per_bagel

 Executed result: 1.0
[EXP] 1141: [success_rate]: False, [answer]: 27, [output]: def solution():
    scoops_eaten = 23 - 5
    potatoes_per_scoop = 6 - 3
    potatoes_per_scoop_equivalent_to_one_scoop = 3 - 1
    total_potatoes = scoops_eaten * potatoes_per_scoop_equivalent_to_one_scoop
    potatoes_eaten = scoops_eaten * potatoes_per_scoop
    return min(total_potatoes, potatoes_eaten)

 Executed result: 36
[EXP] 1142: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    eggs_per_day_initial = 3
    days_initial = 30
    eggs_total_initial = eggs_per_day_initial * days_initial
    
    eggs_per_day_later = 5
    days_later = 30
    eggs_total_later = eggs_per_day_later * days_later
    
    eggs_total = eggs_total_initial + eggs_total_later
    
    dozen_eggs = eggs_total // 12
    
    return dozen_eggs

 Executed result: 20
[EXP] 1143: [success_rate]: True, [answer]: 9, [output]: def solution():
    green_jellybeans = 17
    red_jellybeans = 2 * green_jellybeans
    total_jellybeans = 60
    blue_jellybeans = total_jellybeans - green_jellybeans - red_jellybeans
    return blue_jellybeans

 Executed result: 9
[EXP] 1144: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    trees = 5
    lemons_per_tree = 6
    lemons_per_year = trees * lemons_per_tree
    lemons_in_decade = lemons_per_year * 10
    result = lemons_in_decade
    return result

 Executed result: 300
[EXP] 1145: [success_rate]: False, [answer]: 34, [output]: def solution():
    total_passengers = 84
    ratio_men_to_women = 5/9
    total_women = total_passengers * ratio_men_to_women / (1 + ratio_men_to_women)
    women_alight = 20
    women_remain = total_women - women_alight
    return women_remain

 Executed result: 10.000000000000004
[EXP] 1146: [success_rate]: False, [answer]: 291, [output]: 
def solution():
    sunflower_price = 2
    bouquet_price = 8
    bouquets_sold_daily = 56 / bouquet_price
    sunflowers_per_bouquet = 12
    sunflowers_sold_daily = bouquets_sold_daily * sunflowers_per_bouquet
    sunflowers_sold_in_3_days = sunflowers_sold_daily * 3
    result = sunflowers_sold_in_3_days
    return result

 Executed result: 252.0
[EXP] 1147: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    adam_money = 100
    cost_per_rock = 5
    sell_per_rock = 7
    rocks_bought = adam_money // cost_per_rock
    money_spent = rocks_bought * cost_per_rock
    rocks_sold = rocks_bought * 0.6
    moneyearned = rocks_sold * sell_per_rock
    money_lost = money_spent - moneyearned
    return money_lost

 Executed result: 16.0
[EXP] 1148: [success_rate]: False, [answer]: 22, [output]: 
def solution():
    large_scenes = 45
    medium_scenes = 36
    small_scenes = 49
    large_per_day = 5
    medium_per_day = 6
    small_per_day = 7
    total_days = 0
    total_large = 0
    total_medium = 0
    total_small = 0
    while total_large < large_scenes:
        total_days += 1
        total_large += large_per_day
        total_medium += medium_per_day
        total_small += small_per_day
        if total_medium >= medium_scenes and total_small >= small_scenes:
            return total_days
    return total_days

 Executed result: 7
[EXP] 1149: [success_rate]: True, [answer]: 9, [output]: def solution():
    eggs = 3 * 12
    children = 4
    eggs_per_child = eggs / children
    result = eggs_per_child
    return result

 Executed result: 9.0
[EXP] 1150: [success_rate]: True, [answer]: 93, [output]: 
def solution():
    fish = 3
    daily_food_cost = 1
    days_in_may = 31
    cost_for_a_day = fish * daily_food_cost
    total_cost_in_may = cost_for_a_day * days_in_may
    result = total_cost_in_may
    return result

 Executed result: 93
[EXP] 1151: [success_rate]: True, [answer]: 21, [output]: def solution():
    roses_initial = 30
    roses_given = 24
    roses_obtained = 15
    roses_after_giving = roses_initial - roses_given
    roses_now = roses_after_giving + roses_obtained
    result = roses_now
    return result

 Executed result: 21
[EXP] 1152: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    distance1 = 110
    time1 = 2
    distance2 = 140
    time2 = 3
    total_distance = distance1 + distance2
    total_time = time1 + time2
    average_speed = total_distance / total_time
    return average_speed

 Executed result: 50.0
[EXP] 1153: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    winChance1 = 0.20
    winChance2 = 1 - 0.80 + 0.20 * 3
    bothWinChance = winChance1 * winChance2
    bothWinPercentage = bothWinChance * 100
    return bothWinPercentage

 Executed result: 16.000000000000004
[EXP] 1154: [success_rate]: True, [answer]: 20, [output]: def solution():
    jim_shells = 27
    carlos_shells = jim_shells - 5
    carrey_shells = carlos_shells // 2
    total_shells = jim_shells + carlos_shells + carrey_shells
    shells_per_person = total_shells // 3
    return shells_per_person

 Executed result: 20
[EXP] 1155: [success_rate]: True, [answer]: 30, [output]: python
def solution():
    weekdays = 5
    carrots_per_weekday = 4
    weekend_days = 2
    carrots_per_weekend = 5
    total_carrots_per_week = (weekdays * carrots_per_weekday) + (weekend_days * carrots_per_weekend)
    result = total_carrots_per_week
    return result

 Executed result: 30
[EXP] 1156: [success_rate]: True, [answer]: 13, [output]: def solution():
    song1_time = 5
    song2_time = song1_time * 1.6
    total_time = song1_time + song2_time
    return total_time

 Executed result: 13.0
[EXP] 1157: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    devices_monday = 2
    devices_tuesday = 4
    device_cost = 20
    total_devices = devices_monday + devices_tuesday
    total_cost = total_devices * device_cost
    selling_price = 2 * total_cost
    profit = selling_price - total_cost
    return profit

 Executed result: 120
[EXP] 1158: [success_rate]: True, [answer]: 3, [output]: def solution():
    isabel_height = 7
    ned_height = isabel_height - 2
    carl_height = ned_height + 1
    cane_length = carl_height / 2
    return cane_length

 Executed result: 3.0
[EXP] 1159: [success_rate]: False, [answer]: 7300, [output]: 
def solution():
    daily_energy_needs = 2300
    energy_per_juice = 0.20
    juices_per_day = daily_energy_needs * (1 / energy_per_juice)
    required_juices = math.ceil(juices_per_day)
    daily_production = 4200
    required_production = math.ceil(required_juices)
    return required_production - daily_production

 Executed result: None
[EXP] 1160: [success_rate]: False, [answer]: 50, [output]: 
import math

def solution():
    total_babies = 8
    purple_babies = math.ceil(3/4 * total_babies)
    blue_babies = total_babies - purple_babies
    purple_babies_with_bows = math.ceil(1/3 * purple_babies)
    all_babies_with_bows = purple_babies_with_bows + blue_babies
    purple_babies_with_bows_percentage = (purple_babies_with_bows / total_babies) * 100
    return purple_babies_with_bows_percentage

 Executed result: 25.0
[EXP] 1161: [success_rate]: False, [answer]: 1125, [output]: 
def solution():
    reports_received = 5168
    reports_received_monday_tuesday = 1907
    reports_received_thursday_friday = 2136
    reports_received_monday_tuesday_wednesday = reports_received_monday_tuesday
    reports_received_wednesday = reports_received_monday_tuesday_wednesday - reports_received_monday_tuesday + reports_received_thursday_friday
    return reports_received_wednesday

 Executed result: 2136
[EXP] 1162: [success_rate]: False, [answer]: 170, [output]: 
def solution():
    land_initial = 80
    land_sold_half = 80 / 2
    money_sold_half = land_sold_half * 50
    land_left = land_initial - land_sold_half
    
    land_sold_quarter = land_left / 4
    money_sold_quarter = land_sold_quarter * 30
    land_left = land_left - land_sold_quarter
    
    money_sold_regular = land_left * 3
    
    total_money = money_sold_half + money_sold_quarter + money_sold_regular
    return total_money

 Executed result: 2390.0
[EXP] 1163: [success_rate]: False, [answer]: 3, [output]: def solution():
    haley_age = 26
    geb_age = (haley_age * 2) / 2 - 10
    result = round(geb_age)
    return result

 Executed result: 16
[EXP] 1164: [success_rate]: True, [answer]: 12, [output]: def solution():
    out_times = 2
    mask_changes = 2
    out_days = 3
    face_masks = mask_changes * out_days
    face_masks_2_days = face_masks * out_times
    return face_masks_2_days

 Executed result: 12
[EXP] 1165: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    total_eggs = 3 * 12
    lamars_eggs = 5
    stacys_eggs = 2 * lamars_eggs
    charlies_eggs = stacys_eggs - 2
    meis_eggs = charlies_eggs // 2
    total_found = lamars_eggs + stacys_eggs + charlies_eggs + meis_eggs
    eggs_left = total_eggs - total_found
    return eggs_left

 Executed result: 9
[EXP] 1166: [success_rate]: True, [answer]: 1248, [output]: 
def solution():
    apartments1 = 200
    apartments2 = 200
    bigger_complex = (200 + 200) * 1.6
    total_apartments = apartments1 + apartments2 + bigger_complex
    collections_per_week = 3
    payment_per_apartment = 0.4
    total_earnings_per_week = total_apartments * collections_per_week * payment_per_apartment
    return total_earnings_per_week

 Executed result: 1248.0
[EXP] 1167: [success_rate]: False, [answer]: 2350, [output]: 
def solution():
    fruits_per_year = 50
    total_fruits = 0
    total_fruits += fruits_per_year
    fruits_per_year *= 3
    total_fruits += fruits_per_year
    fruits_per_year *= 7
    total_fruits += fruits_per_year
    fruits_per_year = 50 * 3 - 200
    total_fruits += fruits_per_year
    total_fruits += 0  # 9th year doesn't produce any fruit
    fruits_per_year *= 50 * 20
    total_fruits += fruits_per_year
    result = total_fruits
    return result

 Executed result: -48800
[EXP] 1168: [success_rate]: True, [answer]: 120, [output]: def solution():
    jack_initial_money = 100
    sophia_money = 100
    fraction = 1 / 5
    money_given = fraction * sophia_money
    jack_now = jack_initial_money + money_given
    return jack_now

 Executed result: 120.0
[EXP] 1169: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    total_length = 37
    yellow_rope = 99999  # Initialize with arbitrary value
    blue_rope = 0
    while True:
        blue_rope += 1
        yellow_rope -= 1
        red_rope = blue_rope + 7
        if red_rope * 4 + blue_rope + yellow_rope == total_length:
            return red_rope

 Executed result: None
[EXP] 1170: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    rissa_initial = 5 * 3
    rissa_left = (4/5) * rissa_initial
    rissa_given = rissa_initial - rissa_left
    rissa_sister = rissa_given / 2
    robbie_initial = 5
    robbie_given = rissa_sister
    result = robbie_initial - robbie_given
    return result

 Executed result: 3.5
[EXP] 1171: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    total.pints = 12
    red_paint = ???
    yellow_paint = total.pints / 2
    non_yellow_paint = total.pints - yellow_paint
    red_paint = non_yellow_paint / 2
    return int(red_paint)

 Executed result: None
[EXP] 1172: [success_rate]: False, [answer]: 3160, [output]: 
def solution():
    bedroom_area = 20 * 12
    bedrooms = 4
    total_bedroom_area = bedroom_area * bedrooms
    living_room_area = total_bedroom_area * 5
    remaining_area = 1000
    total_area = total_bedroom_area + living_room_area + remaining_area
    return total_area

 Executed result: 6760
[EXP] 1173: [success_rate]: True, [answer]: 93, [output]: 
def solution():
    puffs = 0
    for i in range(1, 6):
        puffs += 3 * (2 ** (i - 1))
    return puffs

 Executed result: 93
[EXP] 1174: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    cost = 12
    normal_pods = 100
    special_pods = normal_pods + int(normal_pods * 0.2)
    total_pods = special_pods
    cost_per_pods = cost / special_pods
    cost_per_cycle = cost_per_pods
    result = 1 / cost_per_cycle
    return result

 Executed result: 10.0
[EXP] 1175: [success_rate]: False, [answer]: 240, [output]: def solution():
    money_initial = 1000
    bills_lost = 10
    money_left = money_initial - bills_lost * 20
    half_bills = money_left // 20
    bills_spend = half_bills * 20
    money_left = money_left - bills_spend
    money_triple = money_left * 3
    bills_five = money_triple // 5
    result = bills_five
    return result

 Executed result: 0
[EXP] 1176: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    team_a_half_time_goals = 4
    team_b_half_time_goals = team_a_half_time_goals - 2
    team_b_second_half_goals = team_b_half_time_goals * 4
    team_a_second_half_goals = team_b_second_half_goals // 4
    total_team_a_goals = team_a_half_time_goals + team_a_second_half_goals
    total_team_b_goals = team_b_half_time_goals + team_b_second_half_goals
    total_goals = total_team_a_goals + total_team_b_goals
    return total_goals

 Executed result: 16
[EXP] 1177: [success_rate]: True, [answer]: 2, [output]: python
def solution():
    chalk_length_initial = 5
    initial_usage = 0.45
    daily_usage = 0.2
    usage_per_day = initial_usage / 100
    days = 0
    while chalk_length_initial > 2:
        chalk_length_initial = chalk_length_initial - usage_per_day
        days += 1
    return days

 Executed result: 1
[EXP] 1178: [success_rate]: True, [answer]: 17, [output]: 
def solution():
    boys = 12
    girls = 12
    boys_on_varsity = boys // 4
    girls_on_varsity = girls // 3
    all_on_varsity = boys_on_varsity + girls_on_varsity
    all_students = boys + girls
    not_on_varsity = all_students - all_on_varsity
    return not_on_varsity

 Executed result: 17
[EXP] 1179: [success_rate]: True, [answer]: 17, [output]: 
def solution():
    masks_mike = 5
    masks_johnny = 3 * masks_mike + 2
    result = masks_johnny
    return result

 Executed result: 17
[EXP] 1180: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    teeth_initial = 30
    teeth_drilled = 4
    teeth_cap = teeth_drilled + 7
    total_fixed = teeth_drilled + teeth_cap
    fixed_percent = (total_fixed / teeth_initial) * 100
    return fixed_percent

 Executed result: 50.0
[EXP] 1181: [success_rate]: True, [answer]: 5600, [output]: 
def solution():
    gallons_sold = 4000
    price_per_gallon = 3.5
    total_cost = gallons_sold * price_per_gallon
    spoiled_milk = 2/5 * gallons_sold
    refund = spoiled_milk * price_per_gallon
    return refund

 Executed result: 5600.0
[EXP] 1182: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    wendy_age = 5 * (7 + ColinAge)
    wendy_age_future = wendy_age + 25
    colin_age_future = ColinAge + 25
    ColinAge = (wendy_age_future * 3) / 4
    return ColinAge

 Executed result: None
[EXP] 1183: [success_rate]: False, [answer]: 1800, [output]: 
def solution():
    total_budget = 27000
    num_books_per_hundred = 100
    total_books_per_school = (num_books_per_hundred * 500)
    num_books_per_school = total_budget / total_books_per_school
    default_dist = 3
    books_per_school = num_books_per_school / default_dist
    return int(books_per_school)

 Executed result: 0
[EXP] 1184: [success_rate]: False, [answer]: 11, [output]: 
def solution():
    apples_fell = 2
    apples_in_pocket = 1
    apples وقتی_درختش_prisons = 5
    apples_in_pocket += apples وقتی_درختش_prisons
    apples_шлеп = 1
    apples_in_pocket += apples_шлеп
    apples_fell += apples وقتی_درختش_prisons + apples_шлеп
    apples_шлеп = 1
    apples_fell += apples_шлеп
    apples_in_pocket += apples_fell - 2
    result = apples_in_pocket
    return result

 Executed result: 3
[EXP] 1185: [success_rate]: True, [answer]: 306, [output]: 
def solution():
    coal_kilos = 850
    coal_weight = 50
    coal_cost = 18
    coal_units = coal_kilos // coal_weight
    coal_remaining = coal_kilos % coal_weight
    unordered_coal_kilos = coal_remaining
    if unordered_coal_kilos > 0:
        coal_kilos = coal_units + 1
        extra_coal = coal_weight - unordered_coal_kilos
    else:
        coal_kilos = coal_units
    total_cost = coal_kilos * coal_cost
    result = total_cost
    return result

 Executed result: 306
[EXP] 1186: [success_rate]: False, [answer]: 6, [output]: def solution():
    cheese_slices = 12
    pepperoni_slices = 8
    friends_slices = 6
    slices_eaten = friends_slices * 6 * 2
    cheese_pies = slices_eaten // cheese_slices
    pepperoni_pies = slices_eaten // pepperoni_slices
    total_pies = max(cheese_pies, pepperoni_pies) + 1
    return total_pies

 Executed result: 10
[EXP] 1187: [success_rate]: True, [answer]: 19, [output]: def solution():
    runs_per_week = 3
    miles_per_run = 3
    runs_per_week_mon_to_thu = 2
    miles_per_run_mon_to_thu = 5
    total_monday_wednesday_friday = runs_per_week * miles_per_run
    total_tuesday_thursday = runs_per_week_mon_to_thu * miles_per_run_mon_to_thu
    total_miles = total_monday_wednesday_friday + total_tuesday_thursday
    result = total_miles
    return result

 Executed result: 19
[EXP] 1188: [success_rate]: False, [answer]: 5, [output]: def solution():
    snowballs_per_hour = 20
    snowballs_per_15_minutes = 4  # -2 snowballs for every 15 minutes
    total_snowballs = 60
    hours_worked = 0
    snowballs_crafted = 0
    minutes_worked = 0

    while snowballs_crafted < total_snowballs:
        snowballs_crafted += snowballs_per_15_minutes
        minutes_worked += 15
        if snowballs_crafted < total_snowballs:
            snowballs_crafted += snowballs_per_hour
            hours_worked += 1

    return hours_worked + minutes_worked / 60

 Executed result: 3.75
[EXP] 1189: [success_rate]: False, [answer]: 24, [output]: 
def solution():
    john_age = 28
    jim_age = john_age / 2
    return jim_age

 Executed result: 14.0
[EXP] 1190: [success_rate]: True, [answer]: 6, [output]: def solution():
    slices_total = 8
    doxa_eated = 1
    sister_eated = doxa_eated + 1
    brother_eated = sister_eated + 1
    total_slices_eated = doxa_eated + sister_eated + brother_eated
    result = total_slices_eated
    return result

 Executed result: 6
[EXP] 1191: [success_rate]: False, [answer]: 19, [output]: def solution():
    bandages_used = 0
    initial_bandages = 0
    while True:
        bandages_used += 50
        initial_bandages += bandages_used
        if initial_bandages > 78:
            return initial_bandages - 50

 Executed result: 100
[EXP] 1192: [success_rate]: True, [answer]: 100, [output]: def solution():
    haircut_price = 30
    color_price = 40
    initial_length = 10
    final_length = 8
    length_cut = initial_length - final_length
    haircut_cost = length_cut * haircut_price
    total_cost = haircut_cost + color_price
    result = total_cost
    return result

 Executed result: 100
[EXP] 1193: [success_rate]: True, [answer]: 280, [output]: 
def solution():
    hours_in_a_week = 7.5
    hours_worked_a_week = hours_in_a_week * 6
    weekly_salary = hours_worked_a_week * 1.5
    total_salary_in_april = weekly_salary * 4
    attendance_bonus = 10
    total_salary = total_salary_in_april + attendance_bonus
    return total_salary

 Executed result: 280.0
[EXP] 1194: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    laundry = 3
    cleaning_room = 1.5
    taking_trash = 0.75
    emptying_dishwasher = 0.5
    laundry_income = laundry
    room_income = cleaning_room
    trash_income = taking_trash * 2
    dishwasher_income = emptying_dishwasher * 6
    result = laundry_income + room_income + trash_income + dishwasher_income
    return result

 Executed result: 9.0
[EXP] 1195: [success_rate]: True, [answer]: 1200, [output]: def solution():
    whale_blood = 40
    shark_blood = whale_blood * 3
    shark_gal = shark_blood
    num_sharks = 10
    total_blood = shark_gal * num_sharks
    result = total_blood
    return result

 Executed result: 1200
[EXP] 1196: [success_rate]: True, [answer]: 320, [output]: 
def solution():
    morning = 50
    lunch = 40
    afternoon = 2 * lunch
    evening = 3 * morning
    total = morning + lunch + afternoon + evening
    return total

 Executed result: 320
[EXP] 1197: [success_rate]: True, [answer]: 75, [output]: def solution():
    red_pens = 5
    black_pens = 2 * red_pens
    total_pens = red_pens + black_pens
    each_pack = 5
    total_packs = red_pens + black_pens
    if each_pack > 1:
        total_pens *= each_pack
    result = total_pens
    return result

 Executed result: 75
[EXP] 1198: [success_rate]: True, [answer]: 2400, [output]: 
def solution():
    scotch_cost = 600
    scotch_bottles = 10
    cognac_bottles = 2 * scotch_bottles
    scotch_price = scotch_cost / scotch_bottles
    cognac_price = scotch_price * 1.5
    total_cognac_cost = cognac_bottles * cognac_price
    total_cost = scotch_cost + total_cognac_cost
    return total_cost

 Executed result: 2400.0
[EXP] 1199: [success_rate]: False, [answer]: 140, [output]: def solution():
    white_oak_first_day = 20
    lodgepole_pine_first_day = white_oak_first_day * 2
    white_oak_second_day = 10
    lodgepole_pine_second_day = lodgepole_pine_first_day + (lodgepole_pine_first_day // 4)
    total_white_oak = white_oak_first_day + white_oak_second_day
    total_lodgepole_pine = lodgepole_pine_first_day + lodgepole_pine_second_day
    result = total_white_oak + total_lodgepole_pine
    return result

 Executed result: 120
[EXP] 1200: [success_rate]: True, [answer]: 2, [output]: def solution():
    root_beer_initial = 24
    beer_drunk = 4
    beer_spilled = 7
    beer_taken = 5
    root_beer_left = root_beer_initial - beer_drunk - beer_spilled - beer_taken
    people_drinking = 3
    drink_per_person = root_beer_left // people_drinking
    return drink_per_person

 Executed result: 2
[EXP] 1201: [success_rate]: True, [answer]: 8, [output]: def solution():
    mugs = int((40 - 8) / 4)
    return mugs

 Executed result: 8
[EXP] 1202: [success_rate]: False, [answer]: 42, [output]: def solution():
    fish_total = 66
    fish_red = fish_total // 3
    fish Remaining = fish_total - fish_red
    fish_blue = fish_Remaining * 5 // 11
    total_fish_colored = fish_red + fish_blue
    return total_fish_colored

 Executed result: None
[EXP] 1203: [success_rate]: True, [answer]: 19, [output]: def solution():
    palettes_initial = 2
    palette_colors = 4
    sets = 3
    set_colors = 6
    colors_stolen = palette_colors
    colors_used = set_colors // 2
    colors_left = (palettes_initial * palette_colors) + (sets * set_colors) - colors_stolen - colors_used
    result = colors_left
    return result

 Executed result: 19
[EXP] 1204: [success_rate]: True, [answer]: 240, [output]: def solution():
    mattison_height = 60
    house_height = mattison_height * 7
    floor_height = mattison_height * 3
    second_floor_to_roof_height = house_height - floor_height
    return second_floor_to_roof_height

 Executed result: 240
[EXP] 1205: [success_rate]: True, [answer]: 168, [output]: 
def solution():
    total_shells = 700
    shells_found_by_alphas = 0.4 * total_shells
    shells_left = total_shells - shells_found_by_alphas
    shells_found_by_finders = 0.6 * shells_left
    shells_found_by_gogetters = total_shells - shells_found_by_alphas - shells_found_by_finders
    return shells_found_by_gogetters

 Executed result: 168.0
[EXP] 1206: [success_rate]: False, [answer]: 4, [output]: def solution():
    dogs = 4
    total_miles = 1 + 4 + 3
    average_miles = 3
    total_miles = total_miles - (dogs - 1) * average_miles
    return total_miles

 Executed result: -1
[EXP] 1207: [success_rate]: False, [answer]: 40,000, [output]: 
def solution():
    house_price = 250000
    loan = house_price * 0.4
    loan_for_debt = loan * 0.6
    debt_paid = loan_for_debt
    money_left = house_price - debt_paid
    return money_left

 Executed result: 190000.0
[EXP] 1208: [success_rate]: True, [answer]: 64, [output]: def solution():
    tunas_caught = 3
    tuna_weights = [56, 46, 26]
    tuna_cost_per_kg = 0.5
    total_cost = 0
    for i in range(tunas_caught):
        total_cost += tuna_weights[i] * tuna_cost_per_kg
    result = total_cost
    return result

 Executed result: 64.0
[EXP] 1209: [success_rate]: True, [answer]: 27, [output]: def solution():
    magazine_price = 72
    selling_price = 11 / 8
    profit = magazine_price * (1 - selling_price)
    return profit

 Executed result: -27.0
[EXP] 1210: [success_rate]: True, [answer]: 29, [output]: def solution():
    low_setting = 1
    medium_setting = low_setting * 2
    high_setting = medium_setting * 2
    low_days = 3
    medium_days = 3
    high_days = 5
    total_water_removed = (low_setting * low_days) + (medium_setting * medium_days) + (high_setting * high_days)
    result = total_water_removed
    return result

 Executed result: 29
[EXP] 1211: [success_rate]: True, [answer]: 288, [output]: 
def solution():
    packs = 10
    balloons_per_pack = 30
    total_balloons = packs * balloons_per_pack
    balloons_left = 12
    balloons_thrown = total_balloons - balloons_left
    return balloons_thrown

 Executed result: 288
[EXP] 1212: [success_rate]: True, [answer]: 448, [output]: 
def solution():
    medicine_a = 14
    medicine_b = medicine_a * 3
    total_medicine_in_one_dosage = medicine_a + medicine_b
    medicine_in_eight_doses = total_medicine_in_one_dosage * 8
    return medicine_in_eight_doses

 Executed result: 448
[EXP] 1213: [success_rate]: True, [answer]: 150, [output]: def solution():
    alis_class_capacity = 120
    john_class1_capacity = alis_class_capacity / 8
    john_class2_capacity = alis_class_capacity / 8
    john_total_capacity = john_class1_capacity + john_class2_capacity
    total_capacity = alis_class_capacity + john_total_capacity
    return total_capacity

 Executed result: 150.0
[EXP] 1214: [success_rate]: True, [answer]: 31, [output]: def solution():
    sibling_loan = 300
    interest_rate = 0.02
    interest = sibling_loan * interest_rate
    total_loan = sibling_loan + interest
    monthly_payment = 25
    for _ in range(11):
        total_loan -= monthly_payment
    leftover_payment = total_loan
    return leftover_payment

 Executed result: 31.0
[EXP] 1215: [success_rate]: True, [answer]: 5, [output]: def solution():
    children = 2
    diaper_changes_per_child = 5
    wife_changes = 0.5
    total_diaper_changes = children * diaper_changes_per_child
    jordan_changes = total_diaper_changes * wife_changes
    return jordan_changes

 Executed result: 5.0
[EXP] 1216: [success_rate]: False, [answer]: 36, [output]: 
import math

def solution():
    jar_length = 15
    jar_width = 6
    jar_height = 6
    jelly_bean_volume = 0.15
    packing_efficiency = 0.8
    red_jelly_bean_ratio = 0.30
    true_red_jelly_bean_count = 900
    
    jar_volume = jar_length * jar_width * jar_height
    red_jelly_bean_volume = jar_volume * packing_efficiency
    red_jelly_bean_count = math.floor(red_jelly_bean_volume / jelly_bean_volume * true_red_jelly_bean_count)
    
    guess = red_jelly_bean_count
    error = abs(true_red_jelly_bean_count - guess)
    
    return error

 Executed result: 2591100
[EXP] 1217: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    bus_capacity = 200
    initial_passengers = 20
    stop1 = 40
    stop2 = int(stop1 * 3/4)
    initial_passengers += stop1 + stop2
    total_passengers = initial_passengers * 2
    remaining_spaces = bus_capacity - total_passengers
    return remaining_spaces

 Executed result: 20
[EXP] 1218: [success_rate]: True, [answer]: 75, [output]: def solution():
    cost_per_visit_initial = 2
    visits_per_year = 3
    years_initial = 5
    cost_per_visit_increased = 2 + (2 * 150) / 100
    visits_per_year_initial = 3
    years_increased = 3
    
    total_cost_initial = cost_per_visit_initial * visits_per_year * years_initial
    total_cost_increased = cost_per_visit_increased * visits_per_year * years_increased
    
    total_cost = total_cost_initial + total_cost_increased
    return total_cost

 Executed result: 75.0
[EXP] 1219: [success_rate]: False, [answer]: 225, [output]: 
def escape_room_time():
    grades = [4, 5, 6, 7]
    students_per_grade = 10
    groups = 0
    for grade in grades:
        groups += students_per_grade
    groups //= 8  # We can only have 8 students per group, so we need to calculate how many groups we can have
    time_per_group = 45  # Time taken by each group
    total_time = groups * time_per_group
    return total_time

 Executed result: 45
[EXP] 1220: [success_rate]: True, [answer]: 100, [output]: def solution():
    carpenter_cost = 4 * 20 + 2 * 10
    return carpenter_cost

 Executed result: 100
[EXP] 1221: [success_rate]: False, [answer]: 32, [output]: 
def solution():
    board_length = 40
    longer_piece_length = (board_length - (x := board_length / 5)) * 4
    return longer_piece_length

 Executed result: 128.0
[EXP] 1222: [success_rate]: True, [answer]: 10, [output]: def solution():
    meatballs_wanted = 80
    meatballs_per_pound = 16
    pounds_necessary = meatballs_wanted / meatballs_per_pound
    seasoning_per_pound = 2
    seasoning_total = pounds_necessary * seasoning_per_pound
    result = seasoning_total
    return result

 Executed result: 10.0
[EXP] 1223: [success_rate]: True, [answer]: 350, [output]: 
def solution():
    windows = 5
    window_width = 35
    total_window_width = windows * window_width
    fabric_needed = total_window_width * 2
    return fabric_needed

 Executed result: 350
[EXP] 1224: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    minutes = 36
    cost = 0
    for i in range(16):
        cost += 0.25
    for i in range(16, minutes):
        cost += 0.2
    return cost

 Executed result: 8.000000000000004
[EXP] 1225: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    inches_rained_monday = 2
    inches_rained_tuesday = inches_rained_monday * 2 + inches_rained_monday + 1
    return inches_rained_tuesday

 Executed result: 7
[EXP] 1226: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    cupcakes = 0
    brownies = 3 * cupcakes - 2
    total = cupcakes + brownies
    people = 5
    treats_per_person = 2
    treats = total * treats_per_person
    for i in range(treats, 0, -1):
        if i % people == 0:
            return cupcakes

 Executed result: None
[EXP] 1227: [success_rate]: True, [answer]: 90, [output]: 
def solution():
    manicure = 35
    pedicure = 40
    discount = (manicure + pedicure) * 0.2
    total_cost_without_discount = manicure + pedicure
    total_cost_with_discount = total_cost_without_discount - discount
    nails = 10  # Assuming Karen has 10 fingers
    nail_art = nails * 3
    total_cost_with_nail_art = total_cost_with_discount + nail_art
    result = total_cost_with_nail_art
    return result

 Executed result: 90.0
[EXP] 1228: [success_rate]: False, [answer]: 66, [output]: 
def solution():
    total_magazines = 3
    magazine1_issues = 12
    magazine2_issues = 6
    magazine3_issues = magazine2_issues * 4
    total_issues_per_year = magazine1_issues + magazine2_issues + magazine3_issues
    return total_issues_per_year

 Executed result: 42
[EXP] 1229: [success_rate]: True, [answer]: 31, [output]: 
def solution():
    samantha_paintings = 27
    shelley_paintings = samantha_paintings + 12
    kim_paintings = shelley_paintings - 8
    result = kim_paintings
    return result

 Executed result: 31
[EXP] 1230: [success_rate]: True, [answer]: 36, [output]: def solution():
    initial_price = 40
    percentIncrease = 0.80
    increase = initial_price * percentIncrease
    new_price = initial_price + increase
    percentDecrease = 0.5
    decrease = new_price * percentDecrease
    final_price = new_price - decrease
    return final_price

 Executed result: 36.0
[EXP] 1231: [success_rate]: True, [answer]: 440, [output]: 
def solution():
    standard_fee = 80
    reduced_fee = 0.75 * standard_fee
    standard_hours = 4
    reduced_hours = 2
    total_standard = standard_fee * standard_hours
    total_reduced = reduced_fee * reduced_hours
    total = total_standard + total_reduced
    return total

 Executed result: 440.0
[EXP] 1232: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    scores = [50, 80, 80, 60, 40, 90, 100, 70, 60]
    mean = sum(scores) / len(scores)
    return mean

 Executed result: 70.0
[EXP] 1233: [success_rate]: True, [answer]: 15, [output]: def solution():
    pomelos_initial = 20
    pomelos_left = pomelos_initial // 4
    pomelos_given = pomelos_initial - pomelos_left
    return pomelos_given

 Executed result: 15
[EXP] 1234: [success_rate]: False, [answer]: 81, [output]: 
def solution():
    apples_initial = 60
    apples_eaten = int((2/5) * apples_initial)
    apples_remaining = apples_initial - apples_eaten
    apples_remainder = int((int((1/(5/100)) * apples_remaining)) + apples_remaining)
    money_got = apples_remainder * 3
    return money_got

 Executed result: 2268
[EXP] 1235: [success_rate]: True, [answer]: 12, [output]: def solution():
    novels_last_year = 9
    novels_quarterly = 3
    novels_written = novels_last_year * (4 / novels_quarterly)
    return novels_written

 Executed result: 12.0
[EXP] 1236: [success_rate]: False, [answer]: 60, [output]: def solution():
    speed = 50
    time = 3 * 24 * 60 * 60 / 1000  # 3 days, 24 hours/day, 60 minutes/hour, 60 seconds/minute, convert to hours, convert to km
    total_distance = 6000
    distance_covered = speed * time
    percentage_covered = (distance_covered / total_distance) * 100
    return percentage_covered

 Executed result: 216.0
[EXP] 1237: [success_rate]: True, [answer]: 84, [output]: def solution():
    total_grapes = (12 * 4) + (6 * 5) + 6 
    return total_grapes

 Executed result: 84
[EXP] 1238: [success_rate]: True, [answer]: 78, [output]: 
def solution():
    teachers_total = 82
    teachers_sick = 13
    substitute_teachers = 9
    teachers_at_school = teachers_total - teachers_sick + substitute_teachers
    return teachers_at_school

 Executed result: 78
[EXP] 1239: [success_rate]: True, [answer]: 520, [output]: def solution():
    cheddar_cheese_cost = 3.00
    gruyere_cheese_cost = 2 * 3.00
    total_cheese_cost = cheddar_cheese_cost + gruyere_cheese_cost
    pasta_cost = 1.00
    total_cost = total_cheese_cost + pasta_cost
    weekly_cost = total_cost
    year_cost = weekly_cost * 52  # 52 weeks in a year
    return year_cost

 Executed result: 520.0
[EXP] 1240: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    classrooms = 80
    days = 5
    time_per_classroom = 15
    total_time_per_day = 8 * 60
    total_time = time_per_classroom * classrooms * days
    average_time = total_time / (days * 60)
    percentage = (average_time / total_time_per_day) * 100
    return percentage

 Executed result: 4.166666666666666
[EXP] 1241: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    total_books = 110
    mid_books = 2 * 10
    bottom_books = mid_books * 2
    top_books = bottom_books - 5
    total_shelves_in_one_case = mid_books + mid_books + bottom_books
    total_casess_needed = -(-total_books // total_shelves_in_one_case)
    return total_casess_needed

 Executed result: 2
[EXP] 1242: [success_rate]: False, [answer]: 8, [output]: python
def solution():
    initial_price = 2.40
    dozens = 5
    cost = initial_price * dozens
    sold_eggs = 3
    price_per_sold_eggs = 1
    total_sold = sold_eggs * price_per_sold_eggs
    revenue = total_sold * dozens
    profit = revenue - cost
    return profit

 Executed result: 3.0
[EXP] 1243: [success_rate]: True, [answer]: 20, [output]: def solution():
    hats = 100
    red_hats = hats // 2
    blue_hats = (hats - red_hats) * 3 // 5
    white_hats = hats - red_hats - blue_hats
    return white_hats

 Executed result: 20
[EXP] 1244: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    bag_cost = 18
    discount = 3
    discounted_bag_cost = bag_cost - discount
    sticks_per_bag = 30
    cost_per_stick = (discounted_bag_cost / 100) * 100 / sticks_per_bag
    return cost_per_stick

 Executed result: 0.5
[EXP] 1245: [success_rate]: True, [answer]: 35, [output]: def solution():
    questions_first_test = 70
    answers_first_test = 0.6 * questions_first_test
    questions_second_test = 40
    total_questions = questions_first_test + questions_second_test
    correct_answers_needed = 0.7 * total_questions
    correct_answers_first_test = int(answers_first_test)
    correct_answers_needed_second_test = correct_answers_needed - correct_answers_first_test
    return round(correct_answers_needed_second_test)

 Executed result: 35
[EXP] 1246: [success_rate]: False, [answer]: 96, [output]: def solution():
    strawberry_cubes = ...
    blueberry_cubes = 5 * strawberry_cubes - 4
    total_cubes = strawberry_cubes + blueberry_cubes
    return blueberry_cubes

 Executed result: None
[EXP] 1247: [success_rate]: True, [answer]: 3360, [output]: 
def solution():
    games_per_year = 40
    score_per_game = 21
    years = 4
    total_points = games_per_year * score_per_game * years
    return total_points

 Executed result: 3360
[EXP] 1248: [success_rate]: False, [answer]: 7, [output]: def solution():
    marbles initial = 10
    marbles_dropped = initial / 2
    marbles_found = 3
    marblesxacquainted = marbles_found - 1
    marbles_brendan = marbles_intensity - marbles_dropped + marbles_found
    result = marbles_brendan
    return result

 Executed result: None
[EXP] 1249: [success_rate]: True, [answer]: 750, [output]: def solution():
    target_cars = 15
    cust_per_call = 25
    cust_per_buyer = 2
    buyer_per_car = 1
    total_buyers = target_cars * buyer_per_car
    total_customers = total_buyers * cust_per_buyer
    total_calls = total_customers * cust_per_call
    return int(total_calls)

 Executed result: 750
[EXP] 1250: [success_rate]: True, [answer]: 56, [output]: def solution():
    people = 4
    rooms = 8
    flashlights_per_person = 1
    flashlights_per_room = 2
    small_candles_per_room = 4
    medium_candles_per_room = 5

    flashlights = people + rooms * flashlights_per_room
    small_candles = rooms // 2 * small_candles_per_room
    medium_candles = rooms // 2 * medium_candles_per_room
    total_candles = small_candles + medium_candles

    return flashlights + total_candles

 Executed result: 56
[EXP] 1251: [success_rate]: True, [answer]: 22, [output]: 
def solution():
    chips_total = 2 * 55
    members = 5
    chips_per_person = chips_total // members
    return chips_per_person

 Executed result: 22
[EXP] 1252: [success_rate]: False, [answer]: 30, [output]: def solution():
    total_time = 5
    total_time += 5 * 2
    total_time += 5 / 2 * 2
    return total_time

 Executed result: 20.0
[EXP] 1253: [success_rate]: True, [answer]: 70, [output]: def solution():
    helmets = 20
    footballs = helmets * 2
    robots = helmets / 2
    total_items = footballs + helmets + robots
    return total_items

 Executed result: 70.0
[EXP] 1254: [success_rate]: True, [answer]: 120, [output]: def solution():
    hours_per_day = 6
    minutes_per_call = 15
    minutes_per_day = hours_per_day * 60
    minutes_per_week = minutes_per_day * 5
    calls_per_minute = 1
    calls_per_week = minutes_per_week // minutes_per_call * calls_per_minute
    return calls_per_week

 Executed result: 120
[EXP] 1255: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    old_variance = 7
    new_variance = 12
    paintings = 6
    total_old_variance = old_variance * paintings
    total_new_variance = new_variance * paintings
    difference = total_new_variance - total_old_variance
    return difference

 Executed result: 30
[EXP] 1256: [success_rate]: True, [answer]: 12, [output]: def solution():
    cups_needed = (4 * 0.5) + (8 * 1) + ((20 - 4 - 8) * 0.25)
    return cups_needed

 Executed result: 12.0
[EXP] 1257: [success_rate]: True, [answer]: 15, [output]: def solution():
    distance = 200
    distance_on_land = distance / 2
    distance_in_water = distance - distance_on_land
    time_on_land = distance_on_land / 20
    time_in_water = distance_in_water / 10
    total_time = time_on_land + time_in_water
    result = total_time
    return result

 Executed result: 15.0
[EXP] 1258: [success_rate]: True, [answer]: 14, [output]: def solution():
    popsicle_sticks_needed = 56
    popsicle_sticks_per_box = 8
    popsicle_sticks_cost_per_box = 2
    total_boxes = (popsicle_sticks_needed + popsicle_sticks_per_box - 1) // popsicle_sticks_per_box
    total_cost = total_boxes * popsicle_sticks_cost_per_box
    result = total_cost
    return result

 Executed result: 14
[EXP] 1259: [success_rate]: False, [answer]: 60, [output]: def solution():
    main_phone = 20
    extra_phones = 4
    extra_cost = main_phone / 2
    total_cost = (extra_phones + 1) * extra_cost + main_phone
    result = total_cost
    return result

 Executed result: 70.0
[EXP] 1260: [success_rate]: True, [answer]: 7200, [output]: 
def solution():
    doughnuts_per_day = 10
    doughnuts_per_dozen = 12
    daily_doughnuts = doughnuts_per_day * doughnuts_per_dozen
    price_per_doughnut = 2
    total_doughnuts_in_june = 30
    total_doughnuts_sold = daily_doughnuts * total_doughnuts_in_june
    money_made = total_doughnuts_sold * price_per_doughnut
    return money_made

 Executed result: 7200
[EXP] 1261: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    total_photos = 210
    photos_per_batch = 7
    batches_per_day = 6
    days = -(-total_photos // (photos_per_batch * batches_per_day))  # ceilings division
    return days

 Executed result: 5
[EXP] 1262: [success_rate]: True, [answer]: 235, [output]: def solution():
    cost_per_blouse = 5
    cost_per_pants = 8
    cost_per_skirt = 6
    num_blouses = 5
    num_pants = 2
    num_skirts = 1
    weeks = 5
    weekly_cost_blouses = cost_per_blouse * num_blouses
    weekly_cost_pants = cost_per_pants * num_pants
    weekly_cost_skirts = cost_per_skirt * num_skirts
    weekly_total = weekly_cost_blouses + weekly_cost_pants + weekly_cost_skirts
    total_cost = weekly_total * weeks
    result = total_cost
    return result

 Executed result: 235
[EXP] 1263: [success_rate]: True, [answer]: 12, [output]: def solution():
    normal_speed = 150
    new_speed = normal_speed * 2.5
    words_per_minute = new_speed
    words_per_page = 450
    pages = 10
    total_words = words_per_page * pages
    time_taken = total_words / words_per_minute
    result = time_taken
    return result

 Executed result: 12.0
[EXP] 1264: [success_rate]: True, [answer]: 500, [output]: 
def solution():
    day1 = 50
    day2 = day1 + 20
    day3 = day2 * 2
    average_people = 60
    total_people = day1 + day2 + day3 + 4 * average_people
    return total_people

 Executed result: 500
[EXP] 1265: [success_rate]: False, [answer]: 210, [output]: def solution():
    total_popcorn = 0
    seconds = [30, 30, 30, 30]
    pop_rate = [20, 20 * 3, 20 * 3 * 4, 20 * 3 * 4 / 2]
    for i in range(len(pop_rate)):
        total_popcorn += pop_rate[i] * (seconds[i] / 30)
    final_surge = pop_rate[-1] / 4
    total_popcorn += final_surge
    return int(total_popcorn)

 Executed result: 470
[EXP] 1266: [success_rate]: False, [answer]: 36, [output]: 
def solution():
    juice_per_lemon = 1/6
    required_lemons_per_gallon = 1 / (1 * 0.5)  # Allen wants his lemonade twice as tart
    total_required_lemons = 4 * (1 + 1)  # 4 gallons for the party + 1 gallon for Allen
    required_lemons = total_required_lemons * required_lemons_per_gallon
    return int(required_lemons / juice_per_lemon)

 Executed result: 96
[EXP] 1267: [success_rate]: True, [answer]: 147, [output]: def solution():
    german_shepherds = 3
    german_shepherd_food = 5
    bulldogs = 2
    bulldog_food = 3
    days_in_week = 7
    
    german_shepherd_daily_dose = german_shepherds * german_shepherd_food
    bulldog_daily_dose = bulldogs * bulldog_food
    
    german_shepherd_weekly_dose = german_shepherd_daily_dose * days_in_week
    bulldog_weekly_dose = bulldog_daily_dose * days_in_week
    
    total_weekly_dose = german_shepherd_weekly_dose + bulldog_weekly_dose
    
    return total_weekly_dose

 Executed result: 147
[EXP] 1268: [success_rate]: False, [answer]: 40, [output]: 
def solution():
    two_legged_animals = 10
    four_legged_animals = 15
    two_legged_legs = two_legged_animals * 2
    four_legged_legs = four_legged_animals * 4
    total_legs = two_legged_legs + four_legged_legs
    result = total_legs
    return result

 Executed result: 80
[EXP] 1269: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    blue_blocks = 4
    yellow_blocks = 2 * blue_blocks
    total_blocks = blue_blocks + yellow_blocks
    total_blocks_left = 32 - total_blocks
    return total_blocks_left

 Executed result: 20
[EXP] 1270: [success_rate]: True, [answer]: 54, [output]: 
def solution():
    distance_west = 5 * 18
    distance_east = 8 * 18
    distance_total = distance_east - distance_west
    return distance_total

 Executed result: 54
[EXP] 1271: [success_rate]: True, [answer]: 3528, [output]: 
def solution():
    boat_price = 9000
    first_year_depreciation = 0.3
    second_year_depreciation = 0.3
    third_year_depreciation = 0.2
    boat_after_first_year = boat_price * (1 - first_year_depreciation)
    boat_after_second_year = boat_after_first_year * (1 - second_year_depreciation)
    boat_after_third_year = boat_after_second_year * (1 - third_year_depreciation)
    return boat_after_third_year

 Executed result: 3528.0
[EXP] 1272: [success_rate]: True, [answer]: 43, [output]: 
def solution():
    total_candies = 232
    red_candies = 54
    orange_candies = red_candies * 2
    yellow_candies = red_candies / 2
    pink_candies = total_candies - (red_candies + orange_candies + yellow_candies)
    return pink_candies

 Executed result: 43.0
[EXP] 1273: [success_rate]: True, [answer]: 296, [output]: 
def solution():
    hotel_price = 80
    hotel_nights = 3
    bus_trips = 7
    bus_cost = hotel_price * 0.10
    bus_cost_total = bus_cost * bus_trips
    hotel_cost_total = hotel_price * hotel_nights
    total_cost = bus_cost_total + hotel_cost_total
    return total_cost

 Executed result: 296.0
[EXP] 1274: [success_rate]: True, [answer]: 27, [output]: 
def solution():
    marbles_initial = 52
    marbles_given = marbles_initial
    marbles_dallas = 21
    marbles_dropped = 4
    marbles_dallas_given = marbles_dallas + marbles_dropped
    marbles_darla = marbles_given - marbles_dallas_given
    result = marbles_darla
    return result

 Executed result: 27
[EXP] 1275: [success_rate]: True, [answer]: 38, [output]: 
def solution():
    adult_ticket = 12
    child_ticket = 8
    total_tickets = adult_ticket + adult_ticket + child_ticket
    popcorn = 2 * 3
    total_cost = total_tickets + popcorn
    return total_cost

 Executed result: 38
[EXP] 1276: [success_rate]: True, [answer]: 16, [output]: def solution():
    car_weight = 1200
    luggage_weight = 250
    children_weight = 2 * 75
    total_weight = car_weight + luggage_weight + children_weight
    force_required = total_weight * 0.01
    return force_required

 Executed result: 16.0
[EXP] 1277: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    length = 20
    width = 15
    perimeter = 2 * (length + width)
    result = perimeter
    return result

 Executed result: 70
[EXP] 1278: [success_rate]: True, [answer]: 48, [output]: def solution():
    mia = 40
    age_diff = 16
    emma = mia + age_diff
    average_age = (mia + emma) / 2
    return average_age

 Executed result: 48.0
[EXP] 1279: [success_rate]: True, [answer]: 665, [output]: def solution():
    tom_seashells = 214
    nancy_seashells = 432
    benny_seashells = 86
    total_seashells = tom_seashells + nancy_seashells + benny_seashells
    cracked_seashells = 67
    good_seashells = total_seashells - cracked_seashells
    return good_seashells

 Executed result: 665
[EXP] 1280: [success_rate]: False, [answer]: 180, [output]: 
def solution():
    people = 12
    dinner_plate_cost = 6
    bowl_cost = 5
    salad_plate_cost = 4
    dinner_plate_cost_total = dinner_plate_cost * 3
    total_cost = (people * dinner_plate_cost_total) + (people * bowl_cost) + (people * salad_plate_cost)
    result = total_cost
    return result

 Executed result: 324
[EXP] 1281: [success_rate]: False, [answer]: 7, [output]: def solution():
    steve_time = 10
    anna_time = steve_time + 2 + (steve_time // 2)
    return anna_time

 Executed result: 17
[EXP] 1282: [success_rate]: True, [answer]: 20, [output]: def solution():
    pigs = 5
    pounds_per_pig_per_day = 4
    days_per_week = 7
    pounds_eaten_per_pig_per_day = pounds_per_pig_per_day * 2
    pounds_eaten_per_pig_per_week = pounds_eaten_per_pig_per_day * days_per_week
    pounds_eaten_per_week = pounds_eaten_per_pig_per_week * pigs
    total_feed_ordered = 300
    feed_left = total_feed_ordered - pounds_eaten_per_week
    return feed_left

 Executed result: 20
[EXP] 1283: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    guests = 20
    dogs_per_guest = 2
    dogs_left = 4
    total_dogs = guests * dogs_per_guest + dogs_left
    packs = total_dogs // 6 
    remaining_dogs = total_dogs % 6
    if remaining_dogs > 0:
        packs += 1
    cost_per_pack = 2
    total_cost = packs * cost_per_pack
    return total_cost

 Executed result: 16
[EXP] 1284: [success_rate]: True, [answer]: 60, [output]: def solution():
    cupcakes_sold = 20
    cookies_sold = 40
    cupcake_price = 2
    cookie_price = 1
    tray_cost = 4
    total_revenue = (cupcakes_sold * cupcake_price) + (cookies_sold * cookie_price)
    total_cost = tray_cost * 5
    money_left = total_revenue - total_cost
    return money_left

 Executed result: 60
[EXP] 1285: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    children_initial = 5
    children_added = children_initial + children_initial
    children_added += children_added
    children_initial_left = children_initial
    children_following = children_added - children_initial_left
    return children_following

 Executed result: 15
[EXP] 1286: [success_rate]: True, [answer]: 1218, [output]: 
def solution():
    meals_initial = 1360
    meals_given = 64 + 30 + 48
    meals_left = meals_initial - meals_given
    result = meals_left
    return result

 Executed result: 1218
[EXP] 1287: [success_rate]: True, [answer]: 105, [output]: 
def solution():
    quarter = 25
    nickels = 2
    dime = 7
    total_cents = quarter + (nickels * 5) + (dime * 10)
    result = total_cents
    return result

 Executed result: 105
[EXP] 1288: [success_rate]: False, [answer]: 84, [output]: 
def solution():
    total_age = (16 * 3) + 12 + 16
    return total_age

 Executed result: 76
[EXP] 1289: [success_rate]: False, [answer]: 34, [output]: 
def solution():
    meditation_minutes_per_day = 2 * 15
    yoga_minutes_per_day = 60
    days_per_week = 5
    weeks = 4
    minutes_per_week= meditation_minutes_per_day * days_per_week + yoga_minutes_per_day * days_per_week
    minutes_in_total = minutes_per_week * weeks
    result = minutes_in_total
    return result

 Executed result: 1800
[EXP] 1290: [success_rate]: True, [answer]: 101, [output]: 
def solution():
    small_size = 3
    medium_size = 4
    large_size = 6
    small_quantity = 11
    medium_quantity = 8
    large_quantity = 6
    total_small_size = small_size * small_quantity
    total_medium_size = medium_size * medium_quantity
    total_large_size = large_size * large_quantity
    total_sizes = total_small_size + total_medium_size + total_large_size
    return total_sizes

 Executed result: 101
[EXP] 1291: [success_rate]: True, [answer]: 90, [output]: def solution():
    small_sunflower_seeds = 3 * 12
    large_sunflower_seeds = small_sunflower_seeds * 1.5
    total_seeds = small_sunflower_seeds + large_sunflower_seeds
    return total_seeds

 Executed result: 90.0
[EXP] 1292: [success_rate]: True, [answer]: 27, [output]: def solution():
    george_pens = 18
    timothy_pens = george_pens * 3
    sarah_pens = timothy_pens // 2
    return sarah_pens

 Executed result: 27
[EXP] 1293: [success_rate]: False, [answer]: 67, [output]: 
def solution():
    albert_height = 36
    anne_height = albert_height * 2
    jackie_height_after = anne_height - 3
    jackie_height_before = jackie_height_after + 3
    result = jackie_height_before
    return result

 Executed result: 72
[EXP] 1294: [success_rate]: True, [answer]: 140000, [output]: 
def solution():
    bars_per_day = 5000
    days = 2 * 7
    bars_per_week = bars_per_day * days
    price_per_bar = 2
    revenue = bars_per_week * price_per_bar
    return revenue

 Executed result: 140000
[EXP] 1295: [success_rate]: False, [answer]: 36, [output]: 
def solution():
    t_shirt_discount = 0.5
    t_shirt_original_price = 8
    t_shirt_cost = t_shirt_original_price * 2 * (1 - t_shirt_discount)
    shoes_original_price = 40
    shoes_discount = 0.6
    shoes_cost = shoes_original_price * shoes_discount
    total_cost = t_shirt_cost + shoes_cost
    return total_cost

 Executed result: 32.0
[EXP] 1296: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    allowance = 6
    weeks_completed = 3
    total_allowance = allowance * weeks_completed
    icecream_cones = 4
    icecream_cost = 1.25
    total_spent_on_icecream = icecream_cones * icecream_cost
    money_left = total_allowance - total_spent_on_icecream
    ticket_cost = 6.5
    return int(money_left / ticket_cost)

 Executed result: 2
[EXP] 1297: [success_rate]: True, [answer]: 335, [output]: def solution():
    ellen_leggings = 100
    ellen_photo_frame = 5
    ellen_total = ellen_leggings + ellen_photo_frame

    lani_sunglasses = 30
    lani_bathrobes = 2 * 100
    lani_total = lani_sunglasses + lani_bathrobes

    total_spend = ellen_total + lani_total
    return total_spend

 Executed result: 335
[EXP] 1298: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    passion_fruit_cost = 6
    jackfruit_cost = 8
    honey_cost = 10
    
    passion_fruit_pounds = 2
    jackfruit_pounds = 1.5
    honey_pounds = 2
    
    total_cost = (passion_fruit_pounds * passion_fruit_cost) + (jackfruit_pounds * jackfruit_cost) + (honey_pounds * honey_cost)
    
    jar_cost = total_cost
    
    total_jars = 10
    
    profit_per_jar = 50 - jar_cost
    
    total_profit = total_jars * profit_per_jar
    
    return total_profit

 Executed result: 60.0
[EXP] 1299: [success_rate]: True, [answer]: 31, [output]: 
def solution():
    quarters = 32
    dimes = 95
    nickels = 120
    pennies = 750
    quarters_dollar = quarters * 0.25
    dimes_dollar = dimes * 0.10
    nickels_dollar = nickels * 0.05
    pennies_dollar = pennies * 0.01
    total_dollar = quarters_dollar + dimes_dollar + nickels_dollar + pennies_dollar
    result = round(total_dollar, 2)
    return result

 Executed result: 31.0
[EXP] 1300: [success_rate]: True, [answer]: 13, [output]: 
def solution():
    money_initial = 40
    ice_cream = 3.50
    movie_ticket = 7.50
    bracelet = 8.50
    money_spent = ice_cream + (movie_ticket * 2) + bracelet
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 13.0
[EXP] 1301: [success_rate]: True, [answer]: 120, [output]: def solution():
    cars_serviced_per_day = 3
    days_opened = 5  # 7 days in a week - 2 days off
    money_per_car = 4
    days_in_two_weeks = 2 * 7
    total_cars_serviced = cars_serviced_per_day * days_opened * 2
    total_money_made = total_cars_serviced * money_per_car
    result = total_money_made
    return result

 Executed result: 120
[EXP] 1302: [success_rate]: False, [answer]: 23, [output]: 
def solution():
    oatmeal_cookie_initial = 9
    chocolate_chip_cookie_initial = 4
    sugar_cookie_initial = 5
    early_snack = 1 + 1 + 1
    cookies_eaten = early_snack + 2 + 2
    oatmeal_cookie_remaining = oatmeal_cookie_initial - 2
    cookies_baked = 4 + 4 + 4
    oatmeal_cookie_final = oatmeal_cookie_remaining + cookies_baked
    chocolate_chip_cookie_final = chocolate_chip_cookie_initial + cookies_baked
    sugar_cookie_final = sugar_cookie_initial - 2 + cookies_baked
    result1 = oatmeal_cookie_final
    result2 = chocolate_chip_cookie_final
    result3 = sugar_cookie_final
    return result1, result2, result3

 Executed result: (19, 16, 15)
[EXP] 1303: [success_rate]: True, [answer]: 72, [output]: 
def solution():
    num_soldiers = 12
    fair_price1 = 5
    fair_price2 = 7
    half1 = num_soldiers // 2
    half2 = num_soldiers - half1
    money_earned = half1 * fair_price1 + half2 * fair_price2
    return money_earned

 Executed result: 72
[EXP] 1304: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    holes_per_day_dig = 6
    days_dig = 14
    total_holes_dig = holes_per_day_dig * days_dig
    holes_per_day_fill = 9
    initial_holes_filled = 0
    weeks = 0
    while total_holes_filled < total_holes_dig:
        for i in range(7):
            initial_holes_filled += holes_per_day_fill
            total_holes_dig -= holes_per_day_dig
        weeks += 1
    result = weeks
    return result

 Executed result: 1
[EXP] 1305: [success_rate]: True, [answer]: 1000, [output]: 
def solution():
    enrollments_norman = 4000
    enrollments_butler = enrollments_norman * 3 / 4
    enrollment_difference = enrollments_norman - enrollments_butler
    return enrollment_difference

 Executed result: 1000.0
[EXP] 1306: [success_rate]: True, [answer]: 2325, [output]: 
def solution():
    total_cookies = 7995
    rainbow_cookies = 2595
    oatmeal_cookies = 3075
    chocolate_chip_cookies = total_cookies - rainbow_cookies - oatmeal_cookies
    return chocolate_chip_cookies

 Executed result: 2325
[EXP] 1307: [success_rate]: False, [answer]: 2, [output]: def solution():
    test_tubes = 16
    beakers = 7
    petri_dishes = 14
    lost_test_tubes = test_tubes // 2
    lost_petri_dishes = petri_dishes + 1
    total_items = test_tubes - lost_test_tubes + beakers - (petri_dishes - lost_petri_dishes)
    lost_beakers = beakers - (total_items - 29)
    return lost_beakers

 Executed result: 20
[EXP] 1308: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    total_screws_needed = 4 * 4 * 2
    screws_initial = 40
    screws_used = total_screws_needed
    screws_left = screws_initial - screws_used
    result = screws_left
    return result

 Executed result: 8
[EXP] 1309: [success_rate]: True, [answer]: 30, [output]: def solution():
    eggs_in_first_basket = 10
    eggs_in_second_basket = eggs_in_first_basket * 2
    total_eggs = eggs_in_first_basket + eggs_in_second_basket
    return total_eggs

 Executed result: 30
[EXP] 1310: [success_rate]: False, [answer]: 2280, [output]: def solution():
    alexandra = 430
    kim = alexandra + 320
    maryam = 300 + 400
    sarah = 300
    total = alexandra + kim + maryam + sarah
    return total

 Executed result: 2180
[EXP] 1311: [success_rate]: False, [answer]: 64, [output]: def solution():
    vanessa_miles = 4
    aaron_miles = vanessa_miles / 2
    aaron_time = 16
    vanessa_time = (vanessa_miles / aaron_miles) * aaron_time
    result = vanessa_time
    return result

 Executed result: 32.0
[EXP] 1312: [success_rate]: True, [answer]: 594, [output]: def solution():
    dock_feet = 200
    line_feet_needed = dock_feet * 3
    line_feet_needed -= 6
    return line_feet_needed

 Executed result: 594
[EXP] 1313: [success_rate]: True, [answer]: 180, [output]: 
def solution():
    reservations = 6
    days_open = 2
    meals_per_reservation = 2
    meal_cost = 5
    wine_cost = 5
    total_cost_per_reservation = (meals_per_reservation * meal_cost) + wine_cost
    total_cost_per_day = reservations * total_cost_per_reservation
    total_cost_per_week = total_cost_per_day * days_open
    return total_cost_per_week

 Executed result: 180
[EXP] 1314: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    cost = 80
    profit = 0.25
    total_selling_price = cost / (1 - profit)
    selling_price_per_watermelon = total_selling_price / 50
    return selling_price_per_watermelon

 Executed result: 2.1333333333333333
[EXP] 1315: [success_rate]: False, [answer]: 8, [output]: 
def solution():
    father_age = 19
    sister_age_in_3_years = 12
    sister_current_age = sister_age_in_3_years - 3
    brother_age_in_3_years = 2 * sister_current_age + 3
    father_current_age = father_age - (20 - father_age)
    brother_current_age = father_current_age - 20
    result = brother_current_age + 3
    return result

 Executed result: 1
[EXP] 1316: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    ana_per Minute = 1 / 3
    jane_per_minute = 1 / 4
    ana_per_hour = ana_per_minute * 60
    jane_per_hour = jane_per_minute * 60
    difference_per_hour = ana_per_hour - jane_per_hour
    return int(difference_per_hour)

 Executed result: None
[EXP] 1317: [success_rate]: True, [answer]: 230, [output]: def solution():
    new_radiator_cost = 400
    discount = 80/100
    off = new_radiator_cost * discount
    final_cost = new_radiator_cost - off
    mechanic_cost = 3 * 50
    total_cost = final_cost + mechanic_cost
    result = total_cost
    return result

 Executed result: 230.0
[EXP] 1318: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    total_animals = 20
    total_legs = 70
    animal_legs = 4
    sheep_legs = 2
    chickens = (total_legs * total_animals) - (sheep_legs * (total_animals - (total_legs // animal_legs)))
    result = chickens
    return result

 Executed result: 1394
[EXP] 1319: [success_rate]: True, [answer]: 14, [output]: def solution():
    pizzas = 7
    slices_per_pizza = 8
    total_slices = pizzas * slices_per_pizza
    friends = 4  # Henry and 3 friends
    slices_per_friend = total_slices // friends
    remainder = total_slices % friends
    if remainder != 0:
        slices_per_friend += 1
    result = slices_per_friend
    return result

 Executed result: 14
[FLOPS] {'avg_prompt_tokens': 0.0, 'avg_prompt_times': 0.0, 'avg_generation_tokens': 0.0, 'avg_reward_tokens': 0.0, 'avg_reward_times': 0.0}
